{
	"info": {
		"_postman_id": "GENERATED-ID-TASK-METHODS",
		"name": "Komodo DeFi Framework - Task Methods",
		"description": "Task-prefixed RPC methods for Komodo DeFi Framework from dispatcher.rs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Task Methods",
			"item": [
				{
					"name": "task::account_balance::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\"[^\\"\\]*(?:\\\\.[^\\"\\]*)*\\"|(\/\/.*|\\s*\#[^\\n\\r]*)/gm, '');",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"task::account_balance::cancel\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"task_id\": 12345\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::account_balance::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\"[^\\"\\]*(?:\\\\.[^\\"\\]*)*\\"|(\/\/.*|\\s*\\#[^\\n\\r]*)/gm, '');",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"task::account_balance::init\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"coin\": \"{{coin}}\",\r\n        \"account_index\": 0\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::account_balance::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\"[^\\"\\]*(?:\\\\.[^\\"\\]*)*\\"|(\/\/.*|\\s*\\#[^\\n\\r]*)/gm, '');",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::account_balance::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::create_new_account::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\"[^\\"\\]*(?:\\\\.[^\\"\\]*)*\\"|(\/\/.*|\\s*\#[^\\n\\r]*)/gm, '');",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::create_new_account::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::create_new_account::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\"[^\\"\\]*(?:\\\\.[^\\"\\]*)*\\"|(\/\/.*|\\s*\\#[^\\n\\r]*)/gm, '');",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::create_new_account::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{coin}}\",\n        \"account_id\": null,\n        \"scan\": true,\n        \"gap_limit\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::create_new_account::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::create_new_account::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::create_new_account::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::create_new_account::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_bch::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_bch::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_bch::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_bch::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"bchd_urls\": [\"http://localhost:8332\"],\n        \"allow_slp_unsafe_conf\": false,\n        \"swap_contract_address\": \"PUT_CONTRACT_ADDRESS_HERE\",\n        \"fallback_swap_contract\": \"PUT_FALLBACK_CONTRACT_ADDRESS_HERE\",\n        \"tx_history\": true,\n        \"mode\": {\n            \"rpc\": \"electrum\",\n            \"servers\": [\n                {\"url\": \"electrum1.cipig.net:10000\", \"protocol\": \"TCP\"}\n            ]\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_bch::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_bch::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_bch::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_bch::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_qtum::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_qtum::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_qtum::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_qtum::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"mode\": {\n            \"rpc\": \"electrum\",\n            \"servers\": [\n                {\"url\": \"http://localhost:3889\", \"protocol\": \"TCP\"}\n            ]\n        },\n        \"tx_history\": true,\n        \"required_confirmations\": 0,\n        \"swap_contract_address\": \"PUT_CONTRACT_ADDRESS_HERE\",\n        \"fallback_swap_contract\": \"PUT_FALLBACK_CONTRACT_ADDRESS_HERE\",\n        \"check_utxo_maturity\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_qtum::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_qtum::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_qtum::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_qtum::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_utxo::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_utxo::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_utxo::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_utxo::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"ticker\": \"RICK\",\n        \"tx_history\": true,\n        \"required_confirmations\": 1,\n        \"requires_notarization\": false,\n        \"address_format\": { \"format\": \"Bech32\", \"hrp\": \"rick\" },\n        \"swap_contract_address\": null,\n        \"fallback_swap_contract\": null,\n        \"mode\": {\n            \"rpc\": \"electrum\",\n            \"servers\": [\n                {\"url\": \"electrum://electrum1.cipig.net:10058\", \"protocol\": \"TCP\"},\n                {\"url\": \"electrum://electrum2.cipig.net:10058\", \"protocol\": \"TCP\"}\n            ]\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_utxo::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_utxo::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_utxo::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_utxo::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_eth::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_eth::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_eth::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_eth::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"nodes\": [{\"url\": \"http://localhost:8545\", \"komodo_proxy\": false}],\n        \"swap_contract_address\": \"0xContractAddress\",\n        \"fallback_swap_contract\": \"0xFallbackContractAddress\",\n        \"required_confirmations\": 12,\n        \"erc20_tokens_requests\": [],\n        \"get_balances\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_eth::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_eth::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_eth::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_eth::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_erc20::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_erc20::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_erc20::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_erc20::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"ticker\": \"MYERC20\",\n        \"platform_coin_ticker\": \"ETH\",\n        \"token_contract_address\": \"0xTOKEN_ADDRESS\",\n        \"activation_params\": {\n            \"required_confirmations\": 12\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_erc20::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_erc20::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_erc20::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_erc20::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_tendermint::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_tendermint::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_tendermint::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_tendermint::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"platform_coin_ticker\": \"IRIS\",\n        \"rpc_urls\": [\"http://localhost:26657\"],\n        \"tx_history\": true,\n        \"required_confirmations\": 0,\n        \"gas_params\": {\n            \"gas_limit_per_tx\": \"100000\",\n            \"gas_limit_per_dense_tx\": \"200000\",\n            \"gas_price_gwei\": \"0.25\",\n            \"max_gas_price_gwei\": \"1.0\",\n            \"gas_fraction\": { \"numerator\": 1, \"denominator\": 2 }\n        },\n        \"account_prefix\": \"iris\",\n        \"tokens_params\": [\n            {\n                \"ticker\": \"MYTKN_ON_IRIS\",\n                \"denominations\": [ {\"denom\": \"umytkn\", \"decimals\": 6 } ],\n                \"contract_address\": \"cosmoscontractaddress123\",\n                \"is_smart_contract\": true\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_tendermint::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_tendermint::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_tendermint::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_tendermint::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"GenericAction\",\n            \"details\": \"User provided details here\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::get_new_address::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::get_new_address::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::get_new_address::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::get_new_address::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{coin}}\",\n        \"derivation_method\": {\n            \"type\": \"HDWallet\",\n            \"account_id\": 0,\n            \"path_to_address\": \"m/44'/0'/0'/0/0\"\n        },\n        \"gap_limit\": 20,\n        \"new_address_for_watch_only_account\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::get_new_address::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::get_new_address::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::get_new_address::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::get_new_address::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::scan_for_new_addresses::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::scan_for_new_addresses::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"task_id\": 12345 \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::scan_for_new_addresses::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::scan_for_new_addresses::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{coin}}\",\n        \"gap_limit\": 20,\n        \"derivation_method\": {\n            \"type\": \"HDWallet\",\n            \"account_id\": 0\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::scan_for_new_addresses::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::scan_for_new_addresses::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::init_trezor::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::init_trezor::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::init_trezor::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::init_trezor::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::init_trezor::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::init_trezor::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::init_trezor::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::init_trezor::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::withdraw::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::withdraw::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::withdraw::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::withdraw::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{coin}}\",\n        \"to\": \"{{address}}\",\n        \"amount\": \"1.0\",\n        \"fee\": { \"type\": \"Utxo\", \"amount_per_kb\": \"1000\" },\n        \"broadcast\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::withdraw::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::withdraw::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::withdraw::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::withdraw::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"user_action\": {\n            \"type\": \"ButtonPressed\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_sia::init",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_sia::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"rpc_urls\": [\"http://localhost:9981\"],\n        \"password\": null,\n        \"tx_history\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_sia::status",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_sia::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_z_coin::init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_z_coin::init\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"rpc_urls\": [\"http://localhost:8080\"],\n        \"tx_history\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_z_coin::cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_z_coin::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_z_coin::status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_z_coin::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_z_coin::user_action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_z_coin::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_lightning::cancel",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_lightning::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_lightning::init",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_lightning::init\",\n    \"mmrpc\": \"2.0\",\n    \"platform\": \"BTC\", \n    \"name\": \"Lightning Network\", \n    \"network\": \"signet\", \n    \"listening_port\": 9735, \n    \"uris\": [\"03xxxx@xx.xx.xx.xx:9735\"],\n    \"backup_path\": \"./lightning_backup\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_lightning::status",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_lightning::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::enable_lightning::user_action",
					"description": "Note: This method is available only in native builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::enable_lightning::user_action\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::connect_metamask::cancel",
					"description": "Note: This method is available only in WASM builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::connect_metamask::cancel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::connect_metamask::init",
					"description": "Note: This method is available only in WASM builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::connect_metamask::init\",\n    \"mmrpc\": \"2.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "task::connect_metamask::status",
					"description": "Note: This method is available only in WASM builds.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\\r",
									"const rawData = pm.request.body.toString();\\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"task::connect_metamask::status\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"task_id\": 12345,\n        \"forget_if_finished\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				}
			]
		}
	]
} 