{
	"info": {
		"_postman_id": "1b69d366-bcea-4ccf-bc91-39eb07c9b074",
		"name": "Komodo DeFi Framework",
		"description": "Komodo DeFi Framework RPC methods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12719479",
		"_collection_link": "https://smk762.postman.co/workspace/KMD-QA~b04e9300-501c-4931-9886-94f79ebc51a5/collection/12719479-1b69d366-bcea-4ccf-bc91-39eb07c9b074?action=share&source=collection_link&creator=12719479"
	},
	"item": [
		{
			"name": "Legacy",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "Electrum",
							"item": [
								{
									"name": "electrum (UTXO TCP/SSL)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"MARTY\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10021\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10021\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10021\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Activate DOC",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "217"
												},
												{
													"key": "date",
													"value": "Mon, 09 Sep 2024 02:27:00 GMT"
												}
											],
											"cookie": [],
											"body": "{\"result\":\"success\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\"balance\":\"10634.52052535\",\"unspendable_balance\":\"0\",\"coin\":\"DOC\",\"required_confirmations\":1,\"requires_notarization\":false,\"mature_confirmations\":100}"
										},
										{
											"name": "Activate MARTY",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"MARTY\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10021\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10021\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10021\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "216"
												},
												{
													"key": "date",
													"value": "Mon, 09 Sep 2024 02:28:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"result\": \"success\",\n    \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\n    \"balance\": \"1264.884406\",\n    \"unspendable_balance\": \"0\",\n    \"coin\": \"MARTY\",\n    \"required_confirmations\": 1,\n    \"requires_notarization\": false,\n    \"mature_confirmations\": 100\n}"
										}
									]
								},
								{
									"name": "electrum (UTXO WSS)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"tQTUM\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10071\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10071\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10071\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"QC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10050\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10050\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10050\"\r\n        }\r\n    ],\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enable",
							"item": [
								{
									"name": "enable UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"DOC\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QTUM\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QC\",\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "disable_coin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"disable_coin\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "Disables the selected coin."
							},
							"response": []
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "convertaddress",
							"item": [
								{
									"name": "convertaddress UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBTC-TEST\",\r\n    \"from\": \"mtQvKcJQnSqdjapPpSpAwJYikhx2QU1KSd\",\r\n    \"to_address_format\": {\r\n        \"format\": \"segwit\" // Accepted values: \"standard\", \"segwit\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress ETH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"ETH\",\r\n    \"from\": \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\",\r\n    \"to_address_format\": {\r\n        \"format\": \"mixedcase\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tQTUM\",\r\n    \"from\": \"qXeRVx1juqADVoV9f4gofuCSoBnejTsYUj\",\r\n    \"to_address_format\": {\r\n        \"format\": \"contract\" // Accepted values: \"wallet\", \"contract\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBCH\",\r\n    \"from\": \"bchtest:qzxh2lsx5z78ez6szxl0qef8cccsg9euwcu00sv2n2\",\r\n    \"to_address_format\": {\r\n        \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convert_utxo_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convert_utxo_address\",\r\n    \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"to_coin\": \"tBTC-TEST\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "withdraw",
							"item": [
								{
									"name": "withdraw UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"DOC\",\r\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"amount\": 1.025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n    //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n    // } // Default: Coin Config\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"ETH\",\r\n    \"to\": \"0x60b56cde26535caD3d8AB7b54bfA2689A3C1e134\",\r\n    \"amount\": 0.0025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"EthGas\",\r\n    //     \"gas_price\": , // Default: Max from [\"gas_station_url\", \"eth_gasPrice\" call, \"eth_feeHistory\" call]\r\n    //     \"gas\": // Default: from \"estimate_gas\" call\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"QC\",\r\n    \"to\": \"QZVx8rW99tHCPcRoXDAHEf82PyJ2g9VZRn\",\r\n    \"amount\": 10 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"Qrc20Gas\",\r\n    //     \"gas_limit\": 100000,\r\n    //     \"gas_price\": 40\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "kmd_rewards_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"kmd_rewards_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "Returns the confirmed and unconfirmed balance of the requested coin."
							},
							"response": []
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_tx_history\",\r\n    \"coin\": \"DOC\"\r\n    // \"from_id\": null, // Accepted values: Strings\r\n    // \"max\": false,\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1, // used only if: \"from_id\": null\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "send_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"DOC\",\r\n    \"tx_hex\": \"0400008085202f8901ebec086d37ee2526668c4d3e8cbf381c09894f8fa32a237f9544cf036faaa61100000000d74730440220505b138301498c3b9ca86eee170f6ee6aa1023a8c1ce52b4648073e102849ce6022009293a0e928cc6a0a2a540606a0e578693f32e205054b268bfd0c569884ca22a0120b4e3edc80c28c4d470ff0ca415da8cd74210b5eb64fe4703a41e74d7d45bdafb004c6b630473a13061b1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a91478daeddb10bd92635a15360cdadf5f674e4f38888821031ac6d25833a5961e2a8822b2e8b0ac1fd55d90cbbbb18a780552cbd66fc02bb3ac68ffffffff01b8820100000000001976a9149a85cc05e9a722575feb770a217c73fd6145cf0188ac73a13061000000000000000000000000000000\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show_priv_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"show_priv_key\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "validateaddress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"validateaddress\",\r\n    \"coin\": \"DOC\",\r\n    \"address\": \"RPNERS8TK1MeRo7xBthgaNsF2vL4236zX8\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"best_orders\",\r\n    \"coin\": \"DOC\",\r\n    \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n    \"volume\": 1.1\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "buy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "GoodTillCancelled",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "718"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:35:27 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"base\":\"DOC\",\"rel\":\"MARTY\",\"base_amount\":\"2.4\",\"base_amount_rat\":[[1,[12]],[1,[5]]],\"rel_amount\":\"2.64\",\"rel_amount_rat\":[[1,[66]],[1,[25]]],\"action\":\"Buy\",\"uuid\":\"0a3859ba-0e28-49de-b015-641c050a6409\",\"method\":\"request\",\"sender_pubkey\":\"d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\"dest_pub_key\":\"0000000000000000000000000000000000000000000000000000000000000000\",\"match_by\":{\"type\":\"Any\"},\"conf_settings\":{\"base_confs\":1,\"base_nota\":false,\"rel_confs\":1,\"rel_nota\":false},\"order_type\":{\"type\":\"GoodTillCancelled\"},\"min_volume\":\"0.0001\",\"min_volume_fraction\":{\"numer\":\"1\",\"denom\":\"10000\"},\"min_volume_rat\":[[1,[1]],[1,[10000]]],\"base_orderbook_ticker\":null,\"rel_orderbook_ticker\":null}}"
								}
							]
						},
						{
							"name": "cancel_all_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_all_orders\",\r\n    \"cancel_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Pair\", \"Coin\"\r\n        // \"data\": {\r\n        //     \"base\": \"DOC\", // Required only if: \"type\": \"Pair\"\r\n        //     \"rel\": \"MARTY\" // Required only if: \"type\": \"Pair\"\r\n        //     // \"ticker\": \"DOC\" // Required only if: \"type\": \"Coin\"\r\n        // } // Required only if: \"type\": \"Pair\", \"type\": \"Coin\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cancel_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_order\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_trade_fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_trade_fee\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "max_taker_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"max_taker_vol\",\r\n    \"coin\": \"DOC\"\r\n    // \"trade_with\": \"DOC\" // Default: \"coin\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "min_trading_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"min_trading_vol\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_orders\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders_history_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orders_history_by_filter\"\r\n    // \"order_type\": null, // Accepted values: \"Maker\", \"Taker\"\r\n    // \"initial_action\": null, // Accepted values: \"Buy\", \"Sell\"\r\n    // \"base\": null, // Accepted values: Strings\r\n    // \"rel\": null, // Accepted values: Strings\r\n    // \"from_price\": null, // Accepted values: Decimals\r\n    // \"to_price\": null, // Accepted values: Decimals\r\n    // \"from_volume\": null, // Accepted values: Decimals\r\n    // \"to_volume\": null, // Accepted values: Decimals\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null, // Accepted values: Integers\r\n    // \"was_taker\": null, // Accepted values: Booleans\r\n    // \"status\": null, // Accepted values: \"Fulfilled\", \"ToMaker\", \"InsufficientBalance\", \"TimedOut\", \"Cancelled\"\r\n    // \"include_details\": false\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook_depth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook_depth\",\r\n    \"pairs\":[[\"DOC\",\"MARTY\"],[\"BTC\",\"KMD\"],[\"DOGE\",\"KMD\"]]\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sell",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sell\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "setprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"setprice\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 0.9,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"cancel_previous\": true,\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"trade_preimage\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n    \"price\": 1.01,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_maker_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"update_maker_order\",\r\n    \"uuid\": \"6f65968f-e3c6-4978-98c5-5cec2bb5aa5b\"\r\n    // \"new_price\": null, // Accepted values: Decimals\r\n    // \"max\": null, // Accepted values: Booleans\r\n    // \"volume_delta\": null, // Accepted values: Positive or Negative Decimals\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"base_confs\": null, // Accepted values: Integers\r\n    // \"base_nota\": null, // Accepted values: Booleans\r\n    // \"rel_confs\": null, // Accepted values: Integers\r\n    // \"rel_nota\": null // Accepted values: Booleans\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "active_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\"\r\n    // \"include_status\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "all_swaps_uuids_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"all_swaps_uuids_by_filter\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "coins_needed_for_kick_start",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"coins_needed_for_kick_start\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "import_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"import_swaps\",\r\n    \"swaps\": [\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        },\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_recent_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\"\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    // \"from_uuid\": null, // Accepted values: Strings\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "recover_funds_of_swap",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"recover_funds_of_swap\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_required_confirmations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_required_confirmations\",\r\n    \"coin\": \"DOC\",\r\n    \"confirmations\": 3\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_requires_notarization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_requires_notarization\",\r\n    \"coin\": \"DOC\",\r\n    \"requires_notarization\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stats_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stats_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"dad06692-399a-4a05-a6fc-4e4cbe6d227d\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P2P",
					"item": [
						{
							"name": "ban_pubkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"ban_pubkey\",\r\n    \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n    \"reason\": \"test\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_peer_topics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_peer_topics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_topic_peers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_topic_peers\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_my_peer_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_my_peer_id\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_peers_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_peers_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_relay_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_relay_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list_banned_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"list_banned_pubkeys\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unban_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"unban_pubkeys\",\r\n    \"unban_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Few\"\r\n        // \"data\": [\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520560\"\r\n        // ] // Required only if: \"type\": \"Few\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Utility",
					"item": [
						{
							"name": "help",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"help\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "metrics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"metrics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"version\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stop",
					"item": [
						{
							"name": "sim_panic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sim_panic\"\r\n    // \"mode\": \"\" // Accepted values: \"\", \"simple\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stop\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "UTXO",
							"item": [
								{
									"name": "task::enable_utxo::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\":\"DOC\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:10020\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:10020\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:10020\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n            // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"min_addresses_number\": 3 // used only if \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_utxo::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_utxo::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_utxo::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "task::enable_qtum::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::init\",\r\n    \"params\": {\r\n        \"ticker\":\"tQTUM\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:10071\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:10071\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:10071\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"min_addresses_number\": 3 // used only if \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BCH",
							"item": [
								{
									"name": "enable_bch_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_bch_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\":\"tBCH\",\r\n        // \"allow_slp_unsafe_conf\":false,\r\n        \"bchd_urls\":[\r\n            \"https://bchd-testnet.electroncash.de:18335\" // Required only if: \"allow_slp_unsafe_conf\": false\r\n        ],\r\n        \"mode\": {\r\n            \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n            \"rpc_data\": {\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"electroncash.de:50003\"\r\n                        // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                        // \"disable_cert_verification\": false\r\n                    },\r\n                    {\r\n                        \"url\": \"tbch.loping.net:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"blackie.c3-soft.com:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"bch0.kister.net:51001\"\r\n                    }\r\n                ]\r\n            } // Required only if: \"rpc\": \"Electrum\"\r\n        },\r\n        \"slp_tokens_requests\":[\r\n            {\r\n                \"ticker\":\"USDF\"\r\n                // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n            }\r\n        ]\r\n        // \"tx_history\": false,\r\n        // \"required_confirmations\": 1, // Default: Coin Config\r\n        // \"address_format\": {\r\n        //     \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n        // }, // Default: Coin Config\r\n        // \"utxo_merge_params\": null,\r\n        // // \"utxo_merge_params\": {\r\n        // //     \"merge_at\":50\r\n        // //     // \"check_every\":10,\r\n        // //     // \"max_merge_at_once\":100\r\n        // //     },\r\n        // \"check_utxo_maturity\": false,\r\n        // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n        // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n        // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_slp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_slp\",\r\n    \"params\":{\r\n        \"ticker\":\"sTST\",\r\n        \"activation_params\": {\r\n            // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ZCOIN",
							"item": [
								{
									"name": "task::enable_z_coin::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::init\",\r\n    \"params\": {\r\n        \"ticker\": \"ZOMBIE\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Light\", // Accepted values: \"Native\", \"Light\"\r\n                \"rpc_data\": {\r\n                    \"electrum_servers\": [\r\n                        {\r\n                            \"url\": \"zombie.dragonhound.info:10033\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        }\r\n                    ],\r\n                    \"light_wallet_d_servers\": [\r\n                        \"http://zombie.sirseven.me:443\",\r\n                        \"http://zombie.dragonhound.info:443\"\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Light\"\r\n            }\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_z_coin_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SOLANA",
							"item": [
								{
									"name": "enable_solana_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_solana_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\": \"SOL-DEVNET\",\r\n        \"confirmation_commitment\": \"finalized\", // Accepted values: \"processed\", \"confirmed\", \"finalized\"\r\n        \"client_url\": \"https://api.devnet.solana.com\",\r\n        \"spl_tokens_requests\": [\r\n            {\r\n                \"ticker\": \"USDC-SOL-DEVNET\",\r\n                \"activation_params\": {}\r\n            }\r\n        ]\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_spl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_spl\",\r\n    \"params\": {\r\n        \"ticker\": \"ADEX-SOL-DEVNET\",\r\n        \"activation_params\": {}\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EVM",
							"item": [
								{
									"name": "enable_eth_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "ETH",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"ticker\": \"ETH\",\n        \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n        \"gas_station_decimals\": 8,\n        \"gas_station_policy\": {\n            \"policy\": \"MeanAverageFast\"\n        },\n        \"mm2\": 1,\n        \"nft_req\": {\n          \"provider\": {\n            \"type\": \"Moralis\",\n            \"info\": {\n              \"url\": \"https://moralis-proxy.komodo.earth\"\n            }\n          }\n        },\n        \"priv_key_policy\": \"ContextPrivKey\",\n        \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n        \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n        \"nodes\": [\n            {\n                \"url\": \"https://eth1.cipig.net:18555\",\n                \"gui_auth\": false\n            },\n            {\n                \"url\": \"https://eth2.cipig.net:18555\",\n                \"gui_auth\": false\n            },\n            {\n                \"url\": \"https://eth3.cipig.net:18555\",\n                \"gui_auth\": false\n            }\n        ],\n        \"tx_history\": true,\n        \"erc20_tokens_requests\": [\n            {\n                \"ticker\": \"APE-ERC20\",\n                \"required_confirmations\": 4\n            },\n            {\n                \"ticker\": \"BCH-ERC20\",\n                \"required_confirmations\": 4\n            },\n            {\n                \"ticker\": \"MINDS-ERC20\",\n                \"required_confirmations\": 4\n            },\n            {\n                \"ticker\": \"BUSD-ERC20\",\n                \"required_confirmations\": 4\n            }\n        ],\n        \"required_confirmations\": 5,\n        \"requires_notarization\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "778"
												},
												{
													"key": "date",
													"value": "Fri, 23 Aug 2024 09:54:48 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":20590537,\"eth_addresses_infos\":{\"0x84ab…b27a\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b\",\"balances\":{\"spendable\":\"0\",\"unspendable\":\"0\"}}},\"erc20_addresses_infos\":{\"0x84ab…b27a\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b\",\"balances\":{\"BUSD-ERC20\":{\"spendable\":\"0\",\"unspendable\":\"0\"},\"MINDS-ERC20\":{\"spendable\":\"0\",\"unspendable\":\"0\"},\"APE-ERC20\":{\"spendable\":\"0\",\"unspendable\":\"0\"},\"BCH-ERC20\":{\"spendable\":\"0\",\"unspendable\":\"0\"}}}},\"nfts_infos\":{}},\"id\":null}"
										},
										{
											"name": "BNB",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"BNB\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"swap_contract_address\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n      \"fallback_swap_contract\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n      \"nodes\": [\n        {\n          \"url\": \"https://bsc1.cipig.net:18655\"\n        },\n        {\n          \"url\": \"https://bsc3.cipig.net:18655\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/bnb\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"KMD-BEP20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "547"
												},
												{
													"key": "date",
													"value": "Tue, 27 Aug 2024 04:51:50 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":41720342,\"eth_addresses_infos\":{\"0x84ab…b27a\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b\"}},\"erc20_addresses_infos\":{\"0x84ab…b27a\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b\",\"tickers\":[\"KMD-BEP20\"]}},\"nfts_infos\":{}},\"id\":null}"
										},
										{
											"name": "MATIC (without NFTs)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "560"
												},
												{
													"key": "date",
													"value": "Mon, 02 Sep 2024 07:03:56 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"current_block\": 61329088,\n        \"eth_addresses_infos\": {\n            \"0xab95…6498\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\"\n            }\n        },\n        \"erc20_addresses_infos\": {\n            \"0xab95…6498\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\",\n                \"tickers\": [\n                    \"AAVE-PLG20\",\n                    \"PGX-PLG20\"\n                ]\n            }\n        },\n        \"nfts_infos\": {}\n    },\n    \"id\": null\n}"
										},
										{
											"name": "MATIC (with NFTs)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "14333"
												},
												{
													"key": "date",
													"value": "Mon, 02 Sep 2024 07:06:30 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"current_block\": 61329162,\n        \"eth_addresses_infos\": {\n            \"0xab95…6498\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\"\n            }\n        },\n        \"erc20_addresses_infos\": {\n            \"0xab95…6498\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\",\n                \"tickers\": [\n                    \"PGX-PLG20\",\n                    \"AAVE-PLG20\"\n                ]\n            }\n        },\n        \"nfts_infos\": {\n            \"0xc37d76acc7b9482738ddec4370e6357776ab4619,1\": {\n                \"token_address\": \"0xc37d76acc7b9482738ddec4370e6357776ab4619\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x014ec9f122a9e245fdcd8d04669f6bd9767488e5,1\": {\n                \"token_address\": \"0x014ec9f122a9e245fdcd8d04669f6bd9767488e5\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x004ddffc02c9c20b3abbbe251811302dc578fec3,1\": {\n                \"token_address\": \"0x004ddffc02c9c20b3abbbe251811302dc578fec3\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xb927f724d51c228efac3cf01e54f1bfb72e5d8d8,1\": {\n                \"token_address\": \"0xb927f724d51c228efac3cf01e54f1bfb72e5d8d8\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xb26215cdf9637e58fde65abd4dfca373e9ac347c,1\": {\n                \"token_address\": \"0xb26215cdf9637e58fde65abd4dfca373e9ac347c\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,6\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"6\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x5c652b3213ff76eb6530bcbad38a21e177a61598,1\": {\n                \"token_address\": \"0x5c652b3213ff76eb6530bcbad38a21e177a61598\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xccf0fd8da6fa51ea019775f18d1fbc1bba088536,1\": {\n                \"token_address\": \"0xccf0fd8da6fa51ea019775f18d1fbc1bba088536\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xa0e168fc7965f19ad3f995d61d9a286f95290445,1\": {\n                \"token_address\": \"0xa0e168fc7965f19ad3f995d61d9a286f95290445\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,2\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"2\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x86956aee19a9ccc6526da18c9453597a639a9e67,1\": {\n                \"token_address\": \"0x86956aee19a9ccc6526da18c9453597a639a9e67\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xd5067901dc4eb8d0739cfd6a84b2293141b2bd45,1\": {\n                \"token_address\": \"0xd5067901dc4eb8d0739cfd6a84b2293141b2bd45\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x6d7b49528ee72983625252b9327b5486cd425b76,1\": {\n                \"token_address\": \"0x6d7b49528ee72983625252b9327b5486cd425b76\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x41a69f2c9da47b97bc86774c273dce0e827544d8,1\": {\n                \"token_address\": \"0x41a69f2c9da47b97bc86774c273dce0e827544d8\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x05bbb37a953fd4d18bcadecb09781ec24e90353d,1\": {\n                \"token_address\": \"0x05bbb37a953fd4d18bcadecb09781ec24e90353d\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xe1ab36eda8012483aa947263b7d9a857d9c37e05,32\": {\n                \"token_address\": \"0xe1ab36eda8012483aa947263b7d9a857d9c37e05\",\n                \"token_id\": \"32\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xc037b01261d7638cf0750bba085edfb59a616d37,1\": {\n                \"token_address\": \"0xc037b01261d7638cf0750bba085edfb59a616d37\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xb7350ac5b9326d675dacb3f2e38818c911abe660,1\": {\n                \"token_address\": \"0xb7350ac5b9326d675dacb3f2e38818c911abe660\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xb0e9bb5b186811bb532edecdb47c0a6caea26e44,1\": {\n                \"token_address\": \"0xb0e9bb5b186811bb532edecdb47c0a6caea26e44\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x852688002e14fdf0dd3ecbc0fb6136487cc692d8,1\": {\n                \"token_address\": \"0x852688002e14fdf0dd3ecbc0fb6136487cc692d8\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xe6c61f392ecf1d0abd815099bbcf2a7cbd2eb253,1\": {\n                \"token_address\": \"0xe6c61f392ecf1d0abd815099bbcf2a7cbd2eb253\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xd25f13e4ba534ef625c75b84934689194b7bd59e,14\": {\n                \"token_address\": \"0xd25f13e4ba534ef625c75b84934689194b7bd59e\",\n                \"token_id\": \"14\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC721\",\n                \"amount\": \"1\"\n            },\n            \"0x8d832817a3a94dfd4d1d2cb5d89a347e204fabdc,1\": {\n                \"token_address\": \"0x8d832817a3a94dfd4d1d2cb5d89a347e204fabdc\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xd96284039ca56796bcfa832262f94e3fb69908d4,1\": {\n                \"token_address\": \"0xd96284039ca56796bcfa832262f94e3fb69908d4\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x4f7c7ddd85ca11d957a8968bf94dcefd2d1ad4cd,1\": {\n                \"token_address\": \"0x4f7c7ddd85ca11d957a8968bf94dcefd2d1ad4cd\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xe843809065192c9fe94295315c2a1927f784a460,1\": {\n                \"token_address\": \"0xe843809065192c9fe94295315c2a1927f784a460\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x2953399124f0cbb46d2cbacd8a89cf0599974963,56787087360155483967447526621654293526681839490012288898340565660705956561896\": {\n                \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n                \"token_id\": \"56787087360155483967447526621654293526681839490012288898340565660705956561896\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"4\"\n            },\n            \"0x8e45865c3766f322f9dd9fa8140a9e7419e0ec15,1\": {\n                \"token_address\": \"0x8e45865c3766f322f9dd9fa8140a9e7419e0ec15\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x0f845992467e901224c964c5e584c0026cdfcecb,1\": {\n                \"token_address\": \"0x0f845992467e901224c964c5e584c0026cdfcecb\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x92aa07d5f242a82eb1a39a41a0eae4d634b85b29,1\": {\n                \"token_address\": \"0x92aa07d5f242a82eb1a39a41a0eae4d634b85b29\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,4\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"4\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x2f10726f7b420ded058e225560832ecfdd692934,1\": {\n                \"token_address\": \"0x2f10726f7b420ded058e225560832ecfdd692934\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x4b81106c7c6d33b78773c749901cfe13341ab194,1\": {\n                \"token_address\": \"0x4b81106c7c6d33b78773c749901cfe13341ab194\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xaa625cfc68d5b2f6dabc8b29f17a9e764595f436,1\": {\n                \"token_address\": \"0xaa625cfc68d5b2f6dabc8b29f17a9e764595f436\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,7\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"7\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xe1d7e6a33d9c4f241652191315c88d3d3daf6ed0,1\": {\n                \"token_address\": \"0xe1d7e6a33d9c4f241652191315c88d3d3daf6ed0\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x2b4f183181215ed49f467c148a7cbed79e4f967f,0\": {\n                \"token_address\": \"0x2b4f183181215ed49f467c148a7cbed79e4f967f\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xac56f690bfcc1f86caccfcf5ffdab5e30a671115,1\": {\n                \"token_address\": \"0xac56f690bfcc1f86caccfcf5ffdab5e30a671115\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xe432debcb66fd0a00efea30eeb5374516d3776a7,1\": {\n                \"token_address\": \"0xe432debcb66fd0a00efea30eeb5374516d3776a7\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x966f1e15249344499953887cb244d9f26989016d,1\": {\n                \"token_address\": \"0x966f1e15249344499953887cb244d9f26989016d\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,8\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"8\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x1016363a2af9c848e9daad19db9dfecbe5316bc3,0\": {\n                \"token_address\": \"0x1016363a2af9c848e9daad19db9dfecbe5316bc3\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x88b04b7fef48677577da7baf0620a1ac0710910b,1\": {\n                \"token_address\": \"0x88b04b7fef48677577da7baf0620a1ac0710910b\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x34b3332a72daf3d19ebe485c6cb6cad5d81f86ab,0\": {\n                \"token_address\": \"0x34b3332a72daf3d19ebe485c6cb6cad5d81f86ab\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x316d73824bc9c60f239d4c57082bcde4bfdf4f7a,3\": {\n                \"token_address\": \"0x316d73824bc9c60f239d4c57082bcde4bfdf4f7a\",\n                \"token_id\": \"3\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x39a54fa042e214d89fd8bcb0f1ad4fd6478c6e6f,1\": {\n                \"token_address\": \"0x39a54fa042e214d89fd8bcb0f1ad4fd6478c6e6f\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf95923992e508ecba70f6a28942006dc7bceeda4,1\": {\n                \"token_address\": \"0xf95923992e508ecba70f6a28942006dc7bceeda4\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xb6b17e34e9970c446eb103d46a7465c078428da2,1\": {\n                \"token_address\": \"0xb6b17e34e9970c446eb103d46a7465c078428da2\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xd99f7be919009c4e99de55298f8c2fb6a9f56d4d,1\": {\n                \"token_address\": \"0xd99f7be919009c4e99de55298f8c2fb6a9f56d4d\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xd2a622e8a45cf65917c92c540fe9c6553f92017e,1\": {\n                \"token_address\": \"0xd2a622e8a45cf65917c92c540fe9c6553f92017e\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf4953888c6c120ebbac848036331ff82beb809aa,1\": {\n                \"token_address\": \"0xf4953888c6c120ebbac848036331ff82beb809aa\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x0aa915b14b30df7589d79746c9d5f6cd39d48707,1\": {\n                \"token_address\": \"0x0aa915b14b30df7589d79746c9d5f6cd39d48707\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x96831c434841b9af60c9ec6d4e6992d89f3a307e,8\": {\n                \"token_address\": \"0x96831c434841b9af60c9ec6d4e6992d89f3a307e\",\n                \"token_id\": \"8\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x359b2d7b1ad60b50a88071b5699bca673dcb9d3c,1\": {\n                \"token_address\": \"0x359b2d7b1ad60b50a88071b5699bca673dcb9d3c\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x8476077092b4a67b58b5358787710f6bb0d3fcaf,0\": {\n                \"token_address\": \"0x8476077092b4a67b58b5358787710f6bb0d3fcaf\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x396849212c0a846c0cf5deb41c9534cdfb111709,1\": {\n                \"token_address\": \"0x396849212c0a846c0cf5deb41c9534cdfb111709\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x2953399124f0cbb46d2cbacd8a89cf0599974963,56787087360155483967447526621654293526681839490012288898340565435306072867816\": {\n                \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n                \"token_id\": \"56787087360155483967447526621654293526681839490012288898340565435306072867816\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"2\"\n            },\n            \"0x107679bef23a5e5684a66c4d00395cc8f8d71226,0\": {\n                \"token_address\": \"0x107679bef23a5e5684a66c4d00395cc8f8d71226\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xc28a19e9a663d966cf99532bdb1229df1b0e344b,1\": {\n                \"token_address\": \"0xc28a19e9a663d966cf99532bdb1229df1b0e344b\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,5\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"5\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,9\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"9\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x77da7a6e8690bb0b805246f554c3a938d7139710,1\": {\n                \"token_address\": \"0x77da7a6e8690bb0b805246f554c3a938d7139710\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x518948db176e966eda1b10aa3137aba6a626caf9,1\": {\n                \"token_address\": \"0x518948db176e966eda1b10aa3137aba6a626caf9\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x0dc6ff017a62605b3160887675874d0146037686,1\": {\n                \"token_address\": \"0x0dc6ff017a62605b3160887675874d0146037686\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xc06a6ab4c2b0ed14ed5692adf324a9a463259c43,0\": {\n                \"token_address\": \"0xc06a6ab4c2b0ed14ed5692adf324a9a463259c43\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,3\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"3\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,1\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xc6d46a02a73d180a08b985bbfad6441c70e418ec,1\": {\n                \"token_address\": \"0xc6d46a02a73d180a08b985bbfad6441c70e418ec\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xfe86052e0c1e2d770c97699dc1675fd08a94b804,1\": {\n                \"token_address\": \"0xfe86052e0c1e2d770c97699dc1675fd08a94b804\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x959e7680093345df3ec10fafdc01756e4d9ebd2c,1\": {\n                \"token_address\": \"0x959e7680093345df3ec10fafdc01756e4d9ebd2c\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x73a5299824cd955af6377b56f5762dc3ca4cc078,1\": {\n                \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC721\",\n                \"amount\": \"1\"\n            },\n            \"0x3987dfed574927e7a3309758ccf949ad2403fcbb,1\": {\n                \"token_address\": \"0x3987dfed574927e7a3309758ccf949ad2403fcbb\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668,0\": {\n                \"token_address\": \"0xf3fc2a3d15453515039d292d7c0d3d7514a93668\",\n                \"token_id\": \"0\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            },\n            \"0x521ce9d9c66af3ff7abf6f49186ddf0559ed75ed,1\": {\n                \"token_address\": \"0x521ce9d9c66af3ff7abf6f49186ddf0559ed75ed\",\n                \"token_id\": \"1\",\n                \"chain\": \"POLYGON\",\n                \"contract_type\": \"ERC1155\",\n                \"amount\": \"1\"\n            }\n        }\n    },\n    \"id\": null\n}"
										},
										{
											"name": "AVAX",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"AVAX\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n            {\n                \"url\": \"https://node.komodo.earth:8080/avalanche\",\n                \"gui_auth\": true\n            },\n            {\n                \"url\": \"https://api.avax.network/ext/bc/C/rpc\"\n            },\n            {\n                \"url\": \"https://block-proxy.komodo.earth/rpc/avax\",\n                \"ws_url\": \"wss://block-proxy.komodo.earth/rpc/avax/websocket\"\n            }\n      ],\n      \"erc20_tokens_requests\": [\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "907"
												},
												{
													"key": "date",
													"value": "Thu, 05 Sep 2024 15:10:58 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":50155792,\"eth_addresses_infos\":{\"0xab95…6498\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\"}},\"erc20_addresses_infos\":{\"0xab95…6498\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\",\"tickers\":[]}},\"nfts_infos\":{\"0x16742be85e1f51949b80f52ca22f35cb9f5e7478,49\":{\"token_address\":\"0x16742be85e1f51949b80f52ca22f35cb9f5e7478\",\"token_id\":\"49\",\"chain\":\"AVALANCHE\",\"contract_type\":\"ERC721\",\"amount\":\"1\"},\"0xac737748362fbcd78fad7c982018afa164266cbb,307\":{\"token_address\":\"0xac737748362fbcd78fad7c982018afa164266cbb\",\"token_id\":\"307\",\"chain\":\"AVALANCHE\",\"contract_type\":\"ERC721\",\"amount\":\"1\"}}},\"id\":null}"
										}
									]
								}
							]
						},
						{
							"name": "TENDERMINT",
							"item": [
								{
									"name": "enable_tendermint_token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_token\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"ATOM-IBC_IRIS\",\r\n        \"activation_params\": {\r\n            \"required_confirmations\": 3\r\n        }\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_tendermint_with_assets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"IRIS\",\r\n        \"tx_history\": true,\r\n        \"get_balances\": true,\r\n        \"rpc_urls\": [\r\n            \"https://iris.komodo.earth/\",\r\n            \"https://rpc.irishub-1.irisnet.org\"\r\n        ],\r\n        \"tokens_params\": [\r\n            {\r\n                \"ticker\": \"ATOM-IBC_IRIS\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Non Fungible Tokens",
					"item": [
						{
							"name": "get_nft_list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"chains\": [\n            \"POLYGON\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts)"
							},
							"response": [
								{
									"name": "Example with optional limit & page_number params",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"chains\": [\n        \"BSC\",\n        \"POLYGON\"\n      ],\n      \"limit\": 1,\n      \"page_number\": 2\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										},
										"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts)"
									},
									"_postman_previewlanguage": "JSON",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Example with spam protection",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"chains\": [\n            \"BSC\",\n            \"POLYGON\"\n        ],\n        \"protect_from_spam\": true,\n        \"filters\": {\n            \"exclude_spam\": true,\n            \"exclude_phishing\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										},
										"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nfts)"
									},
									"_postman_previewlanguage": "JSON",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get_nft_transfers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_transfers\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\"\n    ],\n    \"max\": true,\n    \"filters\": {\n      \"send\": true,\n      \"from_date\": 1690890685\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nft-transfers](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-a-list-of-nft-transfers)"
							},
							"response": []
						},
						{
							"name": "get_nft_metadata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n    \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\",\n    \"chain\": \"POLYGON\"\n  }\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-nft-metadata](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#get-nft-metadata)"
							},
							"response": []
						},
						{
							"name": "refresh_nft_metadata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"refresh_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff\",\n    \"token_id\": \"5\",\n    \"chain\": \"POLYGON\",\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#refresh-nft-metadata](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#refresh-nft-metadata)"
							},
							"response": []
						},
						{
							"name": "update_nft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\"\n    ],\n    \"proxy_auth\": false,\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "DevDocs Link: [https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/](https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)"
							},
							"response": [
								{
									"name": "update_nft",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\",\n      \"BSC\"\n    ],\n    \"proxy_auth\": false,\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Tue, 27 Aug 2024 04:49:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								}
							]
						},
						{
							"name": "withdraw_nft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc721\",\n    \"withdraw_data\": {\n        \"chain\": \"POLYGON\",\n        \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\",\n        \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\n        \"token_id\": \"1\"\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#withdraw-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#withdraw-nfts)"
							},
							"response": []
						},
						{
							"name": "withdraw_nft (erc1155)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc1155\",\n    \"withdraw_data\": {\n      \"chain\": \"POLYGON\",\n      \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\",\n      \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n      \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\",\n      \"amount\": \"1\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#erc-1155-withdraw-example](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/#erc-1155-withdraw-example)"
							},
							"response": [
								{
									"name": "erc1155",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"withdraw_type\": {\n      \"type\": \"withdraw_erc721\",\n      \"withdraw_data\": {\n        \"chain\": \"BSC\",\n        \"to\": \"0x6FAD0eC6bb76914b2a2a800686acc22970645820\",\n        \"token_address\": \"0xfd913a305d70a60aac4faac70c739563738e1f81\",\n        \"token_id\": \"214300044414\"\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "clear_nft_db",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"clear_all\": true,\n    \"chains\": [\"POLYGON\", \"FANTOM\", \"ETH\", \"BSC\", \"AVALANCHE\"]\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "DevDocs Link: https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20-dev/non_fungible_tokens/clear_nft_db/"
							},
							"response": [
								{
									"name": "clear_nft_db (clear all)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"clear_all\": true\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Fri, 23 Aug 2024 09:25:32 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								},
								{
									"name": "clear_nft_db (by chains)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\"BSC\"]\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Fri, 23 Aug 2024 09:26:31 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								}
							]
						},
						{
							"name": "enable_nft",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "TokenIsAlreadyActivated",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "184"
										},
										{
											"key": "date",
											"value": "Fri, 06 Sep 2024 14:36:46 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Token NFT_MATIC is already activated\",\"error_path\":\"token\",\"error_trace\":\"token:121]\",\"error_type\":\"TokenIsAlreadyActivated\",\"error_data\":\"NFT_MATIC\",\"id\":null}"
								},
								{
									"name": "TokenConfigIsNotFound",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATICC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "203"
										},
										{
											"key": "date",
											"value": "Fri, 06 Sep 2024 14:39:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Token NFT_MATICC config is not found\",\"error_path\":\"token.prelude\",\"error_trace\":\"token:124] prelude:79]\",\"error_type\":\"TokenConfigIsNotFound\",\"error_data\":\"NFT_MATICC\",\"id\":null}"
								}
							]
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "HD Wallet",
							"item": [
								{
									"name": "account_balance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"account_balance\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"account_index\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_new_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_new_address\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"account_id\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"gap_limit\": 20 // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::account_balance::init",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::account_balance::init\",\n    \"params\": {\n        \"coin\": \"DOC\",\n        \"account_index\": 0\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::account_balance::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::account_balance::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::account_balance::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "add_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\",\r\n        \"staking_details\": {\r\n            \"type\": \"Qtum\",\r\n            \"address\": \"qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE\"\r\n            // \"fee\": 10\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_staking_infos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_staking_infos\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Hardware Wallet",
							"item": [
								{
									"name": "task::create_new_account::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\"\r\n        // \"scan\": true\r\n        // \"gap_limit\": 20\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"account_index\": 0\r\n        // \"gap_limit\": 20\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::init\"\r\n    // \"params\": {\r\n    //     \"device_pubkey\": \"21605444b36ec72780bdf52a5ffbc18288893664\" // Accepted values: H160\r\n    // }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Withdraw",
							"item": [
								{
									"name": "withdraw",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_raw_transaction\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"tx_hash\": \"8c34946c0894b8520a84d6182f5962a173e0995b4a4fe1b40a867d8a9cd5e0c1\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"my_tx_history\",\r\n    \"params\": {\r\n        \"coin\": \"tBCH\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     // \"FromId\": null, // Accepted values: Strings\r\n        //     \"PageNumber\": 1 // used only if: \"from_id\": null\r\n        // },\r\n        // \"target\": {\r\n        //     \"type\": \"iguana\"\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"account_id\",\r\n        //     \"account_id\": 0 // Accepted values: Integer\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"address_id\",\r\n        //     \"account_id\": 0, // Accepted values: Integer\r\n        //     \"chain\": \"External\", // Accepted values: \"External\" and \"Internal\"\r\n        //     \"address_id\": 0 // Accepted values: Integer\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sign_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"sign_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"test\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"test\",\r\n        \"signature\": \"IB0DBH6R+P836Y86PVLJPTV5Vp3aEJhW6qwQj8mfExT4dJIyhohcDzZ6GQr7N8pIN05ISQS+D7G/DnLTc7C/oso=\",\r\n        \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"best_orders\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"exclude_mine\": true, // Accepted values: \"true\", \"false\". Defaults to false.,\r\n        \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n        \"request_by\": {\r\n            \"type\": \"volume\", // Accepted values: \"volume\", \"number\"\r\n            \"value\": 1.1 // Accepted values: Decimals if \"type\": \"volume\", Unsigned Integers if \"type\": \"number\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"orderbook\",\r\n    \"params\": {\r\n        \"base\": \"DOC\",\r\n        \"rel\": \"MARTY\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_simple_market_maker_bot\",\r\n    \"params\": {\r\n        \"cfg\": {\r\n            \"DOC/MARTY\": {\r\n                \"base\": \"DOC\",\r\n                \"rel\": \"MARTY\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            },\r\n            \"KMD-BEP20/BUSD-BEP20\": {\r\n                \"base\": \"KMD-BEP20\",\r\n                \"rel\": \"BUSD-BEP20\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            }\r\n        }\r\n        // \"price_url\": \"https://prices.komodo.earth/api/v2/tickers\",\r\n        // \"bot_refresh_rate\": 30.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_simple_market_maker_bot\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"trade_preimage\",\r\n    \"params\": {\r\n        \"base\": \"DOC\",\r\n        \"rel\": \"MARTY\",\r\n        \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n        \"price\": 1.01,\r\n        \"volume\": 1.05 // used only if: \"max\": false\r\n        // \"max\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "recreate_swap_data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"recreate_swap_data\",\r\n    \"params\": {\r\n        \"swap\": {\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\",\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ]\r\n            // \"type\": , // Accepted values: \"Maker\", \"Taker\"\r\n            // \"my_order_uuid\": null, // Accepted values: Strings\r\n            // \"taker_amount\": null, // Accepted values: Decimals\r\n            // \"taker_coin\": null, // Accepted values: Strings\r\n            // \"taker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"maker_amount\": null, // Accepted values: Decimals\r\n            // \"maker_coin\": null, // Accepted values: Strings\r\n            // \"maker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"gui\": null, // Accepted values: Strings\r\n            // \"mm_version\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"BTC\",\r\n    \"rel\": \"DOGE\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "setprice",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"volume\": \"0.1\",\r\n    \"swap_method\": \"setprice\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "869"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:29:11 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"base_coin_fee\": {\n            \"coin\": \"MARTY\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"rel_coin_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": true\n        },\n        \"total_fees\": [\n            {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0.00001\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ]\n            },\n            {\n                \"coin\": \"DOC\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"0\",\n                    \"denom\": \"1\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        0,\n                        []\n                    ],\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ]\n                ]\n            }\n        ]\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "sell",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"volume\": \"0.1\",\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "1513"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:29:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"base_coin_fee\": {\n            \"coin\": \"MARTY\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": true\n        },\n        \"rel_coin_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"taker_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.0001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"7770\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        7770\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"fee_to_send_taker_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"total_fees\": [\n            {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"0\",\n                    \"denom\": \"1\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        0,\n                        []\n                    ],\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ]\n                ]\n            },\n            {\n                \"coin\": \"DOC\",\n                \"amount\": \"0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n                \"amount_fraction\": {\n                    \"numer\": \"5777\",\n                    \"denom\": \"38850000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            5777\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            38850000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"5777\",\n                    \"denom\": \"38850000\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        1,\n                        [\n                            5777\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            38850000\n                        ]\n                    ]\n                ]\n            }\n        ]\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "Error: InvalidParam",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"sell\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "295"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:30:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Incorrect use of the 'max' parameter: 'max' cannot be used with 'sell' or 'buy' method\",\n    \"error_path\": \"taker_swap\",\n    \"error_trace\": \"taker_swap:2453]\",\n    \"error_type\": \"InvalidParam\",\n    \"error_data\": {\n        \"param\": \"max\",\n        \"reason\": \"'max' cannot be used with 'sell' or 'buy' method\"\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "trade_preimage",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"BTC\",\r\n    \"rel\": \"DOGE\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "192"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:19:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"No such coin BTC\",\n    \"error_path\": \"trade_preimage.lp_coins\",\n    \"error_trace\": \"trade_preimage:32] lp_coins:4767]\",\n    \"error_type\": \"NoSuchCoin\",\n    \"error_data\": {\n        \"coin\": \"BTC\"\n    },\n    \"id\": 0\n}"
								}
							]
						},
						{
							"name": "my_recent_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    \"params\": {\r\n        \"filter\": {\r\n            \"my_coin\": \"DOC\",\r\n            \"other_coin\": \"MARTY\",\r\n            \"from_timestamp\": 0,\r\n            \"to_timestamp\": 1804067200,\r\n            \"from_uuid\": null,\r\n            \"limit\": 10,\r\n            \"page_number\": 1\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "my_recent_swaps",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    \"params\": {\r\n        \"filter\": {\r\n            \"my_coin\": \"DOC\",\r\n            \"other_coin\": \"MARTY\",\r\n            \"from_timestamp\": 0,\r\n            \"to_timestamp\": 1804067200,\r\n            \"from_uuid\": null,\r\n            \"limit\": 10,\r\n            \"page_number\": 1\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "8979"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:11:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"swaps\": [\n            {\n                \"swap_type\": \"TakerV1\",\n                \"swap_data\": {\n                    \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                    \"my_order_uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                    \"events\": [\n                        {\n                            \"timestamp\": 1725849334423,\n                            \"event\": {\n                                \"type\": \"Started\",\n                                \"data\": {\n                                    \"taker_coin\": \"MARTY\",\n                                    \"maker_coin\": \"DOC\",\n                                    \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"my_persistent_pub\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"lock_duration\": 7800,\n                                    \"maker_amount\": \"2.4\",\n                                    \"taker_amount\": \"2.4\",\n                                    \"maker_payment_confirmations\": 1,\n                                    \"maker_payment_requires_nota\": false,\n                                    \"taker_payment_confirmations\": 1,\n                                    \"taker_payment_requires_nota\": false,\n                                    \"taker_payment_lock\": 1725857133,\n                                    \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                                    \"started_at\": 1725849333,\n                                    \"maker_payment_wait\": 1725852453,\n                                    \"maker_coin_start_block\": 724378,\n                                    \"taker_coin_start_block\": 738955,\n                                    \"fee_to_send_taker_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"taker_payment_trade_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"maker_payment_spend_trade_fee\": {\n                                        \"coin\": \"DOC\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": true\n                                    },\n                                    \"maker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"taker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"p2p_privkey\": null\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849338425,\n                            \"event\": {\n                                \"type\": \"Negotiated\",\n                                \"data\": {\n                                    \"maker_payment_locktime\": 1725864931,\n                                    \"maker_pubkey\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                    \"secret_hash\": \"91ddaac214398b0b728d652af8d86f2e06fbbb34\",\n                                    \"maker_coin_swap_contract_addr\": null,\n                                    \"taker_coin_swap_contract_addr\": null,\n                                    \"maker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"taker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849339829,\n                            \"event\": {\n                                \"type\": \"TakerFeeSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f890101280d9a0703a25cdd553babd5430708f303fe3d446cd79555a53619c987d7b3000000006a47304402205805ecb3fad4c69e27061a35197c470e6a72a2b762269d3ef6b249c835396cd5022046b710dd5b6bdda75cc32a2cb9511ca51c754e4f2bcac8cd0f2757728a1671c6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88aca0e4dc11000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acfb5ede66000000000000000000000000000000\",\n                                    \"tx_hash\": \"614d3b1ef3666799d71f54ea242f2cb839646be3bfc81d8f1cfce26747cb9892\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341830,\n                            \"event\": {\n                                \"type\": \"TakerPaymentInstructionsReceived\",\n                                \"data\": null\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341831,\n                            \"event\": {\n                                \"type\": \"MakerPaymentReceived\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f8901175391f3922ffcf7dc8929b9795c2fec8d82ed1649e0f3926e04709993dc35a6020000006a4730440220363ea815a237b46c5dd305809fcc103793bb4f620325c12caccb0c88f320e81c02205df417a4b806f3c3d50aa058c4d6a30203868ba786f2a1bd3b3b12917b3882ff01210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914944cf7300280e31374b3994422a252bce1fcbd10870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34083d6aff050000001976a9141462c3dd3f936d595c9af55978003b27c250441f88acfc5ede66000000000000000000000000000000\",\n                                    \"tx_hash\": \"70f6078b9d3312f14dff45fc1e56e503b01d33e22cac8ebd195e4951d468dca6\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341832,\n                            \"event\": {\n                                \"type\": \"MakerPaymentWaitConfirmStarted\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849465809,\n                            \"event\": {\n                                \"type\": \"MakerPaymentValidatedAndConfirmed\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849469603,\n                            \"event\": {\n                                \"type\": \"TakerPaymentSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f89019298cb4767e2fc1c8f1dc8bfe36b6439b82c2f24ea541fd7996766f31e3b4d61010000006a4730440220526bd1e2114642b2624cb283bada8dbeb734d3fae9184f6833e0eca87b20fffe0220554a3b38ecde2b8a521b681f5ac3e3940e08f45cc35a2fc19eeaeae513368a6c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff03001c4e0e0000000017a9141036c1fcbdf2b3e2d8b65913c78ab7412422cf17870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34b8c48e03000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac7a5fde66000000000000000000000000000000\",\n                                    \"tx_hash\": \"ffe2fe025d470996c3057dc561bd79d0a09f2aa5a14b25fb8e444b49394e5ad8\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849469604,\n                            \"event\": {\n                                \"type\": \"WatcherMessageSent\",\n                                \"data\": [\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        166,\n                                        220,\n                                        104,\n                                        212,\n                                        81,\n                                        73,\n                                        94,\n                                        25,\n                                        189,\n                                        142,\n                                        172,\n                                        44,\n                                        226,\n                                        51,\n                                        29,\n                                        176,\n                                        3,\n                                        229,\n                                        86,\n                                        30,\n                                        252,\n                                        69,\n                                        255,\n                                        77,\n                                        241,\n                                        18,\n                                        51,\n                                        157,\n                                        139,\n                                        7,\n                                        246,\n                                        112,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        181,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        40,\n                                        110,\n                                        97,\n                                        180,\n                                        1,\n                                        177,\n                                        181,\n                                        123,\n                                        77,\n                                        223,\n                                        147,\n                                        41,\n                                        76,\n                                        88,\n                                        138,\n                                        70,\n                                        20,\n                                        231,\n                                        85,\n                                        84,\n                                        145,\n                                        104,\n                                        231,\n                                        60,\n                                        146,\n                                        36,\n                                        2,\n                                        236,\n                                        230,\n                                        82,\n                                        217,\n                                        131,\n                                        2,\n                                        32,\n                                        82,\n                                        28,\n                                        127,\n                                        29,\n                                        240,\n                                        203,\n                                        202,\n                                        207,\n                                        41,\n                                        245,\n                                        94,\n                                        58,\n                                        9,\n                                        242,\n                                        51,\n                                        42,\n                                        111,\n                                        255,\n                                        37,\n                                        131,\n                                        73,\n                                        23,\n                                        48,\n                                        125,\n                                        185,\n                                        16,\n                                        114,\n                                        218,\n                                        143,\n                                        121,\n                                        59,\n                                        3,\n                                        1,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        227,\n                                        155,\n                                        222,\n                                        102,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        145,\n                                        221,\n                                        170,\n                                        194,\n                                        20,\n                                        57,\n                                        139,\n                                        11,\n                                        114,\n                                        141,\n                                        101,\n                                        42,\n                                        248,\n                                        216,\n                                        111,\n                                        46,\n                                        6,\n                                        251,\n                                        187,\n                                        52,\n                                        136,\n                                        33,\n                                        3,\n                                        216,\n                                        6,\n                                        78,\n                                        236,\n                                        228,\n                                        250,\n                                        92,\n                                        15,\n                                        141,\n                                        192,\n                                        38,\n                                        127,\n                                        104,\n                                        206,\n                                        233,\n                                        189,\n                                        213,\n                                        39,\n                                        249,\n                                        232,\n                                        143,\n                                        53,\n                                        148,\n                                        163,\n                                        35,\n                                        66,\n                                        135,\n                                        24,\n                                        195,\n                                        145,\n                                        236,\n                                        194,\n                                        172,\n                                        104,\n                                        255,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        211,\n                                        70,\n                                        6,\n                                        126,\n                                        60,\n                                        60,\n                                        57,\n                                        100,\n                                        195,\n                                        149,\n                                        254,\n                                        226,\n                                        8,\n                                        89,\n                                        71,\n                                        144,\n                                        226,\n                                        158,\n                                        222,\n                                        93,\n                                        136,\n                                        172,\n                                        227,\n                                        155,\n                                        222,\n                                        102,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ],\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        216,\n                                        90,\n                                        78,\n                                        57,\n                                        73,\n                                        75,\n                                        68,\n                                        142,\n                                        251,\n                                        37,\n                                        75,\n                                        161,\n                                        165,\n                                        42,\n                                        159,\n                                        160,\n                                        208,\n                                        121,\n                                        189,\n                                        97,\n                                        197,\n                                        125,\n                                        5,\n                                        195,\n                                        150,\n                                        9,\n                                        71,\n                                        93,\n                                        2,\n                                        254,\n                                        226,\n                                        255,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        182,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        12,\n                                        137,\n                                        103,\n                                        65,\n                                        18,\n                                        108,\n                                        213,\n                                        157,\n                                        224,\n                                        139,\n                                        187,\n                                        163,\n                                        116,\n                                        52,\n                                        231,\n                                        214,\n                                        185,\n                                        167,\n                                        227,\n                                        252,\n                                        3,\n                                        217,\n                                        92,\n                                        49,\n                                        170,\n                                        72,\n                                        112,\n                                        76,\n                                        45,\n                                        193,\n                                        15,\n                                        83,\n                                        2,\n                                        32,\n                                        28,\n                                        190,\n                                        47,\n                                        213,\n                                        129,\n                                        180,\n                                        189,\n                                        228,\n                                        165,\n                                        105,\n                                        157,\n                                        230,\n                                        180,\n                                        175,\n                                        68,\n                                        109,\n                                        152,\n                                        255,\n                                        38,\n                                        88,\n                                        66,\n                                        40,\n                                        253,\n                                        7,\n                                        79,\n                                        86,\n                                        118,\n                                        91,\n                                        107,\n                                        20,\n                                        242,\n                                        219,\n                                        1,\n                                        81,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        109,\n                                        125,\n                                        222,\n                                        102,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        216,\n                                        6,\n                                        78,\n                                        236,\n                                        228,\n                                        250,\n                                        92,\n                                        15,\n                                        141,\n                                        192,\n                                        38,\n                                        127,\n                                        104,\n                                        206,\n                                        233,\n                                        189,\n                                        213,\n                                        39,\n                                        249,\n                                        232,\n                                        143,\n                                        53,\n                                        148,\n                                        163,\n                                        35,\n                                        66,\n                                        135,\n                                        24,\n                                        195,\n                                        145,\n                                        236,\n                                        194,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        145,\n                                        221,\n                                        170,\n                                        194,\n                                        20,\n                                        57,\n                                        139,\n                                        11,\n                                        114,\n                                        141,\n                                        101,\n                                        42,\n                                        248,\n                                        216,\n                                        111,\n                                        46,\n                                        6,\n                                        251,\n                                        187,\n                                        52,\n                                        136,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        104,\n                                        254,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        211,\n                                        70,\n                                        6,\n                                        126,\n                                        60,\n                                        60,\n                                        57,\n                                        100,\n                                        195,\n                                        149,\n                                        254,\n                                        226,\n                                        8,\n                                        89,\n                                        71,\n                                        144,\n                                        226,\n                                        158,\n                                        222,\n                                        93,\n                                        136,\n                                        172,\n                                        109,\n                                        125,\n                                        222,\n                                        102,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ]\n                                ]\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849486567,\n                            \"event\": {\n                                \"type\": \"TakerPaymentSpent\",\n                                \"data\": {\n                                    \"transaction\": {\n                                        \"tx_hex\": \"0400008085202f8901d85a4e39494b448efb254ba1a52a9fa0d079bd61c57d05c39609475d02fee2ff00000000d74730440220544c5a2eec1e3fb7a2c71e3b6bf3c612300a9c5375ca5c7131742f0afc8a6e8f02206df5b042ec1ff359bf7209269ce3b59d09f5f2340842d5e0a253875624bbce120120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b63046d7dde66b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb3488210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac68ffffffff0118184e0e000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac6d7dde66000000000000000000000000000000\",\n                                        \"tx_hash\": \"58813eb1037e40425d56146c2f6bfbe70b8bcc18e45b752b51c726503ad4f8df\"\n                                    },\n                                    \"secret\": \"d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849488871,\n                            \"event\": {\n                                \"type\": \"MakerPaymentSpent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f8901a6dc68d451495e19bd8eac2ce2331db003e5561efc45ff4df112339d8b07f67000000000d74730440220286e61b401b1b57b4ddf93294c588a4614e755549168e73c922402ece652d9830220521c7f1df0cbcacf29f55e3a09f2332a6fff25834917307db91072da8f793b030120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b6304e39bde66b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb34882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118184e0e000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ace39bde66000000000000000000000000000000\",\n                                    \"tx_hash\": \"60f83a68e5851ff93308758763ce30c643bd94ae89f4ae43fe7e02dc88d61642\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849488872,\n                            \"event\": {\n                                \"type\": \"Finished\"\n                            }\n                        }\n                    ],\n                    \"maker_amount\": \"2.4\",\n                    \"maker_coin\": \"DOC\",\n                    \"maker_coin_usd_price\": \"0.0000001\",\n                    \"taker_amount\": \"2.4\",\n                    \"taker_coin\": \"MARTY\",\n                    \"taker_coin_usd_price\": \"0.00000005\",\n                    \"gui\": \"mm2_777\",\n                    \"mm_version\": \"2.2.0-beta_2bdee4f\",\n                    \"success_events\": [\n                        \"Started\",\n                        \"Negotiated\",\n                        \"TakerFeeSent\",\n                        \"TakerPaymentInstructionsReceived\",\n                        \"MakerPaymentReceived\",\n                        \"MakerPaymentWaitConfirmStarted\",\n                        \"MakerPaymentValidatedAndConfirmed\",\n                        \"TakerPaymentSent\",\n                        \"WatcherMessageSent\",\n                        \"TakerPaymentSpent\",\n                        \"MakerPaymentSpent\",\n                        \"MakerPaymentSpentByWatcher\",\n                        \"Finished\"\n                    ],\n                    \"error_events\": [\n                        \"StartFailed\",\n                        \"NegotiateFailed\",\n                        \"TakerFeeSendFailed\",\n                        \"MakerPaymentValidateFailed\",\n                        \"MakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentTransactionFailed\",\n                        \"TakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentDataSendFailed\",\n                        \"TakerPaymentWaitForSpendFailed\",\n                        \"MakerPaymentSpendFailed\",\n                        \"TakerPaymentWaitRefundStarted\",\n                        \"TakerPaymentRefundStarted\",\n                        \"TakerPaymentRefunded\",\n                        \"TakerPaymentRefundedByWatcher\",\n                        \"TakerPaymentRefundFailed\",\n                        \"TakerPaymentRefundFinished\"\n                    ]\n                }\n            }\n        ],\n        \"from_uuid\": null,\n        \"skipped\": 0,\n        \"limit\": 10,\n        \"total\": 1,\n        \"page_number\": 1,\n        \"total_pages\": 1,\n        \"found_records\": 1\n    },\n    \"id\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "Lightning",
					"item": [
						{
							"name": "Enable",
							"item": [
								{
									"name": "task::enable_lightning::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::init\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\",\r\n        \"activation_params\": {\r\n            \"name\": \"Mm2TestNode\"\r\n            // \"listening_port\": 9735,\r\n            // \"color\": \"000000\",\r\n            // \"payment_retries\": 5,\r\n            // \"backup_path\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_lightning::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_lightning::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Nodes",
							"item": [
								{
									"name": "add_trusted_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::add_trusted_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connect_to_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_trusted_nodes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::list_trusted_nodes\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove_trusted_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::remove_trusted_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Channels",
							"item": [
								{
									"name": "close_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::close_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1\r\n        // \"force_close\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_channel_details",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_claimable_balances",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_claimable_balances\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"include_open_channels_balances\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_closed_channels_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_closed_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"closing_tx\": null, // Accepted values: Strings\r\n        // //     // \"closure_reason\": null, // Accepted values: Strings\r\n        // //     // \"claiming_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"to_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"channel_type\": null, // Accepted values: \"Outbound\", \"Inbound\"\r\n        // //     // \"channel_visibility\": null // Accepted values: \"Public\", \"Private\"\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_open_channels_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"is_outbound\": null, // Accepted values: Booleans\r\n        // //     // \"from_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"confirmed\": null, // Accepted values: Booleans\r\n        // //     // \"is_usable\": null, // Accepted values: Booleans\r\n        // //     // \"is_public\": null // Accepted values: Booleans\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "open_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\r\n        \"amount\": {\r\n            \"type\": \"Exact\", // Accepted values: \"Exact\", \"Max\"\r\n            \"value\": 0.004 // Required only if: \"type\": \"Exact\"\r\n        }\r\n        // \"push_msat\": 0,\r\n        // \"channel_options\": {\r\n        //     // \"proportional_fee_in_millionths_sats\": 0, // Default: Coin Config\r\n        //     // \"base_fee_msat\": 1000, // Default: Coin Config\r\n        //     // \"cltv_expiry_delta\": 72, // Default: Coin Config\r\n        //     // \"max_dust_htlc_exposure_msat\": 5000000, // Default: Coin Config\r\n        //     // \"force_close_avoidance_max_fee_satoshis\": 1000 // Default: Coin Config\r\n        // },\r\n        // \"channel_configs\" : {\r\n        //     // \"counterparty_locktime\": 144, // Default: Coin Config\r\n        //     // \"our_htlc_minimum_msat\": 1, // Default: Coin Config\r\n        //     // \"negotiate_scid_privacy\": false, // Default: Coin Config\r\n        //     // \"max_inbound_in_flight_htlc_percent\": 10, // Default: Coin Config\r\n        //     // \"announced_channel\": false, // Default: Coin Config\r\n        //     // \"commit_upfront_shutdown_pubkey\": true // Default: Coin Config\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::update_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1,\r\n        \"channel_options\": {\r\n            // \"proportional_fee_in_millionths_sats\": 0, // Default: Coin Config\r\n            // \"base_fee_msat\": 1000, // Default: Coin Config\r\n            // \"cltv_expiry_delta\": 72, // Default: Coin Config\r\n            // \"max_dust_htlc_exposure_msat\": 5000000, // Default: Coin Config\r\n            // \"force_close_avoidance_max_fee_satoshis\": 1000 // Default: Coin Config\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payments",
							"item": [
								{
									"name": "generate_invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::generate_invoice\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"description\": \"test invoice\"\r\n        // \"amount_in_msat\": null, // Accepted values: Integers\r\n        // \"expiry\": null // Accepted values: Integers\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_payment_details",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"32f996e6e0aa88e567318beeadb37b6bc0fddfd3660d4a87726f308ed1ec7b33\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_payments_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::list_payments_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"payment_type\": null,\r\n        // //     // // \"payment_type\": {\r\n        // //     // //     \"type\": \"Outbound Payment\", // Accepted values: \"Outbound Payment\", \"Inbound Payment\"\r\n        // //     // //     \"destination\": \"03933884aaf1d6b108397e5efe5c86bcf2d8ca8d2f700eda99db9214fc2712b134\" // Required only if: \"type\": \"Outbound Payment\"\r\n        // //     // // },\r\n        // //     // \"description\": null, // Accepted values: Strings\r\n        // //     // \"status\": null, // Accepted values: \"pending\", \"succeeded\", \"failed\"\r\n        // //     // \"from_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_timestamp\": null, // Accepted values: Integers\r\n        // //     // \"to_timestamp\": null // Accepted values: Integers\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": \"d6d3cf3fd5237ed15295847befe00da67c043da1c39a373bff30bd22442eea43\" // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "send_payment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Accepted values: \"invoice\", \"keysend\"\r\n            \"invoice\": \"lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y\" // Required only if: \"type\": \"invoice\"\r\n            // \"destination\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\", // Required only if: \"type\": \"keysend\"\r\n            // \"amount_in_msat\": 1000, // Required only if: \"type\": \"keysend\"\r\n            // \"expiry\": 24 // Required only if: \"type\": \"keysend\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Stats",
					"item": [
						{
							"name": "add_node_to_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_node_to_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\",\r\n        \"address\": \"127.0.0.1:7783\",\r\n        \"peer_id\": \"12D3KooWHcPAnsq22MNoWkHEB1drFY1YrnRm6rzURvJupPyL1swZ\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_node_from_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_node_from_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_version_stat_collection\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"update_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_current_mtp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_current_mtp\",\n    \"params\": {\n        \"coin\": \"DOC\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_public_key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_public_key_hash",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key_hash\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Use Cases",
			"item": [
				{
					"name": "Lightning",
					"item": [
						{
							"name": "Playground Node 1: Enable Testnet BTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"electrum\", // This method activates a coin on the playground node with electrum as a blockdata source (light mode). An error will be returned if the coin is already activated in this playground node, move to the next step if this happens.\r\n    \"coin\": \"tBTC-TEST-segwit\", // The coin to be activated is testnet bitcoin in segwit mode\r\n    \"servers\": [ // the list of electrum servers the playground node should connect to\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10068\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Enable Testnet BTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"electrum\", // This method activates a coin on the playground node with electrum as a blockdata source (light mode). An error will be returned if the coin is already activated in this playground node, move to the next step if this happens.\r\n    \"coin\": \"tBTC-TEST-segwit\", // The coin to be activated is testnet bitcoin in segwit mode\r\n    \"servers\": [ // the list of electrum servers the playground node should connect to\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10068\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Enable Testnet BTC on Lightning",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"task::enable_lightning::init\", // This method starts a task that runs a lightning node. Use the returned \"task_id\" in the next use case to check if the lightning node is running or still initiating. An error will be returned if a lightning node was already running since only 1 lightning node is allowed to run from inside Komodo DeFi Framework, skip next step in such case.\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\", // Testnet lightning network\r\n        \"activation_params\": {\r\n            \"name\": \"KomoDeFi-Playground-Node-1\", // The name of the node that will be announced to other nodes\r\n            \"listening_port\": 31735, // The port that this node listens for incoming connections on\r\n            \"color\": \"2abcf1\" // The color of the node that will be announced to other nodes, this node will be showed with this color in network graphs in lightning explorers\r\n            // Node in lightning explorer: https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check Enable Testnet BTC on Lightning Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\", // This method checks the status of starting the lightning node, skip this step if an \"error\":\"Layer 2 tBTC-TEST-lightning is already activated\" was returned in the previous step\r\n    \"params\": {\r\n        \"task_id\": 0 // The \"task_id\" returned from the last use case\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Enable Testnet BTC on Lightning",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"task::enable_lightning::init\", // This method starts a task that runs a lightning node. Use the returned \"task_id\" in the next use case to check if the lightning node is running or still initiating. An error will be returned if a lightning node was already running since only 1 lightning node is allowed to run from inside Komodo DeFi Framework, skip next step in such case.\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\",\r\n        \"activation_params\": {\r\n            \"name\": \"KomoDeFi-Playground-Node-2\",\r\n            \"listening_port\": 31736, // The port is changed for this node since both nodes are on the same machine and can't listen on the same port\r\n            \"color\": \"6a4de3\"\r\n            // Node in lightning explorer: https://mempool.space/testnet/lightning/node/02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Enable Testnet BTC on Lightning Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\", // This method checks the status of starting the lightning node, skip this step if an \"error\":\"Layer 2 tBTC-TEST-lightning is already activated\" was returned in the previous step\r\n    \"params\": {\r\n        \"task_id\": 0 // The \"task_id\" returned from the last use case\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"my_balance\", // This method displays the balance and address of the node, \"unspendable_balance\" is the balance that can't be spent because:\r\n    // 1- The node can't connect with a channel/s counterparty (when a channel is inactive it's balance can't be used on the lightning network, if it becomes inactive for a long time it should be closed)\r\n    // 2 - It's the total reserved channels balances that can't be spent to ensure that we are able to be punished if we broadcast an old state\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_balance\", // Node 2 probably has no balance on the lightning network yet, we will open a channel from Node 2 to Node 1 in the upcoming steps to get some balance\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Connect to a Node to Download Network Graph from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\", // We need to connect a node at the start to get the network graph so we can find routes for payments\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\" // https://mempool.space/testnet/lightning/node/038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9, choose another node to connect to to test this since we are probably already connected to this node_address\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Connect to a Node to Download Network Graph from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\" // https://mempool.space/testnet/lightning/node/038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9, choose another node to connect to to test this since we are probably already connected to this node_address\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Add Node 2 as Trusted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::add_trusted_node\", // This adds a node to our trusted nodes list, if this node opens a channel to us we will accept the funding with 0 confirmations\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\" // Node 2 address (lightning public key)\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List trusted nodes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::list_trusted_nodes\", // View the trusted nodes list, we can see that node 2 address is added to the trusted list (Possible improvement to this is to add the name of the node too)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Open 0 conf channel to Node 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\", // This method opens a channel with a node\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164@95.216.148.216:31735\", // Node 2 address to open a 0 confirmations channel\r\n        \"amount\": {\r\n            \"type\": \"Exact\", // If we want to open a channel with all our tBTC balance we can use \"type\": \"Max\" here instead\r\n            \"value\": 0.002\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Open Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\", // This method gets a channel details\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Please use the \"rpc_channel_id\" value returned from the \"open_channel\" method to see that the channel is ready and usable straight away with 0 confirmations, you can see more details about the channel like the actual channel id and the \"funding_tx\" hash which can be used to view the transaction on block explorers\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_balance\", // The balance of the opened channel is added to the overall balance\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List Open Channels",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\", // without using the \"filter\" parameter, this method gets the list of all the open channels with their details, to see only inbound channels by using the \"filter\" parameter we can check the next use case\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List Inbound Open Channels",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"filter\": {\r\n            \"is_outbound\": false // Check for a channel with \"counterparty_node_id\": \"02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\" to see the channel that Node 2 opened to this Node (Node 1)\r\n            // To see the complete parameters that can be used in filter please check v2/Lightning/Channels/list_open_channels_by_filter\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Send Payment to Node 1 by PubKey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"keysend\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"destination\": \"024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\", // Node 1 pubkey, https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\r\n            \"amount_in_msat\": 1000000, // The maximum amount that can be send to Node 1 over the opened 0conf channel is 20000000 msat since Node 1 config has \"max_inbound_in_flight_htlc_percent\": 10 (The maximum allowed inbound payment to Node 1 through a channel is 10% of the channel's value, equal to 0.0002 BTC or  20000000 msat for the 0conf channel we just opened between Node 2 and 1\r\n            \"expiry\": 24\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Keysend Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\", // This method gets a payment details by it's hash, we need to check if the keysend payment we just sent is successful or not by checking the value of the \"status\" field in the response\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"7568a1b8c478ab4d12e53432cb2711acd73f34c4cc2142f8e70a87bd4f4b381f\" // This should be the payment_hash of the keysend payment we just sent in the last request\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Open a normal Channel (not 0conf) to a public node",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\", // If there is no outbound liquidity in Node 1, we should open a channel to a well connected public node to route an invoice payment through Node 1 from Node 2 to the target in upcoming usecases (total outbound liquidity is equal to the \"balance\" field returned in the response of \"Playground Node 1: Get Node Balance\") \r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"036497fee1a0b963a63f0b4374819d9016fcca9c09dbef4cb427a2d0146649b025@44.234.48.207:9735\", // Please use one of the following testnet lightning explorers (https://1ml.com/testnet/ , https://mempool.space/testnet/lightning) to choose either a high capacity or a well connected node to open a channel with\r\n        \"amount\": {\r\n            \"type\": \"Exact\",\r\n            \"value\": 0.002\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get Open Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 16 // Please use the \"rpc_channel_id\" value returned from the \"open_channel\" method to check periodically  for the channel status until the response has \"is_ready\": true, \"is_usable\": true to proceed to the next use case of paying an invoice with Node 1 as a routing node (\"funding_tx\" field in response can be used to check the funding tx in testnet explorers to see how many confirmations occured)\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Pay Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address (keysend)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"invoice\": \"lntb20u1p3kjyw2pp57z32c5knvttf0ecg726p6lf0mspa0fphlvhe7u5czyln4klx23ssdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5fgmtqxtmrfvx7j3vrjyx9lpujfn86rhwzymq4myykf83acy2wzuqcncltv33sqna9ze4y2jx9vnu9dsrrzpwf4pm48nr6drj993982q4mvlq477qndjhc9fauch5ahwf08pgy80dfl6ncxznw87j0cg2lhcp7rm7t6\" // This invoice is already paid, Go to https://starblocks.acinq.co/ and add some items to cart and checkout to get a new invoice to pay using this method, the total amount of the invoice must be less than 0.0002 BTC or 0.2 mBTC (10% of the channel) (this less than 0.0002 BTC to amount for the routing fees paid to Node 1 and other nodes)\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Invoice Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"f0a2ac52d362d697e708f2b41d7d2fdc03d7a437fb2f9f7298113f3adbe65461\" // This should be the payment_hash of the invoice we just paid in the last request, this payment_hash is returned in the response of the send_payment method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: List Open Channels to Check Inbound Liquidity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\", // We can see using this method that Node 2 has some inbound liquidity now after sending 2 payments\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: View Payments History",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::list_payments_by_filter\", // without using the \"filter\" parameter, this method gets the list of all the payments with their details, see v2/Lightning/Payments/list_payments_by_filter to see all the options that we can filter by\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Generate invoice to be paid by another node",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::generate_invoice\", // This method is used to generate an invoice to be paid to us by another node\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"description\": \"test invoice\",\r\n        \"amount_in_msat\": 10000, // Now that Node 2 has some inbound liquidity, we will generate an invoice by Node 2 with an amount requested of 10000 msat to be paid by Node 1\r\n        \"expiry\": 600 // This is an optional parameter, if not set the default value will be 1 hour or 3600 seconds\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Pay Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address (keysend)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"invoice\": \"lntb100n1p3kjyjjdq5w3jhxapqd9h8vmmfvdjsnp4qt4sk9u9w6zhk6vshfta264q3aj35pdgpxzfvqz0gt04uazqkz5uzpp5g98ekdfyl38y3jvlyu3e2fejmz7zawsmxh8rhu48pag5fdq0tx0qsp5tzalk295kffw02y82sxp00svsa9a0ts65mj7ygqqy845y4ek58zs9qyysgqcqpcxqzjcn4nnuyvwm52h7cswfk7flj6r8dz0mcqjfazcef37huzaahs0wv0qrpqelfzjzzgd88t6859tkzfxsyrn5n9j3yvclx3n6sldzrkhz6sqxe6ngv\" // This invoice is already paid, paste the invoice generated by Node 2 here instead to pay it\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check Invoice Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\" // This should be the payment_hash of the invoice we just paid in the last request, this payment_hash is returned in the response of the send_payment method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Place a maker order to sell onchain BTC for LNBTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"setprice\", // This method places an order in the order book, the \"uuid\" field in the response will be used to check the order status\r\n    \"base\": \"tBTC-TEST-segwit\", // Node 1 wants to sell onchain testnet BTC\r\n    \"rel\": \"tBTC-TEST-lightning\", // Node 1 wants to buy lightning testnet BTC\r\n    \"price\": 1, // The price for 1 LNtBTC (1 LNtBTC = 1 tBTC)\r\n    \"volume\": 0.0001 // The amount of onchain testnet BTC Node 1 wants to sell (If the order is matched Node 1 shall recieve 0.00001 LNBTC) - Note that in the current Node 1 & 2 setup the volume should be less than 0.0002 LNBTC, this is the max amount to be sent on the channel, Node 2 can open more channels to Node 1 or other nodes and and get more outbound liquidity to be able to trade more LNBTC.\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: View BTC/LNBTC Orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"orderbook\", // This method requests from the network the currently available orders for the specified trading pair, it's used here to assert that Node 2 can see Node 1 order on the orderbook\r\n    \"base\": \"tBTC-TEST-segwit\",\r\n    \"rel\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Buy onchain BTC for LNBTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"buy\", // This method issues a buy request and attempts to match an order from the orderbook based on the provided price and volume\r\n    \"base\": \"tBTC-TEST-segwit\",\r\n    \"rel\": \"tBTC-TEST-lightning\",\r\n    \"price\": 1,\r\n    \"volume\": 0.0001\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check order status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"order_status\", // This method returns the data of the order using it's uuid. The response is different for maker (using set_price method) and taker (using buy/sell method) orders\r\n    \"uuid\": \"31307ed5-bf9c-4ec5-a69f-a5f463521514\" // Insert the uuid returned from the setprice method here, if there is any values returned inside started_swaps field, the uuids will be used to check for the swap status\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check order status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // Insert the uuid returned from the buy method here, the same uuid is used as the swap uuid if a match was found for the order and the swap has started\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check swap status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"my_swap_status\", // This method returns the data and status of an atomic swap that was initiated due to a matched order, in the data we can see all the transactions made for the swap and if there is an \"event\": {\"type\": \"TakerPaymentSpendConfirmed\"} then we recieved the LNBTC successfully, we can see the payment info by using the \"tx_hash\" in the \"TakerPaymentSpent\" event\r\n    \"params\": {\r\n        \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // One of the \"started_swaps\" uuids returned from the order_status method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check swap status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_swap_status\", // This method returns the data and status of an atomic swap that was initiated due to a matched order, in the data we can see all the transactions made for the swap and if there is an \"event\": {\"type\": \"MakerPaymentSpent\"} then we recieved the onchain tBTC successfully, we can see the payment info by using the \"tx_hash\" in the \"MakerPaymentSpent\" event and checking a BTC testnet explorer\r\n    \"params\": {\r\n        \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // The swap uuid is the same as the uuid used to get the buy order status\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Close the channel opened with Node 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::close_channel\", // This method closes an open channel either cooperatively or by forcing the close depending on the used parameters\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Use the same rpc_channel_id of the channel we opened with Node 1\r\n        // \"force_close\": false // This is an optional parameter that can be set to true to force close the channel, if this parameter is not set false is the default value\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Closed Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\", // This method gets a channel details, you can see the channel closing tx in the response once it's broadcasted, you can also use this method after claiming the closing balance back to your account to see the claiming tx hash and the balance that got claimed back to your address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Use the same \"rpc_channel_id\" of the closed channel\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get balance to be claimed on-chain",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_claimable_balances\", // This method gets the balance that's onchain and still waiting for a condition to be claimed back to the Node's onchain tBTC address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"include_open_channels_balances\": false\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "HD Wallet",
			"item": [
				{
					"name": "task_enable_utxo",
					"item": [
						{
							"name": "init DOC (wss)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:30020\",\r\n                  \"protocol\": \"WSS\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (wss, hd)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Electrum\",\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            \"path_to_address\": { // defaults to 0'/0/0\r\n                \"account_id\": 0,\r\n                \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n                \"address_id\": 1\r\n            },\r\n            \"tx_history\": true, // defaults to false\r\n            \"gap_limit\": 20, // Optional, defaults to 20 \r\n            \"scan_policy\": \"scan_if_new_wallet\", // Optional, defaults to \"scan_if_new_wallet\", Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\"\r\n            \"min_addresses_number\": 3 // Optional, Number of addresses to generate, if not specified addresses will be generated up to path_to_address::address_index\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (wss, trezor)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:30020\",\r\n                  \"protocol\": \"WSS\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"priv_key_policy\": \"Trezor\",\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:20020\",\r\n                  \"protocol\": \"SSL\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp, hd)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Electrum\",\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            \"path_to_address\": { // defaults to 0'/0/0\r\n                \"account_id\": 0,\r\n                \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n                \"address_id\": 1\r\n            },\r\n            \"tx_history\": true, // defaults to false\r\n            \"gap_limit\": 20, // Optional, defaults to 20 \r\n            \"scan_policy\": \"scan_if_new_wallet\", // Optional, defaults to \"scan_if_new_wallet\", Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\"\r\n            \"min_addresses_number\": 3 // Optional, Number of addresses to generate, if not specified addresses will be generated up to path_to_address::address_index\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp, trezor)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:20020\",\r\n                  \"protocol\": \"SSL\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"priv_key_policy\": \"Trezor\",\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "userpass",
			"value": ""
		}
	]
}