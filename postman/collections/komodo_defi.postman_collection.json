{
	"info": {
		"_postman_id": "1b69d366-bcea-4ccf-bc91-39eb07c9b074",
		"name": "Komodo DeFi Framework",
		"description": "Komodo DeFi Framework RPC methods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12719479",
		"_collection_link": "https://smk762.postman.co/workspace/KMD-QA~b04e9300-501c-4931-9886-94f79ebc51a5/collection/12719479-1b69d366-bcea-4ccf-bc91-39eb07c9b074?action=share&source=collection_link&creator=12719479"
	},
	"item": [
		{
			"name": "Legacy",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "Electrum",
							"item": [
								{
									"name": "electrum (UTXO TCP/SSL)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"KMD\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10001\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10001\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10001\"\r\n        }\r\n    ],\r\n    \"min_connected\": 1, // defaults to 1 when omitted\r\n    \"max_connected\": 3  // defaults to len(servers) when omitted\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Activate DOC",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ],\r\n    \"min_connected\": 2, // defaults to 1 when omitted\r\n    \"max_connected\": 2  // defaults to len(servers) when omitted\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "217"
												},
												{
													"key": "date",
													"value": "Mon, 09 Sep 2024 02:27:00 GMT"
												}
											],
											"cookie": [],
											"body": "{\"result\":\"success\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\"balance\":\"10634.52052535\",\"unspendable_balance\":\"0\",\"coin\":\"DOC\",\"required_confirmations\":1,\"requires_notarization\":false,\"mature_confirmations\":100}"
										},
										{
											"name": "Activate MARTY",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"MARTY\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10021\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10021\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10021\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "216"
												},
												{
													"key": "date",
													"value": "Mon, 09 Sep 2024 02:28:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"result\": \"success\",\n    \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\n    \"balance\": \"1264.884406\",\n    \"unspendable_balance\": \"0\",\n    \"coin\": \"MARTY\",\n    \"required_confirmations\": 1,\n    \"requires_notarization\": false,\n    \"mature_confirmations\": 100\n}"
										},
										{
											"name": "Activate KMD",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"KMD\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10001\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10001\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10001\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "215"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 06:40:25 GMT"
												}
											],
											"cookie": [],
											"body": "{\"result\":\"success\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\"balance\":\"8456.47139458\",\"unspendable_balance\":\"0\",\"coin\":\"KMD\",\"required_confirmations\":2,\"requires_notarization\":true,\"mature_confirmations\":100}"
										},
										{
											"name": "electrum (UTXO TCP/SSL)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ],\r\n    \"min_connected\": 2, // defaults to 1 when omitted\r\n    \"max_connected\": 2  // defaults to len(servers) when omitted\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "217"
												},
												{
													"key": "date",
													"value": "Thu, 17 Oct 2024 08:57:29 GMT"
												}
											],
											"cookie": [],
											"body": "{\"result\":\"success\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\",\"balance\":\"10654.92034535\",\"unspendable_balance\":\"0\",\"coin\":\"DOC\",\"required_confirmations\":1,\"requires_notarization\":false,\"mature_confirmations\":100}"
										},
										{
											"name": "Error: min > max",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ],\r\n    \"min_connected\": 2, // defaults to 1 when omitted\r\n    \"max_connected\": 1  // defaults to len(servers) when omitted\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "199"
												},
												{
													"key": "date",
													"value": "Wed, 30 Oct 2024 10:45:41 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"rpc:184] dispatcher_legacy:141] lp_commands_legacy:141] lp_coins:4462] utxo_standard:73] utxo_coin_builder:616] Internal error: manager:132] min_connected (2) must be <= max_connected (1)\"\n}"
										},
										{
											"name": "Error: min < 1",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ],\r\n    \"min_connected\": 0, // defaults to 1 when omitted\r\n    \"max_connected\": 0  // defaults to len(servers) when omitted\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "191"
												},
												{
													"key": "date",
													"value": "Wed, 30 Oct 2024 10:46:35 GMT"
												}
											],
											"cookie": [],
											"body": "{\"error\":\"rpc:184] dispatcher_legacy:141] lp_commands_legacy:141] lp_coins:4462] utxo_standard:73] utxo_coin_builder:616] Internal error: manager:129] min_connected should be greater than 0\"}"
										}
									]
								},
								{
									"name": "electrum (UTXO WSS)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"DOC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10020\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10020\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10020\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"tQTUM\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10071\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10071\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10071\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"QC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10050\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10050\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10050\"\r\n        }\r\n    ],\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enable",
							"item": [
								{
									"name": "enable UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"DOC\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "enable ETH/ERC20",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "204"
												},
												{
													"key": "date",
													"value": "Fri, 13 Sep 2024 07:59:15 GMT"
												}
											],
											"cookie": [],
											"body": "{\"result\":\"success\",\"address\":\"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\",\"balance\":\"0.086762578016820988\",\"unspendable_balance\":\"0\",\"coin\":\"ETH\",\"required_confirmations\":3,\"requires_notarization\":false}"
										}
									]
								},
								{
									"name": "enable QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QTUM\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QC\",\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "disable_coin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"disable_coin\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "Disables the selected coin."
							},
							"response": []
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_enabled_coins",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "78"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:21:20 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":[{\"ticker\":\"MARTY\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"}]}"
								}
							]
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "convertaddress",
							"item": [
								{
									"name": "convertaddress UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBTC-TEST\",\r\n    \"from\": \"mtQvKcJQnSqdjapPpSpAwJYikhx2QU1KSd\",\r\n    \"to_address_format\": {\r\n        \"format\": \"segwit\" // Accepted values: \"standard\", \"segwit\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress ETH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"ETH\",\r\n    \"from\": \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\",\r\n    \"to_address_format\": {\r\n        \"format\": \"mixedcase\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tQTUM\",\r\n    \"from\": \"qXeRVx1juqADVoV9f4gofuCSoBnejTsYUj\",\r\n    \"to_address_format\": {\r\n        \"format\": \"contract\" // Accepted values: \"wallet\", \"contract\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBCH\",\r\n    \"from\": \"bchtest:qzxh2lsx5z78ez6szxl0qef8cccsg9euwcu00sv2n2\",\r\n    \"to_address_format\": {\r\n        \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convert_utxo_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convert_utxo_address\",\r\n    \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"to_coin\": \"tBTC-TEST\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "withdraw",
							"item": [
								{
									"name": "withdraw UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"DOC\",\r\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"amount\": 1.025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n    //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n    // } // Default: Coin Config\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"ETH\",\r\n    \"to\": \"0x60b56cde26535caD3d8AB7b54bfA2689A3C1e134\",\r\n    \"amount\": 0.0025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"EthGas\",\r\n    //     \"gas_price\": , // Default: Max from [\"gas_station_url\", \"eth_gasPrice\" call, \"eth_feeHistory\" call]\r\n    //     \"gas\": // Default: from \"estimate_gas\" call\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"QC\",\r\n    \"to\": \"QZVx8rW99tHCPcRoXDAHEf82PyJ2g9VZRn\",\r\n    \"amount\": 10 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"Qrc20Gas\",\r\n    //     \"gas_limit\": 100000,\r\n    //     \"gas_price\": 40\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "kmd_rewards_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"kmd_rewards_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "kmd_rewards_info",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"kmd_rewards_info\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "272"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 06:42:18 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": [\n        {\n            \"tx_hash\": \"00a255d0746708b94010b144e12c3ba5fe53381f6d4d979bf6d8ba8e8788a0aa\",\n            \"height\": 4091835,\n            \"output_index\": 2,\n            \"amount\": \"8456.47139458\",\n            \"locktime\": 1725893238,\n            \"accrued_rewards\": {\n                \"Accrued\": \"0.00606555\"\n            },\n            \"accrue_start_at\": 1725896838,\n            \"accrue_stop_at\": 1728571638\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "my_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "Returns the confirmed and unconfirmed balance of the requested coin."
							},
							"response": [
								{
									"name": "Error: Coin not active",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"ATOM\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "86"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 06:38:06 GMT"
										}
									],
									"cookie": [],
									"body": "{\"error\":\"rpc:215] dispatcher_legacy:141] lp_commands_legacy:231] No such coin: ATOM\"}"
								},
								{
									"name": "my_balance",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "114"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 06:41:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\"coin\":\"DOC\",\"balance\":\"10636.92038535\",\"unspendable_balance\":\"0\",\"address\":\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"}"
								}
							]
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_tx_history\",\r\n    \"coin\": \"DOC\"\r\n    // \"from_id\": null, // Accepted values: Strings\r\n    // \"max\": false,\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1, // used only if: \"from_id\": null\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "my_tx_history",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_tx_history\",\r\n    \"coin\": \"TSIA\"\r\n    // \"from_id\": null, // Accepted values: Strings\r\n    // \"max\": false,\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1, // used only if: \"from_id\": null\r\n\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "172"
										},
										{
											"key": "date",
											"value": "Fri, 01 Nov 2024 03:46:46 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"transactions\":[],\"limit\":10,\"skipped\":0,\"from_id\":null,\"total\":0,\"current_block\":22780,\"sync_status\":{\"state\":\"NotEnabled\"},\"page_number\":null,\"total_pages\":0}}"
								}
							]
						},
						{
							"name": "send_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"DOC\",\r\n    \"tx_hex\": \"0400008085202f8901ebec086d37ee2526668c4d3e8cbf381c09894f8fa32a237f9544cf036faaa61100000000d74730440220505b138301498c3b9ca86eee170f6ee6aa1023a8c1ce52b4648073e102849ce6022009293a0e928cc6a0a2a540606a0e578693f32e205054b268bfd0c569884ca22a0120b4e3edc80c28c4d470ff0ca415da8cd74210b5eb64fe4703a41e74d7d45bdafb004c6b630473a13061b1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a91478daeddb10bd92635a15360cdadf5f674e4f38888821031ac6d25833a5961e2a8822b2e8b0ac1fd55d90cbbbb18a780552cbd66fc02bb3ac68ffffffff01b8820100000000001976a9149a85cc05e9a722575feb770a217c73fd6145cf0188ac73a13061000000000000000000000000000000\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "send_raw_transaction",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"IRIS\",\r\n    \"tx_hex\": \"0a9f020ab7010a292f6962632e6170706c69636174696f6e732e7472616e736665722e76312e4d73675472616e736665721289010a087472616e7366657212096368616e6e656c2d331a0f0a0575697269731206313030303030222a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b2a2b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a6163347264773438eed285fe8b98e6fa17125e576520617265206d6f7265206f6674656e20667269676874656e6564207468616e20687572743b20616e6420776520737566666572206d6f72652066726f6d20696d6167696e6174696f6e207468616e2066726f6d207265616c6974792e18e28cdb0c12680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801185d12140a0e0a0575697269731205313038323110e0c65b1a4078d2d1360fc0b091cb34c07f1beec957f88324688210852832ad121d1de7a3c737279b55783f10522733becc79ecdb5db565bd8626a8109a3be62196268d2ff9\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "78"
										},
										{
											"key": "date",
											"value": "Mon, 16 Sep 2024 02:19:30 GMT"
										}
									],
									"cookie": [],
									"body": "{\"tx_hash\":\"D87E4345B9C2091E7670EB1D527970040AA725385571D7F85711C282C6D468D9\"}"
								},
								{
									"name": "send_raw_transaction (SIA)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"TSIA\",\r\n    \"tx_hex\": \"{\\\"siacoinInputs\\\": [{\\\"parent\\\": {\\\"id\\\": \\\"h:ac0ba05f8777ebcc0a2981dd31367a7184e9155cf5a19db165cfcac7ba37c520\\\",\\\"leafIndex\\\": 35514, \\\"merkleProof\\\": [\\\"h:8cd35fe8f44230e2968ee3b72d7ec1995201db7b895ccb8d0415c7ed991b3f3f\\\",\\\"h:4d891b3eb03d00cd85c268dfe1470c8057d3705b1d396b3741eb1e50ad0df65c\\\",\\\"h:fb9702701e1443c8fddf029f0969adcb7492b1b273ec283e894afed55d803215\\\",\\\"h:79ab8a93129991e87a0b8b36255c68aa4389618196b64181c74749a5c3bb5a47\\\",\\\"h:0281315992e2ea4ca95ff3f41b2496c26b70e3e907e56cb2d49203b91f0e3266\\\",\\\"h:436a766658153eeccb1a9c6c59c369090ffa2749a2fd9d3f20007942f9e4dc47\\\",\\\"h:19128b239db22df5e8c0c9082c66dbaa0b54d017bea1b9cb7809c33c9b0e71ca\\\",\\\"h:945de7689978f393d34e395b6c28220efd64269fdcf4a59a1070e0a3581679ef\\\",\\\"h:69429e9433d2b8266645e4a322e6938f776a09db26edb20283914c06fd3f8fe8\\\",\\\"h:9c8b56f9c3c7c26c3b60f6449e1501f52b75d74dc82bed7fabbc973b0fff99f5\\\",\\\"h:be8364e9447e3bf70dd8f0240e37507ef1cb29b3d2c9cbe8a725fe830ab45a33\\\",\\\"h:28fd31d0444b9be59e3dc324efb7a552e6fb1db87f4fe879ef047bcaf45ca118\\\",\\\"h:137d8b1589543204223072ad2a0a5b8283ea05fcb680b05e0c8d399e5336e1e0\\\"],\\\"siacoinOutput\\\": {\\\"value\\\": \\\"1000000000000000000000000000000000\\\",\\\"address\\\": \\\"addr:5e0dca11b958bd1b621ecb3a3a5c9122b058802b90b3c739e8a0ec596f6f25138eb9c0ab59a4\\\"},\\\"maturityHeight\\\": 0},\\\"satisfiedPolicy\\\": {\\\"policy\\\": {\\\"type\\\": \\\"pk\\\",\\\"policy\\\": \\\"ed25519:7470b18df7faf8842e4550cdb993b879cad60e355cbce71bb095e4444fbc2ebb\\\"},\\\"signatures\\\": [\\\"sig:6b849c6421fe6802123a6d7a87c3c39e3c8d7345d57b08f1f81631b8e3035bccf17ef232a59681a982f557f8031c608c6208e226f3d64c3a850cc226a8a41a01\\\"]}}],\\\"siacoinOutputs\\\": [{\\\"value\\\": \\\"10000000000000000000000000000\\\",\\\"address\\\": \\\"addr:f98cd31f1f37b258b5bd42b093c6b522698b4dee2f9acee2c75321a18a2d3528dcbb5c24cec8\\\"},{\\\"value\\\": \\\"999989999999990000000000000000000\\\",\\\"address\\\": \\\"addr:5e0dca11b958bd1b621ecb3a3a5c9122b058802b90b3c739e8a0ec596f6f25138eb9c0ab59a4\\\"}],\\\"minerFee\\\": \\\"10000000000000000000\\\"}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "80"
										},
										{
											"key": "date",
											"value": "Mon, 28 Oct 2024 16:16:14 GMT"
										}
									],
									"cookie": [],
									"body": "{\"tx_hash\":\"h:df3f8a11fbace9a9fa3f3004b7890e6ac5fa4fc83052a47b006a6daf1a642048\"}"
								}
							]
						},
						{
							"name": "show_priv_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"show_priv_key\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "validateaddress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"validateaddress\",\r\n    \"coin\": \"DOC\",\r\n    \"address\": \"RPNERS8TK1MeRo7xBthgaNsF2vL4236zX8\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"best_orders\",\r\n    \"coin\": \"DOC\",\r\n    \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n    \"volume\": 1.1\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "buy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "GoodTillCancelled",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "718"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:35:27 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"base\":\"DOC\",\"rel\":\"MARTY\",\"base_amount\":\"2.4\",\"base_amount_rat\":[[1,[12]],[1,[5]]],\"rel_amount\":\"2.64\",\"rel_amount_rat\":[[1,[66]],[1,[25]]],\"action\":\"Buy\",\"uuid\":\"0a3859ba-0e28-49de-b015-641c050a6409\",\"method\":\"request\",\"sender_pubkey\":\"d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\"dest_pub_key\":\"0000000000000000000000000000000000000000000000000000000000000000\",\"match_by\":{\"type\":\"Any\"},\"conf_settings\":{\"base_confs\":1,\"base_nota\":false,\"rel_confs\":1,\"rel_nota\":false},\"order_type\":{\"type\":\"GoodTillCancelled\"},\"min_volume\":\"0.0001\",\"min_volume_fraction\":{\"numer\":\"1\",\"denom\":\"10000\"},\"min_volume_rat\":[[1,[1]],[1,[10000]]],\"base_orderbook_ticker\":null,\"rel_orderbook_ticker\":null}}"
								}
							]
						},
						{
							"name": "cancel_all_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_all_orders\",\r\n    \"cancel_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Pair\", \"Coin\"\r\n        // \"data\": {\r\n        //     \"base\": \"DOC\", // Required only if: \"type\": \"Pair\"\r\n        //     \"rel\": \"MARTY\" // Required only if: \"type\": \"Pair\"\r\n        //     // \"ticker\": \"DOC\" // Required only if: \"type\": \"Coin\"\r\n        // } // Required only if: \"type\": \"Pair\", \"type\": \"Coin\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cancel_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_order\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_trade_fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_trade_fee\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "max_taker_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"max_taker_vol\",\r\n    \"coin\": \"DOC\"\r\n    // \"trade_with\": \"DOC\" // Default: \"coin\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "max_taker_vol",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"max_taker_vol\",\r\n    \"coin\": \"TSIA\"\r\n    // \"trade_with\": \"DOC\" // Default: \"coin\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "73"
										},
										{
											"key": "date",
											"value": "Fri, 01 Nov 2024 03:44:16 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"numer\":\"85469222999997669\",\"denom\":\"77800000\"},\"coin\":\"TSIA\"}"
								}
							]
						},
						{
							"name": "min_trading_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"min_trading_vol\",\r\n    \"coin\": \"DOC\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_orders\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders_history_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orders_history_by_filter\"\r\n    // \"order_type\": null, // Accepted values: \"Maker\", \"Taker\"\r\n    // \"initial_action\": null, // Accepted values: \"Buy\", \"Sell\"\r\n    // \"base\": null, // Accepted values: Strings\r\n    // \"rel\": null, // Accepted values: Strings\r\n    // \"from_price\": null, // Accepted values: Decimals\r\n    // \"to_price\": null, // Accepted values: Decimals\r\n    // \"from_volume\": null, // Accepted values: Decimals\r\n    // \"to_volume\": null, // Accepted values: Decimals\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null, // Accepted values: Integers\r\n    // \"was_taker\": null, // Accepted values: Booleans\r\n    // \"status\": null, // Accepted values: \"Fulfilled\", \"ToMaker\", \"InsufficientBalance\", \"TimedOut\", \"Cancelled\"\r\n    // \"include_details\": false\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook_depth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook_depth\",\r\n    \"pairs\":[[\"DOC\",\"MARTY\"],[\"BTC\",\"KMD\"],[\"DOGE\",\"KMD\"]]\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sell",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sell\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "setprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"setprice\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"price\": 0.9,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"cancel_previous\": true,\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"trade_preimage\",\r\n    \"base\": \"DOC\",\r\n    \"rel\": \"MARTY\",\r\n    \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n    \"price\": 1.01,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_maker_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"update_maker_order\",\r\n    \"uuid\": \"6f65968f-e3c6-4978-98c5-5cec2bb5aa5b\"\r\n    // \"new_price\": null, // Accepted values: Decimals\r\n    // \"max\": null, // Accepted values: Booleans\r\n    // \"volume_delta\": null, // Accepted values: Positive or Negative Decimals\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"base_confs\": null, // Accepted values: Integers\r\n    // \"base_nota\": null, // Accepted values: Booleans\r\n    // \"rel_confs\": null, // Accepted values: Integers\r\n    // \"rel_nota\": null // Accepted values: Booleans\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "active_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\",\r\n    \"include_status\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "active_swaps (without status)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\"\r\n    // \"include_status\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "66"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 11:36:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"uuids\": [\n        \"7b60a494-f159-419c-8f41-02e10f897513\"\n    ],\n    \"statuses\": null\n}"
								},
								{
									"name": "active_swaps (with status)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\",\r\n    \"include_status\": true\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "2388"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 11:43:12 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"uuids\": [\n        \"44798382-8c63-4047-b5d8-70a60fa2546b\"\n    ],\n    \"statuses\": {\n        \"44798382-8c63-4047-b5d8-70a60fa2546b\": {\n            \"type\": \"Taker\",\n            \"uuid\": \"44798382-8c63-4047-b5d8-70a60fa2546b\",\n            \"my_order_uuid\": \"44798382-8c63-4047-b5d8-70a60fa2546b\",\n            \"events\": [\n                {\n                    \"timestamp\": 1730634185287,\n                    \"event\": {\n                        \"type\": \"Started\",\n                        \"data\": {\n                            \"taker_coin\": \"MARTY\",\n                            \"maker_coin\": \"DOC\",\n                            \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                            \"my_persistent_pub\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                            \"lock_duration\": 7800,\n                            \"maker_amount\": \"2.4\",\n                            \"taker_amount\": \"2.4\",\n                            \"maker_payment_confirmations\": 1,\n                            \"maker_payment_requires_nota\": false,\n                            \"taker_payment_confirmations\": 1,\n                            \"taker_payment_requires_nota\": false,\n                            \"taker_payment_lock\": 1730641984,\n                            \"uuid\": \"44798382-8c63-4047-b5d8-70a60fa2546b\",\n                            \"started_at\": 1730634184,\n                            \"maker_payment_wait\": 1730637304,\n                            \"maker_coin_start_block\": 803893,\n                            \"taker_coin_start_block\": 818506,\n                            \"fee_to_send_taker_fee\": {\n                                \"coin\": \"MARTY\",\n                                \"amount\": \"0.00001\",\n                                \"paid_from_trading_vol\": false\n                            },\n                            \"taker_payment_trade_fee\": {\n                                \"coin\": \"MARTY\",\n                                \"amount\": \"0.00001\",\n                                \"paid_from_trading_vol\": false\n                            },\n                            \"maker_payment_spend_trade_fee\": {\n                                \"coin\": \"DOC\",\n                                \"amount\": \"0.00001\",\n                                \"paid_from_trading_vol\": true\n                            },\n                            \"maker_coin_htlc_pubkey\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                            \"taker_coin_htlc_pubkey\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                            \"p2p_privkey\": null\n                        }\n                    }\n                }\n            ],\n            \"maker_amount\": \"2.4\",\n            \"maker_coin\": \"DOC\",\n            \"maker_coin_usd_price\": null,\n            \"taker_amount\": \"2.4\",\n            \"taker_coin\": \"MARTY\",\n            \"taker_coin_usd_price\": null,\n            \"gui\": \"mm2_777\",\n            \"mm_version\": \"2.2.0-beta_caf803b\",\n            \"success_events\": [\n                \"Started\",\n                \"Negotiated\",\n                \"TakerFeeSent\",\n                \"TakerPaymentInstructionsReceived\",\n                \"MakerPaymentReceived\",\n                \"MakerPaymentWaitConfirmStarted\",\n                \"MakerPaymentValidatedAndConfirmed\",\n                \"TakerPaymentSent\",\n                \"WatcherMessageSent\",\n                \"TakerPaymentSpent\",\n                \"MakerPaymentSpent\",\n                \"MakerPaymentSpentByWatcher\",\n                \"MakerPaymentSpendConfirmed\",\n                \"Finished\"\n            ],\n            \"error_events\": [\n                \"StartFailed\",\n                \"NegotiateFailed\",\n                \"TakerFeeSendFailed\",\n                \"MakerPaymentValidateFailed\",\n                \"MakerPaymentWaitConfirmFailed\",\n                \"TakerPaymentTransactionFailed\",\n                \"TakerPaymentWaitConfirmFailed\",\n                \"TakerPaymentDataSendFailed\",\n                \"TakerPaymentWaitForSpendFailed\",\n                \"MakerPaymentSpendFailed\",\n                \"MakerPaymentSpendConfirmFailed\",\n                \"TakerPaymentWaitRefundStarted\",\n                \"TakerPaymentRefundStarted\",\n                \"TakerPaymentRefunded\",\n                \"TakerPaymentRefundedByWatcher\",\n                \"TakerPaymentRefundFailed\",\n                \"TakerPaymentRefundFinished\"\n            ]\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "all_swaps_uuids_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"all_swaps_uuids_by_filter\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "coins_needed_for_kick_start",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"coins_needed_for_kick_start\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "import_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"import_swaps\",\r\n    \"swaps\": [\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        },\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_recent_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    \"from_uuid\": \"fc72979a-68f6-422a-ade0-42dd7faaf421\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "no filters",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\"\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    // \"from_uuid\": null, // Accepted values: Strings\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "9085"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 16:01:27 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": {\n        \"swaps\": [\n            {\n                \"type\": \"Taker\",\n                \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                \"my_order_uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                \"events\": [\n                    {\n                        \"timestamp\": 1725849334423,\n                        \"event\": {\n                            \"type\": \"Started\",\n                            \"data\": {\n                                \"taker_coin\": \"MARTY\",\n                                \"maker_coin\": \"DOC\",\n                                \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                \"my_persistent_pub\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                \"lock_duration\": 7800,\n                                \"maker_amount\": \"2.4\",\n                                \"taker_amount\": \"2.4\",\n                                \"maker_payment_confirmations\": 1,\n                                \"maker_payment_requires_nota\": false,\n                                \"taker_payment_confirmations\": 1,\n                                \"taker_payment_requires_nota\": false,\n                                \"taker_payment_lock\": 1725857133,\n                                \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                                \"started_at\": 1725849333,\n                                \"maker_payment_wait\": 1725852453,\n                                \"maker_coin_start_block\": 724378,\n                                \"taker_coin_start_block\": 738955,\n                                \"fee_to_send_taker_fee\": {\n                                    \"coin\": \"MARTY\",\n                                    \"amount\": \"0.00001\",\n                                    \"paid_from_trading_vol\": false\n                                },\n                                \"taker_payment_trade_fee\": {\n                                    \"coin\": \"MARTY\",\n                                    \"amount\": \"0.00001\",\n                                    \"paid_from_trading_vol\": false\n                                },\n                                \"maker_payment_spend_trade_fee\": {\n                                    \"coin\": \"DOC\",\n                                    \"amount\": \"0.00001\",\n                                    \"paid_from_trading_vol\": true\n                                },\n                                \"maker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                \"taker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                \"p2p_privkey\": null\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849338425,\n                        \"event\": {\n                            \"type\": \"Negotiated\",\n                            \"data\": {\n                                \"maker_payment_locktime\": 1725864931,\n                                \"maker_pubkey\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                \"secret_hash\": \"91ddaac214398b0b728d652af8d86f2e06fbbb34\",\n                                \"maker_coin_swap_contract_addr\": null,\n                                \"taker_coin_swap_contract_addr\": null,\n                                \"maker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                \"taker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849339829,\n                        \"event\": {\n                            \"type\": \"TakerFeeSent\",\n                            \"data\": {\n                                \"tx_hex\": \"0400008085202f890101280d9a0703a25cdd553babd5430708f303fe3d446cd79555a53619c987d7b3000000006a47304402205805ecb3fad4c69e27061a35197c470e6a72a2b762269d3ef6b249c835396cd5022046b710dd5b6bdda75cc32a2cb9511ca51c754e4f2bcac8cd0f2757728a1671c6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88aca0e4dc11000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acfb5ede66000000000000000000000000000000\",\n                                \"tx_hash\": \"614d3b1ef3666799d71f54ea242f2cb839646be3bfc81d8f1cfce26747cb9892\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849341830,\n                        \"event\": {\n                            \"type\": \"TakerPaymentInstructionsReceived\",\n                            \"data\": null\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849341831,\n                        \"event\": {\n                            \"type\": \"MakerPaymentReceived\",\n                            \"data\": {\n                                \"tx_hex\": \"0400008085202f8901175391f3922ffcf7dc8929b9795c2fec8d82ed1649e0f3926e04709993dc35a6020000006a4730440220363ea815a237b46c5dd305809fcc103793bb4f620325c12caccb0c88f320e81c02205df417a4b806f3c3d50aa058c4d6a30203868ba786f2a1bd3b3b12917b3882ff01210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914944cf7300280e31374b3994422a252bce1fcbd10870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34083d6aff050000001976a9141462c3dd3f936d595c9af55978003b27c250441f88acfc5ede66000000000000000000000000000000\",\n                                \"tx_hash\": \"70f6078b9d3312f14dff45fc1e56e503b01d33e22cac8ebd195e4951d468dca6\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849341832,\n                        \"event\": {\n                            \"type\": \"MakerPaymentWaitConfirmStarted\"\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849465809,\n                        \"event\": {\n                            \"type\": \"MakerPaymentValidatedAndConfirmed\"\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849469603,\n                        \"event\": {\n                            \"type\": \"TakerPaymentSent\",\n                            \"data\": {\n                                \"tx_hex\": \"0400008085202f89019298cb4767e2fc1c8f1dc8bfe36b6439b82c2f24ea541fd7996766f31e3b4d61010000006a4730440220526bd1e2114642b2624cb283bada8dbeb734d3fae9184f6833e0eca87b20fffe0220554a3b38ecde2b8a521b681f5ac3e3940e08f45cc35a2fc19eeaeae513368a6c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff03001c4e0e0000000017a9141036c1fcbdf2b3e2d8b65913c78ab7412422cf17870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34b8c48e03000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac7a5fde66000000000000000000000000000000\",\n                                \"tx_hash\": \"ffe2fe025d470996c3057dc561bd79d0a09f2aa5a14b25fb8e444b49394e5ad8\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849469604,\n                        \"event\": {\n                            \"type\": \"WatcherMessageSent\",\n                            \"data\": [\n                                [\n                                    4,\n                                    0,\n                                    0,\n                                    128,\n                                    133,\n                                    32,\n                                    47,\n                                    137,\n                                    1,\n                                    166,\n                                    220,\n                                    104,\n                                    212,\n                                    81,\n                                    73,\n                                    94,\n                                    25,\n                                    189,\n                                    142,\n                                    172,\n                                    44,\n                                    226,\n                                    51,\n                                    29,\n                                    176,\n                                    3,\n                                    229,\n                                    86,\n                                    30,\n                                    252,\n                                    69,\n                                    255,\n                                    77,\n                                    241,\n                                    18,\n                                    51,\n                                    157,\n                                    139,\n                                    7,\n                                    246,\n                                    112,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    181,\n                                    71,\n                                    48,\n                                    68,\n                                    2,\n                                    32,\n                                    40,\n                                    110,\n                                    97,\n                                    180,\n                                    1,\n                                    177,\n                                    181,\n                                    123,\n                                    77,\n                                    223,\n                                    147,\n                                    41,\n                                    76,\n                                    88,\n                                    138,\n                                    70,\n                                    20,\n                                    231,\n                                    85,\n                                    84,\n                                    145,\n                                    104,\n                                    231,\n                                    60,\n                                    146,\n                                    36,\n                                    2,\n                                    236,\n                                    230,\n                                    82,\n                                    217,\n                                    131,\n                                    2,\n                                    32,\n                                    82,\n                                    28,\n                                    127,\n                                    29,\n                                    240,\n                                    203,\n                                    202,\n                                    207,\n                                    41,\n                                    245,\n                                    94,\n                                    58,\n                                    9,\n                                    242,\n                                    51,\n                                    42,\n                                    111,\n                                    255,\n                                    37,\n                                    131,\n                                    73,\n                                    23,\n                                    48,\n                                    125,\n                                    185,\n                                    16,\n                                    114,\n                                    218,\n                                    143,\n                                    121,\n                                    59,\n                                    3,\n                                    1,\n                                    76,\n                                    107,\n                                    99,\n                                    4,\n                                    227,\n                                    155,\n                                    222,\n                                    102,\n                                    177,\n                                    117,\n                                    33,\n                                    3,\n                                    21,\n                                    217,\n                                    197,\n                                    28,\n                                    101,\n                                    122,\n                                    177,\n                                    190,\n                                    74,\n                                    233,\n                                    211,\n                                    171,\n                                    110,\n                                    118,\n                                    166,\n                                    25,\n                                    211,\n                                    188,\n                                    207,\n                                    232,\n                                    48,\n                                    213,\n                                    54,\n                                    63,\n                                    161,\n                                    104,\n                                    66,\n                                    76,\n                                    13,\n                                    4,\n                                    71,\n                                    50,\n                                    172,\n                                    103,\n                                    130,\n                                    1,\n                                    32,\n                                    136,\n                                    169,\n                                    20,\n                                    145,\n                                    221,\n                                    170,\n                                    194,\n                                    20,\n                                    57,\n                                    139,\n                                    11,\n                                    114,\n                                    141,\n                                    101,\n                                    42,\n                                    248,\n                                    216,\n                                    111,\n                                    46,\n                                    6,\n                                    251,\n                                    187,\n                                    52,\n                                    136,\n                                    33,\n                                    3,\n                                    216,\n                                    6,\n                                    78,\n                                    236,\n                                    228,\n                                    250,\n                                    92,\n                                    15,\n                                    141,\n                                    192,\n                                    38,\n                                    127,\n                                    104,\n                                    206,\n                                    233,\n                                    189,\n                                    213,\n                                    39,\n                                    249,\n                                    232,\n                                    143,\n                                    53,\n                                    148,\n                                    163,\n                                    35,\n                                    66,\n                                    135,\n                                    24,\n                                    195,\n                                    145,\n                                    236,\n                                    194,\n                                    172,\n                                    104,\n                                    255,\n                                    255,\n                                    255,\n                                    255,\n                                    1,\n                                    24,\n                                    24,\n                                    78,\n                                    14,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    25,\n                                    118,\n                                    169,\n                                    20,\n                                    211,\n                                    70,\n                                    6,\n                                    126,\n                                    60,\n                                    60,\n                                    57,\n                                    100,\n                                    195,\n                                    149,\n                                    254,\n                                    226,\n                                    8,\n                                    89,\n                                    71,\n                                    144,\n                                    226,\n                                    158,\n                                    222,\n                                    93,\n                                    136,\n                                    172,\n                                    227,\n                                    155,\n                                    222,\n                                    102,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0\n                                ],\n                                [\n                                    4,\n                                    0,\n                                    0,\n                                    128,\n                                    133,\n                                    32,\n                                    47,\n                                    137,\n                                    1,\n                                    216,\n                                    90,\n                                    78,\n                                    57,\n                                    73,\n                                    75,\n                                    68,\n                                    142,\n                                    251,\n                                    37,\n                                    75,\n                                    161,\n                                    165,\n                                    42,\n                                    159,\n                                    160,\n                                    208,\n                                    121,\n                                    189,\n                                    97,\n                                    197,\n                                    125,\n                                    5,\n                                    195,\n                                    150,\n                                    9,\n                                    71,\n                                    93,\n                                    2,\n                                    254,\n                                    226,\n                                    255,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    182,\n                                    71,\n                                    48,\n                                    68,\n                                    2,\n                                    32,\n                                    12,\n                                    137,\n                                    103,\n                                    65,\n                                    18,\n                                    108,\n                                    213,\n                                    157,\n                                    224,\n                                    139,\n                                    187,\n                                    163,\n                                    116,\n                                    52,\n                                    231,\n                                    214,\n                                    185,\n                                    167,\n                                    227,\n                                    252,\n                                    3,\n                                    217,\n                                    92,\n                                    49,\n                                    170,\n                                    72,\n                                    112,\n                                    76,\n                                    45,\n                                    193,\n                                    15,\n                                    83,\n                                    2,\n                                    32,\n                                    28,\n                                    190,\n                                    47,\n                                    213,\n                                    129,\n                                    180,\n                                    189,\n                                    228,\n                                    165,\n                                    105,\n                                    157,\n                                    230,\n                                    180,\n                                    175,\n                                    68,\n                                    109,\n                                    152,\n                                    255,\n                                    38,\n                                    88,\n                                    66,\n                                    40,\n                                    253,\n                                    7,\n                                    79,\n                                    86,\n                                    118,\n                                    91,\n                                    107,\n                                    20,\n                                    242,\n                                    219,\n                                    1,\n                                    81,\n                                    76,\n                                    107,\n                                    99,\n                                    4,\n                                    109,\n                                    125,\n                                    222,\n                                    102,\n                                    177,\n                                    117,\n                                    33,\n                                    3,\n                                    216,\n                                    6,\n                                    78,\n                                    236,\n                                    228,\n                                    250,\n                                    92,\n                                    15,\n                                    141,\n                                    192,\n                                    38,\n                                    127,\n                                    104,\n                                    206,\n                                    233,\n                                    189,\n                                    213,\n                                    39,\n                                    249,\n                                    232,\n                                    143,\n                                    53,\n                                    148,\n                                    163,\n                                    35,\n                                    66,\n                                    135,\n                                    24,\n                                    195,\n                                    145,\n                                    236,\n                                    194,\n                                    172,\n                                    103,\n                                    130,\n                                    1,\n                                    32,\n                                    136,\n                                    169,\n                                    20,\n                                    145,\n                                    221,\n                                    170,\n                                    194,\n                                    20,\n                                    57,\n                                    139,\n                                    11,\n                                    114,\n                                    141,\n                                    101,\n                                    42,\n                                    248,\n                                    216,\n                                    111,\n                                    46,\n                                    6,\n                                    251,\n                                    187,\n                                    52,\n                                    136,\n                                    33,\n                                    3,\n                                    21,\n                                    217,\n                                    197,\n                                    28,\n                                    101,\n                                    122,\n                                    177,\n                                    190,\n                                    74,\n                                    233,\n                                    211,\n                                    171,\n                                    110,\n                                    118,\n                                    166,\n                                    25,\n                                    211,\n                                    188,\n                                    207,\n                                    232,\n                                    48,\n                                    213,\n                                    54,\n                                    63,\n                                    161,\n                                    104,\n                                    66,\n                                    76,\n                                    13,\n                                    4,\n                                    71,\n                                    50,\n                                    172,\n                                    104,\n                                    254,\n                                    255,\n                                    255,\n                                    255,\n                                    1,\n                                    24,\n                                    24,\n                                    78,\n                                    14,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    25,\n                                    118,\n                                    169,\n                                    20,\n                                    211,\n                                    70,\n                                    6,\n                                    126,\n                                    60,\n                                    60,\n                                    57,\n                                    100,\n                                    195,\n                                    149,\n                                    254,\n                                    226,\n                                    8,\n                                    89,\n                                    71,\n                                    144,\n                                    226,\n                                    158,\n                                    222,\n                                    93,\n                                    136,\n                                    172,\n                                    109,\n                                    125,\n                                    222,\n                                    102,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0,\n                                    0\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849486567,\n                        \"event\": {\n                            \"type\": \"TakerPaymentSpent\",\n                            \"data\": {\n                                \"transaction\": {\n                                    \"tx_hex\": \"0400008085202f8901d85a4e39494b448efb254ba1a52a9fa0d079bd61c57d05c39609475d02fee2ff00000000d74730440220544c5a2eec1e3fb7a2c71e3b6bf3c612300a9c5375ca5c7131742f0afc8a6e8f02206df5b042ec1ff359bf7209269ce3b59d09f5f2340842d5e0a253875624bbce120120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b63046d7dde66b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb3488210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac68ffffffff0118184e0e000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac6d7dde66000000000000000000000000000000\",\n                                    \"tx_hash\": \"58813eb1037e40425d56146c2f6bfbe70b8bcc18e45b752b51c726503ad4f8df\"\n                                },\n                                \"secret\": \"d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849488871,\n                        \"event\": {\n                            \"type\": \"MakerPaymentSpent\",\n                            \"data\": {\n                                \"tx_hex\": \"0400008085202f8901a6dc68d451495e19bd8eac2ce2331db003e5561efc45ff4df112339d8b07f67000000000d74730440220286e61b401b1b57b4ddf93294c588a4614e755549168e73c922402ece652d9830220521c7f1df0cbcacf29f55e3a09f2332a6fff25834917307db91072da8f793b030120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b6304e39bde66b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb34882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118184e0e000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ace39bde66000000000000000000000000000000\",\n                                \"tx_hash\": \"60f83a68e5851ff93308758763ce30c643bd94ae89f4ae43fe7e02dc88d61642\"\n                            }\n                        }\n                    },\n                    {\n                        \"timestamp\": 1725849488872,\n                        \"event\": {\n                            \"type\": \"Finished\"\n                        }\n                    }\n                ],\n                \"maker_amount\": \"2.4\",\n                \"maker_coin\": \"DOC\",\n                \"maker_coin_usd_price\": \"0.0000001\",\n                \"taker_amount\": \"2.4\",\n                \"taker_coin\": \"MARTY\",\n                \"taker_coin_usd_price\": \"0.00000005\",\n                \"gui\": \"mm2_777\",\n                \"mm_version\": \"2.2.0-beta_2bdee4f\",\n                \"success_events\": [\n                    \"Started\",\n                    \"Negotiated\",\n                    \"TakerFeeSent\",\n                    \"TakerPaymentInstructionsReceived\",\n                    \"MakerPaymentReceived\",\n                    \"MakerPaymentWaitConfirmStarted\",\n                    \"MakerPaymentValidatedAndConfirmed\",\n                    \"TakerPaymentSent\",\n                    \"WatcherMessageSent\",\n                    \"TakerPaymentSpent\",\n                    \"MakerPaymentSpent\",\n                    \"MakerPaymentSpentByWatcher\",\n                    \"Finished\"\n                ],\n                \"error_events\": [\n                    \"StartFailed\",\n                    \"NegotiateFailed\",\n                    \"TakerFeeSendFailed\",\n                    \"MakerPaymentValidateFailed\",\n                    \"MakerPaymentWaitConfirmFailed\",\n                    \"TakerPaymentTransactionFailed\",\n                    \"TakerPaymentWaitConfirmFailed\",\n                    \"TakerPaymentDataSendFailed\",\n                    \"TakerPaymentWaitForSpendFailed\",\n                    \"MakerPaymentSpendFailed\",\n                    \"TakerPaymentWaitRefundStarted\",\n                    \"TakerPaymentRefundStarted\",\n                    \"TakerPaymentRefunded\",\n                    \"TakerPaymentRefundedByWatcher\",\n                    \"TakerPaymentRefundFailed\",\n                    \"TakerPaymentRefundFinished\"\n                ],\n                \"my_info\": {\n                    \"my_coin\": \"MARTY\",\n                    \"other_coin\": \"DOC\",\n                    \"my_amount\": \"2.4\",\n                    \"other_amount\": \"2.4\",\n                    \"started_at\": 1725849333\n                },\n                \"recoverable\": false,\n                \"is_finished\": true\n            }\n        ],\n        \"from_uuid\": null,\n        \"skipped\": 0,\n        \"limit\": 10,\n        \"total\": 1,\n        \"page_number\": 1,\n        \"total_pages\": 1,\n        \"found_records\": 1\n    }\n}"
								},
								{
									"name": "Error: Invalid uuid",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    \"from_uuid\": \"e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e41\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "141"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 16:02:22 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rpc:215] dispatcher_legacy:141] lp_swap:1298] UUID parsing failed: invalid length: expected length 32 for simple format, found 64\"\n}"
								},
								{
									"name": "Error: SQL",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    \"from_uuid\": \"fc72979a-68f6-422a-ade0-42dd7faaf421\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "121"
										},
										{
											"key": "date",
											"value": "Thu, 12 Sep 2024 16:04:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rpc:215] dispatcher_legacy:141] lp_swap:1299] my_swaps_storage:102] Unknown SQL error: Query returned no rows\"\n}"
								}
							]
						},
						{
							"name": "my_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "recover_funds_of_swap",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"recover_funds_of_swap\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_required_confirmations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_required_confirmations\",\r\n    \"coin\": \"DOC\",\r\n    \"confirmations\": 3\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_requires_notarization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_requires_notarization\",\r\n    \"coin\": \"DOC\",\r\n    \"requires_notarization\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stats_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stats_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"dad06692-399a-4a05-a6fc-4e4cbe6d227d\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P2P",
					"item": [
						{
							"name": "ban_pubkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"ban_pubkey\",\r\n    \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n    \"reason\": \"test\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "ban_pubkey",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"ban_pubkey\",\r\n    \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n    \"reason\": \"test\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "20"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:33 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":\"success\"}"
								}
							]
						},
						{
							"name": "get_gossip_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_gossip_mesh",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_mesh\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "13"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:20 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{}}"
								}
							]
						},
						{
							"name": "get_gossip_peer_topics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_peer_topics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_gossip_peer_topics",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_peer_topics\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "128"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:12 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"12D3KooWEaZpH61H4yuQkaNG5AsyGdpBhKRppaLdAY52a774ab5u\":[],\"12D3KooWHKkHiNhZtKceQehHhPqwU5W1jXpoVBgS1qst899GjvTm\":[]}}"
								}
							]
						},
						{
							"name": "get_gossip_topic_peers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_topic_peers\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_gossip_topic_peers",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_topic_peers\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "13"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:04 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{}}"
								}
							]
						},
						{
							"name": "get_my_peer_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_my_peer_id\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_my_peer_id",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_my_peer_id\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "65"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:13:45 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":\"12D3KooWD571QeWTQAwuTGjPb23WaopKSiKgZ2fp6SkWbaXTjvjK\"}"
								}
							]
						},
						{
							"name": "get_directly_connected_peers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_directly_connected_peers\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_directly_connected_peers",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_directly_connected_peers\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "331"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:01:00 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"12D3KooWBoQYTPf4q2bnsw8fUA2LKoknccVLrAcF1caCa48ev8QU\":[\"/ip4/38.91.100.29/tcp/42845/p2p/12D3KooWBoQYTPf4q2bnsw8fUA2LKoknccVLrAcF1caCa48ev8QU\"],\"12D3KooWHKkHiNhZtKceQehHhPqwU5W1jXpoVBgS1qst899GjvTm\":[\"/ip4/168.119.236.251/tcp/42845\"],\"12D3KooWEaZpH61H4yuQkaNG5AsyGdpBhKRppaLdAY52a774ab5u\":[\"/ip4/46.4.78.11/tcp/42845\"]}}"
								}
							]
						},
						{
							"name": "get_relay_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_relay_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_relay_mesh",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_relay_mesh\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "122"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:42 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":[\"12D3KooWEaZpH61H4yuQkaNG5AsyGdpBhKRppaLdAY52a774ab5u\",\"12D3KooWHKkHiNhZtKceQehHhPqwU5W1jXpoVBgS1qst899GjvTm\"]}"
								}
							]
						},
						{
							"name": "list_banned_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"list_banned_pubkeys\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "list_banned_pubkeys",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"list_banned_pubkeys\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "113"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:14:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\":{\"type\":\"Manual\",\"reason\":\"test\"}}}"
								}
							]
						},
						{
							"name": "unban_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"unban_pubkeys\",\r\n    \"unban_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Few\"\r\n        // \"data\": [\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520560\"\r\n        // ] // Required only if: \"type\": \"Few\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "unban_pubkeys",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"unban_pubkeys\",\r\n    \"unban_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Few\"\r\n        // \"data\": [\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520560\"\r\n        // ] // Required only if: \"type\": \"Few\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "165"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:15:02 GMT"
										}
									],
									"cookie": [],
									"body": "{\"result\":{\"still_banned\":{},\"unbanned\":{\"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\":{\"type\":\"Manual\",\"reason\":\"test\"}},\"were_not_banned\":[]}}"
								}
							]
						}
					]
				},
				{
					"name": "Utility",
					"item": [
						{
							"name": "help",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"help\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "metrics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"metrics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "metrics",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"metrics\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "543"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:20:02 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"metrics\": [\n        {\n            \"type\": \"gauge\",\n            \"key\": \"p2p.received_messages.period_in_secs\",\n            \"labels\": {},\n            \"value\": 60\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"p2p.received_messages.count\",\n            \"labels\": {},\n            \"value\": 0\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"orderbook.memory_db\",\n            \"labels\": {},\n            \"value\": 7813573027962636000\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"p2p.relay_mesh.len\",\n            \"labels\": {},\n            \"value\": 2\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"orderbook.len\",\n            \"labels\": {},\n            \"value\": 0\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"p2p.connected_peers.count\",\n            \"labels\": {},\n            \"value\": 3\n        },\n        {\n            \"type\": \"gauge\",\n            \"key\": \"p2p.connected_relays.len\",\n            \"labels\": {},\n            \"value\": 2\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"version\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "version",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"version\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "70"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:20:12 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": \"2.2.0-beta_d1a8ea7\",\n    \"datetime\": \"2024-09-10T09:26:03+03:00\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Stop",
					"item": [
						{
							"name": "sim_panic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sim_panic\"\r\n    // \"mode\": \"\" // Accepted values: \"\", \"simple\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stop\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "UTXO",
							"item": [
								{
									"name": "task::enable_utxo::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\":\"KMD\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n            // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"min_addresses_number\": 3 // used only if \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "task::enable_utxo::init",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\":\"KMD\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:20001\",\r\n                            \"protocol\": \"SSL\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n            // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"min_addresses_number\": 3 // used only if \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "48"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:10:37 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"task_id\":0},\"id\":null}"
										}
									]
								},
								{
									"name": "task::enable_utxo::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "task::enable_utxo::status (RequestingWalletBalance)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "94"
												},
												{
													"key": "date",
													"value": "Thu, 17 Oct 2024 12:58:55 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"status\":\"InProgress\",\"details\":\"RequestingWalletBalance\"},\"id\":null}"
										},
										{
											"name": "task::enable_utxo::status (complete)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "426"
												},
												{
													"key": "date",
													"value": "Thu, 17 Oct 2024 12:59:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"status\": \"Ok\",\n        \"details\": {\n            \"ticker\": \"KMD\",\n            \"current_block\": 4141373,\n            \"wallet_balance\": {\n                \"wallet_type\": \"HD\",\n                \"accounts\": [\n                    {\n                        \"account_index\": 0,\n                        \"derivation_path\": \"m/44'/141'/0'\",\n                        \"total_balance\": {\n                            \"spendable\": \"20\",\n                            \"unspendable\": \"0\"\n                        },\n                        \"addresses\": [\n                            {\n                                \"address\": \"RMC1cWXngQf2117apEKoLh3x27NoG88yzd\",\n                                \"derivation_path\": \"m/44'/141'/0'/0/0\",\n                                \"chain\": \"External\",\n                                \"balance\": {\n                                    \"spendable\": \"20\",\n                                    \"unspendable\": \"0\"\n                                }\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::enable_utxo::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_utxo::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "task::enable_qtum::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::init\",\r\n    \"params\": {\r\n        \"ticker\":\"tQTUM\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:10071\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:10071\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:10071\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"min_addresses_number\": 3 // used only if \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_qtum::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_qtum::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BCH",
							"item": [
								{
									"name": "enable_bch_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_bch_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\":\"tBCH\",\r\n        // \"allow_slp_unsafe_conf\":false,\r\n        \"bchd_urls\":[\r\n            \"https://bchd-testnet.electroncash.de:18335\" // Required only if: \"allow_slp_unsafe_conf\": false\r\n        ],\r\n        \"mode\": {\r\n            \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n            \"rpc_data\": {\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"electroncash.de:50003\"\r\n                        // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                        // \"disable_cert_verification\": false\r\n                    },\r\n                    {\r\n                        \"url\": \"tbch.loping.net:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"blackie.c3-soft.com:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"bch0.kister.net:51001\"\r\n                    }\r\n                ]\r\n            } // Required only if: \"rpc\": \"Electrum\"\r\n        },\r\n        \"slp_tokens_requests\":[\r\n            {\r\n                \"ticker\":\"USDF\"\r\n                // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n            }\r\n        ]\r\n        // \"tx_history\": false,\r\n        // \"required_confirmations\": 1, // Default: Coin Config\r\n        // \"address_format\": {\r\n        //     \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n        // }, // Default: Coin Config\r\n        // \"utxo_merge_params\": null,\r\n        // // \"utxo_merge_params\": {\r\n        // //     \"merge_at\":50\r\n        // //     // \"check_every\":10,\r\n        // //     // \"max_merge_at_once\":100\r\n        // //     },\r\n        // \"check_utxo_maturity\": false,\r\n        // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n        // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n        // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_slp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_slp\",\r\n    \"params\":{\r\n        \"ticker\":\"sTST\",\r\n        \"activation_params\": {\r\n            // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ZCOIN",
							"item": [
								{
									"name": "task::enable_z_coin::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::init\",\r\n    \"params\": {\r\n        \"ticker\": \"ZOMBIE\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Light\", // Accepted values: \"Native\", \"Light\"\r\n                \"rpc_data\": {\r\n                    \"electrum_servers\": [\r\n                        {\r\n                            \"url\": \"zombie.dragonhound.info:10033\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        }\r\n                    ],\r\n                    \"light_wallet_d_servers\": [\r\n                        \"http://zombie.sirseven.me:443\",\r\n                        \"http://zombie.dragonhound.info:443\"\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Light\"\r\n            }\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_z_coin_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_z_coin::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SOLANA",
							"item": [
								{
									"name": "enable_solana_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_solana_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\": \"SOL-DEVNET\",\r\n        \"confirmation_commitment\": \"finalized\", // Accepted values: \"processed\", \"confirmed\", \"finalized\"\r\n        \"client_url\": \"https://api.devnet.solana.com\",\r\n        \"spl_tokens_requests\": [\r\n            {\r\n                \"ticker\": \"USDC-SOL-DEVNET\",\r\n                \"activation_params\": {}\r\n            }\r\n        ]\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_spl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_spl\",\r\n    \"params\": {\r\n        \"ticker\": \"ADEX-SOL-DEVNET\",\r\n        \"activation_params\": {}\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EVM",
							"item": [
								{
									"name": "enable_eth_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"rpc_mode\": \"Default\", // Accepted values: Default, Metamask\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        },\n        {\n            \"url\": \"https://node.komodo.earth:8080/polygon\",\n            \"komodo_proxy\": true\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "AVAX",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"AVAX\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n            {\n                \"url\": \"https://node.komodo.earth:8080/avalanche\",\n                \"komodo_proxy\": true\n            },\n            {\n                \"url\": \"https://api.avax.network/ext/bc/C/rpc\"\n            },\n            {\n                \"url\": \"https://block-proxy.komodo.earth/rpc/avax\",\n                \"ws_url\": \"wss://block-proxy.komodo.earth/rpc/avax/websocket\"\n            }\n      ],\n      \"erc20_tokens_requests\": [\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "594"
												},
												{
													"key": "date",
													"value": "Thu, 14 Nov 2024 06:46:51 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":53054425,\"eth_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\"}},\"erc20_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\"tickers\":[]}},\"nfts_infos\":{}},\"id\":null}"
										},
										{
											"name": "ETH",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"ticker\": \"ETH\",\n        \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n        \"gas_station_decimals\": 8,\n        \"gas_station_policy\": {\n            \"policy\": \"MeanAverageFast\"\n        },\n        \"mm2\": 1,\n        \"rpc_mode\": \"Default\",\n        \"nft_req\": {\n          \"provider\": {\n            \"type\": \"Moralis\",\n            \"info\": {\n              \"url\": \"https://moralis-proxy.komodo.earth\"\n            }\n          }\n        },\n        \"priv_key_policy\": \"ContextPrivKey\",\n        \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n        \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n        \"nodes\": [\n            {\n                \"url\": \"https://eth1.cipig.net:18555\",\n                \"komodo_proxy\": false\n            },\n            {\n                \"url\": \"https://eth2.cipig.net:18555\",\n                \"komodo_proxy\": false\n            },\n            {\n                \"url\": \"https://eth3.cipig.net:18555\",\n                \"komodo_proxy\": false\n            }\n        ],\n        \"tx_history\": true,\n        \"erc20_tokens_requests\": [\n            {\n                \"ticker\": \"MINDS-ERC20\",\n                \"required_confirmations\": 4\n            }\n        ],\n        \"required_confirmations\": 5,\n        \"requires_notarization\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "691"
												},
												{
													"key": "date",
													"value": "Thu, 14 Nov 2024 06:47:57 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":21184239,\"eth_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\"balances\":{\"spendable\":\"0\",\"unspendable\":\"0\"}}},\"erc20_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\"balances\":{\"MINDS-ERC20\":{\"spendable\":\"0\",\"unspendable\":\"0\"}}}},\"nfts_infos\":{}},\"id\":null}"
										},
										{
											"name": "BNB",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"BNB\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"swap_contract_address\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n      \"fallback_swap_contract\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n      \"nodes\": [\n        {\n          \"url\": \"https://bsc1.cipig.net:18655\"\n        },\n        {\n          \"url\": \"https://bsc3.cipig.net:18655\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/bnb\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"KMD-BEP20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "605"
												},
												{
													"key": "date",
													"value": "Thu, 14 Nov 2024 06:48:20 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":43995388,\"eth_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\"}},\"erc20_addresses_infos\":{\"0x083C32B38e8050473f6999e22f670d1404235592\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\"tickers\":[\"KMD-BEP20\"]}},\"nfts_infos\":{}},\"id\":null}"
										},
										{
											"name": "MATIC (without NFTs)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        },\n        {\n            \"url\": \"https://node.komodo.earth:8080/polygon\",\n            \"komodo_proxy\": true\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "618"
												},
												{
													"key": "date",
													"value": "Thu, 14 Nov 2024 06:48:22 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"current_block\": 64265247,\n        \"eth_addresses_infos\": {\n            \"0x083C32B38e8050473f6999e22f670d1404235592\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\"\n            }\n        },\n        \"erc20_addresses_infos\": {\n            \"0x083C32B38e8050473f6999e22f670d1404235592\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\n                \"tickers\": [\n                    \"PGX-PLG20\",\n                    \"AAVE-PLG20\"\n                ]\n            }\n        },\n        \"nfts_infos\": {}\n    },\n    \"id\": null\n}"
										},
										{
											"name": "MATIC (with NFTs)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "618"
												},
												{
													"key": "date",
													"value": "Thu, 14 Nov 2024 06:51:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"current_block\": 64265343,\n        \"eth_addresses_infos\": {\n            \"0x083C32B38e8050473f6999e22f670d1404235592\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\"\n            }\n        },\n        \"erc20_addresses_infos\": {\n            \"0x083C32B38e8050473f6999e22f670d1404235592\": {\n                \"derivation_method\": {\n                    \"type\": \"Iguana\"\n                },\n                \"pubkey\": \"044cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256eb93f0bdb93a767314eaf7455c383a8d1397b0fe80fb5e81ab0e72c7e26fa885\",\n                \"tickers\": [\n                    \"AAVE-PLG20\",\n                    \"PGX-PLG20\"\n                ]\n            }\n        },\n        \"nfts_infos\": {}\n    },\n    \"id\": null\n}"
										},
										{
											"name": "enable_eth_with_tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": true,\n      \"tx_history\": false,\n      \"rpc_mode\": \"Default\", // Accepted values: Default, Metamask\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        },\n        {\n            \"url\": \"https://node.komodo.earth:8080/polygon\",\n            \"komodo_proxy\": true\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1669"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:03:52 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"current_block\":65658249,\"eth_addresses_infos\":{\"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\",\"balances\":{\"spendable\":\"16.651562360509102537\",\"unspendable\":\"0\"}}},\"erc20_addresses_infos\":{\"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\":{\"derivation_method\":{\"type\":\"Iguana\"},\"pubkey\":\"04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b\",\"balances\":{\"AAVE-PLG20\":{\"spendable\":\"0\",\"unspendable\":\"0\"},\"PGX-PLG20\":{\"spendable\":\"0\",\"unspendable\":\"0\"}}}},\"nfts_infos\":{\"0xb9ae3b7632be11420bd3e59fd41c300dd67274ac,0\":{\"token_address\":\"0xb9ae3b7632be11420bd3e59fd41c300dd67274ac\",\"token_id\":\"0\",\"chain\":\"POLYGON\",\"contract_type\":\"ERC1155\",\"amount\":\"1\"},\"0xd25f13e4ba534ef625c75b84934689194b7bd59e,14\":{\"token_address\":\"0xd25f13e4ba534ef625c75b84934689194b7bd59e\",\"token_id\":\"14\",\"chain\":\"POLYGON\",\"contract_type\":\"ERC721\",\"amount\":\"1\"},\"0x73a5299824cd955af6377b56f5762dc3ca4cc078,1\":{\"token_address\":\"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\"token_id\":\"1\",\"chain\":\"POLYGON\",\"contract_type\":\"ERC721\",\"amount\":\"1\"},\"0x3f368660b013a59b245a093a5ede57fa9deb911f,0\":{\"token_address\":\"0x3f368660b013a59b245a093a5ede57fa9deb911f\",\"token_id\":\"0\",\"chain\":\"POLYGON\",\"contract_type\":\"ERC1155\",\"amount\":\"1\"},\"0xe1ab36eda8012483aa947263b7d9a857d9c37e05,32\":{\"token_address\":\"0xe1ab36eda8012483aa947263b7d9a857d9c37e05\",\"token_id\":\"32\",\"chain\":\"POLYGON\",\"contract_type\":\"ERC1155\",\"amount\":\"1\"}}},\"id\":null}"
										}
									]
								},
								{
									"name": "enable_erc20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_eth_with_tokens\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"MATIC\",\n      \"get_balances\": false,\n      \"tx_history\": false,\n      \"rpc_mode\": \"Default\", // Accepted values: Default, Metamask\n      \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n      \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"swap_v2_contracts\": {\n\t    \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n\t    \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n      },\n      \"nft_req\": {\n        \"provider\": {\n          \"type\": \"Moralis\",\n          \"info\": {\n            \"url\": \"https://moralis-proxy.komodo.earth\"\n          }\n        }\n      },\n      \"nodes\": [\n        {\n          \"url\": \"https://polygon-rpc.com\"\n        },\n        {\n          \"url\": \"https://electrum3.cipig.net:18755\"\n        },\n        {\n          \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n        },\n        {\n            \"url\": \"https://node.komodo.earth:8080/polygon\",\n            \"komodo_proxy\": true\n        }\n      ],\n      \"erc20_tokens_requests\": [\n        {\n          \"ticker\": \"PGX-PLG20\",\n          \"required_confirmations\": 4\n        },\n        {\n          \"ticker\": \"AAVE-PLG20\",\n          \"required_confirmations\": 4\n        }\n      ],\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"enable_erc20\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"ticker\": \"BAT-PLG20\",\n      \"activation_params\": {\n        \"required_confirmations\": 3\n      }\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "251"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:07:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"balances\":{\"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\":{\"spendable\":\"0\",\"unspendable\":\"0\"}},\"platform_coin\":\"MATIC\",\"token_contract_address\":\"0x3cef98bb43d732e2f285ee605a8158cde967d219\",\"required_confirmations\":3},\"id\":null}"
										}
									]
								},
								{
									"name": "task::enable_erc20::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_erc20::init\",\n    \"params\": {\n        \"ticker\": \"AAVE\", \n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"ETH\",\n                \"contract_address\": \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\"\n            }\n        },\n        \"activation_params\": {\n            \"required_confirmations\": 3\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: contract already exists",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_erc20::init\",\n    \"params\": {\n        \"ticker\": \"PNIC\", \n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"AVAX\",\n                \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"\n            }\n        },\n        \"activation_params\": {\n            \"required_confirmations\": 3\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "366"
												},
												{
													"key": "date",
													"value": "Tue, 19 Nov 2024 09:19:20 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Custom token error: Token with the same contract address already exists in coins configs, ticker in config: AAVE-ERC20\",\n    \"error_path\": \"init_token.prelude.lp_coins\",\n    \"error_trace\": \"init_token:103] prelude:126] lp_coins:4342]\",\n    \"error_type\": \"CustomTokenError\",\n    \"error_data\": {\n        \"DuplicateContractInConfig\": {\n            \"ticker_in_config\": \"AAVE-ERC20\"\n        }\n    },\n    \"id\": null\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_erc20::init\",\n    \"params\": {\n        \"ticker\": \"PNIC\", \n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"AVAX\",\n                \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"\n            }\n        },\n        \"activation_params\": {\n            \"required_confirmations\": 3\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "48"
												},
												{
													"key": "date",
													"value": "Tue, 19 Nov 2024 09:29:41 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"task_id\": 0\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::enable_erc20::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_erc20::status\",\n    \"params\": {\n        \"task_id\": 0\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\n  {\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_erc20::status\",\n    \"params\": {\n        \"task_id\": 0\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "375"
												},
												{
													"key": "date",
													"value": "Tue, 19 Nov 2024 09:31:56 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"status\": \"Ok\",\n        \"details\": {\n            \"ticker\": \"PNIC\",\n            \"platform_coin\": \"AVAX\",\n            \"token_contract_address\": \"0x4f3c5c53279536ffcfe8bcafb78e612e933d53c6\",\n            \"current_block\": 53270564,\n            \"required_confirmations\": 3,\n            \"wallet_balance\": {\n                \"wallet_type\": \"Iguana\",\n                \"address\": \"0x083C32B38e8050473f6999e22f670d1404235592\",\n                \"balance\": {\n                    \"PNIC\": {\n                        \"spendable\": \"0\",\n                        \"unspendable\": \"0\"\n                    }\n                }\n            }\n        }\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::enable_erc20::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_erc20::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: NoSuchTask",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_erc20::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "172"
												},
												{
													"key": "date",
													"value": "Tue, 19 Nov 2024 09:35:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"No such task '0'\",\n    \"error_path\": \"init_token.manager\",\n    \"error_trace\": \"init_token:175] manager:137]\",\n    \"error_type\": \"NoSuchTask\",\n    \"error_data\": 0,\n    \"id\": null\n}"
										}
									]
								}
							]
						},
						{
							"name": "TENDERMINT",
							"item": [
								{
									"name": "enable_tendermint_token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_token\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"ATOM-IBC_OSMO\",\r\n        \"activation_params\": {\r\n            \"required_confirmations\": 3\r\n        }\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: TokenIsAlreadyActivated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_token\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"ATOM-IBC_IRIS\",\r\n        \"activation_params\": {\r\n            \"required_confirmations\": 3\r\n        }\r\n    }\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "192"
												},
												{
													"key": "date",
													"value": "Wed, 11 Sep 2024 08:51:08 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"Token ATOM-IBC_IRIS is already activated\",\"error_path\":\"token\",\"error_trace\":\"token:121]\",\"error_type\":\"TokenIsAlreadyActivated\",\"error_data\":\"ATOM-IBC_IRIS\",\"id\":null}"
										},
										{
											"name": "Activate ATOM-IBC_OSMO",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_token\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"ATOM-IBC_IRIS\",\r\n        \"activation_params\": {\r\n            \"required_confirmations\": 3\r\n        }\r\n    }\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "160"
												},
												{
													"key": "date",
													"value": "Wed, 11 Sep 2024 08:52:45 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"balances\":{\"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\":{\"spendable\":\"0.028306\",\"unspendable\":\"0\"}},\"platform_coin\":\"IRIS\"},\"id\":null}"
										},
										{
											"name": "Activate IRIS-IBC_OSMO",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_token\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"IRIS-IBC_OSMO\",\r\n        \"activation_params\": {\r\n            \"required_confirmations\": 3\r\n        }\r\n    }\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "154"
												},
												{
													"key": "date",
													"value": "Mon, 16 Sep 2024 02:12:45 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"balances\": {\n            \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\": {\n                \"spendable\": \"0\",\n                \"unspendable\": \"0\"\n            }\n        },\n        \"platform_coin\": \"OSMO\"\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "enable_tendermint_with_assets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"IRIS\",\r\n        \"tx_history\": true,\r\n        \"get_balances\": true,\r\n        \"nodes\": [\r\n          {\r\n              \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\r\n              \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\r\n              \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\r\n              \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\r\n          },\r\n          {\r\n              \"url\": \"https://rpc.irishub-1.irisnet.org\",\r\n              \"komodo_proxy\": false\r\n          }\r\n        ],\r\n        \"tokens_params\": [\r\n            {\r\n                \"ticker\": \"ATOM-IBC_IRIS\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Activate IRIS without assets",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"IRIS\",\r\n        \"tx_history\": true,\r\n        \"get_balances\": true,\r\n        \"nodes\":[\r\n            {\r\n                \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\r\n                \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\r\n                \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\r\n                \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\r\n            },\r\n            {\r\n                \"url\": \"https://rpc.irishub-1.irisnet.org\"\r\n            }\r\n        ],\r\n        \"tokens_params\": []\r\n    }\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "207"
												},
												{
													"key": "date",
													"value": "Wed, 11 Sep 2024 08:52:01 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"ticker\": \"IRIS\",\n        \"address\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n        \"current_block\": 26591691,\n        \"balance\": {\n            \"spendable\": \"23.336616\",\n            \"unspendable\": \"0\"\n        },\n        \"tokens_balances\": {}\n    },\n    \"id\": null\n}"
										},
										{
											"name": "v2.2.0+",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n  {\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n      \"ticker\": \"IRIS\",\r\n      \"tokens_params\": [\r\n        {\r\n          \"ticker\": \"ATOM-IBC_IRIS\"\r\n        }\r\n      ],\r\n      \"nodes\": [\r\n          {\r\n              \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\r\n              \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\r\n              \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\r\n              \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\r\n          },\r\n          {\r\n              \"url\": \"https://rpc.irishub-1.irisnet.org\",\r\n              \"komodo_proxy\": false\r\n          }\r\n      ]\r\n    }\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "265"
												},
												{
													"key": "date",
													"value": "Wed, 11 Sep 2024 09:23:10 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"ticker\": \"IRIS\",\n        \"address\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n        \"current_block\": 26591996,\n        \"balance\": {\n            \"spendable\": \"23.336616\",\n            \"unspendable\": \"0\"\n        },\n        \"tokens_balances\": {\n            \"ATOM-IBC_IRIS\": {\n                \"spendable\": \"0.028306\",\n                \"unspendable\": \"0\"\n            }\n        }\n    },\n    \"id\": null\n}"
										},
										{
											"name": "<= v2.1.0",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n  {\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n      \"ticker\": \"IRIS\",\r\n      \"tokens_params\": [\r\n        {\r\n          \"ticker\": \"ATOM-IBC_IRIS\"\r\n        }\r\n      ],\r\n      \"rpc_urls\": [\r\n          \"https://iris-rpc.alpha.komodo.earth/\",\r\n          \"https://rpc.irishub-1.irisnet.org\"\r\n      ]\r\n    }\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "265"
												},
												{
													"key": "date",
													"value": "Wed, 11 Sep 2024 09:26:35 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"ticker\": \"IRIS\",\n        \"address\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n        \"current_block\": 26592029,\n        \"balance\": {\n            \"spendable\": \"23.336616\",\n            \"unspendable\": \"0\"\n        },\n        \"tokens_balances\": {\n            \"ATOM-IBC_IRIS\": {\n                \"spendable\": \"0.028306\",\n                \"unspendable\": \"0\"\n            }\n        }\n    },\n    \"id\": null\n}"
										},
										{
											"name": "enable_tendermint_with_assets",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n  {\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n      \"ticker\": \"IRIS\",\r\n      \"tokens_params\": [\r\n        {\r\n          \"ticker\": \"ATOM-IBC_IRIS\"\r\n        }\r\n      ],\r\n      \"nodes\": [\r\n          {\r\n              \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\r\n              \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\r\n              \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\r\n              \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\r\n          },\r\n          {\r\n              \"url\": \"https://rpc.irishub-1.irisnet.org\",\r\n              \"komodo_proxy\": false\r\n          }\r\n      ]\r\n    }\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "190"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 06:35:42 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"IRIS\",\n    \"error_path\": \"platform_coin_with_tokens\",\n    \"error_trace\": \"platform_coin_with_tokens:447]\",\n    \"error_type\": \"PlatformIsAlreadyActivated\",\n    \"error_data\": \"IRIS\",\n    \"id\": null\n}"
										},
										{
											"name": "Activate ATOM",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"ATOM\",\r\n        \"tx_history\": true,\r\n        \"get_balances\": true,\r\n        \"nodes\": [\r\n            {\r\n                \"url\": \"https://cosmos-rpc.alpha.komodo.earth/\",\r\n                \"api_url\": \"https://cosmos-api.alpha.komodo.earth/\",\r\n                \"grpc_url\": \"https://cosmos-grpc.alpha.komodo.earth/\",\r\n                \"ws_url\": \"wss://cosmos-rpc.alpha.komodo.earth/websocket\"\r\n            },\r\n            {\r\n                \"url\": \"https://cosmoshub.rpc.stakin-nodes.com/\"\r\n            }\r\n        ],\r\n        \"tokens_params\": []\r\n    }\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "209"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 08:21:46 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"ticker\": \"ATOM\",\n        \"address\": \"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\",\n        \"current_block\": 22148347,\n        \"balance\": {\n            \"spendable\": \"1.003381\",\n            \"unspendable\": \"0\"\n        },\n        \"tokens_balances\": {}\n    },\n    \"id\": null\n}"
										},
										{
											"name": "Activate OSMO",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable_tendermint_with_assets\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"OSMO\",\r\n        \"tx_history\": true,\r\n        \"get_balances\": true,\r\n        \"nodes\": [\r\n            {\r\n                \"url\": \"https://rpc.osmosis.zone/\"\r\n            },\r\n            {\r\n                \"url\": \"https://osmosis.rpc.stakin-nodes.com\"\r\n            },\r\n            {\r\n                \"url\": \"https://rpc-osmosis-ia.cosmosia.notional.ventures/\"\r\n            },\r\n            {\r\n                \"url\": \"https://osmosis-rpc.alpha.komodo.earth/\",\r\n                \"api_url\": \"https://osmosis-api.alpha.komodo.earth/\",\r\n                \"grpc_url\": \"https://osmosis-grpc.alpha.komodo.earth/\",\r\n                \"ws_url\": \"wss://osmosis-rpc.alpha.komodo.earth/websocket\"\r\n            }\r\n        ],\r\n        \"tokens_params\": []\r\n    }\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "207"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 08:43:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"ticker\": \"OSMO\",\n        \"address\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\n        \"current_block\": 20733754,\n        \"balance\": {\n            \"spendable\": \"7.994016\",\n            \"unspendable\": \"0\"\n        },\n        \"tokens_balances\": {}\n    },\n    \"id\": null\n}"
										}
									]
								}
							]
						},
						{
							"name": "SIA",
							"item": [
								{
									"name": "Activate TSIA",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"enable_sia\",\n    \"params\": {\n        \"ticker\": \"TSIA\",\n        \"activation_params\": {\n            \"client_conf\": {\n                \"server_url\": \"https://api.siascan.com/anagami/wallet/\",\n                \"password\": \"dummy\"\n            }\n        }\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Activate TSIA",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"enable_sia\",\n    \"params\": {\n        \"ticker\": \"TSIA\",\n        \"activation_params\": {\n            \"client_conf\": {\n                \"server_url\": \"https://api.siascan.com/anagami/wallet/\",\n                \"password\": \"dummy\"\n            }\n        }\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "48"
												},
												{
													"key": "date",
													"value": "Fri, 01 Nov 2024 03:49:58 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"task_id\":0},\"id\":null}"
										}
									]
								},
								{
									"name": "Activate TSIA status",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_sia::status\",\n    \"params\": {\n        \"task_id\": 0\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Activate TSIA status",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::enable_sia::status\",\n    \"params\": {\n        \"task_id\": 0\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "332"
												},
												{
													"key": "date",
													"value": "Fri, 01 Nov 2024 03:50:14 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"status\":\"Ok\",\"details\":{\"ticker\":\"TSIA\",\"current_block\":22780,\"wallet_balance\":{\"wallet_type\":\"Iguana\",\"address\":\"addr:c67d77a585c13727dbba57cfc115995beb9b8737e9a8cb7bb0aa208744e646cdc0acc9c9fce2\",\"balance\":{\"spendable\":\"0.000000000000000000000000\",\"unspendable\":\"0.000000000000000000000000\"}}}},\"id\":null}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Non Fungible Tokens",
					"item": [
						{
							"name": "get_nft_list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"chains\": [\n            \"POLYGON\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts)"
							},
							"response": [
								{
									"name": "Example with optional limit & page_number params",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"chains\": [\n        \"BSC\",\n        \"POLYGON\"\n      ],\n      \"limit\": 1,\n      \"page_number\": 2\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										},
										"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts)"
									},
									"_postman_previewlanguage": "JSON",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Example with spam protection",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_nft_list\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"chains\": [\n            \"BSC\",\n            \"POLYGON\"\n        ],\n        \"protect_from_spam\": true,\n        \"filters\": {\n            \"exclude_spam\": true,\n            \"exclude_phishing\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										},
										"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nfts)"
									},
									"_postman_previewlanguage": "JSON",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get_nft_transfers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_transfers\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\"\n    ],\n    \"max\": true,\n    \"filters\": {\n      \"send\": true,\n      \"from_date\": 1690890685\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nft-transfers](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-a-list-of-nft-transfers)"
							},
							"response": []
						},
						{
							"name": "get_nft_metadata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n    \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\",\n    \"chain\": \"POLYGON\"\n  }\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-nft-metadata](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#get-nft-metadata)"
							},
							"response": []
						},
						{
							"name": "refresh_nft_metadata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"refresh_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff\",\n    \"token_id\": \"5\",\n    \"chain\": \"POLYGON\",\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#refresh-nft-metadata](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#refresh-nft-metadata)"
							},
							"response": []
						},
						{
							"name": "update_nft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\"\n    ],\n    \"proxy_auth\": false,\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "DevDocs Link: [https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/](https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/)"
							},
							"response": [
								{
									"name": "update_nft",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\",\n      \"BSC\"\n    ],\n    \"proxy_auth\": false,\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Tue, 27 Aug 2024 04:49:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								}
							]
						},
						{
							"name": "withdraw_nft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc721\",\n    \"withdraw_data\": {\n        \"chain\": \"POLYGON\",\n        \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\",\n        \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\n        \"token_id\": \"1\"\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#withdraw-nfts](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#withdraw-nfts)"
							},
							"response": []
						},
						{
							"name": "withdraw_nft (erc1155)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc1155\",\n    \"withdraw_data\": {\n      \"chain\": \"POLYGON\",\n      \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\",\n      \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n      \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\",\n      \"amount\": \"1\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "[https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#erc-1155-withdraw-example](https://nft-methods.komodo-docs-revamp-2023.pages.dev/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/#erc-1155-withdraw-example)"
							},
							"response": [
								{
									"name": "erc1155",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"withdraw_type\": {\n      \"type\": \"withdraw_erc721\",\n      \"withdraw_data\": {\n        \"chain\": \"BSC\",\n        \"to\": \"0x6FAD0eC6bb76914b2a2a800686acc22970645820\",\n        \"token_address\": \"0xfd913a305d70a60aac4faac70c739563738e1f81\",\n        \"token_id\": \"214300044414\"\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "clear_nft_db",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userpass\", pm.environment.get(\"userpass\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"clear_all\": true,\n    \"chains\": [\"POLYGON\", \"FANTOM\", \"ETH\", \"BSC\", \"AVALANCHE\"]\n  }\n}\n",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								},
								"description": "DevDocs Link: https://komodoplatform.com/en/docs/komodo-defi-framework/api/v20/non_fungible_tokens/clear_nft_db/"
							},
							"response": [
								{
									"name": "clear_nft_db (clear all)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"clear_all\": true\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Fri, 23 Aug 2024 09:25:32 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								},
								{
									"name": "clear_nft_db (by chains)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\"BSC\"]\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "39"
										},
										{
											"key": "date",
											"value": "Fri, 23 Aug 2024 09:26:31 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":null,\"id\":null}"
								}
							]
						},
						{
							"name": "enable_nft",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "TokenIsAlreadyActivated",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "184"
										},
										{
											"key": "date",
											"value": "Fri, 06 Sep 2024 14:36:46 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Token NFT_MATIC is already activated\",\"error_path\":\"token\",\"error_trace\":\"token:121]\",\"error_type\":\"TokenIsAlreadyActivated\",\"error_data\":\"NFT_MATIC\",\"id\":null}"
								},
								{
									"name": "TokenConfigIsNotFound",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATICC\",\n    \"activation_params\": {\n      \"provider\":{\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"proxy_auth\": true\n        }\n      }\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "203"
										},
										{
											"key": "date",
											"value": "Fri, 06 Sep 2024 14:39:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Token NFT_MATICC config is not found\",\"error_path\":\"token.prelude\",\"error_trace\":\"token:124] prelude:79]\",\"error_type\":\"TokenConfigIsNotFound\",\"error_data\":\"NFT_MATICC\",\"id\":null}"
								}
							]
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "HD Wallet",
							"item": [
								{
									"name": "account_balance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"account_balance\",\r\n    \"params\": {\r\n        \"coin\": \"KMD\",\r\n        \"account_index\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: Not in HD mode",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"account_balance\",\r\n    \"params\": {\r\n        \"coin\": \"KMD\",\r\n        \"account_index\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "242"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:15:44 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Coin is expected to be activated with the HD wallet derivation method\",\n    \"error_path\": \"account_balance.lp_coins\",\n    \"error_trace\": \"account_balance:94] lp_coins:4128]\",\n    \"error_type\": \"CoinIsActivatedNotWithHDWallet\",\n    \"id\": null\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"account_balance\",\r\n    \"params\": {\r\n        \"coin\": \"KMD\",\r\n        \"account_index\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "406"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:19:58 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"account_index\": 0,\n        \"derivation_path\": \"m/44'/141'/0'\",\n        \"addresses\": [\n            {\n                \"address\": \"RMC1cWXngQf2117apEKoLh3x27NoG88yzd\",\n                \"derivation_path\": \"m/44'/141'/0'/0/0\",\n                \"chain\": \"External\",\n                \"balance\": {\n                    \"KMD\": {\n                        \"spendable\": \"20\",\n                        \"unspendable\": \"0\"\n                    }\n                }\n            }\n        ],\n        \"page_balance\": {\n            \"KMD\": {\n                \"spendable\": \"20\",\n                \"unspendable\": \"0\"\n            }\n        },\n        \"limit\": 10,\n        \"skipped\": 0,\n        \"total\": 1,\n        \"total_pages\": 1,\n        \"paging_options\": {\n            \"PageNumber\": 1\n        }\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "get_new_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_new_address\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"account_id\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"gap_limit\": 20 // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::account_balance::init",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::account_balance::init\",\n    \"params\": {\n        \"coin\": \"KMD\",\n        \"account_index\": 0\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"task::account_balance::init\",\n    \"params\": {\n        \"coin\": \"KMD\",\n        \"account_index\": 0\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "48"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:16:22 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"task_id\": 1\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::account_balance::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::account_balance::status\",\r\n    \"params\": {\r\n        \"task_id\": 1\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: CoinIsActivatedNotWithHDWallet",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::account_balance::status\",\r\n    \"params\": {\r\n        \"task_id\": 1\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "293"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:16:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"status\": \"Error\",\n        \"details\": {\n            \"error\": \"Coin is expected to be activated with the HD wallet derivation method\",\n            \"error_path\": \"init_account_balance.lp_coins\",\n            \"error_trace\": \"init_account_balance:146] lp_coins:4128]\",\n            \"error_type\": \"CoinIsActivatedNotWithHDWallet\"\n        }\n    },\n    \"id\": null\n}"
										},
										{
											"name": "task::account_balance::status",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::account_balance::status\",\r\n    \"params\": {\r\n        \"task_id\": 1\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "350"
												},
												{
													"key": "date",
													"value": "Thu, 19 Dec 2024 04:20:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"status\": \"Ok\",\n        \"details\": {\n            \"account_index\": 0,\n            \"derivation_path\": \"m/44'/141'/0'\",\n            \"total_balance\": {\n                \"KMD\": {\n                    \"spendable\": \"20\",\n                    \"unspendable\": \"0\"\n                }\n            },\n            \"addresses\": [\n                {\n                    \"address\": \"RMC1cWXngQf2117apEKoLh3x27NoG88yzd\",\n                    \"derivation_path\": \"m/44'/141'/0'/0/0\",\n                    \"chain\": \"External\",\n                    \"balance\": {\n                        \"KMD\": {\n                            \"spendable\": \"20\",\n                            \"unspendable\": \"0\"\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::account_balance::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_z_coin::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "add_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\",\r\n        \"staking_details\": {\r\n            \"type\": \"Qtum\",\r\n            \"address\": \"qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE\"\r\n            // \"fee\": 10\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_staking_infos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_staking_infos\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Hardware Wallet",
							"item": [
								{
									"name": "task::create_new_account::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\"\r\n        // \"scan\": true\r\n        // \"gap_limit\": 20\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::create_new_account::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::create_new_account::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"account_index\": 0\r\n        // \"gap_limit\": 20\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::scan_for_new_addresses::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::scan_for_new_addresses::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::init\"\r\n    // \"params\": {\r\n    //     \"device_pubkey\": \"21605444b36ec72780bdf52a5ffbc18288893664\" // Accepted values: H160\r\n    // }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::init_trezor::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::init_trezor::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Withdraw",
							"item": [
								{
									"name": "withdraw",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"IRIS\",\r\n        \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\r\n        \"amount\": 0.1, // used only if: \"max\": false\r\n        \"memo\": \"In the blackest of your moments, wait with no fear.\",\r\n        \"fee\": {\r\n          \"type\": \"CosmosGas\",\r\n          \"gas_price\": 0.1,\r\n          \"gas_limit\": 1500000\r\n        }\r\n        // \"ibc_source_channel\": \"channel-141\",\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Withdraw DOC",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "992"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 08:15:47 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"tx_hex\":\"0400008085202f8901d775b576a35576bd471bdbba15943af15afec020ff682404f09f55f48bc8f5a6020000006a47304402203388339504aa6ca3c0d22c709bccad74a53728c52cda4af8544ed1a8e628207a0220728565f9456eb9a25a1ff1654287bff7e78c3079e7c172b9b865e1e49b463732012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff02a0061c06000000001976a9148d757e06a0bc7c8b5011bef06527c63104173c7688acc8da3108000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac33a3e266000000000000000000000000000000\",\"tx_hash\":\"9fce660870a65d214b8943fee03ca91bca5813e18cc0a70b7222efb414be49e3\",\"from\":[\"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"],\"to\":[\"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\"],\"total_amount\":\"2.39986\",\"spent_by_me\":\"2.39986\",\"received_by_me\":\"1.37485\",\"my_balance_change\":\"-1.02501\",\"block_height\":0,\"timestamp\":1726128947,\"fee_details\":{\"type\":\"Utxo\",\"coin\":\"DOC\",\"amount\":\"0.00001\"},\"coin\":\"DOC\",\"internal_id\":\"\",\"transaction_type\":\"StandardTransfer\",\"memo\":null},\"id\":null}"
										},
										{
											"name": "Error: IBCChannelCouldNotFound",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"ATOM\",\r\n        \"to\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\r\n        \"amount\": 0.01 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "359"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 08:22:12 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"IBC channel could not found for 'iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k' address. Consider providing it manually with 'ibc_source_channel' in the request.\",\n    \"error_path\": \"tendermint_coin\",\n    \"error_trace\": \"tendermint_coin:724]\",\n    \"error_type\": \"IBCChannelCouldNotFound\",\n    \"error_data\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n    \"id\": null\n}"
										},
										{
											"name": "Error: Transport",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"ATOM\",\r\n        \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\r\n        \"amount\": 0.01 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "781"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 08:27:18 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"Transport error: Could not read gas_info. Error code: 6 Message: rpc error: code = Unknown desc = failed to execute message; message index: 0: channel is not OPEN (got STATE_TRYOPEN): invalid channel state [cosmos/ibc-go/v8@v8.4.0/modules/core/04-channel/keeper/packet.go:38] with gas used: '81702': unknown request\",\"error_path\":\"tendermint_coin\",\"error_trace\":\"tendermint_coin:2240] tendermint_coin:1056]\",\"error_type\":\"Transport\",\"error_data\":\"Could not read gas_info. Error code: 6 Message: rpc error: code = Unknown desc = failed to execute message; message index: 0: channel is not OPEN (got STATE_TRYOPEN): invalid channel state [cosmos/ibc-go/v8@v8.4.0/modules/core/04-channel/keeper/packet.go:38] with gas used: '81702': unknown request\",\"id\":null}"
										},
										{
											"name": "IBC withdraw (ATOM to ATOM-IBC_OSMO)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"ATOM\",\r\n        \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\r\n        \"amount\": 0.1, // used only if: \"max\": false\r\n        \"memo\": \"In the blackest of your moments, wait with no fear.\",\r\n        \"ibc_source_channel\": \"channel-141\",\r\n        \"fee\": {\r\n          \"type\": \"CosmosGas\",\r\n          \"gas_price\": 0.1,\r\n          \"gas_limit\": 1500000\r\n        }\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1537"
												},
												{
													"key": "date",
													"value": "Thu, 12 Sep 2024 11:11:58 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"tx_hex\": \"0af9010abc010a292f6962632e6170706c69636174696f6e732e7472616e736665722e76312e4d73675472616e73666572128e010a087472616e73666572120b6368616e6e656c2d3134311a0f0a057561746f6d1206313030303030222d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a617377736163382a2b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a6163347264773438a6c5b9a089f29efa171233496e2074686520626c61636b657374206f6620796f7572206d6f6d656e74732c20776169742077697468206e6f20666561722e188df8c70a12680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801180b12140a0e0a057561746f6d1205313733353910e0c65b1a40042c4fa45d77405ee94e737a000b146f5019137d5a2d3275849c9ad66dd8ef1d0f087fb584f34b1ebcf7989e41bc0675e96c83f0eec4ffe355e078b6615d7a72\",\n        \"tx_hash\": \"06174E488B7BBC35180E841F2D170327BB7DE0A291CA69050D81F82A7CF103CB\",\n        \"from\": [\n            \"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"\n        ],\n        \"to\": [\n            \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\"\n        ],\n        \"total_amount\": \"0.1173590000000000\",\n        \"spent_by_me\": \"0.1173590000000000\",\n        \"received_by_me\": \"0\",\n        \"my_balance_change\": \"-0.1173590000000000\",\n        \"block_height\": 0,\n        \"timestamp\": 0,\n        \"fee_details\": {\n            \"type\": \"Tendermint\",\n            \"coin\": \"ATOM\",\n            \"amount\": \"0.017359\",\n            \"gas_limit\": 1500000\n        },\n        \"coin\": \"ATOM\",\n        \"internal_id\": \"06174e488b7bbc35180e841f2d170327bb7de0a291ca69050d81f82a7cf103cb\",\n        \"transaction_type\": \"TendermintIBCTransfer\",\n        \"memo\": \"In the blackest of your moments, wait with no fear.\"\n    },\n    \"id\": null\n}"
										},
										{
											"name": "IBC withdraw (ATOM-IBC_OSMO to ATOM)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"ATOM-IBC_OSMO\",\r\n        \"to\": \"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\",\r\n        \"amount\": 0.1, // used only if: \"max\": false\r\n        \"memo\": \"We are more often frightened than hurt; and we suffer more from imagination than from reality.\",\r\n        \"ibc_source_channel\": \"channel-6\",\r\n        \"fee\": {\r\n          \"type\": \"CosmosGas\",\r\n          \"gas_price\": 0.1,\r\n          \"gas_limit\": 1500000\r\n        }\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1668"
												},
												{
													"key": "date",
													"value": "Sat, 14 Sep 2024 06:23:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"tx_hex\": \"0ab6020af9010a292f6962632e6170706c69636174696f6e732e7472616e736665722e76312e4d73675472616e7366657212cb010a087472616e7366657212096368616e6e656c2d361a4e0a446962632f323733393446423039324432454343443536313233433734463336453443314639323630303143454144413943413937454136323242323546343145354542321206313030303030222b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a616334726477342a2d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a6173777361633838aaa9bcb0e99ec2fa171233496e2074686520626c61636b657374206f6620796f7572206d6f6d656e74732c20776169742077697468206e6f20666561722e1883a8f70912680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801180a12140a0e0a05756f736d6f1205323431313710e0c65b1a408c67c0922e6a1a25e28947da857e12414777fe04a6365c8cf0a1f89d66b9a5342954c1ec3624a726c71d25c0c7acbf102a856f9e1d175e2abcf4acda55d17e68\",\n        \"tx_hash\": \"D8FE1961BD7EC2BF2CC1F5D2FD3DBF193C64CCBED46CC657E8A991CD8652B792\",\n        \"from\": [\n            \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\"\n        ],\n        \"to\": [\n            \"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"\n        ],\n        \"total_amount\": \"0.1000000000000000\",\n        \"spent_by_me\": \"0.1000000000000000\",\n        \"received_by_me\": \"0\",\n        \"my_balance_change\": \"-0.1000000000000000\",\n        \"block_height\": 0,\n        \"timestamp\": 0,\n        \"fee_details\": {\n            \"type\": \"Tendermint\",\n            \"coin\": \"OSMO\",\n            \"amount\": \"0.024117\",\n            \"gas_limit\": 1500000\n        },\n        \"coin\": \"ATOM-IBC_OSMO\",\n        \"internal_id\": \"d8fe1961bd7ec2bf2cc1f5d2fd3dbf193c64ccbed46cc657e8a991cd8652b792\",\n        \"transaction_type\": \"TendermintIBCTransfer\",\n        \"memo\": \"In the blackest of your moments, wait with no fear.\"\n    },\n    \"id\": null\n}"
										},
										{
											"name": "IRIS to IRIS-IBC_OSMO",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"IRIS\",\r\n        \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\r\n        \"amount\": 0.1, // used only if: \"max\": false\r\n        \"memo\": \"We are more often frightened than hurt; and we suffer more from imagination than from reality.\",\r\n        \"ibc_source_channel\": \"channel-3\",\r\n        \"fee\": {\r\n          \"type\": \"CosmosGas\",\r\n          \"gas_price\": 0.1,\r\n          \"gas_limit\": 1500000\r\n        }\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1653"
												},
												{
													"key": "date",
													"value": "Mon, 16 Sep 2024 02:18:06 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"tx_hex\":\"0a9f020ab7010a292f6962632e6170706c69636174696f6e732e7472616e736665722e76312e4d73675472616e736665721289010a087472616e7366657212096368616e6e656c2d331a0f0a0575697269731206313030303030222a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b2a2b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a6163347264773438eed285fe8b98e6fa17125e576520617265206d6f7265206f6674656e20667269676874656e6564207468616e20687572743b20616e6420776520737566666572206d6f72652066726f6d20696d6167696e6174696f6e207468616e2066726f6d207265616c6974792e18e28cdb0c12680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801185d12140a0e0a0575697269731205313038323110e0c65b1a4078d2d1360fc0b091cb34c07f1beec957f88324688210852832ad121d1de7a3c737279b55783f10522733becc79ecdb5db565bd8626a8109a3be62196268d2ff9\",\"tx_hash\":\"D87E4345B9C2091E7670EB1D527970040AA725385571D7F85711C282C6D468D9\",\"from\":[\"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\"],\"to\":[\"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\"],\"total_amount\":\"0.1108210000000000\",\"spent_by_me\":\"0.1108210000000000\",\"received_by_me\":\"0\",\"my_balance_change\":\"-0.1108210000000000\",\"block_height\":0,\"timestamp\":0,\"fee_details\":{\"type\":\"Tendermint\",\"coin\":\"IRIS\",\"amount\":\"0.010821\",\"gas_limit\":1500000},\"coin\":\"IRIS\",\"internal_id\":\"d87e4345b9c2091e7670eb1d527970040aa725385571d7f85711c282c6d468d9\",\"transaction_type\":\"TendermintIBCTransfer\",\"memo\":\"We are more often frightened than hurt; and we suffer more from imagination than from reality.\"},\"id\":null}"
										},
										{
											"name": "Withdraw SIA",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"TSIA\",\r\n        \"to\": \"addr:f98cd31f1f37b258b5bd42b093c6b522698b4dee2f9acee2c75321a18a2d3528dcbb5c24cec8\",\r\n        \"amount\": 10000 // used only if: \"max\": false\r\n        //\"memo\": \"In the blackest of your moments, wait with no fear.\",\r\n        //\"fee\": {\r\n        //  \"type\": \"CosmosGas\",\r\n        //  \"gas_price\": 0.1,\r\n        //  \"gas_limit\": 1500000\r\n        //}\r\n        // \"ibc_source_channel\": \"channel-141\",\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "2567"
												},
												{
													"key": "date",
													"value": "Mon, 28 Oct 2024 14:34:34 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"tx_json\": {\n            \"siacoinInputs\": [\n                {\n                    \"parent\": {\n                        \"id\": \"h:ac0ba05f8777ebcc0a2981dd31367a7184e9155cf5a19db165cfcac7ba37c520\",\n                        \"leafIndex\": 35514,\n                        \"merkleProof\": [\n                            \"h:8cd35fe8f44230e2968ee3b72d7ec1995201db7b895ccb8d0415c7ed991b3f3f\",\n                            \"h:4d891b3eb03d00cd85c268dfe1470c8057d3705b1d396b3741eb1e50ad0df65c\",\n                            \"h:fb9702701e1443c8fddf029f0969adcb7492b1b273ec283e894afed55d803215\",\n                            \"h:79ab8a93129991e87a0b8b36255c68aa4389618196b64181c74749a5c3bb5a47\",\n                            \"h:0281315992e2ea4ca95ff3f41b2496c26b70e3e907e56cb2d49203b91f0e3266\",\n                            \"h:436a766658153eeccb1a9c6c59c369090ffa2749a2fd9d3f20007942f9e4dc47\",\n                            \"h:19128b239db22df5e8c0c9082c66dbaa0b54d017bea1b9cb7809c33c9b0e71ca\",\n                            \"h:945de7689978f393d34e395b6c28220efd64269fdcf4a59a1070e0a3581679ef\",\n                            \"h:69429e9433d2b8266645e4a322e6938f776a09db26edb20283914c06fd3f8fe8\",\n                            \"h:9c8b56f9c3c7c26c3b60f6449e1501f52b75d74dc82bed7fabbc973b0fff99f5\",\n                            \"h:be8364e9447e3bf70dd8f0240e37507ef1cb29b3d2c9cbe8a725fe830ab45a33\",\n                            \"h:28fd31d0444b9be59e3dc324efb7a552e6fb1db87f4fe879ef047bcaf45ca118\",\n                            \"h:137d8b1589543204223072ad2a0a5b8283ea05fcb680b05e0c8d399e5336e1e0\"\n                        ],\n                        \"siacoinOutput\": {\n                            \"value\": \"1000000000000000000000000000000000\",\n                            \"address\": \"addr:5e0dca11b958bd1b621ecb3a3a5c9122b058802b90b3c739e8a0ec596f6f25138eb9c0ab59a4\"\n                        },\n                        \"maturityHeight\": 0\n                    },\n                    \"satisfiedPolicy\": {\n                        \"policy\": {\n                            \"type\": \"pk\",\n                            \"policy\": \"ed25519:7470b18df7faf8842e4550cdb993b879cad60e355cbce71bb095e4444fbc2ebb\"\n                        },\n                        \"signatures\": [\n                            \"sig:6b849c6421fe6802123a6d7a87c3c39e3c8d7345d57b08f1f81631b8e3035bccf17ef232a59681a982f557f8031c608c6208e226f3d64c3a850cc226a8a41a01\"\n                        ]\n                    }\n                }\n            ],\n            \"siacoinOutputs\": [\n                {\n                    \"value\": \"10000000000000000000000000000\",\n                    \"address\": \"addr:f98cd31f1f37b258b5bd42b093c6b522698b4dee2f9acee2c75321a18a2d3528dcbb5c24cec8\"\n                },\n                {\n                    \"value\": \"999989999999990000000000000000000\",\n                    \"address\": \"addr:5e0dca11b958bd1b621ecb3a3a5c9122b058802b90b3c739e8a0ec596f6f25138eb9c0ab59a4\"\n                }\n            ],\n            \"minerFee\": \"10000000000000000000\"\n        },\n        \"tx_hash\": \"h:df3f8a11fbace9a9fa3f3004b7890e6ac5fa4fc83052a47b006a6daf1a642048\",\n        \"from\": [\n            \"addr:5e0dca11b958bd1b621ecb3a3a5c9122b058802b90b3c739e8a0ec596f6f25138eb9c0ab59a4\"\n        ],\n        \"to\": [\n            \"addr:f98cd31f1f37b258b5bd42b093c6b522698b4dee2f9acee2c75321a18a2d3528dcbb5c24cec8\"\n        ],\n        \"total_amount\": \"1000000000.000000000000000000000000\",\n        \"spent_by_me\": \"1000000000.000000000000000000000000\",\n        \"received_by_me\": \"999989999.999990000000000000000000\",\n        \"my_balance_change\": \"-10000.000010000000000000000000\",\n        \"block_height\": 0,\n        \"timestamp\": 1730126075,\n        \"fee_details\": {\n            \"type\": \"Sia\",\n            \"coin\": \"TSIA\",\n            \"policy\": \"Fixed\",\n            \"total_amount\": \"0.000010000000000000000000\"\n        },\n        \"coin\": \"TSIA\",\n        \"internal_id\": \"\",\n        \"transaction_type\": \"SiaV2Transaction\",\n        \"memo\": null\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "task::withdraw::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::init\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n        // \"user_action\": {\r\n        //     \"action_type\": \"TrezorPassphrase\",\r\n        //     \"passphrase\": \"Any passphrase here\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::withdraw::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::withdraw::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_raw_transaction\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"tx_hash\": \"182d61ccc0e41d91ae8b2f497bf576a864a5b06e52af9ac0113d3e0bfea54be3\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "error: tx not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_raw_transaction\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"tx_hash\": \"8c34946c0894b8520a84d6182f5962a173e0995b4a4fe1b40a867d8a9cd5e0c1\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Gateway",
									"code": 502,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "1071"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 09:03:30 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Transport error: rpc_clients:2333] JsonRpcError { client_info: \\\"coin: DOC\\\", request: JsonRpcRequest { jsonrpc: \\\"2.0\\\", id: \\\"20\\\", method: \\\"blockchain.transaction.get\\\", params: [String(\\\"8c34946c0894b8520a84d6182f5962a173e0995b4a4fe1b40a867d8a9cd5e0c1\\\"), Bool(false)] }, error: Response(electrum2.cipig.net:10020, Object({\\\"code\\\": Number(2), \\\"message\\\": String(\\\"daemon error: DaemonError({'code': -5, 'message': 'No information available about transaction'})\\\")})) }\",\"error_path\":\"utxo_common\",\"error_trace\":\"utxo_common:2976]\",\"error_type\":\"Transport\",\"error_data\":\"rpc_clients:2333] JsonRpcError { client_info: \\\"coin: DOC\\\", request: JsonRpcRequest { jsonrpc: \\\"2.0\\\", id: \\\"20\\\", method: \\\"blockchain.transaction.get\\\", params: [String(\\\"8c34946c0894b8520a84d6182f5962a173e0995b4a4fe1b40a867d8a9cd5e0c1\\\"), Bool(false)] }, error: Response(electrum2.cipig.net:10020, Object({\\\"code\\\": Number(2), \\\"message\\\": String(\\\"daemon error: DaemonError({'code': -5, 'message': 'No information available about transaction'})\\\")})) }\",\"id\":null}"
								},
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_raw_transaction\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"tx_hash\": \"182d61ccc0e41d91ae8b2f497bf576a864a5b06e52af9ac0113d3e0bfea54be3\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "1084"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 09:05:04 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"tx_hex\":\"0400008085202f8901eefff54085e1ef95ad8ab6d88aecf777212d651589f5ec0c9d7d7460d5c0a40f070000006a4730440220352ca7a6a45612a73a417512c0c92f4ea1c225a304d21ddaae58190c6ff6538c02205d7e38866d3cb71313a5a97f4eedcd5d7ee27b300e443aefca95ee9f8f5b90d00121020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dffffffff0810270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac10270000000000002321020c63078b5f5d27183de6f2bbae9bfe3fc57e017faf89b7d566bb947a92a2e40dac007fe3c4050000001976a91403990619a76b0aa5a4a664bcf820fd8641c32ca088ac00000000000000000000000000000000000000\"},\"id\":null}"
								}
							]
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"my_tx_history\",\r\n    \"params\": {\r\n        \"coin\": \"tBCH\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     // \"FromId\": null, // Accepted values: Strings\r\n        //     \"PageNumber\": 1 // used only if: \"from_id\": null\r\n        // },\r\n        // \"target\": {\r\n        //     \"type\": \"iguana\"\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"account_id\",\r\n        //     \"account_id\": 0 // Accepted values: Integer\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"address_id\",\r\n        //     \"account_id\": 0, // Accepted values: Integer\r\n        //     \"chain\": \"External\", // Accepted values: \"External\" and \"Internal\"\r\n        //     \"address_id\": 0 // Accepted values: Integer\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "my_tx_history",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"my_tx_history\",\r\n    \"params\": {\r\n        \"coin\": \"ATOM\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     // \"FromId\": null, // Accepted values: Strings\r\n        //     \"PageNumber\": 1 // used only if: \"from_id\": null\r\n        // },\r\n        // \"target\": {\r\n        //     \"type\": \"iguana\"\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"account_id\",\r\n        //     \"account_id\": 0 // Accepted values: Integer\r\n        // }\r\n        // \"target\": {\r\n        //     \"type\": \"address_id\",\r\n        //     \"account_id\": 0, // Accepted values: Integer\r\n        //     \"chain\": \"External\", // Accepted values: \"External\" and \"Internal\"\r\n        //     \"address_id\": 0 // Accepted values: Integer\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "3792"
										},
										{
											"key": "date",
											"value": "Fri, 13 Sep 2024 16:34:28 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"coin\":\"ATOM\",\"target\":{\"type\":\"iguana\"},\"current_block\":22167924,\"transactions\":[{\"tx_hex\":\"0a087472616e73666572120b6368616e6e656c2d3134311a0f0a057561746f6d1206313030303030222d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a617377736163382a2b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a616334726477343880f195fdd1e0b6fa17\",\"tx_hash\":\"5BD307E06550962031AAF922C09457729BA74B895D43410409506FE758C241BA\",\"from\":[\"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"],\"to\":[\"cosmos1x54ltnyg88k0ejmk8ytwrhd3ltm84xehrnlslf\"],\"total_amount\":\"0.143433\",\"spent_by_me\":\"0.143433\",\"received_by_me\":\"0\",\"my_balance_change\":\"-0.143433\",\"block_height\":22167793,\"timestamp\":1726244472,\"fee_details\":{\"type\":\"Tendermint\",\"coin\":\"ATOM\",\"amount\":\"0.043433\",\"gas_limit\":125000},\"coin\":\"ATOM\",\"internal_id\":\"3232394641413133303236393035353630453730334442350000000000000001\",\"transaction_type\":\"StandardTransfer\",\"memo\":\"If a man knows not which port he sails, no wind is favorable.\",\"confirmations\":132},{\"tx_hex\":\"0a2d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a61737773616338122d636f736d6f73316530727838376d646a37397a656a65777563346a6737716c39756432323836676c37736b746d1a0f0a057561746f6d1206313030303030\",\"tx_hash\":\"368800F0D6C86A2CD64469243CA673AB81866195F3F4D166D1292EBB5458735B\",\"from\":[\"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"],\"to\":[\"cosmos1e0rx87mdj79zejewuc4jg7ql9ud2286gl7sktm\"],\"total_amount\":\"0.127579\",\"spent_by_me\":\"0.127579\",\"received_by_me\":\"0\",\"my_balance_change\":\"-0.127579\",\"block_height\":22149297,\"timestamp\":1726134970,\"fee_details\":{\"type\":\"Tendermint\",\"coin\":\"ATOM\",\"amount\":\"0.027579\",\"gas_limit\":125000},\"coin\":\"ATOM\",\"internal_id\":\"3432393634343644433241363843364430463030383836330000000000000001\",\"transaction_type\":\"StandardTransfer\",\"memo\":\"Bu ne perhiz, bu ne lahana turşusu\",\"confirmations\":18628},{\"tx_hex\":\"0a2d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a61737773616338122d636f736d6f73316530727838376d646a37397a656a65777563346a6737716c39756432323836676c37736b746d1a0f0a057561746f6d1206313030303030\",\"tx_hash\":\"F2377B353A22355A638D797B580648A2E3FD54D01867D1638D3754C6DBF2EF0A\",\"from\":[\"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"],\"to\":[\"cosmos1e0rx87mdj79zejewuc4jg7ql9ud2286gl7sktm\"],\"total_amount\":\"0.127579\",\"spent_by_me\":\"0.127579\",\"received_by_me\":\"0\",\"my_balance_change\":\"-0.127579\",\"block_height\":22149044,\"timestamp\":1726133457,\"fee_details\":{\"type\":\"Tendermint\",\"coin\":\"ATOM\",\"amount\":\"0.027579\",\"gas_limit\":125000},\"coin\":\"ATOM\",\"internal_id\":\"4237393744383336413535333232413335334237373332460000000000000001\",\"transaction_type\":\"StandardTransfer\",\"memo\":\"Bir Kahvenin Kirk Yil Hatiri Vardir\",\"confirmations\":18881},{\"tx_hex\":\"0a2d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a61737773616338122d636f736d6f73316a716b7935366e7671667033377a373530757665363235337866636d793470716734633767651a0f0a057561746f6d1206313430303030\",\"tx_hash\":\"60154244DDCB8462CCD80C9FB0E832D864F037EF818DAA1A728B4EBFFD1F3AA6\",\"from\":[\"cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8\"],\"to\":[\"cosmos1jqky56nvqfp37z750uve6253xfcmy4pqg4c7ge\"],\"total_amount\":\"0.146564\",\"spent_by_me\":\"0.146564\",\"received_by_me\":\"0\",\"my_balance_change\":\"-0.146564\",\"block_height\":22135950,\"timestamp\":1726055203,\"fee_details\":{\"type\":\"Tendermint\",\"coin\":\"ATOM\",\"amount\":\"0.006564\",\"gas_limit\":125000},\"coin\":\"ATOM\",\"internal_id\":\"4639433038444343323634384243444434343234353130360000000000000001\",\"transaction_type\":\"StandardTransfer\",\"memo\":\"Isteyenin bir yuzu kara, vermeyenin iki yuzu\",\"confirmations\":31975}],\"sync_status\":{\"state\":\"Finished\"},\"limit\":10,\"skipped\":0,\"total\":4,\"total_pages\":1,\"paging_options\":{\"PageNumber\":1}},\"id\":null}"
								}
							]
						},
						{
							"name": "sign_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"sign_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it.\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "sign_message",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"sign_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it.\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "139"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 08:58:05 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"signature\":\"H3wCe2BUiwtd23Ay6BovtdtSRKP2JKEUEi56zUfWeRFUQvGh6/dPOWaxqgUEsXP+LwwVfrQGV24kfbSssXGWw6w=\"},\"id\":null}"
								}
							]
						},
						{
							"name": "sign_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n  {\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"id\": 0,\r\n    \"method\": \"sign_raw_transaction\",\r\n    \"params\": {\r\n      \"coin\": \"MATIC\",\r\n      \"type\": \"ETH\",\r\n      \"tx\": {\r\n        \"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\",\r\n        \"value\": \"0.85\",\r\n        \"gas_limit\": \"21000\",\r\n        \"pay_for_gas\": {\r\n            \"tx_type\": \"Eip1559\",\r\n            \"max_fee_per_gas\": \"1234.567\",\r\n            \"max_priority_fee_per_gas\": \"1.2\"\r\n        }\r\n      }\r\n    }\r\n  }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Success: ETH/EVM",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n  {\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"id\": 0,\r\n    \"method\": \"sign_raw_transaction\",\r\n    \"params\": {\r\n      \"coin\": \"MATIC\",\r\n      \"type\": \"ETH\",\r\n      \"tx\": {\r\n        \"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\",\r\n        \"value\": \"0.85\",\r\n        \"gas_limit\": \"21000\",\r\n        \"pay_for_gas\": {\r\n            \"tx_type\": \"Eip1559\",\r\n            \"max_fee_per_gas\": \"1234.567\",\r\n            \"max_priority_fee_per_gas\": \"1.2\"\r\n        }\r\n      }\r\n    }\r\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "287"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 12:13:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"tx_hex\":\"02f8768189808447868c0086011f71ed6fc08302100094927dafdda16f1742befcbeae6798090354b294a9880bcbce7f1b15000080c001a0cd160bbf4aac7a9f1ac819305c58ac778afbb4df82fdb3f9ad3f7127b680c89aa07437537646a7e99a4a1e05854e0db699372a3ff4980d152fa950afeec4d3636c\"},\"id\":0}"
								},
								{
									"name": "Error: SigningError",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n  {\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"sign_raw_transaction\",\r\n    \"params\": {\r\n      \"coin\": \"KMD\",\r\n      \"type\": \"UTXO\",\r\n      \"tx\": {\r\n        \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\"\r\n      }\r\n    },\r\n    \"id\": 0\r\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "785"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 12:15:55 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Signing error: with_key_pair:114] P2PKH script 'OP_DUP\\nOP_HASH160\\nOP_PUSHBYTES_20 0xd64ad24e655ba7221ea51c7931aad5b98da77f3c\\nOP_EQUALVERIFY\\nOP_CHECKSIG\\n' built from input key pair doesn't match expected prev script 'OP_DUP\\nOP_HASH160\\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\\nOP_EQUALVERIFY\\nOP_CHECKSIG\\n'\",\"error_path\":\"utxo_common\",\"error_trace\":\"utxo_common:2835]\",\"error_type\":\"SigningError\",\"error_data\":\"with_key_pair:114] P2PKH script 'OP_DUP\\nOP_HASH160\\nOP_PUSHBYTES_20 0xd64ad24e655ba7221ea51c7931aad5b98da77f3c\\nOP_EQUALVERIFY\\nOP_CHECKSIG\\n' built from input key pair doesn't match expected prev script 'OP_DUP\\nOP_HASH160\\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\\nOP_EQUALVERIFY\\nOP_CHECKSIG\\n'\",\"id\":0}"
								}
							]
						},
						{
							"name": "verify_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it.\",\r\n        \"signature\": \"H3wCe2BUiwtd23Ay6BovtdtSRKP2JKEUEi56zUfWeRFUQvGh6/dPOWaxqgUEsXP+LwwVfrQGV24kfbSssXGWw6w=\",\r\n        \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "invalid (wrong address)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it.\",\r\n        \"signature\": \"H3wCe2BUiwtd23Ay6BovtdtSRKP2JKEUEi56zUfWeRFUQvGh6/dPOWaxqgUEsXP+LwwVfrQGV24kfbSssXGWw6w=\",\r\n        \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "53"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 08:59:28 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"is_valid\":false},\"id\":null}"
								},
								{
									"name": "successfully verified",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it.\",\r\n        \"signature\": \"H3wCe2BUiwtd23Ay6BovtdtSRKP2JKEUEi56zUfWeRFUQvGh6/dPOWaxqgUEsXP+LwwVfrQGV24kfbSssXGWw6w=\",\r\n        \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "52"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 09:00:11 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"is_valid\":true},\"id\":null}"
								},
								{
									"name": "invalid (wrong message)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"message\": \"Tomorrow owes you the sum of your yesterdays. No more than that. And no less.\",\r\n        \"signature\": \"H3wCe2BUiwtd23Ay6BovtdtSRKP2JKEUEi56zUfWeRFUQvGh6/dPOWaxqgUEsXP+LwwVfrQGV24kfbSssXGWw6w=\",\r\n        \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "53"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 09:01:32 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"is_valid\":false},\"id\":null}"
								}
							]
						},
						{
							"name": "get_wallet_names",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_wallet_names\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_wallet_names",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_wallet_names\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "128"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 09:28:27 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"wallet_names\":[\"Gringotts Retirement Fund\"],\"activated_wallet\":\"Gringotts Retirement Fund\"},\"id\":null}"
								}
							]
						},
						{
							"name": "get_mnemonic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_mnemonic\",\r\n    \"params\": {\r\n        \"format\": \"plaintext\" // `plaintext` or `encrypted`. If `plaintext`, `password` is required ,\r\n        // \"password\": \"password123\" // The password used to encrypt the passphrase when the wallet was created\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_mnemonic (encrypted)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_mnemonic\",\r\n    \"params\": {\r\n        \"format\": \"encrypted\" // `plaintext` or `encrypted`. If `plaintext`, `password` is required ,\r\n        // \"password\": \"password123\" // The password used to encrypt the passphrase when the wallet was created\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "528"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 09:28:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"format\": \"encrypted\",\n        \"encrypted_mnemonic_data\": {\n            \"encryption_algorithm\": \"AES256CBC\",\n            \"key_derivation_details\": {\n                \"Argon2\": {\n                    \"params\": {\n                        \"algorithm\": \"Argon2id\",\n                        \"version\": \"0x13\",\n                        \"m_cost\": 65536,\n                        \"t_cost\": 2,\n                        \"p_cost\": 1\n                    },\n                    \"salt_aes\": \"CqkfcntVxFJNXqOKPHaG8w\",\n                    \"salt_hmac\": \"i63qgwjc+3oWMuHWC2XSJA\"\n                }\n            },\n            \"iv\": \"mNjmbZLJqgLzulKFBDBuPA==\",\n            \"ciphertext\": \"tP2vF0hRhllW00pGvYiKysBI0vl3acLj+aoocBViTTByXCpjpkLuaMWqe0Vs02cb1wvgPsVqZkE4MPg4sCQxbd18iS7Er6+BbVY3HQ2LSig=\",\n            \"tag\": \"TwWXhIFQl1TSdR4cJpbkK2oNXd9zIEhJmO6pML1uc2E=\"\n        }\n    },\n    \"id\": null\n}"
								},
								{
									"name": "get_mnemonic (plaintext)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_mnemonic\",\r\n    \"params\": {\r\n        \"format\": \"plaintext\", // `plaintext` or `encrypted`. If `plaintext`, `password` is required ,\r\n        \"password\": \"RPC_CONTRoL<&>USERP@SSW0RD\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "139"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 09:32:26 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"format\": \"plaintext\",\n        \"mnemonic\": \"unique spy ugly child cup sad capital invest essay lunch doctor know\"\n    },\n    \"id\": null\n}"
								},
								{
									"name": "get_mnemonic",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_mnemonic\",\r\n    \"params\": {\r\n        \"format\": \"plaintext\", // `plaintext` or `encrypted`. If `plaintext`, `password` is required ,\r\n        \"password\": \"test\" // The password used to encrypt the passphrase when the wallet was created\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "357"
										},
										{
											"key": "date",
											"value": "Thu, 12 Dec 2024 04:18:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Wallets storage error: Wallets storage error: Internal error: `wallet_name` cannot be None!\",\n    \"error_path\": \"lp_wallet.mnemonics_storage\",\n    \"error_trace\": \"lp_wallet:494] lp_wallet:137] mnemonics_storage:48]\",\n    \"error_type\": \"WalletsStorageError\",\n    \"error_data\": \"Wallets storage error: Internal error: `wallet_name` cannot be None!\",\n    \"id\": null\n}"
								},
								{
									"name": "Error: Wrong password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_mnemonic\",\r\n    \"params\": {\r\n        \"format\": \"plaintext\", // `plaintext` or `encrypted`. If `plaintext`, `password` is required ,\r\n        \"password\": \"password123\" // The password used to encrypt the passphrase when the wallet was created\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "392"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 09:31:46 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Wallets storage error: Error decrypting passphrase: Error decrypting mnemonic: HMAC error: MAC tag mismatch\",\n    \"error_path\": \"lp_wallet.mnemonic.decrypt\",\n    \"error_trace\": \"lp_wallet:494] lp_wallet:141] mnemonic:125] decrypt:56]\",\n    \"error_type\": \"WalletsStorageError\",\n    \"error_data\": \"Error decrypting passphrase: Error decrypting mnemonic: HMAC error: MAC tag mismatch\",\n    \"id\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "1inch",
							"item": [
								{
									"name": "approve_token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"approve_token\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-PLG20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\",\r\n        \"amount\": 1.23\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: Token not activated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"approve_token\",\r\n    \"params\": {\r\n        \"coin\": \"USDT-ERC20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\",\r\n        \"amount\": 1.23\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "170"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 10:24:30 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"No such coin USDT-ERC20\",\"error_path\":\"tokens\",\"error_trace\":\"tokens:171]\",\"error_type\":\"NoSuchCoin\",\"error_data\":{\"coin\":\"USDT-ERC20\"},\"id\":null}"
										},
										{
											"name": "Error: Insufficient Funds",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"approve_token\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-PLG20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\",\r\n        \"amount\": 1.23\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1676"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 10:26:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Transaction error mm2src/coins/eth.rs:4834] eth:4720] Transport(\\\"request MethodCall(MethodCall { jsonrpc: Some(V2), method: \\\\\\\"eth_estimateGas\\\\\\\", params: Array([Object({\\\\\\\"from\\\\\\\": String(\\\\\\\"0x083c32b38e8050473f6999e22f670d1404235592\\\\\\\"), \\\\\\\"to\\\\\\\": String(\\\\\\\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\\\\\\\"), \\\\\\\"gasPrice\\\\\\\": String(\\\\\\\"0x6fc23a56a\\\\\\\"), \\\\\\\"value\\\\\\\": String(\\\\\\\"0x0\\\\\\\"), \\\\\\\"data\\\\\\\": String(\\\\\\\"0x095ea7b3000000000000000000000000083c32b38e8050473f6999e22f670d14042355920000000000000000000000000000000000000000000000001111d67bb1bb0000\\\\\\\")})]), id: Num(1) }) failed: Invalid response: Server: 'https://electrum3.cipig.net:18755/', error: RPC error: Error { code: ServerError(-32000), message: \\\\\\\"insufficient funds for transfer\\\\\\\", data: None }\\\")\",\n    \"error_path\": \"tokens\",\n    \"error_trace\": \"tokens:161]\",\n    \"error_type\": \"TransactionError\",\n    \"error_data\": \"mm2src/coins/eth.rs:4834] eth:4720] Transport(\\\"request MethodCall(MethodCall { jsonrpc: Some(V2), method: \\\\\\\"eth_estimateGas\\\\\\\", params: Array([Object({\\\\\\\"from\\\\\\\": String(\\\\\\\"0x083c32b38e8050473f6999e22f670d1404235592\\\\\\\"), \\\\\\\"to\\\\\\\": String(\\\\\\\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\\\\\\\"), \\\\\\\"gasPrice\\\\\\\": String(\\\\\\\"0x6fc23a56a\\\\\\\"), \\\\\\\"value\\\\\\\": String(\\\\\\\"0x0\\\\\\\"), \\\\\\\"data\\\\\\\": String(\\\\\\\"0x095ea7b3000000000000000000000000083c32b38e8050473f6999e22f670d14042355920000000000000000000000000000000000000000000000001111d67bb1bb0000\\\\\\\")})]), id: Num(1) }) failed: Invalid response: Server: 'https://electrum3.cipig.net:18755/', error: RPC error: Error { code: ServerError(-32000), message: \\\\\\\"insufficient funds for transfer\\\\\\\", data: None }\\\")\",\n    \"id\": null\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"approve_token\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-PLG20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\",\r\n        \"amount\": 1.23\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "103"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 10:31:04 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":\"0x9e51b5654ddf92efdc422d9f687d11e4dd5bdb909d01afacc7e37ce5929bad59\",\"id\":null}"
										}
									]
								},
								{
									"name": "get_token_allowance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_token_allowance\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-PLG20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_token_allowance\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-PLG20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "41"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 10:49:40 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": \"1.23\",\n    \"id\": null\n}"
										},
										{
											"name": "Error: Token not activated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_token_allowance\",\r\n    \"params\": {\r\n        \"coin\": \"AAVE-ERC20\",\r\n        \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "170"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 10:54:24 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"No such coin AAVE-ERC20\",\"error_path\":\"tokens\",\"error_trace\":\"tokens:171]\",\"error_type\":\"NoSuchCoin\",\"error_data\":{\"coin\":\"AAVE-ERC20\"},\"id\":null}"
										}
									]
								},
								{
									"name": "1inch_v6_0_classic_swap_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_tokens\",\r\n    \"params\": {\r\n        \"chain_id\": 137\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: No API config",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_tokens\",\r\n    \"params\": {\r\n        \"chain_id\": 1\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "183"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 11:56:44 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"No API config param\",\"error_path\":\"rpcs.client\",\"error_trace\":\"rpcs:137] client:105]\",\"error_type\":\"InvalidParam\",\"error_data\":\"No API config param\",\"id\":null}"
										},
										{
											"name": "Error: 401 Unauthorised",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_tokens\",\r\n    \"params\": {\r\n        \"chain_id\": 1\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "288"
												},
												{
													"key": "date",
													"value": "Thu, 12 Dec 2024 12:01:30 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"1inch API error: General API error: Unauthorized description: \",\"error_path\":\"rpcs.client\",\"error_trace\":\"rpcs:140] client:152]\",\"error_type\":\"OneInchError\",\"error_data\":{\"GeneralApiError\":{\"error_msg\":\"Unauthorized\",\"description\":\"\",\"status_code\":401}},\"id\":null}"
										},
										{
											"name": "Error: Invalid type",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_tokens\",\r\n    \"params\": {\r\n        \"chain_id\": 137\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "263"
												},
												{
													"key": "date",
													"value": "Sun, 15 Dec 2024 08:43:16 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"1inch API error: invalid type: null, expected a string\",\"error_path\":\"rpcs.mod\",\"error_trace\":\"rpcs:140] mod:717]\",\"error_type\":\"OneInchError\",\"error_data\":{\"ParseBodyError\":{\"error_msg\":\"invalid type: null, expected a string\"}},\"id\":null}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_tokens\",\r\n    \"params\": {\r\n        \"chain_id\": 137\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "55463"
												},
												{
													"key": "date",
													"value": "Sun, 15 Dec 2024 08:47:05 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"tokens\":{\"0xc17c30e98541188614df99239cabd40280810ca3\":{\"address\":\"0xc17c30e98541188614df99239cabd40280810ca3\",\"symbol\":\"RISE\",\"name\":\"EverRise\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc17c30e98541188614df99239cabd40280810ca3.png\",\"tags\":[\"tokens\"]},\"0x2f800db0fdb5223b3c3f354886d907a671414a7f\":{\"address\":\"0x2f800db0fdb5223b3c3f354886d907a671414a7f\",\"symbol\":\"BCT\",\"name\":\"Toucan Protocol: Base Carbon Tonne\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2f800db0fdb5223b3c3f354886d907a671414a7f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x431cd3c9ac9fc73644bf68bf5691f4b83f9e104f\":{\"address\":\"0x431cd3c9ac9fc73644bf68bf5691f4b83f9e104f\",\"symbol\":\"RBW\",\"name\":\"Rainbow Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x431cd3c9ac9fc73644bf68bf5691f4b83f9e104f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xb33eaad8d922b1083446dc23f610c2567fb5180f\":{\"address\":\"0xb33eaad8d922b1083446dc23f610c2567fb5180f\",\"symbol\":\"UNI\",\"name\":\"Uniswap\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984.png\",\"tags\":[\"crosschain\",\"GROUP:UNI\",\"tokens\"]},\"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\":{\"address\":\"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\"symbol\":\"USDC.e\",\"name\":\"USD Coin (PoS)\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png\",\"tags\":[\"crosschain\",\"GROUP:USDC.e\",\"PEG:USD\",\"tokens\"]},\"0xcd7361ac3307d1c5a46b63086a90742ff44c63b3\":{\"address\":\"0xcd7361ac3307d1c5a46b63086a90742ff44c63b3\",\"symbol\":\"RAIDER\",\"name\":\"RaiderToken\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xcd7361ac3307d1c5a46b63086a90742ff44c63b3.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x6985884c4392d348587b19cb9eaaf157f13271cd\":{\"address\":\"0x6985884c4392d348587b19cb9eaaf157f13271cd\",\"symbol\":\"ZRO\",\"name\":\"LayerZero\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0x6985884c4392d348587b19cb9eaaf157f13271cd.png\",\"tags\":[\"crosschain\",\"GROUP:ZRO\",\"tokens\"]},\"0x2f6f07cdcf3588944bf4c42ac74ff24bf56e7590\":{\"address\":\"0x2f6f07cdcf3588944bf4c42ac74ff24bf56e7590\",\"symbol\":\"STG\",\"name\":\"StargateToken\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2f6f07cdcf3588944bf4c42ac74ff24bf56e7590.png\",\"tags\":[\"crosschain\",\"GROUP:STG\",\"tokens\"]},\"0xd55fce7cdab84d84f2ef3f99816d765a2a94a509\":{\"address\":\"0xd55fce7cdab84d84f2ef3f99816d765a2a94a509\",\"symbol\":\"CHAIN\",\"name\":\"Chain Games\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd55fce7cdab84d84f2ef3f99816d765a2a94a509.png\",\"tags\":[\"crosschain\",\"GROUP:CHAIN\",\"tokens\"]},\"0x3a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4\":{\"address\":\"0x3a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4\",\"symbol\":\"stMATIC\",\"name\":\"Staked MATIC (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4.png\",\"tags\":[\"crosschain\",\"PEG:MATIC\",\"tokens\"]},\"0x172370d5cd63279efa6d502dab29171933a610af\":{\"address\":\"0x172370d5cd63279efa6d502dab29171933a610af\",\"symbol\":\"CRV\",\"name\":\"CRV\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd533a949740bb3306d119cc777fa900ba034cd52.png\",\"tags\":[\"crosschain\",\"GROUP:CRV\",\"tokens\"]},\"0xc6c855ad634dcdad23e64da71ba85b8c51e5ad7c\":{\"address\":\"0xc6c855ad634dcdad23e64da71ba85b8c51e5ad7c\",\"symbol\":\"ICE_2\",\"name\":\"Decentral Games ICE\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc6c855ad634dcdad23e64da71ba85b8c51e5ad7c.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x229b1b6c23ff8953d663c4cbb519717e323a0a84\":{\"address\":\"0x229b1b6c23ff8953d663c4cbb519717e323a0a84\",\"symbol\":\"BLOK\",\"name\":\"BLOK\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x229b1b6c23ff8953d663c4cbb519717e323a0a84.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xa55870278d6389ec5b524553d03c04f5677c061e\":{\"address\":\"0xa55870278d6389ec5b524553d03c04f5677c061e\",\"symbol\":\"XCAD\",\"name\":\"XCAD Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa55870278d6389ec5b524553d03c04f5677c061e.png\",\"tags\":[\"crosschain\",\"GROUP:XCAD\",\"tokens\"]},\"0x62f594339830b90ae4c084ae7d223ffafd9658a7\":{\"address\":\"0x62f594339830b90ae4c084ae7d223ffafd9658a7\",\"symbol\":\"SPHERE\",\"name\":\"Sphere Finance\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x62f594339830b90ae4c084ae7d223ffafd9658a7.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xf84bd51eab957c2e7b7d646a3427c5a50848281d\":{\"address\":\"0xf84bd51eab957c2e7b7d646a3427c5a50848281d\",\"symbol\":\"AGAr\",\"name\":\"AGA Rewards\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xb453f1f2ee776daf2586501361c457db70e1ca0f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x255707b70bf90aa112006e1b07b9aea6de021424\":{\"address\":\"0x255707b70bf90aa112006e1b07b9aea6de021424\",\"symbol\":\"TETU\",\"name\":\"TETU Reward Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x255707b70bf90aa112006e1b07b9aea6de021424.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x4ff0b68abc2b9e4e1401e9b691dba7d66b264ac8\":{\"address\":\"0x4ff0b68abc2b9e4e1401e9b691dba7d66b264ac8\",\"symbol\":\"RIOT\",\"name\":\"RIOT (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x4ff0b68abc2b9e4e1401e9b691dba7d66b264ac8.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x9c9e5fd8bbc25984b178fdce6117defa39d2db39\":{\"address\":\"0x9c9e5fd8bbc25984b178fdce6117defa39d2db39\",\"symbol\":\"BUSD\",\"name\":\"BUSD Token\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x9c9e5fd8bbc25984b178fdce6117defa39d2db39.png\",\"tags\":[\"crosschain\",\"GROUP:BUSD\",\"tokens\"]},\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\":{\"address\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"symbol\":\"POL\",\"name\":\"Polygon Ecosystem Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0.png\",\"tags\":[\"crosschain\",\"GROUP:POL\",\"native\"]},\"0x236eec6359fb44cce8f97e99387aa7f8cd5cde1f\":{\"address\":\"0x236eec6359fb44cce8f97e99387aa7f8cd5cde1f\",\"symbol\":\"USD+\",\"name\":\"USD+\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x236eec6359fb44cce8f97e99387aa7f8cd5cde1f.png\",\"tags\":[\"crosschain\",\"GROUP:USD+\",\"PEG:USD\",\"tokens\"]},\"0x53e0bca35ec356bd5dddfebbd1fc0fd03fabad39\":{\"address\":\"0x53e0bca35ec356bd5dddfebbd1fc0fd03fabad39\",\"symbol\":\"LINK\",\"name\":\"ChainLink Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x514910771af9ca656af840dff83e8264ecf986ca.png\",\"tags\":[\"crosschain\",\"GROUP:LINK\",\"tokens\"]},\"0xd3b71117e6c1558c1553305b44988cd944e97300\":{\"address\":\"0xd3b71117e6c1558c1553305b44988cd944e97300\",\"symbol\":\"YEL\",\"name\":\"YEL Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd3b71117e6c1558c1553305b44988cd944e97300.png\",\"tags\":[\"crosschain\",\"GROUP:YEL\",\"tokens\"]},\"0xe82808eaa78339b06a691fd92e1be79671cad8d3\":{\"address\":\"0xe82808eaa78339b06a691fd92e1be79671cad8d3\",\"symbol\":\"PLOT\",\"name\":\"PLOT\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x72f020f8f3e8fd9382705723cd26380f8d0c66bb.png\",\"tags\":[\"crosschain\",\"GROUP:PLOT\",\"tokens\"]},\"0xff2382bd52efacef02cc895bcbfc4618608aa56f\":{\"address\":\"0xff2382bd52efacef02cc895bcbfc4618608aa56f\",\"symbol\":\"ORARE\",\"name\":\"One Rare Token\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xff2382bd52efacef02cc895bcbfc4618608aa56f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xd28449bb9bb659725accad52947677cce3719fd7\":{\"address\":\"0xd28449bb9bb659725accad52947677cce3719fd7\",\"symbol\":\"DMT\",\"name\":\"Dark Matter Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd28449bb9bb659725accad52947677cce3719fd7.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\":{\"address\":\"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\"symbol\":\"WETH\",\"name\":\"Wrapped Ether\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619.png\",\"tags\":[\"crosschain\",\"GROUP:WETH\",\"tokens\"]},\"0x1ba17c639bdaecd8dc4aac37df062d17ee43a1b8\":{\"address\":\"0x1ba17c639bdaecd8dc4aac37df062d17ee43a1b8\",\"symbol\":\"WIXS\",\"name\":\"Wrapped Ixs Token\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1ba17c639bdaecd8dc4aac37df062d17ee43a1b8.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x2bc07124d8dac638e290f401046ad584546bc47b\":{\"address\":\"0x2bc07124d8dac638e290f401046ad584546bc47b\",\"symbol\":\"TOWER\",\"name\":\"TOWER\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2bc07124d8dac638e290f401046ad584546bc47b.png\",\"tags\":[\"crosschain\",\"GROUP:TOWER\",\"tokens\"]},\"0x8623e66bea0dce41b6d47f9c44e806a115babae0\":{\"address\":\"0x8623e66bea0dce41b6d47f9c44e806a115babae0\",\"symbol\":\"NFTY\",\"name\":\"NFTY Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8623e66bea0dce41b6d47f9c44e806a115babae0.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x3b1a0c9252ee7403093ff55b4a5886d49a3d837a\":{\"address\":\"0x3b1a0c9252ee7403093ff55b4a5886d49a3d837a\",\"symbol\":\"UM\",\"name\":\"Continuum\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3b1a0c9252ee7403093ff55b4a5886d49a3d837a.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xa69d14d6369e414a32a5c7e729b7afbafd285965\":{\"address\":\"0xa69d14d6369e414a32a5c7e729b7afbafd285965\",\"symbol\":\"GCR\",\"name\":\"Global Coin Research (PoS)\",\"decimals\":4,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa69d14d6369e414a32a5c7e729b7afbafd285965.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x60d55f02a771d515e077c9c2403a1ef324885cec\":{\"address\":\"0x60d55f02a771d515e077c9c2403a1ef324885cec\",\"symbol\":\"amUSDT\",\"name\":\"Aave Matic Market USDT\",\"decimals\":6,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3ed3b47dd13ec9a98b44e6204a523e766b225811.png\",\"tags\":[\"crosschain\",\"PEG:USD\",\"tokens\"]},\"0x29f1e986fca02b7e54138c04c4f503dddd250558\":{\"address\":\"0x29f1e986fca02b7e54138c04c4f503dddd250558\",\"symbol\":\"VSQ\",\"name\":\"VSQ\",\"decimals\":9,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x29f1e986fca02b7e54138c04c4f503dddd250558.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x723b17718289a91af252d616de2c77944962d122\":{\"address\":\"0x723b17718289a91af252d616de2c77944962d122\",\"symbol\":\"GAIA\",\"name\":\"GAIA Everworld\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x723b17718289a91af252d616de2c77944962d122.png\",\"tags\":[\"crosschain\",\"GROUP:GAIA\",\"tokens\"]},\"0x28424507fefb6f7f8e9d3860f56504e4e5f5f390\":{\"address\":\"0x28424507fefb6f7f8e9d3860f56504e4e5f5f390\",\"symbol\":\"amWETH\",\"name\":\"Aave Matic Market WETH\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x030ba81f1c18d280636f32af80b9aad02cf0854e.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xbd1463f02f61676d53fd183c2b19282bff93d099\":{\"address\":\"0xbd1463f02f61676d53fd183c2b19282bff93d099\",\"symbol\":\"jCHF\",\"name\":\"Jarvis Synthetic Swiss Franc\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xbd1463f02f61676d53fd183c2b19282bff93d099.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc10358f062663448a3489fc258139944534592ac\":{\"address\":\"0xc10358f062663448a3489fc258139944534592ac\",\"symbol\":\"BCMC\",\"name\":\"Blockchain Monster Coin\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc10358f062663448a3489fc258139944534592ac.png\",\"tags\":[\"crosschain\",\"GROUP:BCMC\",\"tokens\"]},\"0x9c32185b81766a051e08de671207b34466dd1021\":{\"address\":\"0x9c32185b81766a051e08de671207b34466dd1021\",\"symbol\":\"BTCpx\",\"name\":\"BTC Proxy\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x9c32185b81766a051e08de671207b34466dd1021.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x034b2090b579228482520c589dbd397c53fc51cc\":{\"address\":\"0x034b2090b579228482520c589dbd397c53fc51cc\",\"symbol\":\"VISION\",\"name\":\"Vision Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x034b2090b579228482520c589dbd397c53fc51cc.png\",\"tags\":[\"crosschain\",\"GROUP:VISION\",\"tokens\"]},\"0x282d8efce846a88b159800bd4130ad77443fa1a1\":{\"address\":\"0x282d8efce846a88b159800bd4130ad77443fa1a1\",\"symbol\":\"mOCEAN\",\"name\":\"Ocean Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x967da4048cd07ab37855c090aaf366e4ce1b9f48.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97\":{\"address\":\"0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97\",\"symbol\":\"DFYN\",\"name\":\"DFYN Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97.png\",\"tags\":[\"crosschain\",\"GROUP:DFYN\",\"tokens\"]},\"0x235737dbb56e8517391473f7c964db31fa6ef280\":{\"address\":\"0x235737dbb56e8517391473f7c964db31fa6ef280\",\"symbol\":\"KASTA\",\"name\":\"KastaToken\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x235737dbb56e8517391473f7c964db31fa6ef280.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x4e1581f01046efdd7a1a2cdb0f82cdd7f71f2e59\":{\"address\":\"0x4e1581f01046efdd7a1a2cdb0f82cdd7f71f2e59\",\"symbol\":\"ICE_3\",\"name\":\"IceToken\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x4e1581f01046efdd7a1a2cdb0f82cdd7f71f2e59.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xfe712251173a2cd5f5be2b46bb528328ea3565e1\":{\"address\":\"0xfe712251173a2cd5f5be2b46bb528328ea3565e1\",\"symbol\":\"MVI\",\"name\":\"Metaverse Index (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xfe712251173a2cd5f5be2b46bb528328ea3565e1.png\",\"tags\":[\"crosschain\",\"GROUP:MVI\",\"tokens\"]},\"0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4\":{\"address\":\"0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4\",\"symbol\":\"ROUTE (PoS)\",\"name\":\"Route\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x7f67639ffc8c93dd558d452b8920b28815638c44\":{\"address\":\"0x7f67639ffc8c93dd558d452b8920b28815638c44\",\"symbol\":\"LIME\",\"name\":\"iMe Lab\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7f67639ffc8c93dd558d452b8920b28815638c44.png\",\"tags\":[\"crosschain\",\"GROUP:LIME\",\"tokens\"]},\"0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7\":{\"address\":\"0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7\",\"symbol\":\"GHST\",\"name\":\"Aavegotchi GHST Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3f382dbd960e3a9bbceae22651e88158d2791550.png\",\"tags\":[\"crosschain\",\"GROUP:GHST\",\"tokens\"]},\"0x5f0197ba06860dac7e31258bdf749f92b6a636d4\":{\"address\":\"0x5f0197ba06860dac7e31258bdf749f92b6a636d4\",\"symbol\":\"1FLR\",\"name\":\"Flare Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x5f0197ba06860dac7e31258bdf749f92b6a636d4.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xa3fa99a148fa48d14ed51d610c367c61876997f1\":{\"address\":\"0xa3fa99a148fa48d14ed51d610c367c61876997f1\",\"symbol\":\"miMATIC\",\"name\":\"miMATIC\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa3fa99a148fa48d14ed51d610c367c61876997f1.png\",\"tags\":[\"crosschain\",\"GROUP:miMATIC\",\"PEG:MATIC\",\"tokens\"]},\"0x82362ec182db3cf7829014bc61e9be8a2e82868a\":{\"address\":\"0x82362ec182db3cf7829014bc61e9be8a2e82868a\",\"symbol\":\"MESH\",\"name\":\"Meshswap Protocol\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x82362ec182db3cf7829014bc61e9be8a2e82868a.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x200c234721b5e549c3693ccc93cf191f90dc2af9\":{\"address\":\"0x200c234721b5e549c3693ccc93cf191f90dc2af9\",\"symbol\":\"METAL\",\"name\":\"METAL\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x200c234721b5e549c3693ccc93cf191f90dc2af9.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x65a05db8322701724c197af82c9cae41195b0aa8\":{\"address\":\"0x65a05db8322701724c197af82c9cae41195b0aa8\",\"symbol\":\"FOX\",\"name\":\"FOX (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x65a05db8322701724c197af82c9cae41195b0aa8.png\",\"tags\":[\"crosschain\",\"GROUP:FOX\",\"tokens\"]},\"0xf4c83080e80ae530d6f8180572cbbf1ac9d5d435\":{\"address\":\"0xf4c83080e80ae530d6f8180572cbbf1ac9d5d435\",\"symbol\":\"BLANK\",\"name\":\"GoBlank Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xf4c83080e80ae530d6f8180572cbbf1ac9d5d435.png\",\"tags\":[\"crosschain\",\"GROUP:BLANK\",\"tokens\"]},\"0xd0258a3fd00f38aa8090dfee343f10a9d4d30d3f\":{\"address\":\"0xd0258a3fd00f38aa8090dfee343f10a9d4d30d3f\",\"symbol\":\"VOXEL\",\"name\":\"VOXEL Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd0258a3fd00f38aa8090dfee343f10a9d4d30d3f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\":{\"address\":\"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\",\"symbol\":\"USDT\",\"name\":\"Tether USD\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xdac17f958d2ee523a2206206994597c13d831ec7.png\",\"tags\":[\"crosschain\",\"GROUP:USDT\",\"PEG:USD\",\"tokens\"]},\"0x6968105460f67c3bf751be7c15f92f5286fd0ce5\":{\"address\":\"0x6968105460f67c3bf751be7c15f92f5286fd0ce5\",\"symbol\":\"MONA\",\"name\":\"Monavale\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x275f5ad03be0fa221b4c6649b8aee09a42d9412a.png\",\"tags\":[\"crosschain\",\"GROUP:MONA\",\"tokens\"]},\"0xba3cb8329d442e6f9eb70fafe1e214251df3d275\":{\"address\":\"0xba3cb8329d442e6f9eb70fafe1e214251df3d275\",\"symbol\":\"SWASH\",\"name\":\"Swash Token\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xba3cb8329d442e6f9eb70fafe1e214251df3d275.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x1a13f4ca1d028320a707d99520abfefca3998b7f\":{\"address\":\"0x1a13f4ca1d028320a707d99520abfefca3998b7f\",\"symbol\":\"amUSDC\",\"name\":\"Aave Matic Market USDC\",\"decimals\":6,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xbcca60bb61934080951369a648fb03df4f96263c.png\",\"tags\":[\"crosschain\",\"PEG:USD\",\"tokens\"]},\"0xee7666aacaefaa6efeef62ea40176d3eb21953b9\":{\"address\":\"0xee7666aacaefaa6efeef62ea40176d3eb21953b9\",\"symbol\":\"MCHC\",\"name\":\"MCHCoin (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xee7666aacaefaa6efeef62ea40176d3eb21953b9.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xd8ca34fd379d9ca3c6ee3b3905678320f5b45195\":{\"address\":\"0xd8ca34fd379d9ca3c6ee3b3905678320f5b45195\",\"symbol\":\"gOHM\",\"name\":\"Governance OHM\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd8ca34fd379d9ca3c6ee3b3905678320f5b45195.png\",\"tags\":[\"crosschain\",\"GROUP:gOHM\",\"tokens\"]},\"0x23e8b6a3f6891254988b84da3738d2bfe5e703b9\":{\"address\":\"0x23e8b6a3f6891254988b84da3738d2bfe5e703b9\",\"symbol\":\"WELT\",\"name\":\"FABWELT\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x23e8b6a3f6891254988b84da3738d2bfe5e703b9.png\",\"tags\":[\"tokens\"]},\"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\":{\"address\":\"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\"symbol\":\"WPOL\",\"name\":\"Wrapped Polygon Ecosystem Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270.png\",\"tags\":[\"crosschain\",\"PEG:MATIC\",\"tokens\"]},\"0x05089c9ebffa4f0aca269e32056b1b36b37ed71b\":{\"address\":\"0x05089c9ebffa4f0aca269e32056b1b36b37ed71b\",\"symbol\":\"Krill\",\"name\":\"Krill\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x05089c9ebffa4f0aca269e32056b1b36b37ed71b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed\":{\"address\":\"0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed\",\"symbol\":\"axlUSDC\",\"name\":\"Axelar Wrapped USDC\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed.png\",\"tags\":[\"crosschain\",\"GROUP:axlUSDC\",\"tokens\"]},\"0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4\":{\"address\":\"0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4\",\"symbol\":\"MANA\",\"name\":\"Decentraland MANA\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x0f5d2fb29fb7d3cfee444a200298f468908cc942.png\",\"tags\":[\"crosschain\",\"GROUP:MANA\",\"tokens\"]},\"0xd4945a3d0de9923035521687d4bf18cc9b0c7c2a\":{\"address\":\"0xd4945a3d0de9923035521687d4bf18cc9b0c7c2a\",\"symbol\":\"LUXY\",\"name\":\"LUXY\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd4945a3d0de9923035521687d4bf18cc9b0c7c2a.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x431d5dff03120afa4bdf332c61a6e1766ef37bdb\":{\"address\":\"0x431d5dff03120afa4bdf332c61a6e1766ef37bdb\",\"symbol\":\"JPYC\",\"name\":\"JPY Coin\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x431d5dff03120afa4bdf332c61a6e1766ef37bdb.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x23d29d30e35c5e8d321e1dc9a8a61bfd846d4c5c\":{\"address\":\"0x23d29d30e35c5e8d321e1dc9a8a61bfd846d4c5c\",\"symbol\":\"HEX\",\"name\":\"HEXX\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2b591e99afe9f32eaa6214f7b7629768c40eeb39.png\",\"tags\":[\"crosschain\",\"GROUP:HEX\",\"tokens\"]},\"0xfa68fb4628dff1028cfec22b4162fccd0d45efb6\":{\"address\":\"0xfa68fb4628dff1028cfec22b4162fccd0d45efb6\",\"symbol\":\"MaticX\",\"name\":\"Liquid Staking Matic (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xfa68fb4628dff1028cfec22b4162fccd0d45efb6.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x580a84c73811e1839f75d86d75d88cca0c241ff4\":{\"address\":\"0x580a84c73811e1839f75d86d75d88cca0c241ff4\",\"symbol\":\"QI\",\"name\":\"Qi Dao\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x580a84c73811e1839f75d86d75d88cca0c241ff4.png\",\"tags\":[\"crosschain\",\"GROUP:QI\",\"tokens\"]},\"0xeeeeeb57642040be42185f49c52f7e9b38f8eeee\":{\"address\":\"0xeeeeeb57642040be42185f49c52f7e9b38f8eeee\",\"symbol\":\"ELK\",\"name\":\"Elk\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xeeeeeb57642040be42185f49c52f7e9b38f8eeee.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x6f7c932e7684666c9fd1d44527765433e01ff61d\":{\"address\":\"0x6f7c932e7684666c9fd1d44527765433e01ff61d\",\"symbol\":\"MKR\",\"name\":\"Maker\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"\",\"tags\":[\"crosschain\",\"GROUP:MKR\",\"tokens\"]},\"0x7075cab6bcca06613e2d071bd918d1a0241379e2\":{\"address\":\"0x7075cab6bcca06613e2d071bd918d1a0241379e2\",\"symbol\":\"GFARM2\",\"name\":\"Gains V2\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7075cab6bcca06613e2d071bd918d1a0241379e2.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xe111178a87a3bff0c8d18decba5798827539ae99\":{\"address\":\"0xe111178a87a3bff0c8d18decba5798827539ae99\",\"symbol\":\"EURS\",\"name\":\"STASIS EURS Token (PoS)\",\"decimals\":2,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe111178a87a3bff0c8d18decba5798827539ae99.png\",\"tags\":[\"crosschain\",\"GROUP:EURS\",\"tokens\"]},\"0xbbba073c31bf03b8acf7c28ef0738decf3695683\":{\"address\":\"0xbbba073c31bf03b8acf7c28ef0738decf3695683\",\"symbol\":\"SAND\",\"name\":\"SAND\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xbbba073c31bf03b8acf7c28ef0738decf3695683.png\",\"tags\":[\"crosschain\",\"GROUP:SAND\",\"tokens\"]},\"0x64ca1571d1476b7a21c5aaf9f1a750a193a103c0\":{\"address\":\"0x64ca1571d1476b7a21c5aaf9f1a750a193a103c0\",\"symbol\":\"BONDLY\",\"name\":\"Bondly (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x64ca1571d1476b7a21c5aaf9f1a750a193a103c0.png\",\"tags\":[\"crosschain\",\"GROUP:BONDLY\",\"tokens\"]},\"0xdc3326e71d45186f113a2f448984ca0e8d201995\":{\"address\":\"0xdc3326e71d45186f113a2f448984ca0e8d201995\",\"symbol\":\"XSGD\",\"name\":\"XSGD\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xdc3326e71d45186f113a2f448984ca0e8d201995.png\",\"tags\":[\"crosschain\",\"GROUP:XSGD\",\"tokens\"]},\"0xe06bd4f5aac8d0aa337d13ec88db6defc6eaeefe\":{\"address\":\"0xe06bd4f5aac8d0aa337d13ec88db6defc6eaeefe\",\"symbol\":\"IXT\",\"name\":\"PlanetIX\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe06bd4f5aac8d0aa337d13ec88db6defc6eaeefe.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xe5b49820e5a1063f6f4ddf851327b5e8b2301048\":{\"address\":\"0xe5b49820e5a1063f6f4ddf851327b5e8b2301048\",\"symbol\":\"Bonk\",\"name\":\"Bonk\",\"decimals\":5,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"\",\"tags\":[\"GROUP:BONK\",\"tokens\"]},\"0xbfa35599c7aebb0dace9b5aa3ca5f2a79624d8eb\":{\"address\":\"0xbfa35599c7aebb0dace9b5aa3ca5f2a79624d8eb\",\"symbol\":\"RETRO\",\"name\":\"RETRO\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xbfa35599c7aebb0dace9b5aa3ca5f2a79624d8eb.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x5c2ed810328349100a66b82b78a1791b101c9d61\":{\"address\":\"0x5c2ed810328349100a66b82b78a1791b101c9d61\",\"symbol\":\"amWBTC\",\"name\":\"Aave Matic Market WBTC\",\"decimals\":8,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x9ff58f4ffb29fa2266ab25e75e2a8b3503311656.png\",\"tags\":[\"crosschain\",\"PEG:BTC\",\"tokens\"]},\"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\":{\"address\":\"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\",\"symbol\":\"USDC\",\"name\":\"USD Coin\",\"decimals\":6,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3c499c542cef5e3811e1192ce70d8cc03d5c3359.png\",\"tags\":[\"crosschain\",\"GROUP:USDC\",\"tokens\"]},\"0xb35fcbcf1fd489fce02ee146599e893fdcdc60e6\":{\"address\":\"0xb35fcbcf1fd489fce02ee146599e893fdcdc60e6\",\"symbol\":\"DERC\",\"name\":\"DeRace Token\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xb35fcbcf1fd489fce02ee146599e893fdcdc60e6.png\",\"tags\":[\"crosschain\",\"GROUP:DERC\",\"tokens\"]},\"0x3a3e7650f8b9f667da98f236010fbf44ee4b2975\":{\"address\":\"0x3a3e7650f8b9f667da98f236010fbf44ee4b2975\",\"symbol\":\"xUSD\",\"name\":\"xDollar Stablecoin\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3a3e7650f8b9f667da98f236010fbf44ee4b2975.png\",\"tags\":[\"crosschain\",\"PEG:USD\",\"tokens\"]},\"0xd838290e877e0188a4a44700463419ed96c16107\":{\"address\":\"0xd838290e877e0188a4a44700463419ed96c16107\",\"symbol\":\"NCT\",\"name\":\"Toucan Protocol: Nature Carbon Tonne\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd838290e877e0188a4a44700463419ed96c16107.png\",\"tags\":[\"crosschain\",\"GROUP:NCT\",\"tokens\"]},\"0x7e4c577ca35913af564ee2a24d882a4946ec492b\":{\"address\":\"0x7e4c577ca35913af564ee2a24d882a4946ec492b\",\"symbol\":\"MOONED\",\"name\":\"MoonEdge\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7e4c577ca35913af564ee2a24d882a4946ec492b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xe26cda27c13f4f87cffc2f437c5900b27ebb5bbb\":{\"address\":\"0xe26cda27c13f4f87cffc2f437c5900b27ebb5bbb\",\"symbol\":\"RBLS\",\"name\":\"Rebel Bots Token\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe26cda27c13f4f87cffc2f437c5900b27ebb5bbb.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x071ac29d569a47ebffb9e57517f855cb577dcc4c\":{\"address\":\"0x071ac29d569a47ebffb9e57517f855cb577dcc4c\",\"symbol\":\"GFC\",\"name\":\"GCOIN\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x071ac29d569a47ebffb9e57517f855cb577dcc4c.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x8839e639f210b80ffea73aedf51baed8dac04499\":{\"address\":\"0x8839e639f210b80ffea73aedf51baed8dac04499\",\"symbol\":\"DWEB\",\"name\":\"DecentraWeb (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8839e639f210b80ffea73aedf51baed8dac04499.png\",\"tags\":[\"crosschain\",\"GROUP:DWEB\",\"tokens\"]},\"0x67eb41a14c0fe5cd701fc9d5a3d6597a72f641a6\":{\"address\":\"0x67eb41a14c0fe5cd701fc9d5a3d6597a72f641a6\",\"symbol\":\"GIDDY\",\"name\":\"Giddy Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x67eb41a14c0fe5cd701fc9d5a3d6597a72f641a6.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x27f8d03b3a2196956ed754badc28d73be8830a6e\":{\"address\":\"0x27f8d03b3a2196956ed754badc28d73be8830a6e\",\"symbol\":\"amDAI\",\"name\":\"Aave Matic Market DAI\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x028171bca77440897b824ca71d1c56cac55b68a3.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x59b5654a17ac44f3068b3882f298881433bb07ef\":{\"address\":\"0x59b5654a17ac44f3068b3882f298881433bb07ef\",\"symbol\":\"CHP\",\"name\":\"CoinPoker Chips (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x59b5654a17ac44f3068b3882f298881433bb07ef.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x1599fe55cda767b1f631ee7d414b41f5d6de393d\":{\"address\":\"0x1599fe55cda767b1f631ee7d414b41f5d6de393d\",\"symbol\":\"MILK\",\"name\":\"Milk\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1599fe55cda767b1f631ee7d414b41f5d6de393d.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x2e1ad108ff1d8c782fcbbb89aad783ac49586756\":{\"address\":\"0x2e1ad108ff1d8c782fcbbb89aad783ac49586756\",\"symbol\":\"TUSD\",\"name\":\"TrueUSD (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2e1ad108ff1d8c782fcbbb89aad783ac49586756.png\",\"tags\":[\"crosschain\",\"GROUP:TUSD\",\"PEG:USD\",\"tokens\"]},\"0x3a3df212b7aa91aa0402b9035b098891d276572b\":{\"address\":\"0x3a3df212b7aa91aa0402b9035b098891d276572b\",\"symbol\":\"FISH\",\"name\":\"Fish\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3a3df212b7aa91aa0402b9035b098891d276572b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xba0dda8762c24da9487f5fa026a9b64b695a07ea\":{\"address\":\"0xba0dda8762c24da9487f5fa026a9b64b695a07ea\",\"symbol\":\"OX\",\"name\":\"OX Coin\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xba0dda8762c24da9487f5fa026a9b64b695a07ea.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xa486c6bc102f409180ccb8a94ba045d39f8fc7cb\":{\"address\":\"0xa486c6bc102f409180ccb8a94ba045d39f8fc7cb\",\"symbol\":\"NEX\",\"name\":\"Nash Exchange Token (PoS)\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa486c6bc102f409180ccb8a94ba045d39f8fc7cb.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x692597b009d13c4049a947cab2239b7d6517875f\":{\"address\":\"0x692597b009d13c4049a947cab2239b7d6517875f\",\"symbol\":\"UST\",\"name\":\"Wrapped UST Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x692597b009d13c4049a947cab2239b7d6517875f.png\",\"tags\":[\"crosschain\",\"GROUP:UST\",\"tokens\"]},\"0xef6ab48ef8dfe984fab0d5c4cd6aff2e54dfda14\":{\"address\":\"0xef6ab48ef8dfe984fab0d5c4cd6aff2e54dfda14\",\"symbol\":\"CRISP-M\",\"name\":\"CRISP Scored Mangroves\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xef6ab48ef8dfe984fab0d5c4cd6aff2e54dfda14.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xdb725f82818de83e99f1dac22a9b5b51d3d04dd4\":{\"address\":\"0xdb725f82818de83e99f1dac22a9b5b51d3d04dd4\",\"symbol\":\"GET\",\"name\":\"GET Protocol (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xdb725f82818de83e99f1dac22a9b5b51d3d04dd4.png\",\"tags\":[\"crosschain\",\"GROUP:GET\",\"tokens\"]},\"0x236aa50979d5f3de3bd1eeb40e81137f22ab794b\":{\"address\":\"0x236aa50979d5f3de3bd1eeb40e81137f22ab794b\",\"symbol\":\"tBTC\",\"name\":\"Polygon tBTC v2\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0x236aa50979d5f3de3bd1eeb40e81137f22ab794b.png\",\"tags\":[\"crosschain\",\"GROUP:tBTC\",\"PEG:BTC\",\"tokens\"]},\"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\":{\"address\":\"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\"symbol\":\"SUSHI\",\"name\":\"SushiToken\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x6b3595068778dd592e39a122f4f5a5cf09c90fe2.png\",\"tags\":[\"crosschain\",\"GROUP:SUSHI\",\"tokens\"]},\"0x1379e8886a944d2d9d440b3d88df536aea08d9f3\":{\"address\":\"0x1379e8886a944d2d9d440b3d88df536aea08d9f3\",\"symbol\":\"MYST\",\"name\":\"Mysterium (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1379e8886a944d2d9d440b3d88df536aea08d9f3.png\",\"tags\":[\"crosschain\",\"GROUP:MYST\",\"tokens\"]},\"0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6\":{\"address\":\"0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6\",\"symbol\":\"WBTC\",\"name\":\"Wrapped BTC\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599.png\",\"tags\":[\"crosschain\",\"GROUP:WBTC\",\"PEG:BTC\",\"tokens\"]},\"0x1d2a0e5ec8e5bbdca5cb219e649b565d8e5c3360\":{\"address\":\"0x1d2a0e5ec8e5bbdca5cb219e649b565d8e5c3360\",\"symbol\":\"amAAVE\",\"name\":\"Aave Matic Market AAVE\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xffc97d72e13e01096502cb8eb52dee56f74dad7b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x187ae45f2d361cbce37c6a8622119c91148f261b\":{\"address\":\"0x187ae45f2d361cbce37c6a8622119c91148f261b\",\"symbol\":\"POLX\",\"name\":\"Polylastic\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x187ae45f2d361cbce37c6a8622119c91148f261b.png\",\"tags\":[\"tokens\"]},\"0x2c89bbc92bd86f8075d1decc58c7f4e0107f286b\":{\"address\":\"0x2c89bbc92bd86f8075d1decc58c7f4e0107f286b\",\"symbol\":\"AVAX\",\"name\":\"Avalanche Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2c89bbc92bd86f8075d1decc58c7f4e0107f286b.png\",\"tags\":[\"crosschain\",\"GROUP:AVAX\",\"tokens\"]},\"0x34d4ab47bee066f361fa52d792e69ac7bd05ee23\":{\"address\":\"0x34d4ab47bee066f361fa52d792e69ac7bd05ee23\",\"symbol\":\"AURUM\",\"name\":\"RaiderAurum\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x34d4ab47bee066f361fa52d792e69ac7bd05ee23.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x6c0ab120dbd11ba701aff6748568311668f63fe0\":{\"address\":\"0x6c0ab120dbd11ba701aff6748568311668f63fe0\",\"symbol\":\"APW\",\"name\":\"APWine Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x4104b135dbc9609fc1a9490e61369036497660c8.png\",\"tags\":[\"crosschain\",\"GROUP:APW\",\"tokens\"]},\"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\":{\"address\":\"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\",\"symbol\":\"DAI\",\"name\":\"(PoS) Dai Stablecoin\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x6b175474e89094c44da98b954eedeac495271d0f.png\",\"tags\":[\"crosschain\",\"GROUP:DAI\",\"PEG:USD\",\"tokens\"]},\"0x50b728d8d964fd00c2d0aad81718b71311fef68a\":{\"address\":\"0x50b728d8d964fd00c2d0aad81718b71311fef68a\",\"symbol\":\"SNX\",\"name\":\"Synthetix Network Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x50b728d8d964fd00c2d0aad81718b71311fef68a.png\",\"tags\":[\"crosschain\",\"GROUP:SNX\",\"tokens\"]},\"0x30de46509dbc3a491128f97be0aaf70dc7ff33cb\":{\"address\":\"0x30de46509dbc3a491128f97be0aaf70dc7ff33cb\",\"symbol\":\"XZAR\",\"name\":\"South African Tether (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x30de46509dbc3a491128f97be0aaf70dc7ff33cb.png\",\"tags\":[\"crosschain\",\"GROUP:XZAR\",\"tokens\"]},\"0x8c92e38eca8210f4fcbf17f0951b198dd7668292\":{\"address\":\"0x8c92e38eca8210f4fcbf17f0951b198dd7668292\",\"symbol\":\"DHT\",\"name\":\"dHedge DAO Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8c92e38eca8210f4fcbf17f0951b198dd7668292.png\",\"tags\":[\"crosschain\",\"GROUP:DHT\",\"tokens\"]},\"0x70c006878a5a50ed185ac4c87d837633923de296\":{\"address\":\"0x70c006878a5a50ed185ac4c87d837633923de296\",\"symbol\":\"REVV\",\"name\":\"REVV\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x70c006878a5a50ed185ac4c87d837633923de296.png\",\"tags\":[\"crosschain\",\"GROUP:REVV\",\"tokens\"]},\"0xe46b4a950c389e80621d10dfc398e91613c7e25e\":{\"address\":\"0xe46b4a950c389e80621d10dfc398e91613c7e25e\",\"symbol\":\"pFi\",\"name\":\"PartyFinance\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe46b4a950c389e80621d10dfc398e91613c7e25e.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x0e9b89007eee9c958c0eda24ef70723c2c93dd58\":{\"address\":\"0x0e9b89007eee9c958c0eda24ef70723c2c93dd58\",\"symbol\":\"ankrMATIC\",\"name\":\"Ankr Staked MATIC\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x0e9b89007eee9c958c0eda24ef70723c2c93dd58.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x00e5646f60ac6fb446f621d146b6e1886f002905\":{\"address\":\"0x00e5646f60ac6fb446f621d146b6e1886f002905\",\"symbol\":\"RAI\",\"name\":\"Rai Reflex Index (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x00e5646f60ac6fb446f621d146b6e1886f002905.png\",\"tags\":[\"crosschain\",\"GROUP:RAI\",\"tokens\"]},\"0x361a5a4993493ce00f61c32d4ecca5512b82ce90\":{\"address\":\"0x361a5a4993493ce00f61c32d4ecca5512b82ce90\",\"symbol\":\"SDT\",\"name\":\"Stake DAO Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x73968b9a57c6e53d41345fd57a6e6ae27d6cdb2f.png\",\"tags\":[\"crosschain\",\"GROUP:SDT\",\"tokens\"]},\"0xdbf31df14b66535af65aac99c32e9ea844e14501\":{\"address\":\"0xdbf31df14b66535af65aac99c32e9ea844e14501\",\"symbol\":\"renBTC\",\"name\":\"renBTC\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xdbf31df14b66535af65aac99c32e9ea844e14501.png\",\"tags\":[\"crosschain\",\"GROUP:renBTC\",\"tokens\"]},\"0xab0b2ddb9c7e440fac8e140a89c0dbcbf2d7bbff\":{\"address\":\"0xab0b2ddb9c7e440fac8e140a89c0dbcbf2d7bbff\",\"symbol\":\"iFARM\",\"name\":\"iFARM\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa0246c9032bc3a600820415ae600c6388619a14d.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x4e78011ce80ee02d2c3e649fb657e45898257815\":{\"address\":\"0x4e78011ce80ee02d2c3e649fb657e45898257815\",\"symbol\":\"KLIMA\",\"name\":\"Klima DAO\",\"decimals\":9,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x4e78011ce80ee02d2c3e649fb657e45898257815.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x033d942a6b495c4071083f4cde1f17e986fe856c\":{\"address\":\"0x033d942a6b495c4071083f4cde1f17e986fe856c\",\"symbol\":\"AGA\",\"name\":\"AGA Token\",\"decimals\":4,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2d80f5f5328fdcb6eceb7cacf5dd8aedaec94e20.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x4e3decbb3645551b8a19f0ea1678079fcb33fb4c\":{\"address\":\"0x4e3decbb3645551b8a19f0ea1678079fcb33fb4c\",\"symbol\":\"jEUR\",\"name\":\"Jarvis Synthetic Euro\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x4e3decbb3645551b8a19f0ea1678079fcb33fb4c.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x1c954e8fe737f99f68fa1ccda3e51ebdb291948c\":{\"address\":\"0x1c954e8fe737f99f68fa1ccda3e51ebdb291948c\",\"symbol\":\"KNC\",\"name\":\"Kyber Network Crystal v2\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1c954e8fe737f99f68fa1ccda3e51ebdb291948c.png\",\"tags\":[\"crosschain\",\"GROUP:KNC\",\"tokens\"]},\"0xee9a352f6aac4af1a5b9f467f6a93e0ffbe9dd35\":{\"address\":\"0xee9a352f6aac4af1a5b9f467f6a93e0ffbe9dd35\",\"symbol\":\"MASQ\",\"name\":\"MASQ (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xee9a352f6aac4af1a5b9f467f6a93e0ffbe9dd35.png\",\"tags\":[\"crosschain\",\"GROUP:MASQ\",\"tokens\"]},\"0x78a0a62fba6fb21a83fe8a3433d44c73a4017a6f\":{\"address\":\"0x78a0a62fba6fb21a83fe8a3433d44c73a4017a6f\",\"symbol\":\"OX_OLD\",\"name\":\"Open Exchange Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x78a0a62fba6fb21a83fe8a3433d44c73a4017a6f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x8f9e8e833a69aa467e42c46cca640da84dd4585f\":{\"address\":\"0x8f9e8e833a69aa467e42c46cca640da84dd4585f\",\"symbol\":\"CHAMP\",\"name\":\"NFT Champions\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8f9e8e833a69aa467e42c46cca640da84dd4585f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x5fe2b58c013d7601147dcdd68c143a77499f5531\":{\"address\":\"0x5fe2b58c013d7601147dcdd68c143a77499f5531\",\"symbol\":\"GRT\",\"name\":\"Graph Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x5fe2b58c013d7601147dcdd68c143a77499f5531.png\",\"tags\":[\"crosschain\",\"GROUP:GRT\",\"tokens\"]},\"0xa1428174f516f527fafdd146b883bb4428682737\":{\"address\":\"0xa1428174f516f527fafdd146b883bb4428682737\",\"symbol\":\"SUPER\",\"name\":\"SuperFarm\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe53ec727dbdeb9e2d5456c3be40cff031ab40a55.png\",\"tags\":[\"crosschain\",\"GROUP:SUPER\",\"tokens\"]},\"0x8f18dc399594b451eda8c5da02d0563c0b2d0f16\":{\"address\":\"0x8f18dc399594b451eda8c5da02d0563c0b2d0f16\",\"symbol\":\"WOLF\",\"name\":\"moonwolf.io\",\"decimals\":9,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8f18dc399594b451eda8c5da02d0563c0b2d0f16.png\",\"tags\":[\"tokens\"]},\"0xdab625853c2b35d0a9c6bd8e5a097a664ef4ccfb\":{\"address\":\"0xdab625853c2b35d0a9c6bd8e5a097a664ef4ccfb\",\"symbol\":\"eQUAD\",\"name\":\"Quadrant Protocol\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xdab625853c2b35d0a9c6bd8e5a097a664ef4ccfb.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x04b33078ea1aef29bf3fb29c6ab7b200c58ea126\":{\"address\":\"0x04b33078ea1aef29bf3fb29c6ab7b200c58ea126\",\"symbol\":\"SAFLE\",\"name\":\"Safle\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x04b33078ea1aef29bf3fb29c6ab7b200c58ea126.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x88c949b4eb85a90071f2c0bef861bddee1a7479d\":{\"address\":\"0x88c949b4eb85a90071f2c0bef861bddee1a7479d\",\"symbol\":\"mSHEESHA\",\"name\":\"SHEESHA POLYGON\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x88c949b4eb85a90071f2c0bef861bddee1a7479d.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x45c32fa6df82ead1e2ef74d17b76547eddfaff89\":{\"address\":\"0x45c32fa6df82ead1e2ef74d17b76547eddfaff89\",\"symbol\":\"FRAX\",\"name\":\"Frax\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x45c32fa6df82ead1e2ef74d17b76547eddfaff89.png\",\"tags\":[\"crosschain\",\"GROUP:FRAX\",\"tokens\"]},\"0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7\":{\"address\":\"0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7\",\"symbol\":\"MASK\",\"name\":\"Mask Network (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xf50d05a1402d0adafa880d36050736f9f6ee7dee\":{\"address\":\"0xf50d05a1402d0adafa880d36050736f9f6ee7dee\",\"symbol\":\"INST\",\"name\":\"Instadapp (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xf50d05a1402d0adafa880d36050736f9f6ee7dee.png\",\"tags\":[\"crosschain\",\"GROUP:INST\",\"tokens\"]},\"0xc004e2318722ea2b15499d6375905d75ee5390b8\":{\"address\":\"0xc004e2318722ea2b15499d6375905d75ee5390b8\",\"symbol\":\"KOM\",\"name\":\"Kommunitas\",\"decimals\":8,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc004e2318722ea2b15499d6375905d75ee5390b8.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x55555555a687343c6ce28c8e1f6641dc71659fad\":{\"address\":\"0x55555555a687343c6ce28c8e1f6641dc71659fad\",\"symbol\":\"XY\",\"name\":\"XY Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x55555555a687343c6ce28c8e1f6641dc71659fad.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xe5417af564e4bfda1c483642db72007871397896\":{\"address\":\"0xe5417af564e4bfda1c483642db72007871397896\",\"symbol\":\"GNS\",\"name\":\"Gains Network\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe5417af564e4bfda1c483642db72007871397896.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x3a9a81d576d83ff21f26f325066054540720fc34\":{\"address\":\"0x3a9a81d576d83ff21f26f325066054540720fc34\",\"symbol\":\"DATA\",\"name\":\"Streamr\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3a9a81d576d83ff21f26f325066054540720fc34.png\",\"tags\":[\"crosschain\",\"GROUP:DATA\",\"tokens\"]},\"0x5d47baba0d66083c52009271faf3f50dcc01023c\":{\"address\":\"0x5d47baba0d66083c52009271faf3f50dcc01023c\",\"symbol\":\"BANANA\",\"name\":\"ApeSwapFinance Banana\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x5d47baba0d66083c52009271faf3f50dcc01023c.png\",\"tags\":[\"crosschain\",\"GROUP:BANANA\",\"tokens\"]},\"0x840195888db4d6a99ed9f73fcd3b225bb3cb1a79\":{\"address\":\"0x840195888db4d6a99ed9f73fcd3b225bb3cb1a79\",\"symbol\":\"SX\",\"name\":\"SportX\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x99fe3b1391503a1bc1788051347a1324bff41452.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xe0b52e49357fd4daf2c15e02058dce6bc0057db4\":{\"address\":\"0xe0b52e49357fd4daf2c15e02058dce6bc0057db4\",\"symbol\":\"EURA\",\"name\":\"EURA (previously agEUR)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe0b52e49357fd4daf2c15e02058dce6bc0057db4.png\",\"tags\":[\"crosschain\",\"GROUP:EURA\",\"PEG:EUR\",\"tokens\"]},\"0x0d0b8488222f7f83b23e365320a4021b12ead608\":{\"address\":\"0x0d0b8488222f7f83b23e365320a4021b12ead608\",\"symbol\":\"NXTT\",\"name\":\"NextEarthToken\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x0d0b8488222f7f83b23e365320a4021b12ead608.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x61299774020da444af134c82fa83e3810b309991\":{\"address\":\"0x61299774020da444af134c82fa83e3810b309991\",\"symbol\":\"RNDR\",\"name\":\"Render Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"\",\"tags\":[\"crosschain\",\"GROUP:RNDR\",\"tokens\"]},\"0x9c78ee466d6cb57a4d01fd887d2b5dfb2d46288f\":{\"address\":\"0x9c78ee466d6cb57a4d01fd887d2b5dfb2d46288f\",\"symbol\":\"MUST\",\"name\":\"Must\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x9c78ee466d6cb57a4d01fd887d2b5dfb2d46288f.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc3ec80343d2bae2f8e680fdadde7c17e71e114ea\":{\"address\":\"0xc3ec80343d2bae2f8e680fdadde7c17e71e114ea\",\"symbol\":\"OM\",\"name\":\"OM\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0xc3ec80343d2bae2f8e680fdadde7c17e71e114ea.webp\",\"tags\":[\"crosschain\",\"GROUP:OM\",\"tokens\"]},\"0x2934b36ca9a4b31e633c5be670c8c8b28b6aa015\":{\"address\":\"0x2934b36ca9a4b31e633c5be670c8c8b28b6aa015\",\"symbol\":\"THX\",\"name\":\"THX Network (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2934b36ca9a4b31e633c5be670c8c8b28b6aa015.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xdf7837de1f2fa4631d716cf2502f8b230f1dcc32\":{\"address\":\"0xdf7837de1f2fa4631d716cf2502f8b230f1dcc32\",\"symbol\":\"TEL\",\"name\":\"Telcoin\",\"decimals\":2,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x467bccd9d29f223bce8043b84e8c8b282827790f.png\",\"tags\":[\"crosschain\",\"GROUP:TEL\",\"tokens\"]},\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\":{\"address\":\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\",\"symbol\":\"AAVE\",\"name\":\"Aave\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0xd6df932a45c0f255f85145f286ea0b292b21c90b.webp\",\"tags\":[\"crosschain\",\"GROUP:AAVE\",\"tokens\"]},\"0xc1c93d475dc82fe72dbc7074d55f5a734f8ceeae\":{\"address\":\"0xc1c93d475dc82fe72dbc7074d55f5a734f8ceeae\",\"symbol\":\"PGX\",\"name\":\"Pegaxy Stone\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc1c93d475dc82fe72dbc7074d55f5a734f8ceeae.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x76e63a3e7ba1e2e61d3da86a87479f983de89a7e\":{\"address\":\"0x76e63a3e7ba1e2e61d3da86a87479f983de89a7e\",\"symbol\":\"OMEN\",\"name\":\"Augury Finance\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x76e63a3e7ba1e2e61d3da86a87479f983de89a7e.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xb9638272ad6998708de56bbc0a290a1de534a578\":{\"address\":\"0xb9638272ad6998708de56bbc0a290a1de534a578\",\"symbol\":\"IQ\",\"name\":\"Everipedia IQ (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xb9638272ad6998708de56bbc0a290a1de534a578.png\",\"tags\":[\"crosschain\",\"GROUP:IQ\",\"tokens\"]},\"0x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7\":{\"address\":\"0x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7\",\"symbol\":\"MVX\",\"name\":\"Metavault Trade\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7.png\",\"tags\":[\"crosschain\",\"GROUP:MVX\",\"tokens\"]},\"0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b\":{\"address\":\"0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b\",\"symbol\":\"BOB\",\"name\":\"BOB\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xf1428850f92b87e629c6f3a3b75bffbc496f7ba6\":{\"address\":\"0xf1428850f92b87e629c6f3a3b75bffbc496f7ba6\",\"symbol\":\"GEO$\",\"name\":\"GEOPOLY\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xf1428850f92b87e629c6f3a3b75bffbc496f7ba6.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xec38621e72d86775a89c7422746de1f52bba5320\":{\"address\":\"0xec38621e72d86775a89c7422746de1f52bba5320\",\"symbol\":\"DAVOS\",\"name\":\"Davos\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xec38621e72d86775a89c7422746de1f52bba5320.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc3fdbadc7c795ef1d6ba111e06ff8f16a20ea539\":{\"address\":\"0xc3fdbadc7c795ef1d6ba111e06ff8f16a20ea539\",\"symbol\":\"ADDY\",\"name\":\"Adamant\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc3fdbadc7c795ef1d6ba111e06ff8f16a20ea539.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x44d09156c7b4acf0c64459fbcced7613f5519918\":{\"address\":\"0x44d09156c7b4acf0c64459fbcced7613f5519918\",\"symbol\":\"$KMC\",\"name\":\"$KMC\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x44d09156c7b4acf0c64459fbcced7613f5519918.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xaaa5b9e6c589642f98a1cda99b9d024b8407285a\":{\"address\":\"0xaaa5b9e6c589642f98a1cda99b9d024b8407285a\",\"symbol\":\"TITAN\",\"name\":\"IRON Titanium Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xaaa5b9e6c589642f98a1cda99b9d024b8407285a.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x3b56a704c01d650147ade2b8cee594066b3f9421\":{\"address\":\"0x3b56a704c01d650147ade2b8cee594066b3f9421\",\"symbol\":\"FYN\",\"name\":\"Affyn\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x3b56a704c01d650147ade2b8cee594066b3f9421.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x03b54a6e9a984069379fae1a4fc4dbae93b3bccd\":{\"address\":\"0x03b54a6e9a984069379fae1a4fc4dbae93b3bccd\",\"symbol\":\"WstETH\",\"name\":\"Wrapped liquid staked Ether 2.0 (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x03b54a6e9a984069379fae1a4fc4dbae93b3bccd.png\",\"tags\":[\"crosschain\",\"GROUP:Wst ETH\",\"tokens\"]},\"0x598e49f01befeb1753737934a5b11fea9119c796\":{\"address\":\"0x598e49f01befeb1753737934a5b11fea9119c796\",\"symbol\":\"ADS\",\"name\":\"Adshares (PoS)\",\"decimals\":11,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x598e49f01befeb1753737934a5b11fea9119c796.png\",\"tags\":[\"crosschain\",\"GROUP:ADS\",\"tokens\"]},\"0xd93f7e271cb87c23aaa73edc008a79646d1f9912\":{\"address\":\"0xd93f7e271cb87c23aaa73edc008a79646d1f9912\",\"symbol\":\"SOL\",\"name\":\"Wrapped SOL\",\"decimals\":9,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd93f7e271cb87c23aaa73edc008a79646d1f9912.png\",\"tags\":[\"crosschain\",\"GROUP:SOL\",\"tokens\"]},\"0xa3c322ad15218fbfaed26ba7f616249f7705d945\":{\"address\":\"0xa3c322ad15218fbfaed26ba7f616249f7705d945\",\"symbol\":\"MV\",\"name\":\"Metaverse (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xa3c322ad15218fbfaed26ba7f616249f7705d945.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x8a953cfe442c5e8855cc6c61b1293fa648bae472\":{\"address\":\"0x8a953cfe442c5e8855cc6c61b1293fa648bae472\",\"symbol\":\"PolyDoge\",\"name\":\"PolyDoge\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8a953cfe442c5e8855cc6c61b1293fa648bae472.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x228b5c21ac00155cf62c57bcc704c0da8187950b\":{\"address\":\"0x228b5c21ac00155cf62c57bcc704c0da8187950b\",\"symbol\":\"NXD\",\"name\":\"Nexus Dubai\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x228b5c21ac00155cf62c57bcc704c0da8187950b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xd1f9c58e33933a993a3891f8acfe05a68e1afc05\":{\"address\":\"0xd1f9c58e33933a993a3891f8acfe05a68e1afc05\",\"symbol\":\"SFL\",\"name\":\"Sunflower Land\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xd1f9c58e33933a993a3891f8acfe05a68e1afc05.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x695fc8b80f344411f34bdbcb4e621aa69ada384b\":{\"address\":\"0x695fc8b80f344411f34bdbcb4e621aa69ada384b\",\"symbol\":\"NITRO\",\"name\":\"Nitro (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x695fc8b80f344411f34bdbcb4e621aa69ada384b.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x8df3aad3a84da6b69a4da8aec3ea40d9091b2ac4\":{\"address\":\"0x8df3aad3a84da6b69a4da8aec3ea40d9091b2ac4\",\"symbol\":\"amWMATIC\",\"name\":\"Aave Matic Market WMATIC\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x8df3aad3a84da6b69a4da8aec3ea40d9091b2ac4.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3\":{\"address\":\"0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3\",\"symbol\":\"BAL\",\"name\":\"Balancer\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3.png\",\"tags\":[\"crosschain\",\"GROUP:BAL\",\"tokens\"]},\"0xe2aa7db6da1dae97c5f5c6914d285fbfcc32a128\":{\"address\":\"0xe2aa7db6da1dae97c5f5c6914d285fbfcc32a128\",\"symbol\":\"PAR\",\"name\":\"PAR Stablecoin\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xe2aa7db6da1dae97c5f5c6914d285fbfcc32a128.png\",\"tags\":[\"crosschain\",\"GROUP:PAR\",\"tokens\"]},\"0x90f3edc7d5298918f7bb51694134b07356f7d0c7\":{\"address\":\"0x90f3edc7d5298918f7bb51694134b07356f7d0c7\",\"symbol\":\"DDAO\",\"name\":\"DEFI HUNTERS DAO Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x90f3edc7d5298918f7bb51694134b07356f7d0c7.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xb77e62709e39ad1cbeebe77cf493745aec0f453a\":{\"address\":\"0xb77e62709e39ad1cbeebe77cf493745aec0f453a\",\"symbol\":\"WISE\",\"name\":\"Wise Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x66a0f676479cee1d7373f3dc2e2952778bff5bd6.png\",\"tags\":[\"crosschain\",\"GROUP:WISE\",\"tokens\"]},\"0x428360b02c1269bc1c79fbc399ad31d58c1e8fda\":{\"address\":\"0x428360b02c1269bc1c79fbc399ad31d58c1e8fda\",\"symbol\":\"DEFIT\",\"name\":\"Digital Fitness\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x428360b02c1269bc1c79fbc399ad31d58c1e8fda.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x1b815d120b3ef02039ee11dc2d33de7aa4a8c603\":{\"address\":\"0x1b815d120b3ef02039ee11dc2d33de7aa4a8c603\",\"symbol\":\"WOO\",\"name\":\"Wootrade Network\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x1b815d120b3ef02039ee11dc2d33de7aa4a8c603.png\",\"tags\":[\"crosschain\",\"GROUP:WOO\",\"tokens\"]},\"0x614389eaae0a6821dc49062d56bda3d9d45fa2ff\":{\"address\":\"0x614389eaae0a6821dc49062d56bda3d9d45fa2ff\",\"symbol\":\"ORBS\",\"name\":\"Orbs (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x614389eaae0a6821dc49062d56bda3d9d45fa2ff.png\",\"tags\":[\"crosschain\",\"GROUP:ORBS\",\"tokens\"]},\"0xb5c064f955d8e7f38fe0460c556a72987494ee17\":{\"address\":\"0xb5c064f955d8e7f38fe0460c556a72987494ee17\",\"symbol\":\"QUICK\",\"name\":\"QuickSwap\",\"decimals\":18,\"eip2612\":true,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xb5c064f955d8e7f38fe0460c556a72987494ee17.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0xc19669a405067927865b40ea045a2baabbbe57f5\":{\"address\":\"0xc19669a405067927865b40ea045a2baabbbe57f5\",\"symbol\":\"STAR\",\"name\":\"STAR\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc19669a405067927865b40ea045a2baabbbe57f5.png\",\"tags\":[\"crosschain\",\"tokens\"]},\"0x27f485b62c4a7e635f561a87560adf5090239e93\":{\"address\":\"0x27f485b62c4a7e635f561a87560adf5090239e93\",\"symbol\":\"DFX_1\",\"name\":\"DFX Token (L2)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0x27f485b62c4a7e635f561a87560adf5090239e93.webp\",\"tags\":[\"tokens\"]},\"0xc3c7d422809852031b44ab29eec9f1eff2a58756\":{\"address\":\"0xc3c7d422809852031b44ab29eec9f1eff2a58756\",\"symbol\":\"LDO\",\"name\":\"Lido DAO Token (PoS)\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0xc3c7d422809852031b44ab29eec9f1eff2a58756.png\",\"tags\":[\"crosschain\",\"GROUP:LDO\",\"tokens\"]}}},\"id\":null}"
										}
									]
								},
								{
									"name": "1inch_v6_0_classic_swap_create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_create\",\r\n    \"params\": {\r\n      \"base\": \"MATIC\",\r\n      \"rel\": \"AAVE-PLG20\",\r\n      \"amount\": 0.1,\r\n      \"slippage\": 1,\r\n      \"include_tokens_info\": true,\r\n      \"include_protocols\": true,\r\n      \"include_gas\": true,\r\n      \"fee\": 0,\r\n      \"complexity_level\": 3,\r\n      \"gas_limit\": 11500000,\r\n      \"main_route_parts\": 50,\r\n      \"parts\": 100,\r\n      \"protocols\": \"\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: missing param",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_create\",\r\n    \"params\": {\r\n      \"base\": \"MATIC\",\r\n      \"rel\": \"AAVE-PLG20\",\r\n      \"amount\": 0.1,\r\n      \"include_tokens_info\": true,\r\n      \"include_protocols\": true,\r\n      \"include_gas\": true,\r\n      \"fee\": 0,\r\n      \"complexity_level\": 3,\r\n      \"gas_limit\": 11500000,\r\n      \"main_route_parts\": 50,\r\n      \"parts\": 100,\r\n      \"protocols\": \"\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "211"
												},
												{
													"key": "date",
													"value": "Fri, 13 Dec 2024 00:50:49 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"Error parsing request: missing field `slippage`\",\"error_path\":\"dispatcher\",\"error_trace\":\"dispatcher:121]\",\"error_type\":\"InvalidRequest\",\"error_data\":\"missing field `slippage`\",\"id\":null}"
										},
										{
											"name": "Error: 401 Unauthorised",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_create\",\r\n    \"params\": {\r\n      \"base\": \"MATIC\",\r\n      \"rel\": \"AAVE-PLG20\",\r\n      \"amount\": 0.1,\r\n      \"slippage\": 1,\r\n      \"include_tokens_info\": true,\r\n      \"include_protocols\": true,\r\n      \"include_gas\": true,\r\n      \"fee\": 0,\r\n      \"complexity_level\": 3,\r\n      \"gas_limit\": 11500000,\r\n      \"main_route_parts\": 50,\r\n      \"parts\": 100,\r\n      \"protocols\": \"\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "288"
												},
												{
													"key": "date",
													"value": "Fri, 13 Dec 2024 00:52:00 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"1inch API error: General API error: Unauthorized description: \",\"error_path\":\"rpcs.client\",\"error_trace\":\"rpcs:109] client:152]\",\"error_type\":\"OneInchError\",\"error_data\":{\"GeneralApiError\":{\"error_msg\":\"Unauthorized\",\"description\":\"\",\"status_code\":401}},\"id\":null}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_create\",\r\n    \"params\": {\r\n      \"base\": \"MATIC\",\r\n      \"rel\": \"AAVE-PLG20\",\r\n      \"amount\": 0.1,\r\n      \"slippage\": 1,\r\n      \"include_tokens_info\": true,\r\n      \"include_protocols\": true,\r\n      \"include_gas\": true,\r\n      \"fee\": 0,\r\n      \"complexity_level\": 3,\r\n      \"gas_limit\": 11500000,\r\n      \"main_route_parts\": 50,\r\n      \"parts\": 100,\r\n      \"protocols\": \"\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "1313"
												},
												{
													"key": "date",
													"value": "Sun, 15 Dec 2024 08:47:47 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"dst_amount\":{\"amount\":\"0.000161419548382137\",\"amount_fraction\":{\"numer\":\"161419548382137\",\"denom\":\"1000000000000000000\"},\"amount_rat\":[[1,[1792496569,37583]],[1,[2808348672,232830643]]]},\"src_token\":{\"address\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"symbol\":\"POL\",\"name\":\"Polygon Ecosystem Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0.png\",\"tags\":[\"crosschain\",\"GROUP:POL\",\"native\"]},\"dst_token\":{\"address\":\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\",\"symbol\":\"AAVE\",\"name\":\"Aave\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0xd6df932a45c0f255f85145f286ea0b292b21c90b.webp\",\"tags\":[\"crosschain\",\"GROUP:AAVE\",\"tokens\"]},\"protocols\":[[[{\"name\":\"POLYGON_SUSHISWAP\",\"part\":100.0,\"fromTokenAddress\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"toTokenAddress\":\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\"}]]],\"tx\":{\"from\":\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\",\"to\":\"0x111111125421ca6dc452d289314280a0f8842a65\",\"data\":\"a76dfc3b00000000000000000000000000000000000000000000000000009157954aef0b00800000000000003b6d03407d88d931504d04bfbee6f9745297a93063cab24cc095c0a2\",\"value\":\"0.1\",\"gas_price\":\"149.512528885\",\"gas\":186626},\"gas\":null},\"id\":null}"
										}
									]
								},
								{
									"name": "1inch_v6_0_classic_swap_liquidity_sources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_liquidity_sources\",\r\n    \"params\": {\r\n        \"chain_id\": 1\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: 401 Unauthorised",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_liquidity_sources\",\r\n    \"params\": {\r\n        \"chain_id\": 1\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "288"
												},
												{
													"key": "date",
													"value": "Fri, 13 Dec 2024 00:53:56 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"1inch API error: General API error: Unauthorized description: \",\"error_path\":\"rpcs.client\",\"error_trace\":\"rpcs:124] client:152]\",\"error_type\":\"OneInchError\",\"error_data\":{\"GeneralApiError\":{\"error_msg\":\"Unauthorized\",\"description\":\"\",\"status_code\":401}},\"id\":null}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_liquidity_sources\",\r\n    \"params\": {\r\n        \"chain_id\": 1\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "23831"
												},
												{
													"key": "date",
													"value": "Sun, 15 Dec 2024 08:42:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"protocols\": [\n            {\n                \"id\": \"UNISWAP_V1\",\n                \"title\": \"Uniswap V1\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap_color.png\"\n            },\n            {\n                \"id\": \"UNISWAP_V2\",\n                \"title\": \"Uniswap V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap_color.png\"\n            },\n            {\n                \"id\": \"SUSHI\",\n                \"title\": \"SushiSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/sushiswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/sushiswap_color.png\"\n            },\n            {\n                \"id\": \"MOONISWAP\",\n                \"title\": \"Mooniswap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/mooniswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/mooniswap_color.png\"\n            },\n            {\n                \"id\": \"BALANCER\",\n                \"title\": \"Balancer\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer_color.png\"\n            },\n            {\n                \"id\": \"COMPOUND\",\n                \"title\": \"Compound\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/compound.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/compound_color.png\"\n            },\n            {\n                \"id\": \"CURVE\",\n                \"title\": \"Curve\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_SPELL_2_ASSET\",\n                \"title\": \"Curve Spell\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_SGT_2_ASSET\",\n                \"title\": \"Curve SGT\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_THRESHOLDNETWORK_2_ASSET\",\n                \"title\": \"Curve Threshold\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CHAI\",\n                \"title\": \"Chai\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/chai.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/chai_color.png\"\n            },\n            {\n                \"id\": \"OASIS\",\n                \"title\": \"Oasis\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/oasis.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/oasis_color.png\"\n            },\n            {\n                \"id\": \"KYBER\",\n                \"title\": \"Kyber\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber_color.png\"\n            },\n            {\n                \"id\": \"AAVE\",\n                \"title\": \"Aave\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/aave.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/aave_color.png\"\n            },\n            {\n                \"id\": \"IEARN\",\n                \"title\": \"yearn\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/yearn.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/yearn_color.png\"\n            },\n            {\n                \"id\": \"BANCOR\",\n                \"title\": \"Bancor\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/bancor.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/bancor_color.png\"\n            },\n            {\n                \"id\": \"SWERVE\",\n                \"title\": \"Swerve\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/swerve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/swerve_color.png\"\n            },\n            {\n                \"id\": \"BLACKHOLESWAP\",\n                \"title\": \"BlackholeSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/blackholeswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/blackholeswap_color.png\"\n            },\n            {\n                \"id\": \"DODO\",\n                \"title\": \"DODO\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo_color.png\"\n            },\n            {\n                \"id\": \"DODO_V2\",\n                \"title\": \"DODO v2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo_color.png\"\n            },\n            {\n                \"id\": \"VALUELIQUID\",\n                \"title\": \"Value Liquid\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/valueliquid.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/valueliquid_color.png\"\n            },\n            {\n                \"id\": \"SHELL\",\n                \"title\": \"Shell\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/shell.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/shell_color.png\"\n            },\n            {\n                \"id\": \"DEFISWAP\",\n                \"title\": \"DeFi Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/defiswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/defiswap_color.png\"\n            },\n            {\n                \"id\": \"SAKESWAP\",\n                \"title\": \"Sake Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/sakeswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/sakeswap_color.png\"\n            },\n            {\n                \"id\": \"LUASWAP\",\n                \"title\": \"Lua Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/luaswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/luaswap_color.png\"\n            },\n            {\n                \"id\": \"MINISWAP\",\n                \"title\": \"Mini Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/miniswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/miniswap_color.png\"\n            },\n            {\n                \"id\": \"MSTABLE\",\n                \"title\": \"MStable\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/mstable.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/mstable_color.png\"\n            },\n            {\n                \"id\": \"AAVE_V2\",\n                \"title\": \"Aave V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/aave.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/aave_color.png\"\n            },\n            {\n                \"id\": \"ST_ETH\",\n                \"title\": \"LiDo\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/steth.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/steth_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LP\",\n                \"title\": \"1INCH LP v1.0\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LP_1_1\",\n                \"title\": \"1INCH LP v1.1\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"LINKSWAP\",\n                \"title\": \"LINKSWAP\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/linkswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/linkswap_color.png\"\n            },\n            {\n                \"id\": \"S_FINANCE\",\n                \"title\": \"sFinance\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/sfinance.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/sfinance_color.png\"\n            },\n            {\n                \"id\": \"PSM\",\n                \"title\": \"PSM USDC\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maker.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maker_color.png\"\n            },\n            {\n                \"id\": \"POWERINDEX\",\n                \"title\": \"POWERINDEX\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/powerindex.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/powerindex_color.png\"\n            },\n            {\n                \"id\": \"XSIGMA\",\n                \"title\": \"xSigma\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/xsigma.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/xsigma_color.png\"\n            },\n            {\n                \"id\": \"SMOOTHY_FINANCE\",\n                \"title\": \"Smoothy Finance\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/smoothy.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/smoothy_color.png\"\n            },\n            {\n                \"id\": \"SADDLE\",\n                \"title\": \"Saddle Finance\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/saddle.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/saddle_color.png\"\n            },\n            {\n                \"id\": \"KYBER_DMM\",\n                \"title\": \"Kyber DMM\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber_color.png\"\n            },\n            {\n                \"id\": \"BALANCER_V2\",\n                \"title\": \"Balancer V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer_color.png\"\n            },\n            {\n                \"id\": \"UNISWAP_V3\",\n                \"title\": \"Uniswap V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/uniswap_color.png\"\n            },\n            {\n                \"id\": \"SETH_WRAPPER\",\n                \"title\": \"sETH Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2\",\n                \"title\": \"Curve V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_EURS_2_ASSET\",\n                \"title\": \"Curve V2 EURS\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_ETH_CRV\",\n                \"title\": \"Curve V2 ETH CRV\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_ETH_CVX\",\n                \"title\": \"Curve V2 ETH CVX\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CONVERGENCE_X\",\n                \"title\": \"Convergence X\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/convergence.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/convergence_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LIMIT_ORDER\",\n                \"title\": \"1inch Limit Order Protocol\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LIMIT_ORDER_V2\",\n                \"title\": \"1inch Limit Order Protocol V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LIMIT_ORDER_V3\",\n                \"title\": \"1inch Limit Order Protocol V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"ONE_INCH_LIMIT_ORDER_V4\",\n                \"title\": \"1inch Limit Order Protocol V4\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"DFX_FINANCE\",\n                \"title\": \"DFX Finance\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/dfx.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/dfx_color.png\"\n            },\n            {\n                \"id\": \"FIXED_FEE_SWAP\",\n                \"title\": \"Fixed Fee Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"DXSWAP\",\n                \"title\": \"Swapr\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/swapr.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/swapr_color.png\"\n            },\n            {\n                \"id\": \"SHIBASWAP\",\n                \"title\": \"ShibaSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/shiba.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/shiba_color.png\"\n            },\n            {\n                \"id\": \"UNIFI\",\n                \"title\": \"Unifi\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/unifi.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/unifi_color.png\"\n            },\n            {\n                \"id\": \"PSM_PAX\",\n                \"title\": \"PSM USDP\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maker.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maker_color.png\"\n            },\n            {\n                \"id\": \"WSTETH\",\n                \"title\": \"wstETH\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/steth.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/steth_color.png\"\n            },\n            {\n                \"id\": \"DEFI_PLAZA\",\n                \"title\": \"DeFi Plaza\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/defiplaza.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/defiplaza_color.png\"\n            },\n            {\n                \"id\": \"FIXED_FEE_SWAP_V3\",\n                \"title\": \"Fixed Rate Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/1inch_color.png\"\n            },\n            {\n                \"id\": \"SYNTHETIX_WRAPPER\",\n                \"title\": \"Wrapped Synthetix\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"SYNAPSE\",\n                \"title\": \"Synapse\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synapse.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synapse_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_YFI_2_ASSET\",\n                \"title\": \"Curve Yfi\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_ETH_PAL\",\n                \"title\": \"Curve V2 ETH Pal\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"POOLTOGETHER\",\n                \"title\": \"Pooltogether\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/pooltogether.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/pooltogether_color.png\"\n            },\n            {\n                \"id\": \"ETH_BANCOR_V3\",\n                \"title\": \"Bancor V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/bancor.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/bancor_color.png\"\n            },\n            {\n                \"id\": \"ELASTICSWAP\",\n                \"title\": \"ElasticSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/elastic_swap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/elastic_swap_color.png\"\n            },\n            {\n                \"id\": \"BALANCER_V2_WRAPPER\",\n                \"title\": \"Balancer V2 Aave Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/balancer_color.png\"\n            },\n            {\n                \"id\": \"FRAXSWAP\",\n                \"title\": \"FraxSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/frax_swap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/frax_swap_color.png\"\n            },\n            {\n                \"id\": \"RADIOSHACK\",\n                \"title\": \"RadioShack\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/radioshack.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/radioshack_color.png\"\n            },\n            {\n                \"id\": \"KYBERSWAP_ELASTIC\",\n                \"title\": \"KyberSwap Elastic\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_TWO_CRYPTO\",\n                \"title\": \"Curve V2 2Crypto\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"STABLE_PLAZA\",\n                \"title\": \"Stable Plaza\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/defiplaza.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/defiplaza_color.png\"\n            },\n            {\n                \"id\": \"ZEROX_LIMIT_ORDER\",\n                \"title\": \"0x Limit Order\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/0x.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/0x_color.png\"\n            },\n            {\n                \"id\": \"CURVE_3CRV\",\n                \"title\": \"Curve 3CRV\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"KYBER_DMM_STATIC\",\n                \"title\": \"Kyber DMM Static\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/kyber_color.png\"\n            },\n            {\n                \"id\": \"ANGLE\",\n                \"title\": \"Angle\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/angle.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/angle_color.png\"\n            },\n            {\n                \"id\": \"ROCKET_POOL\",\n                \"title\": \"Rocket Pool\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/rocketpool.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/rocketpool_color.png\"\n            },\n            {\n                \"id\": \"ETHEREUM_ELK\",\n                \"title\": \"ELK\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/elk.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/elk_color.png\"\n            },\n            {\n                \"id\": \"ETHEREUM_PANCAKESWAP_V2\",\n                \"title\": \"Pancake Swap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/pancakeswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/pancakeswap_color.png\"\n            },\n            {\n                \"id\": \"SYNTHETIX_ATOMIC_SIP288\",\n                \"title\": \"Synthetix Atomic SIP288\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"PSM_GUSD\",\n                \"title\": \"PSM GUSD\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maker.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maker_color.png\"\n            },\n            {\n                \"id\": \"INTEGRAL\",\n                \"title\": \"Integral\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/integral.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/integral_color.png\"\n            },\n            {\n                \"id\": \"MAINNET_SOLIDLY\",\n                \"title\": \"Solidly\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/solidly.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/solidly_color.png\"\n            },\n            {\n                \"id\": \"NOMISWAP_STABLE\",\n                \"title\": \"Nomiswap Stable\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/nomiswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/nomiswap_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_TWOCRYPTO_META\",\n                \"title\": \"Curve V2 2Crypto Meta\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"MAVERICK_V1\",\n                \"title\": \"Maverick V1\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maverick.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maverick_color.png\"\n            },\n            {\n                \"id\": \"VERSE\",\n                \"title\": \"Verse\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/verse.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/verse_color.png\"\n            },\n            {\n                \"id\": \"DFX_FINANCE_V3\",\n                \"title\": \"DFX Finance V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/dfx.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/dfx_color.png\"\n            },\n            {\n                \"id\": \"ZK_BOB\",\n                \"title\": \"BobSwap\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/zkbob.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/zkbob_color.png\"\n            },\n            {\n                \"id\": \"PANCAKESWAP_V3\",\n                \"title\": \"Pancake Swap V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/pancakeswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/pancakeswap_color.png\"\n            },\n            {\n                \"id\": \"NOMISWAPEPCS\",\n                \"title\": \"Nomiswap-epcs\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/nomiswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/nomiswap_color.png\"\n            },\n            {\n                \"id\": \"XFAI\",\n                \"title\": \"Xfai\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/xfai.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/xfai_color.png\"\n            },\n            {\n                \"id\": \"PMM11\",\n                \"title\": \"PMM11\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/pmm.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/pmm_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_LLAMMA\",\n                \"title\": \"Curve Llama\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_TRICRYPTO_NG\",\n                \"title\": \"Curve 3Crypto NG\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"CURVE_V2_TWOCRYPTO_NG\",\n                \"title\": \"Curve 2Crypto NG\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"SUSHISWAP_V3\",\n                \"title\": \"SushiSwap V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/sushiswap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/sushiswap_color.png\"\n            },\n            {\n                \"id\": \"SFRX_ETH\",\n                \"title\": \"sFrxEth\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/frax_swap.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/frax_swap_color.png\"\n            },\n            {\n                \"id\": \"SDAI\",\n                \"title\": \"sDAI\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maker.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maker_color.png\"\n            },\n            {\n                \"id\": \"ETHEREUM_WOMBATSWAP\",\n                \"title\": \"Wombat\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/wombat.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/wombat_color.png\"\n            },\n            {\n                \"id\": \"CARBON\",\n                \"title\": \"Carbon\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/carbon.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/carbon_color.png\"\n            },\n            {\n                \"id\": \"COMPOUND_V3\",\n                \"title\": \"Compound V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/compound.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/compound_color.png\"\n            },\n            {\n                \"id\": \"DODO_V3\",\n                \"title\": \"DODO v3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/dodo_color.png\"\n            },\n            {\n                \"id\": \"SMARDEX\",\n                \"title\": \"Smardex\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/smardex.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/smardex_color.png\"\n            },\n            {\n                \"id\": \"TRADERJOE_V2_1\",\n                \"title\": \"TraderJoe V2.1\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/traderjoe.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/traderjoe_color.png\"\n            },\n            {\n                \"id\": \"PMM15\",\n                \"title\": \"PMM15\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/pmm.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/pmm_color.png\"\n            },\n            {\n                \"id\": \"SOLIDLY_V3\",\n                \"title\": \"Solidly v3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/solidlyv3.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/solidlyv3_color.png\"\n            },\n            {\n                \"id\": \"RAFT_PSM\",\n                \"title\": \"Raft PSM\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/raftpsm.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/raftpsm_color.png\"\n            },\n            {\n                \"id\": \"CLAYSTACK\",\n                \"title\": \"Claystack\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/claystack.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/claystack_color.png\"\n            },\n            {\n                \"id\": \"CURVE_STABLE_NG\",\n                \"title\": \"Curve Stable NG\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"LIF3\",\n                \"title\": \"Lif3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/lif3.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/lif3_color.png\"\n            },\n            {\n                \"id\": \"BLUEPRINT\",\n                \"title\": \"Blueprint\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/blueprint.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/blueprint_color.png\"\n            },\n            {\n                \"id\": \"AAVE_V3\",\n                \"title\": \"Aave V3\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/aave.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/aave_color.png\"\n            },\n            {\n                \"id\": \"ORIGIN\",\n                \"title\": \"Origin\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/origin.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/origin_color.png\"\n            },\n            {\n                \"id\": \"BGD_AAVE_STATIC\",\n                \"title\": \"Bgd Aave Static\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/bgd_aave_static.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/bgd_aave_static_color.png\"\n            },\n            {\n                \"id\": \"SYNTHETIX_SUSD\",\n                \"title\": \"Synthetix\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"ORIGIN_WOETH\",\n                \"title\": \"Origin Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/origin.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/origin_color.png\"\n            },\n            {\n                \"id\": \"ETHENA\",\n                \"title\": \"Ethena\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/ethena_susde.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/ethena_susde_color.png\"\n            },\n            {\n                \"id\": \"SFRAX\",\n                \"title\": \"sFrax\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/_color.png\"\n            },\n            {\n                \"id\": \"SDOLA\",\n                \"title\": \"sDola\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/_color.png\"\n            },\n            {\n                \"id\": \"POL_MIGRATOR\",\n                \"title\": \"POL MIGRATOR\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/wmatic.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/wmatic_color.png\"\n            },\n            {\n                \"id\": \"LITEPSM_USDC\",\n                \"title\": \"LITEPSM USDC\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maker.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maker_color.png\"\n            },\n            {\n                \"id\": \"USDS_MIGRATOR\",\n                \"title\": \"USDS MIGRATOR\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/sky.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/sky_color.png\"\n            },\n            {\n                \"id\": \"MAVERICK_V2\",\n                \"title\": \"Maverick V2\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/maverick.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/maverick_color.png\"\n            },\n            {\n                \"id\": \"GHO_WRAPPER\",\n                \"title\": \"GHO Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"CRVUSD_WRAPPER\",\n                \"title\": \"CRVUSD Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"USDE_WRAPPER\",\n                \"title\": \"USDE Wrapper\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/synthetix_color.png\"\n            },\n            {\n                \"id\": \"FLUID_DEX_T1\",\n                \"title\": \"FLUID\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/fluid.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/fluid_color.png\"\n            },\n            {\n                \"id\": \"SCRVUSD\",\n                \"title\": \"SCRV\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/curve.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/curve_color.png\"\n            },\n            {\n                \"id\": \"ORIGIN_ARMOETH\",\n                \"title\": \"Origin ARM OETH\",\n                \"img\": \"https://cdn.1inch.io/liquidity-sources-logo/origin.png\",\n                \"img_color\": \"https://cdn.1inch.io/liquidity-sources-logo/origin_color.png\"\n            }\n        ]\n    },\n    \"id\": null\n}"
										}
									]
								},
								{
									"name": "1inch_v6_0_classic_swap_quote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_quote\",\r\n    \"params\": {\r\n        \"base\": \"MATIC\",\r\n        \"rel\": \"AAVE-PLG20\",\r\n        \"amount\": 0.1,\r\n        \"include_tokens_info\": true,\r\n        \"include_protocols\": true,\r\n        \"include_gas\": true,\r\n        \"fee\": 0,\r\n        \"complexity_level\": 3,\r\n        \"gas_limit\": 11500000,\r\n        \"main_route_parts\": 50,\r\n        \"parts\": 100,\r\n        \"protocols\": \"\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": [
										{
											"name": "Error: 401 Unauthorised",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_quote\",\r\n    \"params\": {\r\n        \"base\": \"MATIC\",\r\n        \"rel\": \"AAVE-PLG20\",\r\n        \"amount\": 0.1,\r\n        \"include_tokens_info\": true,\r\n        \"include_protocols\": true,\r\n        \"include_gas\": true,\r\n        \"fee\": 0,\r\n        \"complexity_level\": 3,\r\n        \"gas_limit\": 11500000,\r\n        \"main_route_parts\": 50,\r\n        \"parts\": 100,\r\n        \"protocols\": \"\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "Bad Gateway",
											"code": 502,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "287"
												},
												{
													"key": "date",
													"value": "Fri, 13 Dec 2024 00:55:30 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"error\":\"1inch API error: General API error: Unauthorized description: \",\"error_path\":\"rpcs.client\",\"error_trace\":\"rpcs:54] client:152]\",\"error_type\":\"OneInchError\",\"error_data\":{\"GeneralApiError\":{\"error_msg\":\"Unauthorized\",\"description\":\"\",\"status_code\":401}},\"id\":null}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"1inch_v6_0_classic_swap_quote\",\r\n    \"params\": {\r\n        \"base\": \"MATIC\",\r\n        \"rel\": \"AAVE-PLG20\",\r\n        \"amount\": 0.1,\r\n        \"include_tokens_info\": true,\r\n        \"include_protocols\": true,\r\n        \"include_gas\": true,\r\n        \"fee\": 0,\r\n        \"complexity_level\": 3,\r\n        \"gas_limit\": 11500000,\r\n        \"main_route_parts\": 50,\r\n        \"parts\": 100,\r\n        \"protocols\": \"\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{address}}",
													"host": [
														"{{address}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "access-control-allow-origin",
													"value": "http://localhost:3000"
												},
												{
													"key": "content-length",
													"value": "995"
												},
												{
													"key": "date",
													"value": "Sun, 15 Dec 2024 08:48:05 GMT"
												}
											],
											"cookie": [],
											"body": "{\"mmrpc\":\"2.0\",\"result\":{\"dst_amount\":{\"amount\":\"0.000161974310674394\",\"amount_fraction\":{\"numer\":\"80987155337197\",\"denom\":\"500000000000000000\"},\"amount_rat\":[[1,[1252003821,18856]],[1,[3551657984,116415321]]]},\"src_token\":{\"address\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"symbol\":\"POL\",\"name\":\"Polygon Ecosystem Token\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens.1inch.io/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0.png\",\"tags\":[\"crosschain\",\"GROUP:POL\",\"native\"]},\"dst_token\":{\"address\":\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\",\"symbol\":\"AAVE\",\"name\":\"Aave\",\"decimals\":18,\"eip2612\":false,\"isFoT\":false,\"logoURI\":\"https://tokens-data.1inch.io/images/137/0xd6df932a45c0f255f85145f286ea0b292b21c90b.webp\",\"tags\":[\"crosschain\",\"GROUP:AAVE\",\"tokens\"]},\"protocols\":[[[{\"name\":\"POLYGON_QUICKSWAP\",\"part\":100.0,\"fromTokenAddress\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"toTokenAddress\":\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\"}]]],\"gas\":220000},\"id\":null}"
										}
									]
								}
							]
						},
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"best_orders\",\r\n    \"params\": {\r\n        \"coin\": \"DOC\",\r\n        \"exclude_mine\": true, // Accepted values: \"true\", \"false\". Defaults to false.,\r\n        \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n        \"request_by\": {\r\n            \"type\": \"volume\", // Accepted values: \"volume\", \"number\"\r\n            \"value\": 1.1 // Accepted values: Decimals if \"type\": \"volume\", Unsigned Integers if \"type\": \"number\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"orderbook\",\r\n    \"params\": {\r\n        \"base\": \"DOC\",\r\n        \"rel\": \"MARTY\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_simple_market_maker_bot\",\r\n    \"params\": {\r\n        \"cfg\": {\r\n            \"DOC/MARTY\": {\r\n                \"base\": \"DOC\",\r\n                \"rel\": \"MARTY\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            },\r\n            \"KMD-BEP20/BUSD-BEP20\": {\r\n                \"base\": \"KMD-BEP20\",\r\n                \"rel\": \"BUSD-BEP20\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            }\r\n        }\r\n        // \"price_url\": \"https://prices.komodo.earth/api/v2/tickers\",\r\n        // \"bot_refresh_rate\": 30.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_simple_market_maker_bot\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"trade_preimage\",\r\n    \"params\": {\r\n        \"base\": \"DOC\",\r\n        \"rel\": \"MARTY\",\r\n        \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n        \"price\": 1.01,\r\n        \"volume\": 1.05 // used only if: \"max\": false\r\n        // \"max\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "recreate_swap_data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"recreate_swap_data\",\r\n    \"params\": {\r\n        \"swap\": {\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\",\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ]\r\n            // \"type\": , // Accepted values: \"Maker\", \"Taker\"\r\n            // \"my_order_uuid\": null, // Accepted values: Strings\r\n            // \"taker_amount\": null, // Accepted values: Decimals\r\n            // \"taker_coin\": null, // Accepted values: Strings\r\n            // \"taker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"maker_amount\": null, // Accepted values: Decimals\r\n            // \"maker_coin\": null, // Accepted values: Strings\r\n            // \"maker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"gui\": null, // Accepted values: Strings\r\n            // \"mm_version\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"BTC\",\r\n    \"rel\": \"DOGE\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "setprice",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"volume\": \"0.1\",\r\n    \"swap_method\": \"setprice\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "869"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:29:11 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"base_coin_fee\": {\n            \"coin\": \"MARTY\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"rel_coin_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": true\n        },\n        \"total_fees\": [\n            {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0.00001\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ]\n            },\n            {\n                \"coin\": \"DOC\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"0\",\n                    \"denom\": \"1\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        0,\n                        []\n                    ],\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ]\n                ]\n            }\n        ]\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "sell",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"volume\": \"0.1\",\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "1513"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:29:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"base_coin_fee\": {\n            \"coin\": \"MARTY\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": true\n        },\n        \"rel_coin_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"taker_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.0001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"7770\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        7770\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"fee_to_send_taker_fee\": {\n            \"coin\": \"DOC\",\n            \"amount\": \"0.00001\",\n            \"amount_fraction\": {\n                \"numer\": \"1\",\n                \"denom\": \"100000\"\n            },\n            \"amount_rat\": [\n                [\n                    1,\n                    [\n                        1\n                    ]\n                ],\n                [\n                    1,\n                    [\n                        100000\n                    ]\n                ]\n            ],\n            \"paid_from_trading_vol\": false\n        },\n        \"total_fees\": [\n            {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"amount_fraction\": {\n                    \"numer\": \"1\",\n                    \"denom\": \"100000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            100000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"0\",\n                    \"denom\": \"1\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        0,\n                        []\n                    ],\n                    [\n                        1,\n                        [\n                            1\n                        ]\n                    ]\n                ]\n            },\n            {\n                \"coin\": \"DOC\",\n                \"amount\": \"0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n                \"amount_fraction\": {\n                    \"numer\": \"5777\",\n                    \"denom\": \"38850000\"\n                },\n                \"amount_rat\": [\n                    [\n                        1,\n                        [\n                            5777\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            38850000\n                        ]\n                    ]\n                ],\n                \"required_balance\": \"0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287\",\n                \"required_balance_fraction\": {\n                    \"numer\": \"5777\",\n                    \"denom\": \"38850000\"\n                },\n                \"required_balance_rat\": [\n                    [\n                        1,\n                        [\n                            5777\n                        ]\n                    ],\n                    [\n                        1,\n                        [\n                            38850000\n                        ]\n                    ]\n                ]\n            }\n        ]\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "Error: InvalidParam",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"MARTY\",\r\n    \"rel\": \"DOC\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"sell\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "295"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 02:30:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Incorrect use of the 'max' parameter: 'max' cannot be used with 'sell' or 'buy' method\",\n    \"error_path\": \"taker_swap\",\n    \"error_trace\": \"taker_swap:2453]\",\n    \"error_type\": \"InvalidParam\",\n    \"error_data\": {\n        \"param\": \"max\",\n        \"reason\": \"'max' cannot be used with 'sell' or 'buy' method\"\n    },\n    \"id\": 0\n}"
								},
								{
									"name": "trade_preimage",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mmrpc\": \"2.0\",\r\n  \"userpass\": \"{{userpass}}\",\r\n  \"method\": \"trade_preimage\",\r\n  \"params\": {\r\n    \"base\": \"BTC\",\r\n    \"rel\": \"DOGE\",\r\n    \"price\": \"1\",\r\n    \"max\": true,\r\n    \"swap_method\": \"buy\"\r\n  },\r\n  \"id\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "192"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:19:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"No such coin BTC\",\n    \"error_path\": \"trade_preimage.lp_coins\",\n    \"error_trace\": \"trade_preimage:32] lp_coins:4767]\",\n    \"error_type\": \"NoSuchCoin\",\n    \"error_data\": {\n        \"coin\": \"BTC\"\n    },\n    \"id\": 0\n}"
								}
							]
						},
						{
							"name": "my_recent_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    \"params\": {\r\n        \"filter\": {\r\n            \"my_coin\": \"DOC\",\r\n            \"other_coin\": \"MARTY\",\r\n            \"from_timestamp\": 0,\r\n            \"to_timestamp\": 1804067200,\r\n            \"from_uuid\": null,\r\n            \"limit\": 10,\r\n            \"page_number\": 1\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "my_recent_swaps",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\",\r\n    \"params\": {\r\n        \"filter\": {\r\n            \"my_coin\": \"DOC\",\r\n            \"other_coin\": \"MARTY\",\r\n            \"from_timestamp\": 0,\r\n            \"to_timestamp\": 1804067200,\r\n            \"from_uuid\": null,\r\n            \"limit\": 10,\r\n            \"page_number\": 1\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "8979"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:11:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"swaps\": [\n            {\n                \"swap_type\": \"TakerV1\",\n                \"swap_data\": {\n                    \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                    \"my_order_uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                    \"events\": [\n                        {\n                            \"timestamp\": 1725849334423,\n                            \"event\": {\n                                \"type\": \"Started\",\n                                \"data\": {\n                                    \"taker_coin\": \"MARTY\",\n                                    \"maker_coin\": \"DOC\",\n                                    \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"my_persistent_pub\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"lock_duration\": 7800,\n                                    \"maker_amount\": \"2.4\",\n                                    \"taker_amount\": \"2.4\",\n                                    \"maker_payment_confirmations\": 1,\n                                    \"maker_payment_requires_nota\": false,\n                                    \"taker_payment_confirmations\": 1,\n                                    \"taker_payment_requires_nota\": false,\n                                    \"taker_payment_lock\": 1725857133,\n                                    \"uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n                                    \"started_at\": 1725849333,\n                                    \"maker_payment_wait\": 1725852453,\n                                    \"maker_coin_start_block\": 724378,\n                                    \"taker_coin_start_block\": 738955,\n                                    \"fee_to_send_taker_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"taker_payment_trade_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"maker_payment_spend_trade_fee\": {\n                                        \"coin\": \"DOC\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": true\n                                    },\n                                    \"maker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"taker_coin_htlc_pubkey\": \"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\",\n                                    \"p2p_privkey\": null\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849338425,\n                            \"event\": {\n                                \"type\": \"Negotiated\",\n                                \"data\": {\n                                    \"maker_payment_locktime\": 1725864931,\n                                    \"maker_pubkey\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                    \"secret_hash\": \"91ddaac214398b0b728d652af8d86f2e06fbbb34\",\n                                    \"maker_coin_swap_contract_addr\": null,\n                                    \"taker_coin_swap_contract_addr\": null,\n                                    \"maker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"taker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849339829,\n                            \"event\": {\n                                \"type\": \"TakerFeeSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f890101280d9a0703a25cdd553babd5430708f303fe3d446cd79555a53619c987d7b3000000006a47304402205805ecb3fad4c69e27061a35197c470e6a72a2b762269d3ef6b249c835396cd5022046b710dd5b6bdda75cc32a2cb9511ca51c754e4f2bcac8cd0f2757728a1671c6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88aca0e4dc11000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acfb5ede66000000000000000000000000000000\",\n                                    \"tx_hash\": \"614d3b1ef3666799d71f54ea242f2cb839646be3bfc81d8f1cfce26747cb9892\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341830,\n                            \"event\": {\n                                \"type\": \"TakerPaymentInstructionsReceived\",\n                                \"data\": null\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341831,\n                            \"event\": {\n                                \"type\": \"MakerPaymentReceived\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f8901175391f3922ffcf7dc8929b9795c2fec8d82ed1649e0f3926e04709993dc35a6020000006a4730440220363ea815a237b46c5dd305809fcc103793bb4f620325c12caccb0c88f320e81c02205df417a4b806f3c3d50aa058c4d6a30203868ba786f2a1bd3b3b12917b3882ff01210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914944cf7300280e31374b3994422a252bce1fcbd10870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34083d6aff050000001976a9141462c3dd3f936d595c9af55978003b27c250441f88acfc5ede66000000000000000000000000000000\",\n                                    \"tx_hash\": \"70f6078b9d3312f14dff45fc1e56e503b01d33e22cac8ebd195e4951d468dca6\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849341832,\n                            \"event\": {\n                                \"type\": \"MakerPaymentWaitConfirmStarted\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849465809,\n                            \"event\": {\n                                \"type\": \"MakerPaymentValidatedAndConfirmed\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849469603,\n                            \"event\": {\n                                \"type\": \"TakerPaymentSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f89019298cb4767e2fc1c8f1dc8bfe36b6439b82c2f24ea541fd7996766f31e3b4d61010000006a4730440220526bd1e2114642b2624cb283bada8dbeb734d3fae9184f6833e0eca87b20fffe0220554a3b38ecde2b8a521b681f5ac3e3940e08f45cc35a2fc19eeaeae513368a6c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff03001c4e0e0000000017a9141036c1fcbdf2b3e2d8b65913c78ab7412422cf17870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34b8c48e03000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac7a5fde66000000000000000000000000000000\",\n                                    \"tx_hash\": \"ffe2fe025d470996c3057dc561bd79d0a09f2aa5a14b25fb8e444b49394e5ad8\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849469604,\n                            \"event\": {\n                                \"type\": \"WatcherMessageSent\",\n                                \"data\": [\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        166,\n                                        220,\n                                        104,\n                                        212,\n                                        81,\n                                        73,\n                                        94,\n                                        25,\n                                        189,\n                                        142,\n                                        172,\n                                        44,\n                                        226,\n                                        51,\n                                        29,\n                                        176,\n                                        3,\n                                        229,\n                                        86,\n                                        30,\n                                        252,\n                                        69,\n                                        255,\n                                        77,\n                                        241,\n                                        18,\n                                        51,\n                                        157,\n                                        139,\n                                        7,\n                                        246,\n                                        112,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        181,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        40,\n                                        110,\n                                        97,\n                                        180,\n                                        1,\n                                        177,\n                                        181,\n                                        123,\n                                        77,\n                                        223,\n                                        147,\n                                        41,\n                                        76,\n                                        88,\n                                        138,\n                                        70,\n                                        20,\n                                        231,\n                                        85,\n                                        84,\n                                        145,\n                                        104,\n                                        231,\n                                        60,\n                                        146,\n                                        36,\n                                        2,\n                                        236,\n                                        230,\n                                        82,\n                                        217,\n                                        131,\n                                        2,\n                                        32,\n                                        82,\n                                        28,\n                                        127,\n                                        29,\n                                        240,\n                                        203,\n                                        202,\n                                        207,\n                                        41,\n                                        245,\n                                        94,\n                                        58,\n                                        9,\n                                        242,\n                                        51,\n                                        42,\n                                        111,\n                                        255,\n                                        37,\n                                        131,\n                                        73,\n                                        23,\n                                        48,\n                                        125,\n                                        185,\n                                        16,\n                                        114,\n                                        218,\n                                        143,\n                                        121,\n                                        59,\n                                        3,\n                                        1,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        227,\n                                        155,\n                                        222,\n                                        102,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        145,\n                                        221,\n                                        170,\n                                        194,\n                                        20,\n                                        57,\n                                        139,\n                                        11,\n                                        114,\n                                        141,\n                                        101,\n                                        42,\n                                        248,\n                                        216,\n                                        111,\n                                        46,\n                                        6,\n                                        251,\n                                        187,\n                                        52,\n                                        136,\n                                        33,\n                                        3,\n                                        216,\n                                        6,\n                                        78,\n                                        236,\n                                        228,\n                                        250,\n                                        92,\n                                        15,\n                                        141,\n                                        192,\n                                        38,\n                                        127,\n                                        104,\n                                        206,\n                                        233,\n                                        189,\n                                        213,\n                                        39,\n                                        249,\n                                        232,\n                                        143,\n                                        53,\n                                        148,\n                                        163,\n                                        35,\n                                        66,\n                                        135,\n                                        24,\n                                        195,\n                                        145,\n                                        236,\n                                        194,\n                                        172,\n                                        104,\n                                        255,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        211,\n                                        70,\n                                        6,\n                                        126,\n                                        60,\n                                        60,\n                                        57,\n                                        100,\n                                        195,\n                                        149,\n                                        254,\n                                        226,\n                                        8,\n                                        89,\n                                        71,\n                                        144,\n                                        226,\n                                        158,\n                                        222,\n                                        93,\n                                        136,\n                                        172,\n                                        227,\n                                        155,\n                                        222,\n                                        102,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ],\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        216,\n                                        90,\n                                        78,\n                                        57,\n                                        73,\n                                        75,\n                                        68,\n                                        142,\n                                        251,\n                                        37,\n                                        75,\n                                        161,\n                                        165,\n                                        42,\n                                        159,\n                                        160,\n                                        208,\n                                        121,\n                                        189,\n                                        97,\n                                        197,\n                                        125,\n                                        5,\n                                        195,\n                                        150,\n                                        9,\n                                        71,\n                                        93,\n                                        2,\n                                        254,\n                                        226,\n                                        255,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        182,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        12,\n                                        137,\n                                        103,\n                                        65,\n                                        18,\n                                        108,\n                                        213,\n                                        157,\n                                        224,\n                                        139,\n                                        187,\n                                        163,\n                                        116,\n                                        52,\n                                        231,\n                                        214,\n                                        185,\n                                        167,\n                                        227,\n                                        252,\n                                        3,\n                                        217,\n                                        92,\n                                        49,\n                                        170,\n                                        72,\n                                        112,\n                                        76,\n                                        45,\n                                        193,\n                                        15,\n                                        83,\n                                        2,\n                                        32,\n                                        28,\n                                        190,\n                                        47,\n                                        213,\n                                        129,\n                                        180,\n                                        189,\n                                        228,\n                                        165,\n                                        105,\n                                        157,\n                                        230,\n                                        180,\n                                        175,\n                                        68,\n                                        109,\n                                        152,\n                                        255,\n                                        38,\n                                        88,\n                                        66,\n                                        40,\n                                        253,\n                                        7,\n                                        79,\n                                        86,\n                                        118,\n                                        91,\n                                        107,\n                                        20,\n                                        242,\n                                        219,\n                                        1,\n                                        81,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        109,\n                                        125,\n                                        222,\n                                        102,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        216,\n                                        6,\n                                        78,\n                                        236,\n                                        228,\n                                        250,\n                                        92,\n                                        15,\n                                        141,\n                                        192,\n                                        38,\n                                        127,\n                                        104,\n                                        206,\n                                        233,\n                                        189,\n                                        213,\n                                        39,\n                                        249,\n                                        232,\n                                        143,\n                                        53,\n                                        148,\n                                        163,\n                                        35,\n                                        66,\n                                        135,\n                                        24,\n                                        195,\n                                        145,\n                                        236,\n                                        194,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        145,\n                                        221,\n                                        170,\n                                        194,\n                                        20,\n                                        57,\n                                        139,\n                                        11,\n                                        114,\n                                        141,\n                                        101,\n                                        42,\n                                        248,\n                                        216,\n                                        111,\n                                        46,\n                                        6,\n                                        251,\n                                        187,\n                                        52,\n                                        136,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        104,\n                                        254,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        211,\n                                        70,\n                                        6,\n                                        126,\n                                        60,\n                                        60,\n                                        57,\n                                        100,\n                                        195,\n                                        149,\n                                        254,\n                                        226,\n                                        8,\n                                        89,\n                                        71,\n                                        144,\n                                        226,\n                                        158,\n                                        222,\n                                        93,\n                                        136,\n                                        172,\n                                        109,\n                                        125,\n                                        222,\n                                        102,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ]\n                                ]\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849486567,\n                            \"event\": {\n                                \"type\": \"TakerPaymentSpent\",\n                                \"data\": {\n                                    \"transaction\": {\n                                        \"tx_hex\": \"0400008085202f8901d85a4e39494b448efb254ba1a52a9fa0d079bd61c57d05c39609475d02fee2ff00000000d74730440220544c5a2eec1e3fb7a2c71e3b6bf3c612300a9c5375ca5c7131742f0afc8a6e8f02206df5b042ec1ff359bf7209269ce3b59d09f5f2340842d5e0a253875624bbce120120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b63046d7dde66b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb3488210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac68ffffffff0118184e0e000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac6d7dde66000000000000000000000000000000\",\n                                        \"tx_hash\": \"58813eb1037e40425d56146c2f6bfbe70b8bcc18e45b752b51c726503ad4f8df\"\n                                    },\n                                    \"secret\": \"d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849488871,\n                            \"event\": {\n                                \"type\": \"MakerPaymentSpent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f8901a6dc68d451495e19bd8eac2ce2331db003e5561efc45ff4df112339d8b07f67000000000d74730440220286e61b401b1b57b4ddf93294c588a4614e755549168e73c922402ece652d9830220521c7f1df0cbcacf29f55e3a09f2332a6fff25834917307db91072da8f793b030120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b6304e39bde66b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb34882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118184e0e000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ace39bde66000000000000000000000000000000\",\n                                    \"tx_hash\": \"60f83a68e5851ff93308758763ce30c643bd94ae89f4ae43fe7e02dc88d61642\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1725849488872,\n                            \"event\": {\n                                \"type\": \"Finished\"\n                            }\n                        }\n                    ],\n                    \"maker_amount\": \"2.4\",\n                    \"maker_coin\": \"DOC\",\n                    \"maker_coin_usd_price\": \"0.0000001\",\n                    \"taker_amount\": \"2.4\",\n                    \"taker_coin\": \"MARTY\",\n                    \"taker_coin_usd_price\": \"0.00000005\",\n                    \"gui\": \"mm2_777\",\n                    \"mm_version\": \"2.2.0-beta_2bdee4f\",\n                    \"success_events\": [\n                        \"Started\",\n                        \"Negotiated\",\n                        \"TakerFeeSent\",\n                        \"TakerPaymentInstructionsReceived\",\n                        \"MakerPaymentReceived\",\n                        \"MakerPaymentWaitConfirmStarted\",\n                        \"MakerPaymentValidatedAndConfirmed\",\n                        \"TakerPaymentSent\",\n                        \"WatcherMessageSent\",\n                        \"TakerPaymentSpent\",\n                        \"MakerPaymentSpent\",\n                        \"MakerPaymentSpentByWatcher\",\n                        \"Finished\"\n                    ],\n                    \"error_events\": [\n                        \"StartFailed\",\n                        \"NegotiateFailed\",\n                        \"TakerFeeSendFailed\",\n                        \"MakerPaymentValidateFailed\",\n                        \"MakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentTransactionFailed\",\n                        \"TakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentDataSendFailed\",\n                        \"TakerPaymentWaitForSpendFailed\",\n                        \"MakerPaymentSpendFailed\",\n                        \"TakerPaymentWaitRefundStarted\",\n                        \"TakerPaymentRefundStarted\",\n                        \"TakerPaymentRefunded\",\n                        \"TakerPaymentRefundedByWatcher\",\n                        \"TakerPaymentRefundFailed\",\n                        \"TakerPaymentRefundFinished\"\n                    ]\n                }\n            }\n        ],\n        \"from_uuid\": null,\n        \"skipped\": 0,\n        \"limit\": 10,\n        \"total\": 1,\n        \"page_number\": 1,\n        \"total_pages\": 1,\n        \"found_records\": 1\n    },\n    \"id\": null\n}"
								}
							]
						},
						{
							"name": "active_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\",\r\n    \"params\": {}\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "active_swaps (with status)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\",\r\n    \"params\": {\r\n        \"include_status\": true\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "8155"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 11:37:32 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"uuids\": [\n            \"7b60a494-f159-419c-8f41-02e10f897513\"\n        ],\n        \"statuses\": {\n            \"7b60a494-f159-419c-8f41-02e10f897513\": {\n                \"swap_type\": \"TakerV1\",\n                \"swap_data\": {\n                    \"uuid\": \"7b60a494-f159-419c-8f41-02e10f897513\",\n                    \"my_order_uuid\": \"7b60a494-f159-419c-8f41-02e10f897513\",\n                    \"events\": [\n                        {\n                            \"timestamp\": 1730633787643,\n                            \"event\": {\n                                \"type\": \"Started\",\n                                \"data\": {\n                                    \"taker_coin\": \"MARTY\",\n                                    \"maker_coin\": \"DOC\",\n                                    \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"my_persistent_pub\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                                    \"lock_duration\": 7800,\n                                    \"maker_amount\": \"2.4\",\n                                    \"taker_amount\": \"2.4\",\n                                    \"maker_payment_confirmations\": 1,\n                                    \"maker_payment_requires_nota\": false,\n                                    \"taker_payment_confirmations\": 1,\n                                    \"taker_payment_requires_nota\": false,\n                                    \"taker_payment_lock\": 1730641586,\n                                    \"uuid\": \"7b60a494-f159-419c-8f41-02e10f897513\",\n                                    \"started_at\": 1730633786,\n                                    \"maker_payment_wait\": 1730636906,\n                                    \"maker_coin_start_block\": 803888,\n                                    \"taker_coin_start_block\": 818500,\n                                    \"fee_to_send_taker_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"taker_payment_trade_fee\": {\n                                        \"coin\": \"MARTY\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": false\n                                    },\n                                    \"maker_payment_spend_trade_fee\": {\n                                        \"coin\": \"DOC\",\n                                        \"amount\": \"0.00001\",\n                                        \"paid_from_trading_vol\": true\n                                    },\n                                    \"maker_coin_htlc_pubkey\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                                    \"taker_coin_htlc_pubkey\": \"034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256\",\n                                    \"p2p_privkey\": null\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633801655,\n                            \"event\": {\n                                \"type\": \"Negotiated\",\n                                \"data\": {\n                                    \"maker_payment_locktime\": 1730649385,\n                                    \"maker_pubkey\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                    \"secret_hash\": \"b476e27c0c6680ac67765163b1b5736dd7649512\",\n                                    \"maker_coin_swap_contract_addr\": null,\n                                    \"taker_coin_swap_contract_addr\": null,\n                                    \"maker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n                                    \"taker_coin_htlc_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633802415,\n                            \"event\": {\n                                \"type\": \"TakerFeeSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f8901a12c9c4c1c0e3ebd6329a7a0cd3c0a34a2355e5bea93b50faaa46d8889eb4ee0000000006a47304402200774c8e6fbb94df8ab73d9dbbd858326b361cc132d14c90e4ebf7d2a6bc5f9b402204fa716b684c20a3c56b28a42e63bfa3edcd3a76e261bee674f00ec0ccff674160121034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac882e4317120000001976a914d64ad24e655ba7221ea51c7931aad5b98da77f3c88ac4a602767000000000000000000000000000000\",\n                                    \"tx_hash\": \"3febb9949f3e751c568b774719a9fbf851bc9b4c6083da8c0927e4d1c078c21c\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633804416,\n                            \"event\": {\n                                \"type\": \"TakerPaymentInstructionsReceived\",\n                                \"data\": null\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633804421,\n                            \"event\": {\n                                \"type\": \"MakerPaymentReceived\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f89045c20450775f07a4c448fbfebe47fdfa058c9a25254d36874765b44e1b3aaa193020000006a473044022079e6fbe2a24beb093858c644f765403d7a23714c17bee99c0b88fdd4b1d2bfbf02206f104b94437e4ce39d6854b48c1abccd218ee42436c8b5ac29e9136d538aa89501210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff620a3f975950554a03ecce8a2918958e8f1a17db70e7efe420618f3622844196000000006a47304402205721b4ce8c079604ce6f5779289fdc66912e064f12c40cc174daab80534a623f0220575fcc814edbec126834ce408ecbcf7ec2d7a8df2e323273266c8b47518ba9e701210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff9ac8dbb806e5722c00c60623c7313c41892649531a1c134f5d700b8f85157559000000006a473044022074a909367ba10cf375fb84414bad2ee41ffb35940132d94a9033736185df4b58022032b6dd0aeb5e102584e63d294d66367e19eaa599ed438d0209a039190bca10f401210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff46c38d985571abe367e07c7415b278bebdaa7b6b7283a7d069dfde6fb820cb8d020000006a47304402203397ffb5b16d0c829aac977ae92d8bc76cd3e9afc17bef3da436272bb672a0bd02207b3c026e25fd70048f12c166851a1d53ff2931e5073028588dde9715d63a527501210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914f9bb3725cdd5d07b6f2b5387b5cf4471a4ad0463870000000000000000166a14b476e27c0c6680ac67765163b1b5736dd7649512dee80841410500001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac4b602767000000000000000000000000000000\",\n                                    \"tx_hash\": \"ebeba78542427dcf9bc720063582b99153afe6efcde49d16aacf67a8e597a41e\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633804421,\n                            \"event\": {\n                                \"type\": \"MakerPaymentWaitConfirmStarted\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633836140,\n                            \"event\": {\n                                \"type\": \"MakerPaymentValidatedAndConfirmed\"\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633839137,\n                            \"event\": {\n                                \"type\": \"TakerPaymentSent\",\n                                \"data\": {\n                                    \"tx_hex\": \"0400008085202f89011cc278c0d1e427098cda83604c9bbc51f8fba91947778b561c753e9f94b9eb3f010000006a473044022024b2c5bc5b23e8e774f6a8001de8f94a4e6888456722fede2be6b061d6d93c9302203805a7d1c9361fee2066e26f6196476f73f34246f60308cfafa3783a94a3cab30121034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256ffffffff03001c4e0e0000000017a914fbb04e8d9b7b4098c887aed16124291646462525870000000000000000166a14b476e27c0c6680ac67765163b1b5736dd7649512a00ef508120000001976a914d64ad24e655ba7221ea51c7931aad5b98da77f3c88ac6c602767000000000000000000000000000000\",\n                                    \"tx_hash\": \"08e94af501630e46f4b2c5d64e6851c6bc9a3828506fef9f6668938d36c7b2da\"\n                                }\n                            }\n                        },\n                        {\n                            \"timestamp\": 1730633839137,\n                            \"event\": {\n                                \"type\": \"WatcherMessageSent\",\n                                \"data\": [\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        30,\n                                        164,\n                                        151,\n                                        229,\n                                        168,\n                                        103,\n                                        207,\n                                        170,\n                                        22,\n                                        157,\n                                        228,\n                                        205,\n                                        239,\n                                        230,\n                                        175,\n                                        83,\n                                        145,\n                                        185,\n                                        130,\n                                        53,\n                                        6,\n                                        32,\n                                        199,\n                                        155,\n                                        207,\n                                        125,\n                                        66,\n                                        66,\n                                        133,\n                                        167,\n                                        235,\n                                        235,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        181,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        15,\n                                        63,\n                                        147,\n                                        207,\n                                        14,\n                                        237,\n                                        249,\n                                        179,\n                                        18,\n                                        218,\n                                        20,\n                                        136,\n                                        99,\n                                        82,\n                                        155,\n                                        227,\n                                        183,\n                                        14,\n                                        187,\n                                        207,\n                                        52,\n                                        142,\n                                        3,\n                                        42,\n                                        19,\n                                        130,\n                                        48,\n                                        55,\n                                        97,\n                                        54,\n                                        17,\n                                        43,\n                                        2,\n                                        32,\n                                        6,\n                                        191,\n                                        10,\n                                        15,\n                                        31,\n                                        179,\n                                        175,\n                                        110,\n                                        81,\n                                        38,\n                                        121,\n                                        112,\n                                        192,\n                                        22,\n                                        147,\n                                        186,\n                                        193,\n                                        103,\n                                        29,\n                                        246,\n                                        69,\n                                        93,\n                                        184,\n                                        60,\n                                        147,\n                                        105,\n                                        235,\n                                        73,\n                                        147,\n                                        183,\n                                        172,\n                                        122,\n                                        1,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        41,\n                                        157,\n                                        39,\n                                        103,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        180,\n                                        118,\n                                        226,\n                                        124,\n                                        12,\n                                        102,\n                                        128,\n                                        172,\n                                        103,\n                                        118,\n                                        81,\n                                        99,\n                                        177,\n                                        181,\n                                        115,\n                                        109,\n                                        215,\n                                        100,\n                                        149,\n                                        18,\n                                        136,\n                                        33,\n                                        3,\n                                        76,\n                                        191,\n                                        116,\n                                        84,\n                                        28,\n                                        29,\n                                        52,\n                                        54,\n                                        188,\n                                        118,\n                                        56,\n                                        162,\n                                        115,\n                                        143,\n                                        100,\n                                        223,\n                                        79,\n                                        238,\n                                        34,\n                                        212,\n                                        68,\n                                        60,\n                                        223,\n                                        17,\n                                        213,\n                                        76,\n                                        234,\n                                        125,\n                                        127,\n                                        85,\n                                        242,\n                                        86,\n                                        172,\n                                        104,\n                                        255,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        214,\n                                        74,\n                                        210,\n                                        78,\n                                        101,\n                                        91,\n                                        167,\n                                        34,\n                                        30,\n                                        165,\n                                        28,\n                                        121,\n                                        49,\n                                        170,\n                                        213,\n                                        185,\n                                        141,\n                                        167,\n                                        127,\n                                        60,\n                                        136,\n                                        172,\n                                        41,\n                                        157,\n                                        39,\n                                        103,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ],\n                                    [\n                                        4,\n                                        0,\n                                        0,\n                                        128,\n                                        133,\n                                        32,\n                                        47,\n                                        137,\n                                        1,\n                                        218,\n                                        178,\n                                        199,\n                                        54,\n                                        141,\n                                        147,\n                                        104,\n                                        102,\n                                        159,\n                                        239,\n                                        111,\n                                        80,\n                                        40,\n                                        56,\n                                        154,\n                                        188,\n                                        198,\n                                        81,\n                                        104,\n                                        78,\n                                        214,\n                                        197,\n                                        178,\n                                        244,\n                                        70,\n                                        14,\n                                        99,\n                                        1,\n                                        245,\n                                        74,\n                                        233,\n                                        8,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        182,\n                                        71,\n                                        48,\n                                        68,\n                                        2,\n                                        32,\n                                        91,\n                                        24,\n                                        33,\n                                        89,\n                                        150,\n                                        44,\n                                        60,\n                                        26,\n                                        59,\n                                        98,\n                                        8,\n                                        8,\n                                        75,\n                                        9,\n                                        180,\n                                        252,\n                                        173,\n                                        239,\n                                        25,\n                                        51,\n                                        107,\n                                        150,\n                                        243,\n                                        216,\n                                        206,\n                                        42,\n                                        41,\n                                        114,\n                                        51,\n                                        198,\n                                        217,\n                                        53,\n                                        2,\n                                        32,\n                                        37,\n                                        164,\n                                        97,\n                                        254,\n                                        1,\n                                        132,\n                                        224,\n                                        60,\n                                        170,\n                                        53,\n                                        174,\n                                        76,\n                                        177,\n                                        31,\n                                        82,\n                                        255,\n                                        218,\n                                        21,\n                                        233,\n                                        126,\n                                        210,\n                                        217,\n                                        220,\n                                        203,\n                                        185,\n                                        74,\n                                        118,\n                                        244,\n                                        37,\n                                        195,\n                                        196,\n                                        62,\n                                        1,\n                                        81,\n                                        76,\n                                        107,\n                                        99,\n                                        4,\n                                        178,\n                                        126,\n                                        39,\n                                        103,\n                                        177,\n                                        117,\n                                        33,\n                                        3,\n                                        76,\n                                        191,\n                                        116,\n                                        84,\n                                        28,\n                                        29,\n                                        52,\n                                        54,\n                                        188,\n                                        118,\n                                        56,\n                                        162,\n                                        115,\n                                        143,\n                                        100,\n                                        223,\n                                        79,\n                                        238,\n                                        34,\n                                        212,\n                                        68,\n                                        60,\n                                        223,\n                                        17,\n                                        213,\n                                        76,\n                                        234,\n                                        125,\n                                        127,\n                                        85,\n                                        242,\n                                        86,\n                                        172,\n                                        103,\n                                        130,\n                                        1,\n                                        32,\n                                        136,\n                                        169,\n                                        20,\n                                        180,\n                                        118,\n                                        226,\n                                        124,\n                                        12,\n                                        102,\n                                        128,\n                                        172,\n                                        103,\n                                        118,\n                                        81,\n                                        99,\n                                        177,\n                                        181,\n                                        115,\n                                        109,\n                                        215,\n                                        100,\n                                        149,\n                                        18,\n                                        136,\n                                        33,\n                                        3,\n                                        21,\n                                        217,\n                                        197,\n                                        28,\n                                        101,\n                                        122,\n                                        177,\n                                        190,\n                                        74,\n                                        233,\n                                        211,\n                                        171,\n                                        110,\n                                        118,\n                                        166,\n                                        25,\n                                        211,\n                                        188,\n                                        207,\n                                        232,\n                                        48,\n                                        213,\n                                        54,\n                                        63,\n                                        161,\n                                        104,\n                                        66,\n                                        76,\n                                        13,\n                                        4,\n                                        71,\n                                        50,\n                                        172,\n                                        104,\n                                        254,\n                                        255,\n                                        255,\n                                        255,\n                                        1,\n                                        24,\n                                        24,\n                                        78,\n                                        14,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        25,\n                                        118,\n                                        169,\n                                        20,\n                                        214,\n                                        74,\n                                        210,\n                                        78,\n                                        101,\n                                        91,\n                                        167,\n                                        34,\n                                        30,\n                                        165,\n                                        28,\n                                        121,\n                                        49,\n                                        170,\n                                        213,\n                                        185,\n                                        141,\n                                        167,\n                                        127,\n                                        60,\n                                        136,\n                                        172,\n                                        178,\n                                        126,\n                                        39,\n                                        103,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ]\n                                ]\n                            }\n                        }\n                    ],\n                    \"maker_amount\": \"2.4\",\n                    \"maker_coin\": \"DOC\",\n                    \"maker_coin_usd_price\": null,\n                    \"taker_amount\": \"2.4\",\n                    \"taker_coin\": \"MARTY\",\n                    \"taker_coin_usd_price\": null,\n                    \"gui\": \"mm2_777\",\n                    \"mm_version\": \"2.2.0-beta_caf803b\",\n                    \"success_events\": [\n                        \"Started\",\n                        \"Negotiated\",\n                        \"TakerFeeSent\",\n                        \"TakerPaymentInstructionsReceived\",\n                        \"MakerPaymentReceived\",\n                        \"MakerPaymentWaitConfirmStarted\",\n                        \"MakerPaymentValidatedAndConfirmed\",\n                        \"TakerPaymentSent\",\n                        \"WatcherMessageSent\",\n                        \"TakerPaymentSpent\",\n                        \"MakerPaymentSpent\",\n                        \"MakerPaymentSpentByWatcher\",\n                        \"MakerPaymentSpendConfirmed\",\n                        \"Finished\"\n                    ],\n                    \"error_events\": [\n                        \"StartFailed\",\n                        \"NegotiateFailed\",\n                        \"TakerFeeSendFailed\",\n                        \"MakerPaymentValidateFailed\",\n                        \"MakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentTransactionFailed\",\n                        \"TakerPaymentWaitConfirmFailed\",\n                        \"TakerPaymentDataSendFailed\",\n                        \"TakerPaymentWaitForSpendFailed\",\n                        \"MakerPaymentSpendFailed\",\n                        \"MakerPaymentSpendConfirmFailed\",\n                        \"TakerPaymentWaitRefundStarted\",\n                        \"TakerPaymentRefundStarted\",\n                        \"TakerPaymentRefunded\",\n                        \"TakerPaymentRefundedByWatcher\",\n                        \"TakerPaymentRefundFailed\",\n                        \"TakerPaymentRefundFinished\"\n                    ]\n                }\n            }\n        }\n    },\n    \"id\": null\n}"
								},
								{
									"name": "active_swaps (without status)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"mmrpc\": \"2.0\",\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\",\r\n    \"params\": {\r\n        \"include_status\": false\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "99"
										},
										{
											"key": "date",
											"value": "Sun, 03 Nov 2024 11:39:33 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"uuids\": [\n            \"7b60a494-f159-419c-8f41-02e10f897513\"\n        ],\n        \"statuses\": {}\n    },\n    \"id\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "Lightning",
					"item": [
						{
							"name": "Enable",
							"item": [
								{
									"name": "task::enable_lightning::init",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::init\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\",\r\n        \"activation_params\": {\r\n            \"name\": \"Mm2TestNode\"\r\n            // \"listening_port\": 9735,\r\n            // \"color\": \"000000\",\r\n            // \"payment_retries\": 5,\r\n            // \"backup_path\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_lightning::status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "task::enable_lightning::cancel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::cancel\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Nodes",
							"item": [
								{
									"name": "add_trusted_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::add_trusted_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connect_to_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_trusted_nodes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::list_trusted_nodes\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove_trusted_node",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::remove_trusted_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Channels",
							"item": [
								{
									"name": "close_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::close_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1\r\n        // \"force_close\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_channel_details",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_claimable_balances",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_claimable_balances\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"include_open_channels_balances\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_closed_channels_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_closed_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"closing_tx\": null, // Accepted values: Strings\r\n        // //     // \"closure_reason\": null, // Accepted values: Strings\r\n        // //     // \"claiming_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"to_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"channel_type\": null, // Accepted values: \"Outbound\", \"Inbound\"\r\n        // //     // \"channel_visibility\": null // Accepted values: \"Public\", \"Private\"\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_open_channels_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"is_outbound\": null, // Accepted values: Booleans\r\n        // //     // \"from_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"confirmed\": null, // Accepted values: Booleans\r\n        // //     // \"is_usable\": null, // Accepted values: Booleans\r\n        // //     // \"is_public\": null // Accepted values: Booleans\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "open_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\r\n        \"amount\": {\r\n            \"type\": \"Exact\", // Accepted values: \"Exact\", \"Max\"\r\n            \"value\": 0.004 // Required only if: \"type\": \"Exact\"\r\n        }\r\n        // \"push_msat\": 0,\r\n        // \"channel_options\": {\r\n        //     // \"proportional_fee_in_millionths_sats\": 0, // Default: Coin Config\r\n        //     // \"base_fee_msat\": 1000, // Default: Coin Config\r\n        //     // \"cltv_expiry_delta\": 72, // Default: Coin Config\r\n        //     // \"max_dust_htlc_exposure_msat\": 5000000, // Default: Coin Config\r\n        //     // \"force_close_avoidance_max_fee_satoshis\": 1000 // Default: Coin Config\r\n        // },\r\n        // \"channel_configs\" : {\r\n        //     // \"counterparty_locktime\": 144, // Default: Coin Config\r\n        //     // \"our_htlc_minimum_msat\": 1, // Default: Coin Config\r\n        //     // \"negotiate_scid_privacy\": false, // Default: Coin Config\r\n        //     // \"max_inbound_in_flight_htlc_percent\": 10, // Default: Coin Config\r\n        //     // \"announced_channel\": false, // Default: Coin Config\r\n        //     // \"commit_upfront_shutdown_pubkey\": true // Default: Coin Config\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update_channel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::update_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1,\r\n        \"channel_options\": {\r\n            // \"proportional_fee_in_millionths_sats\": 0, // Default: Coin Config\r\n            // \"base_fee_msat\": 1000, // Default: Coin Config\r\n            // \"cltv_expiry_delta\": 72, // Default: Coin Config\r\n            // \"max_dust_htlc_exposure_msat\": 5000000, // Default: Coin Config\r\n            // \"force_close_avoidance_max_fee_satoshis\": 1000 // Default: Coin Config\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payments",
							"item": [
								{
									"name": "generate_invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::generate_invoice\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"description\": \"test invoice\"\r\n        // \"amount_in_msat\": null, // Accepted values: Integers\r\n        // \"expiry\": null // Accepted values: Integers\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_payment_details",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"32f996e6e0aa88e567318beeadb37b6bc0fddfd3660d4a87726f308ed1ec7b33\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "list_payments_by_filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::list_payments_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"payment_type\": null,\r\n        // //     // // \"payment_type\": {\r\n        // //     // //     \"type\": \"Outbound Payment\", // Accepted values: \"Outbound Payment\", \"Inbound Payment\"\r\n        // //     // //     \"destination\": \"03933884aaf1d6b108397e5efe5c86bcf2d8ca8d2f700eda99db9214fc2712b134\" // Required only if: \"type\": \"Outbound Payment\"\r\n        // //     // // },\r\n        // //     // \"description\": null, // Accepted values: Strings\r\n        // //     // \"status\": null, // Accepted values: \"pending\", \"succeeded\", \"failed\"\r\n        // //     // \"from_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_timestamp\": null, // Accepted values: Integers\r\n        // //     // \"to_timestamp\": null // Accepted values: Integers\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": \"d6d3cf3fd5237ed15295847befe00da67c043da1c39a373bff30bd22442eea43\" // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "send_payment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Accepted values: \"invoice\", \"keysend\"\r\n            \"invoice\": \"lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y\" // Required only if: \"type\": \"invoice\"\r\n            // \"destination\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\", // Required only if: \"type\": \"keysend\"\r\n            // \"amount_in_msat\": 1000, // Required only if: \"type\": \"keysend\"\r\n            // \"expiry\": 24 // Required only if: \"type\": \"keysend\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Stats",
					"item": [
						{
							"name": "add_node_to_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_node_to_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\",\r\n        \"address\": \"127.0.0.1:7783\",\r\n        \"peer_id\": \"12D3KooWHcPAnsq22MNoWkHEB1drFY1YrnRm6rzURvJupPyL1swZ\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_node_from_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_node_from_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_version_stat_collection\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"update_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Utility",
					"item": [
						{
							"name": "get_current_mtp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_current_mtp\",\n    \"params\": {\n        \"coin\": \"DOC\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_current_mtp",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_current_mtp\",\n    \"params\": {\n        \"coin\": \"MARTY\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "53"
										},
										{
											"key": "date",
											"value": "Tue, 10 Sep 2024 10:22:24 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"mtp\":1725963536},\"id\":null}"
								}
							]
						},
						{
							"name": "get_token_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_token_info\",\n    \"params\": {\n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"AVAX\",\n                \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"\n            }\n        }\n    }\n    // \"id\": null // Accepted values: Integers\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_token_info\",\n    \"params\": {\n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"ETH\",\n                \"contract_address\": \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\"\n            }\n        }\n    }\n    // \"id\": null // Accepted values: Integers\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "119"
										},
										{
											"key": "date",
											"value": "Tue, 19 Nov 2024 09:24:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"config_ticker\": \"AAVE-ERC20\",\n        \"type\": \"ERC20\",\n        \"info\": {\n            \"symbol\": \"AAVE\",\n            \"decimals\": 18\n        }\n    },\n    \"id\": null\n}"
								},
								{
									"name": "Error: Parent coin not active",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_token_info\",\n    \"params\": {\n        \"protocol\": {\n            \"type\": \"ERC20\",\n            \"protocol_data\": {\n                \"platform\": \"AVAX\",\n                \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"\n            }\n        }\n    }\n    // \"id\": null // Accepted values: Integers\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "181"
										},
										{
											"key": "date",
											"value": "Tue, 19 Nov 2024 09:27:41 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"No such coin AVAX\",\"error_path\":\"tokens.lp_coins\",\"error_trace\":\"tokens:68] lp_coins:4744]\",\"error_type\":\"NoSuchCoin\",\"error_data\":{\"coin\":\"AVAX\"},\"id\":null}"
								}
							]
						},
						{
							"name": "get_public_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_public_key",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "118"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 06:43:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"public_key\":\"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\"},\"id\":null}"
								}
							]
						},
						{
							"name": "peer_connection_healthcheck",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"peer_connection_healthcheck\",\r\n    \"params\": {\r\n        \"peer_address\": \"12D3KooWJWBnkVsVNjiqUEPjLyHpiSmQVAJ5t6qt1Txv5ctJi9Xd\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "peer_connection_healthcheck (true)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "118"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 06:43:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"public_key\":\"03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2\"},\"id\":null}"
								},
								{
									"name": "peer_connection_healthcheck (false)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"peer_connection_healthcheck\",\r\n    \"params\": {\r\n        \"peer_address\": \"12D3KooWDgFfyAzbuYNLMzMaZT9zBJX9EHd38XLQDRbNDYAYqMzd\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "40"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 06:49:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":false,\"id\":null}"
								}
							]
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_enabled_coins\"   // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_enabled_coins",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_enabled_coins\"   // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "260"
										},
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 17:16:48 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"coins\":[{\"ticker\":\"ETH\"},{\"ticker\":\"PGX-PLG20\"},{\"ticker\":\"ATOM-IBC_IRIS\"},{\"ticker\":\"NFT_ETH\"},{\"ticker\":\"KMD\"},{\"ticker\":\"IRIS\"},{\"ticker\":\"AAVE-PLG20\"},{\"ticker\":\"MINDS-ERC20\"},{\"ticker\":\"NFT_MATIC\"},{\"ticker\":\"MATIC\"}]},\"id\":null}"
								}
							]
						},
						{
							"name": "get_public_key_hash",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key_hash\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "get_public_key_hash",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key_hash\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "97"
										},
										{
											"key": "date",
											"value": "Thu, 17 Oct 2024 06:43:31 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":{\"public_key_hash\":\"d346067e3c3c3964c395fee208594790e29ede5d\"},\"id\":null}"
								}
							]
						}
					]
				},
				{
					"name": "Fee Management",
					"item": [
						{
							"name": "start_eth_fee_estimator",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"start_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Error: NoSuchCoin",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"start_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"ETH\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "204"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:18:50 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"No such coin ETH\",\n    \"error_path\": \"get_estimated_fees.lp_coins\",\n    \"error_trace\": \"get_estimated_fees:244] lp_coins:4779]\",\n    \"error_type\": \"NoSuchCoin\",\n    \"error_data\": {\n        \"coin\": \"ETH\"\n    },\n    \"id\": null\n}"
								},
								{
									"name": "Error: CoinNotSupported",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"start_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "188"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:21:57 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Gas fee estimation not supported for this coin\",\"error_path\":\"get_estimated_fees\",\"error_trace\":\"get_estimated_fees:206]\",\"error_type\":\"CoinNotSupported\",\"id\":null}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"start_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "55"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:27:17 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"result\": \"Success\"\n    },\n    \"id\": null\n}"
								}
							]
						},
						{
							"name": "stop_eth_fee_estimator",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"stop_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Error: NotRunning",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"stop_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"ETH\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "168"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:29:26 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"error\":\"Gas fee estimator is not running\",\"error_path\":\"get_estimated_fees\",\"error_trace\":\"get_estimated_fees:233]\",\"error_type\":\"NotRunning\",\"id\":null}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"stop_eth_fee_estimator\",\n    \"params\": {\n        \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "55"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:30:01 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"result\": \"Success\"\n    },\n    \"id\": null\n}"
								}
							]
						},
						{
							"name": "set_swap_transaction_fee_policy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"set_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\",\n      \"swap_tx_fee_policy\": \"High\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Success: Internal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "45"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:40:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Internal\",\"id\":null}"
								},
								{
									"name": "Error: Unsupported",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "48"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:41:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Unsupported\",\"id\":null}"
								},
								{
									"name": "Success: Set to Medium",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"set_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\",\n      \"swap_tx_fee_policy\": \"Medium\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "43"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:50:29 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Medium\",\"id\":null}"
								},
								{
									"name": "Success: Set to High",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"set_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\",\n      \"swap_tx_fee_policy\": \"High\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "41"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:50:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"High\",\"id\":null}"
								},
								{
									"name": "Success: Set to Low",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"set_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\",\n      \"swap_tx_fee_policy\": \"Low\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "40"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:51:24 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Low\",\"id\":null}"
								}
							]
						},
						{
							"name": "get_swap_transaction_fee_policy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Success: Internal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"MATIC\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "45"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:40:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Internal\",\"id\":null}"
								},
								{
									"name": "Error: Unsupported",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_swap_transaction_fee_policy\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n  }"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "48"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:41:56 GMT"
										}
									],
									"cookie": [],
									"body": "{\"mmrpc\":\"2.0\",\"result\":\"Unsupported\",\"id\":null}"
								}
							]
						},
						{
							"name": "get_eth_estimated_fee_per_gas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_eth_estimated_fee_per_gas\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": [
								{
									"name": "Error: CoinNotSupported",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_eth_estimated_fee_per_gas\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "188"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:58:16 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"Gas fee estimation not supported for this coin\",\n    \"error_path\": \"get_estimated_fees\",\n    \"error_trace\": \"get_estimated_fees:206]\",\n    \"error_type\": \"CoinNotSupported\",\n    \"id\": null\n}"
								},
								{
									"name": "Error: NoSuchCoin",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_eth_estimated_fee_per_gas\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"DOGE\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "204"
										},
										{
											"key": "date",
											"value": "Mon, 09 Sep 2024 05:59:38 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"error\": \"No such coin DOGE\",\n    \"error_path\": \"get_estimated_fees.lp_coins\",\n    \"error_trace\": \"get_estimated_fees:244] lp_coins:4767]\",\n    \"error_type\": \"NoSuchCoin\",\n    \"error_data\": {\n        \"coin\": \"DOGE\"\n    },\n    \"id\": null\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"get_eth_estimated_fee_per_gas\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n      \"coin\": \"BNB\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "content-length",
											"value": "483"
										},
										{
											"key": "date",
											"value": "Mon, 04 Nov 2024 11:31:08 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"mmrpc\": \"2.0\",\n    \"result\": {\n        \"base_fee\": \"5.155924173\",\n        \"low\": {\n            \"max_priority_fee_per_gas\": \"0.008999999\",\n            \"max_fee_per_gas\": \"6.09\",\n            \"min_wait_time\": null,\n            \"max_wait_time\": null\n        },\n        \"medium\": {\n            \"max_priority_fee_per_gas\": \"0.049\",\n            \"max_fee_per_gas\": \"6.13\",\n            \"min_wait_time\": null,\n            \"max_wait_time\": null\n        },\n        \"high\": {\n            \"max_priority_fee_per_gas\": \"0.089\",\n            \"max_fee_per_gas\": \"6.17\",\n            \"min_wait_time\": null,\n            \"max_wait_time\": null\n        },\n        \"source\": \"blocknative\",\n        \"base_fee_trend\": \"\",\n        \"priority_fee_trend\": \"\",\n        \"units\": \"Gwei\"\n    },\n    \"id\": null\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Use Cases",
			"item": [
				{
					"name": "Lightning",
					"item": [
						{
							"name": "Playground Node 1: Enable Testnet BTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"electrum\", // This method activates a coin on the playground node with electrum as a blockdata source (light mode). An error will be returned if the coin is already activated in this playground node, move to the next step if this happens.\r\n    \"coin\": \"tBTC-TEST-segwit\", // The coin to be activated is testnet bitcoin in segwit mode\r\n    \"servers\": [ // the list of electrum servers the playground node should connect to\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10068\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Enable Testnet BTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"electrum\", // This method activates a coin on the playground node with electrum as a blockdata source (light mode). An error will be returned if the coin is already activated in this playground node, move to the next step if this happens.\r\n    \"coin\": \"tBTC-TEST-segwit\", // The coin to be activated is testnet bitcoin in segwit mode\r\n    \"servers\": [ // the list of electrum servers the playground node should connect to\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10068\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10068\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Enable Testnet BTC on Lightning",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"task::enable_lightning::init\", // This method starts a task that runs a lightning node. Use the returned \"task_id\" in the next use case to check if the lightning node is running or still initiating. An error will be returned if a lightning node was already running since only 1 lightning node is allowed to run from inside Komodo DeFi Framework, skip next step in such case.\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\", // Testnet lightning network\r\n        \"activation_params\": {\r\n            \"name\": \"KomoDeFi-Playground-Node-1\", // The name of the node that will be announced to other nodes\r\n            \"listening_port\": 31735, // The port that this node listens for incoming connections on\r\n            \"color\": \"2abcf1\" // The color of the node that will be announced to other nodes, this node will be showed with this color in network graphs in lightning explorers\r\n            // Node in lightning explorer: https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check Enable Testnet BTC on Lightning Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\", // This method checks the status of starting the lightning node, skip this step if an \"error\":\"Layer 2 tBTC-TEST-lightning is already activated\" was returned in the previous step\r\n    \"params\": {\r\n        \"task_id\": 0 // The \"task_id\" returned from the last use case\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Enable Testnet BTC on Lightning",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"task::enable_lightning::init\", // This method starts a task that runs a lightning node. Use the returned \"task_id\" in the next use case to check if the lightning node is running or still initiating. An error will be returned if a lightning node was already running since only 1 lightning node is allowed to run from inside Komodo DeFi Framework, skip next step in such case.\r\n    \"mmrpc\": \"2.0\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\",\r\n        \"activation_params\": {\r\n            \"name\": \"KomoDeFi-Playground-Node-2\",\r\n            \"listening_port\": 31736, // The port is changed for this node since both nodes are on the same machine and can't listen on the same port\r\n            \"color\": \"6a4de3\"\r\n            // Node in lightning explorer: https://mempool.space/testnet/lightning/node/02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Enable Testnet BTC on Lightning Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_lightning::status\", // This method checks the status of starting the lightning node, skip this step if an \"error\":\"Layer 2 tBTC-TEST-lightning is already activated\" was returned in the previous step\r\n    \"params\": {\r\n        \"task_id\": 0 // The \"task_id\" returned from the last use case\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"my_balance\", // This method displays the balance and address of the node, \"unspendable_balance\" is the balance that can't be spent because:\r\n    // 1- The node can't connect with a channel/s counterparty (when a channel is inactive it's balance can't be used on the lightning network, if it becomes inactive for a long time it should be closed)\r\n    // 2 - It's the total reserved channels balances that can't be spent to ensure that we are able to be punished if we broadcast an old state\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_balance\", // Node 2 probably has no balance on the lightning network yet, we will open a channel from Node 2 to Node 1 in the upcoming steps to get some balance\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Connect to a Node to Download Network Graph from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\", // We need to connect a node at the start to get the network graph so we can find routes for payments\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\" // https://mempool.space/testnet/lightning/node/038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9, choose another node to connect to to test this since we are probably already connected to this node_address\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Connect to a Node to Download Network Graph from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::connect_to_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\" // https://mempool.space/testnet/lightning/node/038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9, choose another node to connect to to test this since we are probably already connected to this node_address\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Add Node 2 as Trusted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::add_trusted_node\", // This adds a node to our trusted nodes list, if this node opens a channel to us we will accept the funding with 0 confirmations\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_id\": \"02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\" // Node 2 address (lightning public key)\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List trusted nodes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::nodes::list_trusted_nodes\", // View the trusted nodes list, we can see that node 2 address is added to the trusted list (Possible improvement to this is to add the name of the node too)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Open 0 conf channel to Node 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\", // This method opens a channel with a node\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164@95.216.148.216:31735\", // Node 2 address to open a 0 confirmations channel\r\n        \"amount\": {\r\n            \"type\": \"Exact\", // If we want to open a channel with all our tBTC balance we can use \"type\": \"Max\" here instead\r\n            \"value\": 0.002\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Open Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\", // This method gets a channel details\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Please use the \"rpc_channel_id\" value returned from the \"open_channel\" method to see that the channel is ready and usable straight away with 0 confirmations, you can see more details about the channel like the actual channel id and the \"funding_tx\" hash which can be used to view the transaction on block explorers\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Node Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_balance\", // The balance of the opened channel is added to the overall balance\r\n    \"coin\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List Open Channels",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\", // without using the \"filter\" parameter, this method gets the list of all the open channels with their details, to see only inbound channels by using the \"filter\" parameter we can check the next use case\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: List Inbound Open Channels",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"filter\": {\r\n            \"is_outbound\": false // Check for a channel with \"counterparty_node_id\": \"02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\" to see the channel that Node 2 opened to this Node (Node 1)\r\n            // To see the complete parameters that can be used in filter please check v2/Lightning/Channels/list_open_channels_by_filter\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Send Payment to Node 1 by PubKey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"keysend\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"destination\": \"024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\", // Node 1 pubkey, https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164\r\n            \"amount_in_msat\": 1000000, // The maximum amount that can be send to Node 1 over the opened 0conf channel is 20000000 msat since Node 1 config has \"max_inbound_in_flight_htlc_percent\": 10 (The maximum allowed inbound payment to Node 1 through a channel is 10% of the channel's value, equal to 0.0002 BTC or  20000000 msat for the 0conf channel we just opened between Node 2 and 1\r\n            \"expiry\": 24\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Keysend Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\", // This method gets a payment details by it's hash, we need to check if the keysend payment we just sent is successful or not by checking the value of the \"status\" field in the response\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"7568a1b8c478ab4d12e53432cb2711acd73f34c4cc2142f8e70a87bd4f4b381f\" // This should be the payment_hash of the keysend payment we just sent in the last request\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Open a normal Channel (not 0conf) to a public node",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::open_channel\", // If there is no outbound liquidity in Node 1, we should open a channel to a well connected public node to route an invoice payment through Node 1 from Node 2 to the target in upcoming usecases (total outbound liquidity is equal to the \"balance\" field returned in the response of \"Playground Node 1: Get Node Balance\") \r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"036497fee1a0b963a63f0b4374819d9016fcca9c09dbef4cb427a2d0146649b025@44.234.48.207:9735\", // Please use one of the following testnet lightning explorers (https://1ml.com/testnet/ , https://mempool.space/testnet/lightning) to choose either a high capacity or a well connected node to open a channel with\r\n        \"amount\": {\r\n            \"type\": \"Exact\",\r\n            \"value\": 0.002\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get Open Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 16 // Please use the \"rpc_channel_id\" value returned from the \"open_channel\" method to check periodically  for the channel status until the response has \"is_ready\": true, \"is_usable\": true to proceed to the next use case of paying an invoice with Node 1 as a routing node (\"funding_tx\" field in response can be used to check the funding tx in testnet explorers to see how many confirmations occured)\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Pay Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address (keysend)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"invoice\": \"lntb20u1p3kjyw2pp57z32c5knvttf0ecg726p6lf0mspa0fphlvhe7u5czyln4klx23ssdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5fgmtqxtmrfvx7j3vrjyx9lpujfn86rhwzymq4myykf83acy2wzuqcncltv33sqna9ze4y2jx9vnu9dsrrzpwf4pm48nr6drj993982q4mvlq477qndjhc9fauch5ahwf08pgy80dfl6ncxznw87j0cg2lhcp7rm7t6\" // This invoice is already paid, Go to https://starblocks.acinq.co/ and add some items to cart and checkout to get a new invoice to pay using this method, the total amount of the invoice must be less than 0.0002 BTC or 0.2 mBTC (10% of the channel) (this less than 0.0002 BTC to amount for the routing fees paid to Node 1 and other nodes)\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check Invoice Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"f0a2ac52d362d697e708f2b41d7d2fdc03d7a437fb2f9f7298113f3adbe65461\" // This should be the payment_hash of the invoice we just paid in the last request, this payment_hash is returned in the response of the send_payment method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: List Open Channels to Check Inbound Liquidity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::list_open_channels_by_filter\", // We can see using this method that Node 2 has some inbound liquidity now after sending 2 payments\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: View Payments History",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::list_payments_by_filter\", // without using the \"filter\" parameter, this method gets the list of all the payments with their details, see v2/Lightning/Payments/list_payments_by_filter to see all the options that we can filter by\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Generate invoice to be paid by another node",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::generate_invoice\", // This method is used to generate an invoice to be paid to us by another node\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"description\": \"test invoice\",\r\n        \"amount_in_msat\": 10000, // Now that Node 2 has some inbound liquidity, we will generate an invoice by Node 2 with an amount requested of 10000 msat to be paid by Node 1\r\n        \"expiry\": 600 // This is an optional parameter, if not set the default value will be 1 hour or 3600 seconds\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Pay Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::send_payment\", // This method is used to pay an invoice or send a payment by pubkey/address (keysend)\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Check v2/Lightning/Payments/send_payment for other accepted values and optional parameters\r\n            \"invoice\": \"lntb100n1p3kjyjjdq5w3jhxapqd9h8vmmfvdjsnp4qt4sk9u9w6zhk6vshfta264q3aj35pdgpxzfvqz0gt04uazqkz5uzpp5g98ekdfyl38y3jvlyu3e2fejmz7zawsmxh8rhu48pag5fdq0tx0qsp5tzalk295kffw02y82sxp00svsa9a0ts65mj7ygqqy845y4ek58zs9qyysgqcqpcxqzjcn4nnuyvwm52h7cswfk7flj6r8dz0mcqjfazcef37huzaahs0wv0qrpqelfzjzzgd88t6859tkzfxsyrn5n9j3yvclx3n6sldzrkhz6sqxe6ngv\" // This invoice is already paid, paste the invoice generated by Node 2 here instead to pay it\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check Invoice Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::payments::get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\" // This should be the payment_hash of the invoice we just paid in the last request, this payment_hash is returned in the response of the send_payment method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Place a maker order to sell onchain BTC for LNBTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"setprice\", // This method places an order in the order book, the \"uuid\" field in the response will be used to check the order status\r\n    \"base\": \"tBTC-TEST-segwit\", // Node 1 wants to sell onchain testnet BTC\r\n    \"rel\": \"tBTC-TEST-lightning\", // Node 1 wants to buy lightning testnet BTC\r\n    \"price\": 1, // The price for 1 LNtBTC (1 LNtBTC = 1 tBTC)\r\n    \"volume\": 0.0001 // The amount of onchain testnet BTC Node 1 wants to sell (If the order is matched Node 1 shall recieve 0.00001 LNBTC) - Note that in the current Node 1 & 2 setup the volume should be less than 0.0002 LNBTC, this is the max amount to be sent on the channel, Node 2 can open more channels to Node 1 or other nodes and and get more outbound liquidity to be able to trade more LNBTC.\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: View BTC/LNBTC Orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"orderbook\", // This method requests from the network the currently available orders for the specified trading pair, it's used here to assert that Node 2 can see Node 1 order on the orderbook\r\n    \"base\": \"tBTC-TEST-segwit\",\r\n    \"rel\": \"tBTC-TEST-lightning\"\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Buy onchain BTC for LNBTC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"buy\", // This method issues a buy request and attempts to match an order from the orderbook based on the provided price and volume\r\n    \"base\": \"tBTC-TEST-segwit\",\r\n    \"rel\": \"tBTC-TEST-lightning\",\r\n    \"price\": 1,\r\n    \"volume\": 0.0001\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check order status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"order_status\", // This method returns the data of the order using it's uuid. The response is different for maker (using set_price method) and taker (using buy/sell method) orders\r\n    \"uuid\": \"31307ed5-bf9c-4ec5-a69f-a5f463521514\" // Insert the uuid returned from the setprice method here, if there is any values returned inside started_swaps field, the uuids will be used to check for the swap status\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check order status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // Insert the uuid returned from the buy method here, the same uuid is used as the swap uuid if a match was found for the order and the swap has started\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Check swap status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"method\": \"my_swap_status\", // This method returns the data and status of an atomic swap that was initiated due to a matched order, in the data we can see all the transactions made for the swap and if there is an \"event\": {\"type\": \"TakerPaymentSpendConfirmed\"} then we recieved the LNBTC successfully, we can see the payment info by using the \"tx_hash\" in the \"TakerPaymentSpent\" event\r\n    \"params\": {\r\n        \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // One of the \"started_swaps\" uuids returned from the order_status method\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Check swap status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"method\": \"my_swap_status\", // This method returns the data and status of an atomic swap that was initiated due to a matched order, in the data we can see all the transactions made for the swap and if there is an \"event\": {\"type\": \"MakerPaymentSpent\"} then we recieved the onchain tBTC successfully, we can see the payment info by using the \"tx_hash\" in the \"MakerPaymentSpent\" event and checking a BTC testnet explorer\r\n    \"params\": {\r\n        \"uuid\": \"63955bf1-d3d4-44e8-b644-a462a2da4295\" // The swap uuid is the same as the uuid used to get the buy order status\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Close the channel opened with Node 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::close_channel\", // This method closes an open channel either cooperatively or by forcing the close depending on the used parameters\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Use the same rpc_channel_id of the channel we opened with Node 1\r\n        // \"force_close\": false // This is an optional parameter that can be set to true to force close the channel, if this parameter is not set false is the default value\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 2: Get Closed Channel Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"E3vI9p#Srtz3axn!jQDQ\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_channel_details\", // This method gets a channel details, you can see the channel closing tx in the response once it's broadcasted, you can also use this method after claiming the closing balance back to your account to see the claiming tx hash and the balance that got claimed back to your address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 3 // Use the same \"rpc_channel_id\" of the closed channel\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30784",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30784"
								}
							},
							"response": []
						},
						{
							"name": "Playground Node 1: Get balance to be claimed on-chain",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments",
											"const rawData = pm.request.body.toString();",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)",
											"",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"00ahk2jd0z!1JRm#F9e2\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"lightning::channels::get_claimable_balances\", // This method gets the balance that's onchain and still waiting for a condition to be claimed back to the Node's onchain tBTC address\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"include_open_channels_balances\": false\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://95.216.148.216:30783",
									"protocol": "http",
									"host": [
										"95",
										"216",
										"148",
										"216"
									],
									"port": "30783"
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "HD Wallet",
			"item": [
				{
					"name": "task_enable_utxo",
					"item": [
						{
							"name": "init DOC (wss)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:30020\",\r\n                  \"protocol\": \"WSS\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (wss, hd)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Electrum\",\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:30020\",\r\n                            \"protocol\": \"WSS\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            \"path_to_address\": { // defaults to 0'/0/0\r\n                \"account_id\": 0,\r\n                \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n                \"address_id\": 1\r\n            },\r\n            \"tx_history\": true, // defaults to false\r\n            \"gap_limit\": 20, // Optional, defaults to 20 \r\n            \"scan_policy\": \"scan_if_new_wallet\", // Optional, defaults to \"scan_if_new_wallet\", Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\"\r\n            \"min_addresses_number\": 3 // Optional, Number of addresses to generate, if not specified addresses will be generated up to path_to_address::address_index\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (wss, trezor)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:30020\",\r\n                  \"protocol\": \"WSS\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"priv_key_policy\": \"Trezor\",\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:20020\",\r\n                  \"protocol\": \"SSL\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp, hd)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"task::enable_utxo::init\",\r\n    \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Electrum\",\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:20020\",\r\n                            \"protocol\": \"SSL\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            \"path_to_address\": { // defaults to 0'/0/0\r\n                \"account_id\": 0,\r\n                \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n                \"address_id\": 1\r\n            },\r\n            \"tx_history\": true, // defaults to false\r\n            \"gap_limit\": 20, // Optional, defaults to 20 \r\n            \"scan_policy\": \"scan_if_new_wallet\", // Optional, defaults to \"scan_if_new_wallet\", Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\"\r\n            \"min_addresses_number\": 3 // Optional, Number of addresses to generate, if not specified addresses will be generated up to path_to_address::address_index\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "init DOC (tcp, trezor)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n    {\r\n      \"userpass\": \"RPC_UserP@SSW0RD\",\r\n      \"mmrpc\": \"2.0\",\r\n      \"method\": \"task::enable_utxo::init\",\r\n      \"params\": {\r\n        \"ticker\": \"DOC\",\r\n        \"activation_params\": {\r\n          \"mode\": {\r\n            \"rpc\": \"Electrum\",\r\n            \"rpc_data\": {\r\n              \"servers\": [\r\n                {\r\n                  \"url\": \"electrum3.cipig.net:20020\",\r\n                  \"protocol\": \"SSL\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"scan_policy\": \"scan_if_new_wallet\",\r\n          \"min_addresses_number\": 3,\r\n          \"priv_key_policy\": \"Trezor\",\r\n          \"gap_limit\": 20\r\n        }\r\n      }\r\n    }"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "userpass",
			"value": ""
		}
	]
}