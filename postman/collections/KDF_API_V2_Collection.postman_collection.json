{
  "info": {
    "_postman_id": "904d4276-7293-4a82-9937-a52dbb108b91",
    "name": "Komodo DeFi Framework API - V2",
    "description": {
      "content": "\n# Komodo DeFi Framework API - V2\n\nThis collection provides a comprehensive set of executable examples for the Komodo DeFi Framework API vv2. It includes **181 requests** covering a wide range of functionalities, from coin activation and trading to wallet management and real-time streaming.\n\n## Getting Started\n\n1.  **Install the Environment**: Make sure to import and select the corresponding **Komodo DeFi Framework - V2** environment. This contains essential variables like `userpass`, `address`, and `port`.\n2.  **Run `mm2`**: Ensure an instance of the Komodo DeFi daemon (`mm2`) is running and accessible at the address specified in your environment variables.\n3.  **Explore and Execute**: Navigate through the folders to find the methods you're interested in. Each request is pre-configured to work with the provided environment.\n\n## Collection Structure\n\nThe collection is organized into folders based on functionality:\n- **Coin & Token Activation**: Methods for enabling coins and tokens.\n- **Trading & Orders**: Everything related to order placement, swaps, and market data.\n- **Wallet Management**: Operations for checking balances, transaction history, etc.\n- **And more...**\n\nEach request includes a description that links back to the official documentation for more details.\n\n---\n*Generated by the Komodo Docs Team on 2025-06-18*\n",
      "type": "text/markdown"
    },
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Coin & Token Activation",
      "item": [
        {
          "name": "get_enabled_coins - Get Enabled Coins Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_enabled_coins\", \"params\": {}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `get_enabled_coins`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_enabled_coins** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_enabled_coins/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for get_enabled_coins\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Enable",
          "item": [
            {
              "name": "enable_bch_with_tokens - Enable Bch With Tokens Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_bch_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"BCH\", \"allow_slp_unsafe_conf\": false, \"bchd_urls\": [\"https://bchd.dragonhound.info\"], \"mode\": {\"rpc\": \"Electrum\", \"rpc_data\": {\"servers\": [{\"url\": \"bch.imaginary.cash:50002\", \"protocol\": \"SSL\"}, {\"url\": \"cashnode.bch.ninja:50002\", \"protocol\": \"SSL\"}, {\"url\": \"electrum3.cipig.net:20055\", \"protocol\": \"SSL\"}]}}, \"tx_history\": true, \"slp_tokens_requests\": [{\"ticker\": \"ASLP-SLP\", \"required_confirmations\": 4}], \"required_confirmations\": 5, \"requires_notarization\": false, \"address_format\": {\"format\": \"cashaddress\", \"network\": \"bitcoincash\"}, \"utxo_merge_params\": {\"merge_at\": 50, \"check_every\": 10, \"max_merge_at_once\": 25}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_bch_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_bch_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_bch_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_bch_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_bch_with_tokens - Enable Bch With Tokens Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_bch_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"BCH\", \"allow_slp_unsafe_conf\": false, \"bchd_urls\": [\"https://bchd.dragonhound.info\"], \"mode\": {\"rpc\": \"Electrum\", \"rpc_data\": {\"servers\": [{\"url\": \"bch.imaginary.cash:50002\", \"protocol\": \"SSL\"}, {\"url\": \"cashnode.bch.ninja:50002\", \"protocol\": \"SSL\"}, {\"url\": \"electrum3.cipig.net:20055\", \"protocol\": \"SSL\"}]}}, \"tx_history\": true, \"get_balances\": false, \"slp_tokens_requests\": [{\"ticker\": \"ASLP-SLP\", \"required_confirmations\": 4}]}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_bch_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_bch_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_bch_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_bch_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_erc20 - Enable Erc20 Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_erc20\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"BAT-ERC20\", \"activation_params\": {\"required_confirmations\": 3}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_erc20`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_erc20** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_erc20/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_erc20\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Enable Eth With Tokens Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_eth_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ETH\", \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\", \"gas_station_decimals\": 8, \"gas_station_policy\": {\"policy\": \"MeanAverageFast\"}, \"mm2\": 1, \"priv_key_policy\": {\"type\": \"ContextPrivKey\"}, \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\", \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\", \"nodes\": [{\"url\": \"https://eth1.cipig.net:18555\", \"komodo_proxy\": false}, {\"url\": \"https://eth2.cipig.net:18555\", \"komodo_proxy\": false}, {\"url\": \"https://eth3.cipig.net:18555\", \"komodo_proxy\": false}], \"tx_history\": true, \"erc20_tokens_requests\": [{\"ticker\": \"APE-ERC20\", \"required_confirmations\": 4}, {\"ticker\": \"BCH-ERC20\", \"required_confirmations\": 4}, {\"ticker\": \"MINDS-ERC20\", \"required_confirmations\": 4}, {\"ticker\": \"BUSD-ERC20\", \"required_confirmations\": 4}], \"required_confirmations\": 5, \"requires_notarization\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_eth_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_eth_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_eth_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_eth_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Enable Eth With Tokens Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_eth_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"MATIC\", \"get_balances\": false, \"tx_history\": false, \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\", \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"swap_v2_contracts\": {\"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"}, \"nodes\": [{\"url\": \"https://polygon-rpc.com\"}, {\"url\": \"https://node.komodo.earth:8080/polygon\"}, {\"url\": \"https://block-proxy.komodo.earth/rpc/matic\"}], \"erc20_tokens_requests\": [{\"ticker\": \"PGX-PLG20\", \"required_confirmations\": 4}, {\"ticker\": \"AAVE-PLG20\", \"required_confirmations\": 4}], \"required_confirmations\": 5, \"requires_notarization\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_eth_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_eth_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_eth_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_eth_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Enable Eth With Tokens Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_eth_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"MATIC\", \"get_balances\": false, \"tx_history\": false, \"nft_req\": {\"type\": \"Moralis\", \"info\": {\"url\": \"https://moralis-proxy.komodo.earth\"}}, \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\", \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\", \"nodes\": [{\"url\": \"https://polygon-rpc.com\"}, {\"url\": \"https://node.komodo.earth:8080/polygon\"}, {\"url\": \"https://block-proxy.komodo.earth/rpc/matic\"}], \"erc20_tokens_requests\": [{\"ticker\": \"PGX-PLG20\", \"required_confirmations\": 4}, {\"ticker\": \"AAVE-PLG20\", \"required_confirmations\": 4}], \"required_confirmations\": 5, \"requires_notarization\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_eth_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_eth_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_eth_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_eth_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Enable Eth With Tokens Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_eth_with_tokens\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ETH\", \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\", \"gas_station_decimals\": 8, \"gas_station_policy\": {\"policy\": \"MeanAverageFast\"}, \"mm2\": 1, \"rpc_mode\": \"Default\", \"priv_key_policy\": {\"type\": \"WalletConnect\", \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"}, \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\", \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\", \"nodes\": [{\"url\": \"https://eth1.cipig.net:18555\", \"komodo_proxy\": false}, {\"url\": \"https://eth2.cipig.net:18555\", \"komodo_proxy\": false}, {\"url\": \"https://eth3.cipig.net:18555\", \"komodo_proxy\": false}], \"tx_history\": true, \"erc20_tokens_requests\": [{\"ticker\": \"PEPE-ERC20\", \"required_confirmations\": 4}], \"required_confirmations\": 5}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_eth_with_tokens`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_eth_with_tokens** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_eth_with_tokens/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_eth_with_tokens\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_nft - Enable Nft Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_nft\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"NFT_MATIC\", \"activation_params\": {\"provider\": {\"type\": \"Moralis\", \"info\": {\"url\": \"https://moralis-proxy.komodo.earth\", \"komodo_proxy\": true}}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_nft`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_nft** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_nft/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_nft\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_token - Enable Tendermint Token Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_tendermint_token\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ATOM-IBC_IRIS\", \"activation_params\": {\"required_confirmations\": 3}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_tendermint_token`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_tendermint_token** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_tendermint_token/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_tendermint_token\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Enable Tendermint With Assets Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"enable_tendermint_with_assets\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"IRIS\", \"tokens_params\": [{\"ticker\": \"ATOM-IBC_IRIS\"}], \"nodes\": [{\"url\": \"https://iris-rpc.alpha.komodo.earth/\", \"api_url\": \"https://iris-api.alpha.komodo.earth/\", \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\", \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"}, {\"url\": \"https://rpc.irishub-1.irisnet.org\", \"komodo_proxy\": false}], \"tx_history\": true, \"get_balances\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_tendermint_with_assets`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_tendermint_with_assets** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_tendermint_with_assets/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_tendermint_with_assets\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Enable Tendermint With Assets Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"enable_tendermint_with_assets\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"IRIS\", \"tokens_params\": [{\"ticker\": \"ATOM-IBC_IRIS\"}], \"nodes\": [{\"url\": \"https://iris-rpc.alpha.komodo.earth/\", \"api_url\": \"https://iris-api.alpha.komodo.earth/\", \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\", \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"}, {\"url\": \"https://rpc.irishub-1.irisnet.org\", \"komodo_proxy\": false}], \"get_balances\": true}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_tendermint_with_assets`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_tendermint_with_assets** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_tendermint_with_assets/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_tendermint_with_assets\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Enable Tendermint With Assets Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"enable_tendermint_with_assets\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ATOM\", \"tx_history\": true, \"get_balances\": true, \"activation_params\": {\"priv_key_policy\": {\"type\": \"WalletConnect\", \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"}}, \"nodes\": [{\"url\": \"https://cosmos-rpc.alpha.komodo.earth/\", \"api_url\": \"https://cosmos-api.alpha.komodo.earth/\", \"grpc_url\": \"https://cosmos-grpc.alpha.komodo.earth/\", \"ws_url\": \"wss://cosmos-rpc.alpha.komodo.earth/websocket\"}, {\"url\": \"https://cosmoshub.rpc.stakin-nodes.com/\"}], \"tokens_params\": []}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `enable_tendermint_with_assets`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **enable_tendermint_with_assets** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/enable_tendermint_with_assets/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for enable_tendermint_with_assets\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the enable method"
        },
        {
          "name": "Stream",
          "item": [
            {
              "name": "stream::balance::enable - Stream Balance Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::balance::enable\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"MATIC\", \"config\": {\"stream_interval_seconds\": 15}, \"client_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::balance::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::balance::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::balance::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::balance::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::fee_estimator::enable - Stream Fee Estimator Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::fee_estimator::enable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1, \"coin\": \"MATIC\", \"config\": {\"estimate_every\": 33.4, \"estimator_type\": \"Provider\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::fee_estimator::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::fee_estimator::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::fee_estimator::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::fee_estimator::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::heartbeat::enable - Stream Heartbeat Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::heartbeat::enable\", \"mmrpc\": \"2.0\", \"params\": {\"config\": {\"stream_interval_seconds\": 30}, \"client_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::heartbeat::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::heartbeat::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::heartbeat::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::heartbeat::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::network::enable - Stream Network Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::network::enable\", \"mmrpc\": \"2.0\", \"params\": {\"config\": {\"stream_interval_seconds\": 60}, \"client_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::network::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::network::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::network::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::network::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::order_status::enable - Stream Order Status Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::order_status::enable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::order_status::enable`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **stream::order_status::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::order_status::enable/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::order_status::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::orderbook::enable - Stream Orderbook Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::orderbook::enable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1, \"base\": \"DOC\", \"rel\": \"MARTY\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::orderbook::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::orderbook::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::orderbook::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::orderbook::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::swap_status::enable - Stream Swap Status Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::swap_status::enable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::swap_status::enable`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **stream::swap_status::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::swap_status::enable/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::swap_status::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "stream::tx_history::enable - Stream Tx History Enable Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::tx_history::enable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1, \"coin\": \"DOC\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `stream::tx_history::enable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::tx_history::enable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::tx_history::enable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for stream::tx_history::enable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the stream method"
        },
        {
          "name": "Task",
          "item": [
            {
              "name": "task::enable_bch::cancel - Task Enable Bch Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_bch::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_bch::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_bch::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_bch::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_bch::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::init - Task Enable Bch Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_bch::init\", \"params\": {\"ticker\": \"BCH\", \"activation_params\": {\"bchd_urls\": [\"https://bchd.dragonhound.info\"], \"mode\": {\"rpc\": \"Electrum\", \"rpc_data\": {\"servers\": [{\"url\": \"bch.imaginary.cash:50002\", \"protocol\": \"SSL\"}, {\"url\": \"cashnode.bch.ninja:50002\", \"protocol\": \"SSL\"}, {\"url\": \"bch.soul-dev.com:50002\", \"protocol\": \"SSL\"}, {\"url\": \"electrum3.cipig.net:20055\", \"protocol\": \"SSL\"}]}}, \"slp_tokens_requests\": [{\"ticker\": \"USDF\"}, {\"ticker\": \"ASLP-SLP\", \"required_confirmations\": 3}], \"tx_history\": true, \"required_confirmations\": 5, \"requires_notarization\": false, \"address_format\": {\"format\": \"cashaddress\", \"network\": \"bitcoincash\"}, \"utxo_merge_params\": {\"merge_at\": 50, \"check_every\": 10, \"max_merge_at_once\": 25}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_bch::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_bch::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_bch::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_bch::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::status - Task Enable Bch Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_bch::status\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_bch::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_bch::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_bch::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_bch::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::user_action - Task Enable Bch User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_bch::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_bch::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_bch::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_bch::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_bch::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::cancel - Task Enable Eth Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_eth::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_eth::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_eth::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_eth::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_eth::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::init - Task Enable Eth Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_eth::init\", \"params\": {\"ticker\": \"ETH\", \"activation_params\": {\"eth_node_urls\": [\"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"], \"mode\": {\"rpc\": \"Infura\", \"rpc_data\": {\"servers\": [{\"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\", \"protocol\": \"HTTPS\"}]}}, \"evm_tokens_requests\": [{\"ticker\": \"USDT\"}, {\"ticker\": \"DAI\", \"required_confirmations\": 3}], \"tx_history\": true, \"required_confirmations\": 5, \"requires_notarization\": false, \"address_format\": {\"format\": \"hex\", \"network\": \"ethereum\"}, \"utxo_merge_params\": {\"merge_at\": 50, \"check_every\": 10, \"max_merge_at_once\": 25}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_eth::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_eth::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_eth::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_eth::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::status - Task Enable Eth Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_eth::status\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_eth::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_eth::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_eth::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_eth::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::user_action - Task Enable Eth User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_eth::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_eth::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_eth::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_eth::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_eth::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::cancel - Task Enable Lightning Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_lightning::cancel\", \"params\": {\"task_id\": 1}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_lightning::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_lightning::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_lightning::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_lightning::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::init - Task Enable Lightning Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"task::enable_lightning::init\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"tBTC-lightning\", \"activation_params\": {\"name\": \"KomoDeFi-Docs-Node-1\", \"listening_port\": 9735, \"color\": \"000000\", \"payment_retries\": 5}}, \"id\": 2}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_lightning::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_lightning::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_lightning::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_lightning::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::status - Task Enable Lightning Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_lightning::status\", \"params\": {\"task_id\": 1, \"forget_if_finished\": false}, \"id\": 2}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_lightning::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_lightning::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_lightning::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_lightning::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::cancel - Task Enable Qtum Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_qtum::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_qtum::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_qtum::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_qtum::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_qtum::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::init - Task Enable Qtum Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_qtum::init\", \"params\": {\"ticker\": \"QTUM\", \"activation_params\": {\"qtum_node_urls\": [\"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"], \"mode\": {\"rpc\": \"Infura\", \"rpc_data\": {\"servers\": [{\"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\", \"protocol\": \"HTTPS\"}]}}, \"qrc20_tokens_requests\": [{\"ticker\": \"USDT\"}, {\"ticker\": \"DAI\", \"required_confirmations\": 3}], \"tx_history\": true, \"required_confirmations\": 5, \"requires_notarization\": false, \"address_format\": {\"format\": \"hex\", \"network\": \"qtum\"}, \"utxo_merge_params\": {\"merge_at\": 50, \"check_every\": 10, \"max_merge_at_once\": 25}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_qtum::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_qtum::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_qtum::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_qtum::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::status - Task Enable Qtum Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_qtum::status\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_qtum::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_qtum::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_qtum::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_qtum::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::user_action - Task Enable Qtum User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_qtum::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_qtum::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_qtum::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_qtum::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_qtum::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::cancel - Task Enable Tendermint Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_tendermint::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_tendermint::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_tendermint::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_tendermint::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_tendermint::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::init - Task Enable Tendermint Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_tendermint::init\", \"params\": {\"ticker\": \"TENDERMINT\", \"activation_params\": {\"tendermint_node_urls\": [\"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"], \"mode\": {\"rpc\": \"Infura\", \"rpc_data\": {\"servers\": [{\"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\", \"protocol\": \"HTTPS\"}]}}, \"tokens_requests\": [{\"ticker\": \"USDT\"}, {\"ticker\": \"DAI\", \"required_confirmations\": 3}], \"tx_history\": true, \"required_confirmations\": 5, \"requires_notarization\": false, \"address_format\": {\"format\": \"hex\", \"network\": \"tendermint\"}, \"utxo_merge_params\": {\"merge_at\": 50, \"check_every\": 10, \"max_merge_at_once\": 25}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_tendermint::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_tendermint::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_tendermint::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_tendermint::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::status - Task Enable Tendermint Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_tendermint::status\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_tendermint::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_tendermint::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_tendermint::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_tendermint::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::user_action - Task Enable Tendermint User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_tendermint::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_tendermint::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_tendermint::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_tendermint::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_tendermint::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::cancel - Task Enable Utxo Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_utxo::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_utxo::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_utxo::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_utxo::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_utxo::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::init - Task Enable Utxo Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_utxo::init\", \"params\": {\"ticker\": \"KMD\", \"activation_params\": {\"mode\": {\"rpc\": \"Electrum\", \"rpc_data\": {\"servers\": [{\"url\": \"electrum2.cipig.net:10001\"}, {\"url\": \"electrum3.cipig.net:20001\", \"ws_url\": \"electrum3.cipig.net:30001\", \"protocol\": \"SSL\"}]}}, \"scan_policy\": \"scan_if_new_wallet\", \"priv_key_policy\": \"Trezor\", \"min_addresses_number\": 3, \"gap_limit\": 20}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_utxo::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_utxo::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_utxo::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_utxo::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::status - Task Enable Utxo Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_utxo::status\", \"params\": {\"task_id\": 1, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_utxo::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_utxo::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_utxo::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_utxo::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::user_action - Task Enable Utxo User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_utxo::user_action\", \"params\": {\"task_id\": 1, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_utxo::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_utxo::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_utxo::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_utxo::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::cancel - Task Enable Z Coin Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::enable_z_coin::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Task Enable Z Coin Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::init\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ZOMBIE\", \"activation_params\": {\"mode\": {\"rpc\": \"Light\", \"rpc_data\": {\"electrum_servers\": [{\"url\": \"zombie.dragonhound.info:10133\"}, {\"url\": \"zombie.dragonhound.info:20133\", \"protocol\": \"SSL\", \"ws_url\": \"zombie.dragonhound.info:30059\"}], \"light_wallet_d_servers\": [\"http://zombie.dragonhound.info:1443\"]}}, \"zcash_params_path\": \"/home/username/path_to/.zcash-params\", \"scan_blocks_per_iteration\": 100, \"scan_interval_ms\": 200}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_z_coin::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Task Enable Z Coin Init Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::init\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ZOMBIE\", \"activation_params\": {\"mode\": {\"rpc\": \"Light\", \"rpc_data\": {\"electrum_servers\": [{\"url\": \"zombie.dragonhound.info:10133\"}], \"light_wallet_d_servers\": [\"http://zombie.dragonhound.info:1443\"], \"sync_params\": {\"height\": 2528700}}}, \"zcash_params_path\": \"/home/username/path_to/.zcash-params\", \"scan_blocks_per_iteration\": 100, \"scan_interval_ms\": 200}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_z_coin::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Task Enable Z Coin Init Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::init\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ZOMBIE\", \"activation_params\": {\"mode\": {\"rpc\": \"Light\", \"rpc_data\": {\"electrum_servers\": [{\"url\": \"zombie.dragonhound.info:10133\"}, {\"url\": \"zombie.dragonhound.info:20133\", \"protocol\": \"SSL\", \"ws_url\": \"zombie.dragonhound.info:30059\"}], \"light_wallet_d_servers\": [\"http://zombie.dragonhound.info:1443\"], \"sync_params\": \"earliest\"}}, \"zcash_params_path\": \"/home/username/path_to/.zcash-params\", \"scan_blocks_per_iteration\": 100, \"scan_interval_ms\": 200}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_z_coin::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Task Enable Z Coin Init Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::init\", \"mmrpc\": \"2.0\", \"params\": {\"ticker\": \"ZOMBIE\", \"activation_params\": {\"mode\": {\"rpc\": \"Light\", \"rpc_data\": {\"electrum_servers\": [{\"protocol\": \"SSL\", \"url\": \"zombie.dragonhound.info:20133\", \"ws_url\": \"zombie.dragonhound.info:30059\"}], \"light_wallet_d_servers\": [\"http://zombie.dragonhound.info:1443\"], \"sync_params\": {\"date\": 1672704000}}}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::enable_z_coin::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::status - Task Enable Z Coin Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::enable_z_coin::status\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::enable_z_coin::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::user_action - Task Enable Z Coin User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::enable_z_coin::user_action\", \"params\": {\"task_id\": 3, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::enable_z_coin::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::enable_z_coin::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::enable_z_coin::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::enable_z_coin::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the task method"
        }
      ],
      "description": "Methods for activating coins, tokens, and blockchain protocols"
    },
    {
      "name": "Lightning Network",
      "item": [
        {
          "name": "Lightning",
          "item": [
            {
              "name": "lightning::channels::close_channel - Lightning Channels Close Channel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::close_channel\", \"params\": {\"coin\": \"tBTC-lightning\", \"channel_id\": \"1234567890abcdef\", \"force\": true}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::close_channel`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::close_channel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::close_channel/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::close_channel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::get_channel_details - Lightning Channels Get Channel Details Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::get_channel_details\", \"params\": {\"coin\": \"tBTC-lightning\", \"uuid\": \"2b50e274-c173-4fa1-95f3-97f9f82ace92\"}, \"id\": 54}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::get_channel_details`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::get_channel_details** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::get_channel_details/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::get_channel_details\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::get_claimable_balances - Lightning Channels Get Claimable Balances Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::get_claimable_balances\", \"params\": {\"coin\": \"tBTC-lightning\", \"include_open_channels_balances\": true}, \"id\": 762}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::get_claimable_balances`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::get_claimable_balances** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::get_claimable_balances/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::get_claimable_balances\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Lightning Channels List Closed Channels By Filter Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::list_closed_channels_by_filter\", \"params\": {\"coin\": \"tBTC-lightning\"}, \"id\": 55}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::list_closed_channels_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::list_closed_channels_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::list_closed_channels_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::list_closed_channels_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Lightning Channels List Open Channels By Filter Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::list_open_channels_by_filter\", \"params\": {\"coin\": \"tBTC-lightning\"}, \"id\": 55}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::list_open_channels_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::list_open_channels_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::list_open_channels_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::list_open_channels_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Lightning Channels Open Channel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::open_channel\", \"params\": {\"coin\": \"tBTC-lightning\", \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\", \"amount\": {\"type\": \"Exact\", \"value\": 0.004}}, \"id\": 22}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::open_channel`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::open_channel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::open_channel/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::open_channel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Lightning Channels Open Channel Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::open_channel\", \"params\": {\"coin\": \"tBTC-lightning\", \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\", \"amount\": {\"type\": \"Max\"}, \"push_msat\": 0, \"channel_options\": {\"proportional_fee_in_millionths_sats\": 0, \"base_fee_msat\": 1000, \"cltv_expiry_delta\": 72, \"max_dust_htlc_exposure_msat\": 5000000, \"force_close_avoidance_max_fee_satoshis\": 1000}, \"channel_configs\": {\"counterparty_locktime\": 144, \"our_htlc_minimum_msat\": 1, \"negotiate_scid_privacy\": false, \"max_inbound_in_flight_htlc_percent\": 10, \"commit_upfront_shutdown_pubkey\": true, \"inbound_channels_confirmations\": 3, \"their_channel_reserve_sats\": 10000}}, \"id\": null}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::open_channel`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::open_channel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::open_channel/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::open_channel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::update_channel - Lightning Channels Update Channel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::channels::update_channel\", \"params\": {\"coin\": \"tBTC-lightning\", \"uuid\": \"434681f8-95e5-484f-af49-fa80d8ae857b\", \"channel_options\": {\"proportional_fee_in_millionths_sats\": 1, \"base_fee_msat\": 1100, \"cltv_expiry_delta\": 72, \"max_dust_htlc_exposure_msat\": 5000000, \"force_close_avoidance_max_fee_satoshis\": 1000}}, \"id\": 2}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::channels::update_channel`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::channels::update_channel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::channels::update_channel/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::channels::update_channel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::add_trusted_node - Lightning Nodes Add Trusted Node Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::nodes::add_trusted_node\", \"params\": {\"coin\": \"tBTC-lightning\", \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::nodes::add_trusted_node`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::nodes::add_trusted_node** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::nodes::add_trusted_node/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::nodes::add_trusted_node\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::connect_to_node - Lightning Nodes Connect To Node Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::nodes::connect_to_node\", \"params\": {\"coin\": \"tBTC-lightning\", \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::nodes::connect_to_node`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::nodes::connect_to_node** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::nodes::connect_to_node/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::nodes::connect_to_node\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::list_trusted_nodes - Lightning Nodes List Trusted Nodes Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::nodes::list_trusted_nodes\", \"params\": {\"coin\": \"tBTC-lightning\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::nodes::list_trusted_nodes`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::nodes::list_trusted_nodes** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::nodes::list_trusted_nodes/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::nodes::list_trusted_nodes\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::remove_trusted_node - Lightning Nodes Remove Trusted Node Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::nodes::remove_trusted_node\", \"params\": {\"coin\": \"tBTC-lightning\", \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::nodes::remove_trusted_node`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::nodes::remove_trusted_node** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::nodes::remove_trusted_node/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::nodes::remove_trusted_node\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::generate_invoice - Lightning Payments Generate Invoice Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::payments::generate_invoice\", \"params\": {\"coin\": \"tBTC-lightning\", \"amount\": \"10000\", \"description\": \"Test invoice\"}, \"id\": 101}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::generate_invoice`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::generate_invoice** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::generate_invoice/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::generate_invoice\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::get_payment_details - Lightning Payments Get Payment Details Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"lightning::payments::get_payment_details\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"tBTC-lightning\", \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::get_payment_details`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::get_payment_details** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::get_payment_details/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::get_payment_details\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Lightning Payments List Payments By Filter Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::payments::list_payments_by_filter\", \"params\": {\"coin\": \"tBTC-lightning\"}, \"id\": 104}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::list_payments_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::list_payments_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::list_payments_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::list_payments_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Lightning Payments List Payments By Filter Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"lightning::payments::list_payments_by_filter\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"tBTC-lightning\", \"filter\": {\"payment_type\": {\"type\": \"Inbound Payment\"}}, \"limit\": 2, \"paging_options\": {\"PageNumber\": 2}}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::list_payments_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::list_payments_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::list_payments_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::list_payments_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Lightning Payments List Payments By Filter Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"lightning::payments::list_payments_by_filter\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"tBTC-lightning\", \"filter\": {\"status\": \"pending\", \"from_amount_msat\": 10000, \"to_amount_msat\": 40000}}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::list_payments_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::list_payments_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::list_payments_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::list_payments_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Lightning Payments List Payments By Filter Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"lightning::payments::list_payments_by_filter\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"tBTC-lightning\", \"filter\": {\"status\": \"succeeded\", \"from_timestamp\": 1681948800, \"to_timestamp\": 1682035199}}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::list_payments_by_filter`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::list_payments_by_filter** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::list_payments_by_filter/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::list_payments_by_filter\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::send_payment - Lightning Payments Send Payment Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"lightning::payments::send_payment\", \"params\": {\"coin\": \"tBTC-lightning\", \"invoice\": \"lnbc1...\"}, \"id\": 102}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `lightning::payments::send_payment`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **lightning::payments::send_payment** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/lightning::payments::send_payment/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for lightning::payments::send_payment\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the lightning method"
        }
      ],
      "description": "Lightning Network channel and payment management"
    },
    {
      "name": "Real-time Streaming",
      "item": [
        {
          "name": "stream::disable - Stream Disable Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"stream::disable\", \"mmrpc\": \"2.0\", \"params\": {\"client_id\": 1, \"streamer_id\": \"BALANCE:MATIC\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `stream::disable`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stream::disable** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stream::disable/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for stream::disable\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "WebSocket streaming endpoints for real-time data"
    },
    {
      "name": "Task Management",
      "item": [
        {
          "name": "Task",
          "item": [
            {
              "name": "task::create_new_account::cancel - Task Create New Account Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::create_new_account::cancel\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::create_new_account::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::create_new_account::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::create_new_account::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::create_new_account::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::init - Task Create New Account Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::create_new_account::init\", \"params\": {\"coin\": \"KMD\", \"account_id\": 77, \"scan\": true, \"gap_limit\": 20}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::create_new_account::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::create_new_account::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::create_new_account::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::create_new_account::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::status - Task Create New Account Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::create_new_account::status\", \"params\": {\"task_id\": 1}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::create_new_account::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::create_new_account::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::create_new_account::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::create_new_account::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::user_action - Task Create New Account User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::create_new_account::user_action\", \"params\": {\"task_id\": 3, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::create_new_account::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::create_new_account::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::create_new_account::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::create_new_account::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::cancel - Task Get New Address Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::get_new_address::cancel\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::get_new_address::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::get_new_address::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::get_new_address::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::get_new_address::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::init - Task Get New Address Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::get_new_address::init\", \"params\": {\"coin\": \"DOC\", \"account_id\": 0, \"chain\": \"External\", \"gap_limit\": 20}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::get_new_address::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::get_new_address::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::get_new_address::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::get_new_address::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::status - Task Get New Address Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::get_new_address::status\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::get_new_address::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::get_new_address::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::get_new_address::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::get_new_address::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::user_action - Task Get New Address User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::get_new_address::user_action\", \"params\": {\"task_id\": 3, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::get_new_address::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::get_new_address::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::get_new_address::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::get_new_address::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::cancel - Task Init Trezor Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::cancel\", \"params\": {\"task_id\": 0}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::cancel`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::cancel/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::init - Task Init Trezor Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::init\", \"params\": {}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::init - Task Init Trezor Init Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::init\", \"params\": {\"device_pubkey\": \"066deb87b0d0500ec2e9b85f5314870b03a53517\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::status - Task Init Trezor Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::status\", \"params\": {\"task_id\": 0, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::status`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::status/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Task Init Trezor User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::user_action`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::user_action/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Task Init Trezor User Action Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::init_trezor::user_action\", \"params\": {\"task_id\": 0, \"user_action\": {\"action_type\": \"TrezorPassphrase\", \"passphrase\": \"breakfast\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::init_trezor::user_action`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::init_trezor::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::init_trezor::user_action/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::init_trezor::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::cancel - Task Scan For New Addresses Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::scan_for_new_addresses::cancel\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::scan_for_new_addresses::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::scan_for_new_addresses::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::scan_for_new_addresses::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::scan_for_new_addresses::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::init - Task Scan For New Addresses Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::scan_for_new_addresses::init\", \"params\": {\"coin\": \"DGB\", \"account_index\": 0, \"gap_limit\": 20}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::scan_for_new_addresses::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::scan_for_new_addresses::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::scan_for_new_addresses::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::scan_for_new_addresses::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::status - Task Scan For New Addresses Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::scan_for_new_addresses::status\", \"params\": {\"task_id\": 3}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::scan_for_new_addresses::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::scan_for_new_addresses::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::scan_for_new_addresses::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::scan_for_new_addresses::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the task method"
        }
      ],
      "description": "Asynchronous task operations and status monitoring"
    },
    {
      "name": "Trading & Orders",
      "item": [
        {
          "name": "active_swaps - Active Swaps Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"active_swaps\", \"params\": {\"include_status\": false}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `active_swaps`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **active_swaps** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/active_swaps/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for active_swaps\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "active_swaps - Active Swaps Codegroup 2, Example 1 Request 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"active_swaps\", \"params\": {\"include_status\": true}, \"id\": 42}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `active_swaps`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **active_swaps** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/active_swaps/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for active_swaps\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "best_orders - Best Orders Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"best_orders\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"DGB\", \"action\": \"buy\", \"request_by\": {\"type\": \"number\", \"value\": 100}}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `best_orders`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **best_orders** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/best_orders/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for best_orders\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "best_orders - Best Orders Codegroup 2, Example 1 Request 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"best_orders\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"DGB\", \"action\": \"buy\", \"exclude_mine\": true, \"request_by\": {\"type\": \"number\", \"value\": 100}}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `best_orders`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **best_orders** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/best_orders/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for best_orders\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "best_orders - Best Orders Codegroup 3, Example 1 Request 3",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"best_orders\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"BTC\", \"action\": \"buy\", \"request_by\": {\"type\": \"volume\", \"value\": 0.01}}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `best_orders`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **best_orders** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/best_orders/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for best_orders\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "get_swap_transaction_fee_policy - Get Swap Transaction Fee Policy Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_swap_transaction_fee_policy\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ETH\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `get_swap_transaction_fee_policy`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_swap_transaction_fee_policy** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_swap_transaction_fee_policy/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for get_swap_transaction_fee_policy\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "my_recent_swaps - My Recent Swaps Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"my_recent_swaps\", \"params\": {\"my_coin\": \"MARTY\", \"other_coin\": \"DOC\", \"from_timestamp\": 1672531200, \"to_timestamp\": 1734067200, \"from_uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\", \"limit\": 5, \"page_number\": 1}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `my_recent_swaps`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_recent_swaps** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_recent_swaps/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for my_recent_swaps\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "orderbook - Orderbook Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"orderbook\", \"params\": {\"base\": \"DGB\", \"rel\": \"DASH\"}, \"id\": 42}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `orderbook`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **orderbook** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/orderbook/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for orderbook\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "recreate_swap_data - Recreate Swap Data Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"recreate_swap_data\", \"params\": {\"swap\": {\"type\": \"Taker\", \"uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\", \"my_order_uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\", \"events\": [{\"timestamp\": 1638984440546, \"event\": {\"type\": \"Started\", \"data\": {\"taker_coin\": \"MARTY\", \"maker_coin\": \"DOC\", \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\", \"my_persistent_pub\": \"03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd\", \"lock_duration\": 7800, \"maker_amount\": \"0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091\", \"taker_amount\": \"1\", \"maker_payment_confirmations\": 1, \"maker_payment_requires_nota\": false, \"taker_payment_confirmations\": 1, \"taker_payment_requires_nota\": false, \"taker_payment_lock\": 1638992240, \"uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\", \"started_at\": 1638984440, \"maker_payment_wait\": 1638987560, \"maker_coin_start_block\": 1207822, \"taker_coin_start_block\": 1222573, \"fee_to_send_taker_fee\": {\"coin\": \"MARTY\", \"amount\": \"0.00001\", \"paid_from_trading_vol\": false}, \"taker_payment_trade_fee\": {\"coin\": \"MARTY\", \"amount\": \"0.00001\", \"paid_from_trading_vol\": false}, \"maker_payment_spend_trade_fee\": {\"coin\": \"DOC\", \"amount\": \"0.00001\", \"paid_from_trading_vol\": true}}}}, {\"timestamp\": 1638984456603, \"event\": {\"type\": \"Negotiated\", \"data\": {\"maker_payment_locktime\": 1639000040, \"maker_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\", \"secret_hash\": \"4da9e7080175e8e10842e0e161b33cd298cab30b\", \"maker_coin_swap_contract_addr\": null, \"taker_coin_swap_contract_addr\": null}}}, {\"timestamp\": 1638984456814, \"event\": {\"type\": \"TakerFeeSent\", \"data\": {\"tx_hex\": \"0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000\", \"tx_hash\": \"fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc\"}}}, {\"timestamp\": 1638984457822, \"event\": {\"type\": \"MakerPaymentReceived\", \"data\": {\"tx_hex\": \"0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000\", \"tx_hash\": \"6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d\"}}}, {\"timestamp\": 1638984457826, \"event\": {\"type\": \"MakerPaymentWaitConfirmStarted\"}}, {\"timestamp\": 1638984503611, \"event\": {\"type\": \"MakerPaymentWaitConfirmFailed\", \"data\": {\"error\": \"An error\"}}}, {\"timestamp\": 1638984503615, \"event\": {\"type\": \"Finished\"}}], \"maker_amount\": \"0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091\", \"maker_coin\": \"DOC\", \"taker_amount\": \"1\", \"taker_coin\": \"MARTY\", \"gui\": \"KomodoWallet 0.5.1 iOS\", \"mm_version\": \"1b065636a\", \"success_events\": [\"Started\", \"Negotiated\", \"TakerFeeSent\", \"MakerPaymentReceived\", \"MakerPaymentWaitConfirmStarted\", \"MakerPaymentValidatedAndConfirmed\", \"TakerPaymentSent\", \"TakerPaymentSpent\", \"MakerPaymentSpent\", \"Finished\"], \"error_events\": [\"StartFailed\", \"NegotiateFailed\", \"TakerFeeSendFailed\", \"MakerPaymentValidateFailed\", \"MakerPaymentWaitConfirmFailed\", \"TakerPaymentTransactionFailed\", \"TakerPaymentWaitConfirmFailed\", \"TakerPaymentDataSendFailed\", \"TakerPaymentWaitForSpendFailed\", \"MakerPaymentSpendFailed\", \"TakerPaymentWaitRefundStarted\", \"TakerPaymentRefunded\", \"TakerPaymentRefundFailed\"]}}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `recreate_swap_data`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **recreate_swap_data** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/recreate_swap_data/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for recreate_swap_data\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "set_swap_transaction_fee_policy - Set Swap Transaction Fee Policy Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"set_swap_transaction_fee_policy\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ETH\", \"swap_tx_fee_policy\": \"High\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `set_swap_transaction_fee_policy`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **set_swap_transaction_fee_policy** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/set_swap_transaction_fee_policy/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for set_swap_transaction_fee_policy\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Trade",
          "item": [
            {
              "name": "trade_preimage - Trade Preimage Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"trade_preimage\", \"params\": {\"base\": \"BTC\", \"rel\": \"DOC\", \"price\": \"1\", \"volume\": \"0.1\", \"swap_method\": \"setprice\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `trade_preimage`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **trade_preimage** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/trade_preimage/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for trade_preimage\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Trade Preimage Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"trade_preimage\", \"params\": {\"base\": \"BTC\", \"rel\": \"DOC\", \"price\": \"1\", \"volume\": \"0.1\", \"swap_method\": \"buy\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `trade_preimage`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **trade_preimage** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/trade_preimage/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for trade_preimage\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Trade Preimage Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"trade_preimage\", \"params\": {\"base\": \"BTC\", \"rel\": \"DOC\", \"price\": \"1\", \"volume\": \"2.21363478\", \"swap_method\": \"sell\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `trade_preimage`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **trade_preimage** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/trade_preimage/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for trade_preimage\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Trade Preimage Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"trade_preimage\", \"params\": {\"base\": \"BAT\", \"rel\": \"QC\", \"price\": \"1\", \"volume\": \"2.21363478\", \"swap_method\": \"setprice\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `trade_preimage`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **trade_preimage** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/trade_preimage/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for trade_preimage\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the trade method"
        }
      ],
      "description": "Order placement, trading, and market operations"
    },
    {
      "name": "Utility & Information",
      "item": [
        {
          "name": "add_node_to_version_stat - Add Node To Version Stat Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"add_node_to_version_stat\", \"userpass\": \"{{userpass}}\", \"params\": {\"name\": \"seed1\", \"address\": \"168.119.236.241\", \"peer_id\": \"12D3KooWEsuiKcQaBaKEzuMtT6uFjs89P1E8MK3wGRZbeuCbCw6P\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `add_node_to_version_stat`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **add_node_to_version_stat** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/add_node_to_version_stat/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for add_node_to_version_stat\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "change_mnemonic_password - Change Mnemonic Password Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"change_mnemonic_password\", \"userpass\": \"{{userpass}}\", \"params\": {\"current_password\": \"old_password123\", \"new_password\": \"new_password456\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `change_mnemonic_password`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **change_mnemonic_password** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/change_mnemonic_password/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for change_mnemonic_password\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "clear_nft_db - Clear Nft Db Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"clear_nft_db\", \"mmrpc\": \"2.0\", \"params\": {\"chains\": [\"POLYGON\", \"BSC\"]}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `clear_nft_db`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **clear_nft_db** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/clear_nft_db/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for clear_nft_db\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "clear_nft_db - Clear Nft Db Codegroup 2, Example 1 Request 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"clear_nft_db\", \"mmrpc\": \"2.0\", \"params\": {\"clear_all\": true}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `clear_nft_db`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **clear_nft_db** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/clear_nft_db/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for clear_nft_db\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "max_maker_vol - Max Maker Vol Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"max_maker_vol\", \"params\": {\"coin\": \"DOC\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `max_maker_vol`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **max_maker_vol** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/max_maker_vol/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for max_maker_vol\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "peer_connection_healthcheck - Peer Connection Healthcheck Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"peer_connection_healthcheck\", \"mmrpc\": \"2.0\", \"params\": {\"peer_address\": \"12D3KooWCcjBQ3kG3BzjVwuZqGDL2YxXik6SCDv2YAHj4E54NiAy\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `peer_connection_healthcheck`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **peer_connection_healthcheck** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/peer_connection_healthcheck/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for peer_connection_healthcheck\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "refresh_nft_metadata - Refresh Nft Metadata Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"refresh_nft_metadata\", \"mmrpc\": \"2.0\", \"params\": {\"token_address\": \"0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff\", \"token_id\": \"5\", \"chain\": \"POLYGON\", \"url\": \"https://moralis-proxy.komodo.earth\", \"url_antispam\": \"https://nft.antispam.dragonhound.info\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `refresh_nft_metadata`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **refresh_nft_metadata** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/refresh_nft_metadata/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for refresh_nft_metadata\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "remove_node_from_version_stat - Remove Node From Version Stat Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"remove_node_from_version_stat\", \"userpass\": \"{{userpass}}\", \"params\": {\"name\": \"dragonhound_DEV\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `remove_node_from_version_stat`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **remove_node_from_version_stat** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/remove_node_from_version_stat/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for remove_node_from_version_stat\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "start_simple_market_maker_bot - Start Simple Market Maker Bot Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"start_simple_market_maker_bot\", \"params\": {\"price_urls\": [\"https://prices.komodo.live:1313/api/v2/tickers?expire_at=600\", \"https://prices.komodo.earth/api/v2/tickers?expire_at=600\", \"https://prices.komodian.info/api/v2/tickers?expire_at=600\"], \"bot_refresh_rate\": 60, \"cfg\": {\"DASH/KMD\": {\"base\": \"DASH\", \"rel\": \"KMD\", \"max\": true, \"min_volume\": {\"percentage\": \"0.25\"}, \"spread\": \"1.025\", \"base_confs\": 3, \"base_nota\": false, \"rel_confs\": 3, \"rel_nota\": false, \"enable\": true, \"price_elapsed_validity\": 30, \"check_last_bidirectional_trade_thresh_hold\": true}, \"DASH/DGB\": {\"base\": \"DASH\", \"rel\": \"DGB\", \"min_volume\": {\"usd\": \"20\"}, \"min_base_price\": \"250\", \"spread\": \"1.04\", \"base_confs\": 1, \"base_nota\": false, \"rel_confs\": 1, \"rel_nota\": false, \"enable\": true, \"price_elapsed_validity\": 60, \"check_last_bidirectional_trade_thresh_hold\": false}, \"DASH/LTC\": {\"base\": \"DASH\", \"rel\": \"LTC\", \"max_volume\": {\"usd\": \"500\"}, \"min_volume\": {\"usd\": \"50\"}, \"min_base_price\": \"250\", \"spread\": \"1.04\", \"base_confs\": 1, \"base_nota\": false, \"rel_confs\": 1, \"rel_nota\": false, \"enable\": true, \"price_elapsed_validity\": 60, \"check_last_bidirectional_trade_thresh_hold\": false}}}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `start_simple_market_maker_bot`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **start_simple_market_maker_bot** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/start_simple_market_maker_bot/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for start_simple_market_maker_bot\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "start_version_stat_collection - Start Version Stat Collection Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"start_version_stat_collection\", \"userpass\": \"{{userpass}}\", \"params\": {\"interval\": 600}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `start_version_stat_collection`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **start_version_stat_collection** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/start_version_stat_collection/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for start_version_stat_collection\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "stop_simple_market_maker_bot - Stop Simple Market Maker Bot Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"stop_simple_market_maker_bot\", \"params\": {}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `stop_simple_market_maker_bot`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stop_simple_market_maker_bot** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stop_simple_market_maker_bot/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for stop_simple_market_maker_bot\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "stop_version_stat_collection - Stop Version Stat Collection Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"stop_version_stat_collection\", \"userpass\": \"{{userpass}}\", \"params\": {}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `stop_version_stat_collection`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **stop_version_stat_collection** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/stop_version_stat_collection/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for stop_version_stat_collection\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "update_nft - Update Nft Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"update_nft\", \"mmrpc\": \"2.0\", \"params\": {\"chains\": [\"BSC\", \"POLYGON\"], \"komodo_proxy\": false, \"url\": \"https://moralis-proxy.komodo.earth\", \"url_antispam\": \"https://nft.antispam.dragonhound.info\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `update_nft`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **update_nft** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/update_nft/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for update_nft\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "update_version_stat_collection - Update Version Stat Collection Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mmrpc\": \"2.0\", \"method\": \"update_version_stat_collection\", \"userpass\": \"{{userpass}}\", \"params\": {\"interval\": 900}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `update_version_stat_collection`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **update_version_stat_collection** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/update_version_stat_collection/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for update_version_stat_collection\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "verify_message - Verify Message Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"verify_message\", \"mmrpc\": \"2.0\", \"id\": 0, \"params\": {\"coin\": \"DOC\", \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\", \"signature\": \"H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY=\", \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `verify_message`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **verify_message** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/verify_message/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for verify_message\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "z_coin_tx_history - Z Coin Tx History Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"z_coin_tx_history\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ARRR\", \"limit\": 2, \"paging_options\": {\"PageNumber\": 2}}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `z_coin_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **z_coin_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/z_coin_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for z_coin_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Experimental",
          "item": [
            {
              "name": "experimental::staking::claim_rewards - Experimental Staking Claim Rewards Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::claim_rewards\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"claiming_details\": {\"type\": \"Cosmos\", \"validator_address\": \"iva1qq93sapmdcx36uz64vvw5gzuevtxsc7lcfxsat\", \"force\": true}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::claim_rewards`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::claim_rewards** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::claim_rewards/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::claim_rewards\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::delegate - Experimental Staking Delegate Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::delegate\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"tQTUM\", \"staking_details\": {\"type\": \"Qtum\", \"address\": \"qbgHcqxXYHVJZXHheGpHwLJsB5epDUtWxe\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::delegate`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::delegate** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::delegate/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::delegate\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::delegate - Experimental Staking Delegate Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::delegate\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"staking_details\": {\"type\": \"Cosmos\", \"validator_address\": \"iva1qq93sapmdcx36uz64vvw5gzuevtxsc7lcfxsat\", \"amount\": \"7.77\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::delegate`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::delegate** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::delegate/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::delegate\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::delegations - Experimental Staking Query Delegations Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"experimental::staking::query::delegations\", \"params\": {\"coin\": \"tQTUM\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::query::delegations`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::query::delegations** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::query::delegations/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::query::delegations\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::delegations - Experimental Staking Query Delegations Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::query::delegations\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ATOM\", \"info_details\": {\"type\": \"Cosmos\", \"limit\": 20, \"page_number\": 1}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::query::delegations`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::query::delegations** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::query::delegations/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::query::delegations\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::ongoing_undelegations - Experimental Staking Query Ongoing Undelegations Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::query::ongoing_undelegations\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"info_details\": {\"type\": \"Cosmos\", \"limit\": 20, \"page_number\": 1}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::query::ongoing_undelegations`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::query::ongoing_undelegations** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::query::ongoing_undelegations/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::query::ongoing_undelegations\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::validators - Experimental Staking Query Validators Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::query::validators\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"info_details\": {\"type\": \"Cosmos\", \"filter_by_status\": \"Bonded\", \"limit\": 20, \"page_number\": 1}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::query::validators`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::query::validators** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::query::validators/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::query::validators\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::undelegate - Experimental Staking Undelegate Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"experimental::staking::undelegate\", \"params\": {\"coin\": \"tQTUM\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::undelegate`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::undelegate** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::undelegate/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::undelegate\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::undelegate - Experimental Staking Undelegate Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"experimental::staking::undelegate\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"staking_details\": {\"type\": \"Cosmos\", \"validator_address\": \"iaa1ev23fc700js5d7hvtw0785yfayaazpawn8phv4\", \"amount\": \"0.777\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `experimental::staking::undelegate`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **experimental::staking::undelegate** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/experimental::staking::undelegate/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for experimental::staking::undelegate\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the experimental method"
        },
        {
          "name": "Get",
          "item": [
            {
              "name": "get_current_mtp - Get Current Mtp Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"method\": \"get_current_mtp\", \"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"id\": 42, \"params\": {\"coin\": \"DOC\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_current_mtp`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_current_mtp** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_current_mtp/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_current_mtp\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Get Eth Estimated Fee Per Gas Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_eth_estimated_fee_per_gas\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ETH\", \"estimator_type\": \"Simple\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_eth_estimated_fee_per_gas`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_eth_estimated_fee_per_gas** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_eth_estimated_fee_per_gas/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_eth_estimated_fee_per_gas\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Get Eth Estimated Fee Per Gas Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_eth_estimated_fee_per_gas\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"ETH\", \"estimator_type\": \"Provider\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_eth_estimated_fee_per_gas`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_eth_estimated_fee_per_gas** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_eth_estimated_fee_per_gas/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_eth_estimated_fee_per_gas\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_locked_amount - Get Locked Amount Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_locked_amount\", \"params\": {\"coin\": \"DOC\"}, \"id\": 42}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_locked_amount`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_locked_amount** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_locked_amount/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_locked_amount\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_mnemonic - Get Mnemonic Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_mnemonic\", \"params\": {\"format\": \"encrypted\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_mnemonic`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_mnemonic** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_mnemonic/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_mnemonic\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_mnemonic - Get Mnemonic Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_mnemonic\", \"params\": {\"format\": \"plaintext\", \"password\": \"Q^wJZg~Ck3.tPW~asnM-WrL\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_mnemonic`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_mnemonic** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_mnemonic/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_mnemonic\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_nft_list - Get Nft List Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_nft_list\", \"mmrpc\": \"2.0\", \"params\": {\"chains\": [\"BSC\", \"POLYGON\"]}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_nft_list`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_nft_list** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_nft_list/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_nft_list\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_nft_list - Get Nft List Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_nft_list\", \"mmrpc\": \"2.0\", \"params\": {\"chains\": [\"BSC\", \"POLYGON\"], \"limit\": 1, \"page_number\": 2}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_nft_list`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_nft_list** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_nft_list/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_nft_list\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_nft_metadata - Get Nft Metadata Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_nft_metadata\", \"mmrpc\": \"2.0\", \"params\": {\"token_address\": \"0xfd913a305d70a60aac4faac70c739563738e1f81\", \"token_id\": \"214300044414\", \"chain\": \"BSC\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_nft_metadata`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_nft_metadata** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_nft_metadata/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_nft_metadata\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_nft_transfers - Get Nft Transfers Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"get_nft_transfers\", \"mmrpc\": \"2.0\", \"params\": {\"chains\": [\"POLYGON\"], \"max\": true, \"filters\": {\"receive\": true, \"from_date\": 1678233600}, \"protect_from_spam\": true}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_nft_transfers`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_nft_transfers** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_nft_transfers/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_nft_transfers\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_raw_transaction - Get Raw Transaction Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"method\": \"get_raw_transaction\", \"userpass\": \"{{userpass}}\", \"params\": {\"coin\": \"DOC\", \"tx_hash\": \"989360b0225b4e05fa13643e2e306c8eb5c52fa611615dfd30195089010b1c7b\"}, \"id\": 1}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_raw_transaction`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_raw_transaction** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_raw_transaction/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_raw_transaction\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "get_token_info - Get Token Info Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_token_info\", \"params\": {\"protocol\": {\"type\": \"ERC20\", \"protocol_data\": {\"platform\": \"AVAX\", \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `get_token_info`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_token_info** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_token_info/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for get_token_info\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the get method"
        },
        {
          "name": "Sign",
          "item": [
            {
              "name": "sign_message - Sign Message Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"sign_message\", \"mmrpc\": \"2.0\", \"id\": 0, \"params\": {\"coin\": \"DOC\", \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\"}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_message`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_message** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_message/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_message\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "sign_message - Sign Message Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"sign_message\", \"params\": {\"coin\": \"KMD\", \"message\": \"Very little worth knowing is taught by fear.\", \"address\": {\"derivation_path\": \"m/84'/2'/0'/0/1\"}}, \"id\": 2}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_message`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_message** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_message/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_message\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "sign_message - Sign Message Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"sign_message\", \"params\": {\"coin\": \"KMD\", \"message\": \"Very little worth knowing is taught by fear.\", \"address\": {\"account_id\": 0, \"chain\": \"External\", \"address_id\": 1}}, \"id\": 2}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_message`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_message** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_message/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_message\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Sign Raw Transaction Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"sign_raw_transaction\", \"params\": {\"coin\": \"KMD\", \"type\": \"UTXO\", \"tx\": {\"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_raw_transaction`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_raw_transaction** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_raw_transaction/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_raw_transaction\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Sign Raw Transaction Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"id\": 0, \"method\": \"sign_raw_transaction\", \"params\": {\"coin\": \"KMD\", \"type\": \"UTXO\", \"tx\": {\"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\", \"prev_txns\": [{\"tx_hash\": \"36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8\", \"index\": 2, \"script_pub_key\": \"76a914d346067e3c3c3964c395fee208594790e29ede5d88ac\", \"amount\": 1e-05}]}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_raw_transaction`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_raw_transaction** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_raw_transaction/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_raw_transaction\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Sign Raw Transaction Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"id\": 0, \"method\": \"sign_raw_transaction\", \"params\": {\"coin\": \"MATIC\", \"type\": \"ETH\", \"tx\": {\"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\", \"value\": \"0.85\", \"gas_limit\": \"21000\", \"pay_for_gas\": {\"tx_type\": \"Eip1559\", \"max_fee_per_gas\": \"1234.567\", \"max_priority_fee_per_gas\": \"1.2\"}}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `sign_raw_transaction`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **sign_raw_transaction** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/sign_raw_transaction/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for sign_raw_transaction\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the sign method"
        }
      ],
      "description": "General utility methods and system information"
    },
    {
      "name": "Wallet Management",
      "item": [
        {
          "name": "get_public_key - Get Public Key Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_public_key\", \"params\": {}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `get_public_key`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_public_key** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_public_key/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for get_public_key\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "get_public_key_hash - Get Public Key Hash Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_public_key_hash\", \"params\": {}, \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `get_public_key_hash`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_public_key_hash** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_public_key_hash/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for get_public_key_hash\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "get_wallet_names - Get Wallet Names Codegroup 1, Example 1 Request 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"get_wallet_names\", \"id\": 0}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}",
              "host": [
                "{{base_url}}"
              ]
            },
            "description": {
              "content": "\n**Method**: `get_wallet_names`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **get_wallet_names** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/get_wallet_names/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
              "type": "text/markdown"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": "pm.test(\"Status code is 200 for get_wallet_names\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "My",
          "item": [
            {
              "name": "my_tx_history - My Tx History Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"my_tx_history\", \"params\": {\"coin\": \"DOC\", \"limit\": 10, \"paging_options\": {\"PageNumber\": 1}, \"target\": {\"type\": \"account_id\", \"account_id\": 77}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `my_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for my_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - My Tx History Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"my_tx_history\", \"params\": {\"coin\": \"DOC\", \"limit\": 1, \"paging_options\": {\"PageNumber\": 1}, \"target\": {\"type\": \"address_id\", \"account_id\": 0, \"chain\": \"External\", \"address_id\": 1}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `my_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for my_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - My Tx History Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"my_tx_history\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"BCH\", \"limit\": 2, \"paging_options\": {\"PageNumber\": 2}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `my_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for my_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - My Tx History Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"my_tx_history\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"BCH\", \"limit\": 2, \"paging_options\": {\"FromId\": \"433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `my_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for my_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - My Tx History Codegroup 5, Example 1 Request 5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"my_tx_history\", \"mmrpc\": \"2.0\", \"params\": {\"coin\": \"IRIS\", \"limit\": 50}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `my_tx_history`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **my_tx_history** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/my_tx_history/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for my_tx_history\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the my method"
        },
        {
          "name": "Task",
          "item": [
            {
              "name": "task::account_balance::cancel - Task Account Balance Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::account_balance::cancel\", \"params\": {\"task_id\": 3, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::account_balance::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::account_balance::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::account_balance::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::account_balance::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::init - Task Account Balance Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::account_balance::init\", \"params\": {\"coin\": \"COIN_NAME\", \"account_index\": 0}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::account_balance::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::account_balance::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::account_balance::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::account_balance::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::status - Task Account Balance Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::account_balance::status\", \"params\": {\"task_id\": 3, \"forget_if_finished\": false}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::account_balance::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::account_balance::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::account_balance::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::account_balance::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::cancel - Task Withdraw Cancel Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::cancel\", \"mmrpc\": \"2.0\", \"params\": {\"task_id\": 6}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::cancel`\n**Operation**: `cancel`\n\nThis request demonstrates the **cancel** operation for the **task::withdraw::cancel** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::cancel/cancel/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::cancel\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"RECIPIENT_ADDRESS\", \"amount\": \"AMOUNT\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"RECIPIENT_ADDRESS\", \"max\": true}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"RECIPIENT_ADDRESS\", \"amount\": \"AMOUNT\", \"fee\": {\"type\": \"UtxoFixed\", \"amount\": \"0.001\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"RECIPIENT_ADDRESS\", \"amount\": \"AMOUNT\", \"fee\": {\"type\": \"UtxoPerKbyte\", \"amount\": \"0.00097\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 5, Example 1 Request 5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"ADDRESS_OF_RECIPIENT\", \"amount\": \"AMOUNT_TO_SEND\", \"from\": {\"derivation_path\": \"DERIVATION_PATH\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Task Withdraw Init Codegroup 6, Example 1 Request 6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::withdraw::init\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"ADDRESS_OF_RECIPIENT\", \"amount\": \"AMOUNT_TO_SEND\", \"from\": {\"account_id\": 0, \"chain\": \"External\", \"address_id\": \"ADDRESS_ID\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::init`\n**Operation**: `init`\n\nThis request demonstrates the **init** operation for the **task::withdraw::init** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::init/init/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::init\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::status - Task Withdraw Status Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"task::withdraw::status\", \"params\": {\"task_id\": 3, \"forget_if_finished\": false}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::status`\n**Operation**: `status`\n\nThis request demonstrates the **status** operation for the **task::withdraw::status** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::status/status/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::status\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::user_action - Task Withdraw User Action Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"task::withdraw::user_action\", \"params\": {\"task_id\": 3, \"user_action\": {\"action_type\": \"TrezorPin\", \"pin\": \"862743\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `task::withdraw::user_action`\n**Operation**: `user_action`\n\nThis request demonstrates the **user_action** operation for the **task::withdraw::user_action** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/task::withdraw::user_action/user_action/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for task::withdraw::user_action\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the task method"
        },
        {
          "name": "Withdraw",
          "item": [
            {
              "name": "withdraw - Withdraw Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"withdraw\", \"params\": {\"coin\": \"KMD\", \"to\": \"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\", \"amount\": \"10\"}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 10, Example 1 Request 10",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"QRC20\", \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\", \"amount\": 10, \"fee\": {\"type\": \"Qrc20Gas\", \"gas_limit\": 250000, \"gas_price\": 40}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 11, Example 1 Request 11",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"MATIC\", \"to\": \"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29\", \"amount\": 0.1, \"broadcast\": true}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 12, Example 1 Request 12",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"IRIS\", \"to\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\", \"amount\": 13, \"memo\": \"It was a bright cold day in April, and the clocks were striking thirteen.\", \"fee\": {\"type\": \"CosmosGas\", \"gas_price\": 0.05, \"gas_limit\": 150000}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 13, Example 1 Request 13",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"ATOM\", \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\", \"amount\": 0.1, \"memo\": \"In the blackest of your moments, wait with no fear.\", \"ibc_source_channel\": 141, \"fee\": {\"type\": \"CosmosGas\", \"gas_price\": 0.05, \"gas_limit\": 150000}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"withdraw\", \"params\": {\"coin\": \"MCL\", \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\", \"amount\": 1.025, \"from\": {\"derivation_path\": \"m/44'/141'/0'/0/0\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"mmrpc\": \"2.0\", \"method\": \"withdraw\", \"params\": {\"coin\": \"VRSC\", \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\", \"amount\": 1.025, \"from\": {\"account_id\": 0, \"chain\": \"External\", \"address_id\": 2}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 4, Example 1 Request 4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"DOC\", \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\", \"amount\": \"1.0\", \"fee\": {\"type\": \"UtxoFixed\", \"amount\": \"0.1\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 5, Example 1 Request 5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"DOC\", \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\", \"amount\": \"1.0\", \"fee\": {\"type\": \"UtxoPerKbyte\", \"amount\": \"1\"}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 6, Example 1 Request 6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"ETH\", \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\", \"amount\": 10}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 7, Example 1 Request 7",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"COIN_NAME\", \"to\": \"RECIPIENT_ADDRESS\", \"amount\": \"AMOUNT\", \"fee\": {\"type\": \"EthGas\", \"gas_price\": \"3.5\", \"gas\": 55000}}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 8, Example 1 Request 8",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"ETH\", \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\", \"max\": true}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw - Withdraw Codegroup 9, Example 1 Request 9",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mmrpc\": \"2.0\", \"userpass\": \"{{userpass}}\", \"method\": \"withdraw\", \"params\": {\"coin\": \"QRC20\", \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\", \"amount\": 10}, \"id\": 0}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Withdraw Nft Codegroup 1, Example 1 Request 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"withdraw_nft\", \"mmrpc\": \"2.0\", \"params\": {\"type\": \"withdraw_erc721\", \"withdraw_data\": {\"chain\": \"POLYGON\", \"to\": \"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\", \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\", \"token_id\": \"1\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw_nft`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw_nft** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw_nft/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw_nft\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Withdraw Nft Codegroup 2, Example 1 Request 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"withdraw_nft\", \"mmrpc\": \"2.0\", \"params\": {\"type\": \"withdraw_erc1155\", \"withdraw_data\": {\"chain\": \"POLYGON\", \"to\": \"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\", \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\", \"token_id\": \"1\"}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw_nft`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw_nft** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw_nft/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw_nft\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Withdraw Nft Codegroup 3, Example 1 Request 3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"userpass\": \"{{userpass}}\", \"method\": \"withdraw_nft\", \"mmrpc\": \"2.0\", \"params\": {\"type\": \"withdraw_erc1155\", \"withdraw_data\": {\"chain\": \"POLYGON\", \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\", \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\", \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\", \"max\": true}}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}",
                  "host": [
                    "{{base_url}}"
                  ]
                },
                "description": {
                  "content": "\n**Method**: `withdraw_nft`\n**Operation**: `request`\n\nThis request demonstrates the **request** operation for the **withdraw_nft** method.\n\n### Description\nFor detailed information about the parameters, response, and potential errors for this method, please refer to the official documentation.\n\n[**View Full Documentation**](https://docs.komodoplatform.com/komodo-defi-framework/api/v2/withdraw_nft/request/)\n\n---\n*This is an auto-generated request. Manual modifications may be required for specific use cases.*\n",
                  "type": "text/markdown"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": "pm.test(\"Status code is 200 for withdraw_nft\", function () {    pm.response.to.have.status(200);});pm.test(\"Response has a result for {api_method}\", function () {{    var jsonData = pm.response.json();    pm.expect(jsonData.result).to.exist;});",
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Examples for the withdraw method"
        }
      ],
      "description": "Wallet operations, balances, and transaction management"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "544b4f6d-1090-4104-8a5f-c823e2f10b95",
        "exec": [
          "// Pre-request Script to set the request body",
          "// This script ensures that the raw JSON body is correctly formatted",
          "",
          "if (pm.request.body && pm.request.body.raw) {",
          "    try {",
          "        const body = JSON.parse(pm.request.body.raw);",
          "        pm.request.body.raw = JSON.stringify(body, null, 2);",
          "    } catch (e) {",
          "        console.error('Failed to parse and stringify request body: ', e);",
          "    }",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{address}}:{{port}}",
      "type": "string",
      "description": "Base URL for the Komodo DeFi Framework API"
    }
  ]
}