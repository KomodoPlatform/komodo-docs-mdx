{
  "info": {
    "name": "Komodo DeFi Framework V1 API",
    "description": "# Komodo DeFi Framework V1 API Collection\n\nThis collection contains 168 example requests for the Komodo DeFi Framework V1 API.\n\n## 🚀 Getting Started\n\n1. **Set Environment Variables**:\n   - `kdf_url`: Your KDF instance endpoint (e.g., `http://127.0.0.1:7783`)\n   - `userpass`: Your configured RPC password\n\n2. **Authentication**:\n   - All requests use the `userpass` parameter for authentication\n   - Update the default password in the environment variables\n\n3. **Request Format**:\n   - All requests use POST method with JSON payload\n   - Set `Content-Type: application/json` header\n\n## 📚 Documentation\n\n- [Official API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n- [Setup Guide](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/setup/)\n- [GitHub Repository](https://github.com/KomodoPlatform/komodo-defi-framework)\n\n## 🧪 Testing\n\nEach request includes comprehensive test scripts that validate:\n- Response status codes\n- Response structure\n- Error handling\n- Performance metrics\n\nGenerated on: 2025-06-08 19:01:40\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "4d564a3f-88e6-450d-9abc-9800aafe3f83",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "Coin & Token Activation",
      "description": "Methods for activating coins, tokens, and blockchain protocols",
      "item": [
        {
          "name": "get_enabled_coins - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_enabled_coins\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_enabled_coins`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_enabled_coins` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_enabled_coins",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_enabled_coins - Electrum Mode",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_enabled_coins\",\n  \"params\": {\n    \"ticker\": \"BTC\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum1.cipig.net:10000\"\n            },\n            {\n              \"url\": \"electrum2.cipig.net:10001\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_enabled_coins`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_enabled_coins` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_enabled_coins",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_enabled_coins - Native Mode",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_enabled_coins\",\n  \"params\": {\n    \"ticker\": \"KMD\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Native\",\n        \"rpc_data\": {\n          \"datadir\": \"/home/user/.komodo\",\n          \"conf\": \"komodo.conf\"\n        }\n      }\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_enabled_coins`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_enabled_coins` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_enabled_coins",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Enable",
          "description": "Examples for the enable method",
          "item": [
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable\",\n  \"coin\": \"{{coin}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable\",\n  \"urls\": [\n    \"http://eth1.cipig.net:18555\",\n    \"http://eth2.cipig.net:18555\",\n    \"http://eth3.cipig.net:18555\"\n  ],\n  \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n  \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n  \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n  \"gas_station_decimals\": 8,\n  \"gas_station_policy\": {\n    \"policy\": \"MeanAverageFast\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"enable\",\n  \"swap_contract_address\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n  \"fallback_swap_contract\": \"0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31\",\n  \"urls\": [\n    \"http://bsc1.cipig.net:8655\",\n    \"http://bsc2.cipig.net:8655\",\n    \"http://bsc3.cipig.net:8655\"\n  ],\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"enable\",\n  \"urls\": [\n    \"http://eth1.cipig.net:18555\",\n    \"http://eth2.cipig.net:18555\",\n    \"http://eth3.cipig.net:18555\"\n  ],\n  \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n  \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"enable\",\n  \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n  \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n  \"urls\": [\n    \"https://polygon-rpc.com\"\n  ],\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable\",\n  \"coin\": \"{{coin}}\",\n  \"mm2\": 1,\n  \"required_confirmations\": 10,\n  \"requires_notarization\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Electrum Mode",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"enable\",\n  \"params\": {\n    \"ticker\": \"BTC\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum1.cipig.net:10000\"\n            },\n            {\n              \"url\": \"electrum2.cipig.net:10001\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable - Native Mode",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"enable\",\n  \"params\": {\n    \"ticker\": \"KMD\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Native\",\n        \"rpc_data\": {\n          \"datadir\": \"/home/user/.komodo\",\n          \"conf\": \"komodo.conf\"\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `enable`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `enable` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Task Management",
      "description": "Asynchronous task operations and status monitoring",
      "item": [
        {
          "name": "order_status - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"order_status\",\n  \"uuid\": \"c3b3105c-e914-4ed7-9f1c-604783b054a1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `order_status`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `order_status` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for order_status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "order_status - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"order_status\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `order_status`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `order_status` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for order_status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel All Orders",
          "description": "Examples for the cancel_all_orders method",
          "item": [
            {
              "name": "cancel_all_orders - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"cancel_all_orders\",\n  \"cancel_by\": {\n    \"type\": \"All\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `cancel_all_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_all_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for cancel_all_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "cancel_all_orders - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"cancel_all_orders\",\n  \"cancel_by\": {\n    \"type\": \"Pair\",\n    \"data\": {\n      \"base\": \"DOC\",\n      \"rel\": \"MARTY\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `cancel_all_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_all_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for cancel_all_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "cancel_all_orders - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"cancel_all_orders\",\n  \"cancel_by\": {\n    \"type\": \"Coin\",\n    \"data\": {\n      \"ticker\": \"DOC\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `cancel_all_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_all_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for cancel_all_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "cancel_all_orders - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"cancel_all_orders\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `cancel_all_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_all_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for cancel_all_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Trading & Orders",
      "description": "Order placement, trading, and market operations",
      "item": [
        {
          "name": "active_swaps - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"active_swaps\",\n  \"include_status\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `active_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `active_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for active_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "active_swaps - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"active_swaps\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `active_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `active_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for active_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "active_swaps - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"active_swaps\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `active_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `active_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for active_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "best_orders - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"coin\": \"{{coin}}\",\n  \"action\": \"buy\",\n  \"volume\": \"1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `best_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `best_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for best_orders",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "best_orders - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"best_orders\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `best_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `best_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for best_orders",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "cancel_order - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"cancel_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `cancel_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for cancel_order",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "cancel_order - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"cancel_order\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `cancel_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `cancel_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for cancel_order",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "import_swaps - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"import_swaps\",\n  \"swaps\": [\n    {\n      \"error_events\": [\n        \"StartFailed\",\n        \"NegotiateFailed\",\n        \"TakerFeeSendFailed\",\n        \"MakerPaymentValidateFailed\",\n        \"TakerPaymentTransactionFailed\",\n        \"TakerPaymentDataSendFailed\",\n        \"TakerPaymentWaitForSpendFailed\",\n        \"MakerPaymentSpendFailed\",\n        \"TakerPaymentRefunded\",\n        \"TakerPaymentRefundFailed\"\n      ],\n      \"events\": [\n        {\n          \"event\": {\n            \"data\": {\n              \"lock_duration\": 7800,\n              \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\n              \"maker_amount\": \"3\",\n              \"maker_coin\": \"BEER\",\n              \"maker_coin_start_block\": 156186,\n              \"maker_payment_confirmations\": 0,\n              \"maker_payment_wait\": 1568883784,\n              \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\n              \"started_at\": 1568881184,\n              \"taker_amount\": \"4\",\n              \"taker_coin\": \"ETOMIC\",\n              \"taker_coin_start_block\": 175041,\n              \"taker_payment_confirmations\": 1,\n              \"taker_payment_lock\": 1568888984,\n              \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\n            },\n            \"type\": \"Started\"\n          },\n          \"timestamp\": 1568881185316\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"maker_payment_locktime\": 1568896784,\n              \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\n              \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\n            },\n            \"type\": \"Negotiated\"\n          },\n          \"timestamp\": 1568881246025\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\n              \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\n            },\n            \"type\": \"TakerFeeSent\"\n          },\n          \"timestamp\": 1568881250689\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\n              \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\n            },\n            \"type\": \"MakerPaymentReceived\"\n          },\n          \"timestamp\": 1568881291571\n        },\n        {\n          \"event\": {\n            \"type\": \"MakerPaymentWaitConfirmStarted\"\n          },\n          \"timestamp\": 1568881291571\n        },\n        {\n          \"event\": {\n            \"type\": \"MakerPaymentValidatedAndConfirmed\"\n          },\n          \"timestamp\": 1568881291985\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\n              \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\n            },\n            \"type\": \"TakerPaymentSent\"\n          },\n          \"timestamp\": 1568881296904\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\n              \"transaction\": {\n                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\n                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\n              }\n            },\n            \"type\": \"TakerPaymentSpent\"\n          },\n          \"timestamp\": 1568881328643\n        },\n        {\n          \"event\": {\n            \"data\": {\n              \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\n            },\n            \"type\": \"MakerPaymentSpendFailed\"\n          },\n          \"timestamp\": 1568881328645\n        },\n        {\n          \"event\": {\n            \"type\": \"Finished\"\n          },\n          \"timestamp\": 1568881328648\n        }\n      ],\n      \"my_info\": {\n        \"my_amount\": \"4\",\n        \"my_coin\": \"ETOMIC\",\n        \"other_amount\": \"3\",\n        \"other_coin\": \"BEER\",\n        \"started_at\": 1568881184\n      },\n      \"recoverable\": true,\n      \"success_events\": [\n        \"Started\",\n        \"Negotiated\",\n        \"TakerFeeSent\",\n        \"MakerPaymentReceived\",\n        \"MakerPaymentWaitConfirmStarted\",\n        \"MakerPaymentValidatedAndConfirmed\",\n        \"TakerPaymentSent\",\n        \"TakerPaymentSpent\",\n        \"MakerPaymentSpent\",\n        \"Finished\"\n      ],\n      \"type\": \"Taker\",\n      \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `import_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `import_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for import_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "import_swaps - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"import_swaps\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `import_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `import_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for import_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_swap_status - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"my_swap_status\",\n  \"params\": {\n    \"uuid\": \"3d2286d1-1eef-487b-a07a-904f33034792\"\n  },\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_swap_status`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_swap_status` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_swap_status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_swap_status - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_swap_status\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_swap_status`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_swap_status` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_swap_status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orderbook\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `orderbook`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orderbook` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"orderbook\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `orderbook`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orderbook` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook_depth - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orderbook_depth\",\n  \"pairs\": [\n    [\n      \"DOC\",\n      \"MARTY\"\n    ],\n    [\n      \"BTC\",\n      \"KMD\"\n    ],\n    [\n      \"DOGE\",\n      \"KMD\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `orderbook_depth`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orderbook_depth` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook_depth",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook_depth - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"orderbook_depth\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `orderbook_depth`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orderbook_depth` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook_depth",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "recover_funds_of_swap - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"recover_funds_of_swap\",\n  \"params\": {\n    \"uuid\": \"6343b2b1-c896-47d4-b0f2-a11798f654ed\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `recover_funds_of_swap`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `recover_funds_of_swap` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for recover_funds_of_swap",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "recover_funds_of_swap - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"recover_funds_of_swap\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `recover_funds_of_swap`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `recover_funds_of_swap` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for recover_funds_of_swap",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "All Swaps Uuids By Filter",
          "description": "Examples for the all_swaps_uuids_by_filter method",
          "item": [
            {
              "name": "all_swaps_uuids_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"all_swaps_uuids_by_filter\",\n  \"my_coin\": \"DOC\",\n  \"from_timestamp\": 1611705600,\n  \"to_timestamp\": 1611792001\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `all_swaps_uuids_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `all_swaps_uuids_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for all_swaps_uuids_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "all_swaps_uuids_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"all_swaps_uuids_by_filter\",\n  \"my_coin\": \"DOC\",\n  \"other_coin\": \"MARTY\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `all_swaps_uuids_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `all_swaps_uuids_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for all_swaps_uuids_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "all_swaps_uuids_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"all_swaps_uuids_by_filter\",\n  \"my_coin\": \"DOC\",\n  \"from_timestamp\": 1611705600\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `all_swaps_uuids_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `all_swaps_uuids_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for all_swaps_uuids_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "all_swaps_uuids_by_filter - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"all_swaps_uuids_by_filter\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `all_swaps_uuids_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `all_swaps_uuids_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for all_swaps_uuids_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Buy",
          "description": "Examples for the buy method",
          "item": [
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Orders\",\n    \"data\": [\n      \"d14452bb-e82d-44a0-86b0-10d4cdcb8b24\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"order_type\": {\n    \"type\": \"FillOrKill\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Any\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"order_type\": {\n    \"type\": \"GoodTillCancelled\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Pubkeys\",\n    \"data\": [\n      \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": 1.1,\n  \"volume\": 2.4\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"save_in_history\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"buy\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"base_confs\": 2,\n  \"base_nota\": true,\n  \"rel_confs\": 5,\n  \"rel_nota\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "buy - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"buy\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `buy`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `buy` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for buy",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Get Trade Fee",
          "description": "Examples for the get_trade_fee method",
          "item": [
            {
              "name": "get_trade_fee - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_trade_fee\",\n  \"coin\": \"{{coin}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `get_trade_fee`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_trade_fee` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_trade_fee",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_trade_fee - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_trade_fee\",\n  \"coin\": \"{{coin}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `get_trade_fee`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_trade_fee` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_trade_fee",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_trade_fee - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_trade_fee\",\n  \"coin\": \"{{coin}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `get_trade_fee`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_trade_fee` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_trade_fee",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_trade_fee - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_trade_fee\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `get_trade_fee`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_trade_fee` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_trade_fee",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "My Recent Swaps",
          "description": "Examples for the my_recent_swaps method",
          "item": [
            {
              "name": "my_recent_swaps - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"limit\": 2,\n  \"my_coin\": \"DOC\",\n  \"from_timestamp\": 1611705600\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_recent_swaps - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"limit\": 2,\n  \"my_coin\": \"DOC\",\n  \"from_timestamp\": 1611705600,\n  \"to_timestamp\": 1611792001\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_recent_swaps - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"from_uuid\": \"e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e4c\",\n  \"limit\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_recent_swaps - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"page_number\": 3,\n  \"limit\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_recent_swaps - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"limit\": 2,\n  \"my_coin\": \"DOC\",\n  \"other_coin\": \"MARTY\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_recent_swaps - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_recent_swaps\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `my_recent_swaps`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_recent_swaps` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_recent_swaps",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Sell",
          "description": "Examples for the sell method",
          "item": [
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Any\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"order_type\": {\n    \"type\": \"FillOrKill\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"base_confs\": 2,\n  \"base_nota\": true,\n  \"rel_confs\": 5,\n  \"rel_nota\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Pubkeys\",\n    \"data\": [\n      \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"order_type\": {\n    \"type\": \"GoodTillCancelled\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": 1.1,\n  \"volume\": 2.4\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"5\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"9\",\n    \"denom\": \"4\"\n  },\n  \"save_in_history\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sell\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"match_by\": {\n    \"type\": \"Orders\",\n    \"data\": [\n      \"d14452bb-e82d-44a0-86b0-10d4cdcb8b24\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sell - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sell\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `sell`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `sell` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sell",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Setprice",
          "description": "Examples for the setprice method",
          "item": [
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": \"0.9\",\n  \"volume\": \"1\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": \"0.9\",\n  \"max\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"min_volume\": \"1\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"4\",\n    \"denom\": \"3\"\n  },\n  \"price\": {\n    \"numer\": \"7\",\n    \"denom\": \"12\"\n  },\n  \"save_in_history\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"setprice\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"volume\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"base_confs\": 2,\n  \"base_nota\": true,\n  \"rel_confs\": 5,\n  \"rel_nota\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "setprice - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"setprice\",\n  \"params\": {}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `setprice`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `setprice` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for setprice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Trade Preimage",
          "description": "Examples for the trade_preimage method",
          "item": [
            {
              "name": "trade_preimage - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": \"1\",\n  \"volume\": \"2.21363478\",\n  \"swap_method\": \"setprice\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `trade_preimage`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `trade_preimage` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": \"1\",\n  \"volume\": \"0.1\",\n  \"swap_method\": \"setprice\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `trade_preimage`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `trade_preimage` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\",\n  \"price\": \"1\",\n  \"volume\": \"0.1\",\n  \"swap_method\": \"buy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `trade_preimage`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `trade_preimage` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `trade_preimage`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `trade_preimage` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Utility & Information",
      "description": "General utility methods and system information",
      "item": [
        {
          "name": "ban_pubkey - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"ban_pubkey\",\n  \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\n  \"reason\": \"test\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `ban_pubkey`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `ban_pubkey` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for ban_pubkey",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "ban_pubkey - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"ban_pubkey\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `ban_pubkey`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `ban_pubkey` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for ban_pubkey",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "coins_needed_for_kick_start - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"coins_needed_for_kick_start\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `coins_needed_for_kick_start`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `coins_needed_for_kick_start` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for coins_needed_for_kick_start",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "coins_needed_for_kick_start - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"coins_needed_for_kick_start\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `coins_needed_for_kick_start`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `coins_needed_for_kick_start` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for coins_needed_for_kick_start",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "convert_utxo_address - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convert_utxo_address\",\n  \"coin\": \"{{coin}}\",\n  \"address\": \"{{address}}\",\n  \"to_coin\": \"RVN\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `convert_utxo_address`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convert_utxo_address` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for convert_utxo_address",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "convert_utxo_address - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"convert_utxo_address\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `convert_utxo_address`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convert_utxo_address` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for convert_utxo_address",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "disable_coin - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"disable_coin\",\n  \"coin\": \"{{coin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `disable_coin`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `disable_coin` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for disable_coin",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "disable_coin - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"disable_coin\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `disable_coin`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `disable_coin` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for disable_coin",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "electrum - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"electrum\",\n  \"servers\": [\n    {\n      \"url\": \"electrum1.cipig.net:10001\"\n    },\n    {\n      \"url\": \"electrum2.cipig.net:10001\"\n    },\n    {\n      \"url\": \"electrum3.cipig.net:10001\"\n    }\n  ],\n  \"required_confirmations\": 10,\n  \"requires_notarization\": true,\n  \"mm2\": 1,\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `electrum`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `electrum` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for electrum",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "electrum - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"electrum\",\n  \"servers\": [\n    {\n      \"url\": \"electrum1.cipig.net:10063\",\n      \"protocol\": \"TCP\"\n    },\n    {\n      \"url\": \"electrum2.cipig.net:20063\",\n      \"protocol\": \"SSL\",\n      \"disable_cert_verification\": true\n    },\n    {\n      \"url\": \"electrum3.cipig.net:20063\",\n      \"protocol\": \"SSL\",\n      \"ws_url\": \"electrum3.cipig.net:30063\"\n    }\n  ],\n  \"min_connected\": 1,\n  \"max_connected\": 2,\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `electrum`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `electrum` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for electrum",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "electrum - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"coin\": \"{{coin}}\",\n  \"method\": \"electrum\",\n  \"servers\": [\n    {\n      \"url\": \"electrum1.cipig.net:10050\"\n    },\n    {\n      \"url\": \"electrum2.cipig.net:10050\"\n    },\n    {\n      \"url\": \"electrum3.cipig.net:10050\"\n    }\n  ],\n  \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\",\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `electrum`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `electrum` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for electrum",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_directly_connected_peers - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_directly_connected_peers\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_directly_connected_peers`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_directly_connected_peers` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_directly_connected_peers",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_directly_connected_peers - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_directly_connected_peers\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_directly_connected_peers`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_directly_connected_peers` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_directly_connected_peers",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_mesh - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_gossip_mesh\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_mesh`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_mesh` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_mesh",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_mesh - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_gossip_mesh\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_mesh`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_mesh` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_mesh",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_peer_topics - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_gossip_peer_topics\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_peer_topics`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_peer_topics` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_peer_topics",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_peer_topics - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_gossip_peer_topics\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_peer_topics`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_peer_topics` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_peer_topics",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_topic_peers - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_gossip_topic_peers\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_topic_peers`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_topic_peers` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_topic_peers",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_gossip_topic_peers - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_gossip_topic_peers\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_gossip_topic_peers`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_gossip_topic_peers` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_gossip_topic_peers",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_my_peer_id - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_my_peer_id\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_my_peer_id`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_my_peer_id` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_my_peer_id",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_my_peer_id - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_my_peer_id\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_my_peer_id`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_my_peer_id` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_my_peer_id",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_relay_mesh - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_relay_mesh\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_relay_mesh`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_relay_mesh` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_relay_mesh",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_relay_mesh - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_relay_mesh\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `get_relay_mesh`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `get_relay_mesh` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_relay_mesh",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "kmd_rewards_info - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"kmd_rewards_info\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `kmd_rewards_info`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `kmd_rewards_info` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for kmd_rewards_info",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "kmd_rewards_info - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"kmd_rewards_info\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `kmd_rewards_info`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `kmd_rewards_info` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for kmd_rewards_info",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "list_banned_pubkeys - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"list_banned_pubkeys\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `list_banned_pubkeys`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `list_banned_pubkeys` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for list_banned_pubkeys",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "list_banned_pubkeys - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"list_banned_pubkeys\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `list_banned_pubkeys`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `list_banned_pubkeys` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for list_banned_pubkeys",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "max_taker_vol - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"max_taker_vol\",\n  \"coin\": \"{{coin}}\",\n  \"userpass\": \"{{userpass}}\",\n  \"mm2\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `max_taker_vol`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `max_taker_vol` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for max_taker_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "max_taker_vol - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"max_taker_vol\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `max_taker_vol`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `max_taker_vol` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for max_taker_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "metrics - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"metrics\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `metrics`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `metrics` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for metrics",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "metrics - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"metrics\",\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `metrics`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `metrics` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for metrics",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "min_trading_vol - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"min_trading_vol\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `min_trading_vol`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `min_trading_vol` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for min_trading_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "min_trading_vol - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"min_trading_vol\",\n  \"coin\": \"{{coin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `min_trading_vol`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `min_trading_vol` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for min_trading_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_orders - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_orders\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_orders",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_orders - Basic Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_orders\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_orders`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_orders` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_orders",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "send_raw_transaction - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"send_raw_transaction\",\n  \"coin\": \"{{coin}}\",\n  \"tx_hex\": \"0400008085202f8902d6a5b976db5e5c9e8f9ead50713b25f22cd061edc8ff0ff1049fd2cd775ba087000000006b483045022100bf2073c1ecfef3fc78f272045f46a722591401f61c2d2fac87fc474a17df7c3102200ca1bd0664ba75f3383e5cbbe96127ad534a86238dbea256e000b0fe2067ab8c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd04d4e07ac5dacd08fb76e08d2a435fc4fe2b16eb0158695c820b44f42f044cb010000006a47304402200a0c21e8c0ae4a740f3663fe08aeff02cea6495157d531045b58d2dd79fb802702202f80dddd264db33f55e49799363997a175d39a91242a95f268c40f7ced97030b012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acc3b3ca27000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000\",\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `send_raw_transaction`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `send_raw_transaction` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for send_raw_transaction",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "send_raw_transaction - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"send_raw_transaction\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `send_raw_transaction`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `send_raw_transaction` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for send_raw_transaction",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_required_confirmations - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"set_required_confirmations\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `set_required_confirmations`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `set_required_confirmations` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_required_confirmations",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_required_confirmations - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"set_required_confirmations\",\n  \"coin\": \"{{coin}}\",\n  \"confirmations\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `set_required_confirmations`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `set_required_confirmations` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_required_confirmations",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_requires_notarization - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"set_requires_notarization\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `set_requires_notarization`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `set_requires_notarization` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_requires_notarization",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_requires_notarization - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"set_requires_notarization\",\n  \"coin\": \"{{coin}}\",\n  \"requires_notarization\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `set_requires_notarization`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `set_requires_notarization` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_requires_notarization",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "show_priv_key - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"show_priv_key\",\n  \"coin\": \"{{coin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `show_priv_key`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `show_priv_key` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for show_priv_key",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "show_priv_key - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"show_priv_key\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `show_priv_key`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `show_priv_key` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for show_priv_key",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "unban_pubkeys - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"unban_pubkeys\",\n  \"unban_by\": {\n    \"type\": \"Few\"\n  },\n  \"data\": [\n    \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\n    \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520422\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `unban_pubkeys`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `unban_pubkeys` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for unban_pubkeys",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "unban_pubkeys - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"unban_pubkeys\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `unban_pubkeys`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `unban_pubkeys` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for unban_pubkeys",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "unban_pubkeys - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"unban_pubkeys\",\n  \"unban_by\": {\n    \"type\": \"All\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `unban_pubkeys`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `unban_pubkeys` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for unban_pubkeys",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "validateaddress - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"validateaddress\",\n  \"coin\": \"{{coin}}\",\n  \"address\": \"{{address}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `validateaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `validateaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for validateaddress",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "validateaddress - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `validateaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `validateaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for validateaddress",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "version - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"version\",\n  \"userpass\": \"{{userpass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `version`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `version` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for version",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "version - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"version\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `version`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `version` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for version",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Convertaddress",
          "description": "Examples for the convertaddress method",
          "item": [
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"qKVvtDqpnFGDxsDzck5jmLwdnD2jRH6aM8\",\n  \"to_address_format\": {\n    \"format\": \"contract\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"bitcoincash:qzxqqt9lh4feptf0mplnk58gnajfepzwcq9f2rxk55\",\n  \"to_address_format\": {\n    \"format\": \"standard\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"convertaddress\",\n  \"params\": {}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"0x1549128bbfb33b997949b4105b6a6371c998e212\",\n  \"to_address_format\": {\n    \"format\": \"wallet\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\",\n  \"to_address_format\": {\n    \"format\": \"mixedcase\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"1DmFp16U73RrVZtYUbo2Ectt8mAnYScpqM\",\n  \"to_address_format\": {\n    \"format\": \"cashaddress\",\n    \"network\": \"bitcoincash\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"qKVvtDqpnFGDxsDzck5jmLwdnD2jRH6aM8\",\n  \"to_address_format\": {\n    \"format\": \"contract\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"bitcoincash:qzxqqt9lh4feptf0mplnk58gnajfepzwcq9f2rxk55\",\n  \"to_address_format\": {\n    \"format\": \"standard\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"1DmFp16U73RrVZtYUbo2Ectt8mAnYScpqM\",\n  \"to_address_format\": {\n    \"format\": \"cashaddress\",\n    \"network\": \"bitcoincash\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\",\n  \"to_address_format\": {\n    \"format\": \"mixedcase\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "convertaddress - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"convertaddress\",\n  \"coin\": \"{{coin}}\",\n  \"from\": \"0x1549128bbfb33b997949b4105b6a6371c998e212\",\n  \"to_address_format\": {\n    \"format\": \"wallet\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `convertaddress`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `convertaddress` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for convertaddress",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Orders History By Filter",
          "description": "Examples for the orders_history_by_filter method",
          "item": [
            {
              "name": "orders_history_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orders_history_by_filter\",\n  \"status\": \"Timed Out\",\n  \"include_details\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "orders_history_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orders_history_by_filter\",\n  \"order_type\": \"Taker\",\n  \"initial_action\": \"Buy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "orders_history_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orders_history_by_filter\",\n  \"base\": \"{{base}}\",\n  \"from_price\": 1,\n  \"to_volume\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "orders_history_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orders_history_by_filter\",\n  \"was_taker\": true,\n  \"from_timestamp\": 1611705600\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "orders_history_by_filter - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orders_history_by_filter\",\n  \"base\": \"{{base}}\",\n  \"rel\": \"{{rel}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "orders_history_by_filter - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"orders_history_by_filter\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `orders_history_by_filter`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `orders_history_by_filter` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for orders_history_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Update Maker Order",
          "description": "Examples for the update_maker_order method",
          "item": [
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"volume_delta\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"new_price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"base_confs\": 2,\n  \"base_nota\": true,\n  \"rel_confs\": 5,\n  \"rel_nota\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"volume_delta\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"new_price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"volume_delta\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ],\n  \"new_price\": [\n    [\n      1,\n      [\n        1\n      ]\n    ],\n    [\n      1,\n      [\n        1\n      ]\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"new_price\": \"0.9\",\n  \"max\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"new_price\": \"0.9\",\n  \"volume_delta\": \"1\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_maker_order\",\n  \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\",\n  \"volume_delta\": {\n    \"numer\": \"3\",\n    \"denom\": \"2\"\n  },\n  \"new_price\": {\n    \"numer\": \"2\",\n    \"denom\": \"1\"\n  },\n  \"min_volume\": \"1\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "update_maker_order - Basic Trade",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"update_maker_order\",\n  \"params\": {\n    \"base\": \"KMD\",\n    \"rel\": \"BTC\",\n    \"price\": \"0.1\",\n    \"volume\": \"10\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `update_maker_order`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `update_maker_order` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for update_maker_order",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Wallet Management",
      "description": "Wallet operations, balances, and transaction management",
      "item": [
        {
          "name": "my_balance - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_balance\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_balance`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_balance` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_balance",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_balance - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_balance\",\n  \"coin\": \"{{coin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_balance`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_balance` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_balance",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_tx_history - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_tx_history\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_tx_history`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_tx_history` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_tx_history",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_tx_history - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"coin\": \"{{coin}}\",\n  \"limit\": 1,\n  \"from_id\": \"1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_tx_history`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_tx_history` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_tx_history",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_tx_history - Basic Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"coin\": \"{{coin}}\",\n  \"max\": true,\n  \"from_id\": \"1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "**Method**: `my_tx_history`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `my_tx_history` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_tx_history",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Withdraw",
          "description": "Examples for the withdraw method",
          "item": [
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"RECIPIENT_ADDRESS\",\n  \"amount\": \"{{amount}}\",\n  \"fee\": \"{{fee}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n  \"amount\": \"{{amount}}\",\n  \"fee\": \"{{fee}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n  \"amount\": \"{{amount}}\",\n  \"fee\": \"{{fee}}\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n  \"max\": true,\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\",\n  \"amount\": \"{{amount}}\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n  \"amount\": \"{{amount}}\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n  \"amount\": \"{{amount}}\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"withdraw\",\n  \"coin\": \"{{coin}}\",\n  \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n  \"amount\": \"{{amount}}\",\n  \"fee\": \"{{fee}}\",\n  \"userpass\": \"{{userpass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "**Method**: `withdraw`\n**Operation**: `default`\n**API Version**: V1\n\n**Description**:\nThis request demonstrates the `withdraw` method\n\n**Documentation**:\n- [API Documentation](https://developers.komodoplatform.com/basic-docs/komodo-defi-framework/api/v1/)\n\n**Usage Notes**:\n- Replace `{{kdf_url}}` with your KDF instance endpoint\n- Update `userpass` with your configured RPC password\n- Modify parameters as needed for your use case"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for KDF API",
          "// Ensure required variables are set",
          "",
          "if (!pm.environment.get('kdf_url')) {",
          "    console.warn('⚠️ kdf_url environment variable not set');",
          "}",
          "",
          "if (!pm.environment.get('userpass')) {",
          "    console.warn('⚠️ userpass environment variable not set');",
          "}",
          "",
          "// Set timestamp for request tracking",
          "pm.globals.set('request_timestamp', new Date().toISOString());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "kdf_url",
      "value": "http://127.0.0.1:7783",
      "description": "KDF instance URL with IP/domain and port"
    },
    {
      "key": "userpass",
      "value": "RPC_UserP@SSW0RD",
      "description": "RPC authentication password (update this!)"
    },
    {
      "key": "api_version",
      "value": "v1",
      "description": "API version: v1"
    }
  ]
}