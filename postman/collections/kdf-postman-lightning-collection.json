{
	"info": {
		"_postman_id": "GENERATED-ID-LIGHTNING-METHODS",
		"name": "Komodo DeFi Framework - Lightning Methods",
		"description": "Lightning-prefixed RPC methods for Komodo DeFi Framework from dispatcher.rs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Lightning Methods",
			"item": [
				{
					"name": "lightning::generate_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|(\\\/\\\/.*|\\s*\\#[^\\n\\r]*)/gm, \"\");",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::generate_invoice\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"amount_msat\": \"{{amount_msat}}\",\n        \"description\": \"{{description}}\",\n        \"expiry\": \"{{expiry}}\"\n    }\n    // Generate a new Lightning invoice.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::get_claimable_balances",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::get_claimable_balances\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"include_open_channels_balances\": false\n    }\n    // Get claimable balances for a Lightning coin.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::get_invoice_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::get_invoice_info\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment_hash\": \"{{payment_hash}}\"\n    }\n    // Get information about a specific Lightning invoice.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::list_channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::list_channels\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"filter\": \"{{filter}}\",\n        \"limit\": \"{{limit}}\",\n        \"paging_options\": {\n            \"page_number\": \"{{page_number}}\"\n        }\n    }\n    // List all open Lightning channels.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::list_payments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::list_payments\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"filter\": \"{{filter}}\",\n        \"limit\": \"{{limit}}\",\n        \"paging_options\": {\n            \"page_number\": \"{{page_number}}\"\n        }\n    }\n    // List all Lightning payments.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::open_channel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::open_channel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"node_address\": {\n            \"pubkey\": \"{{pubkey}}\",\n            \"addr\": \"{{addr}}\"\n        },\n        \"amount\": {\n            \"type\": \"Exact\",\n            \"value\": \"{{amount}}\"\n        },\n        \"push_msat\": \"{{push_msat}}\",\n        \"channel_options\": \"{{channel_options}}\",\n        \"channel_configs\": \"{{channel_configs}}\"\n    }\n    // Open a new Lightning channel.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::route_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::route_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"destination_pubkey\": \"{{destination_pubkey}}\",\n        \"amount_msat\": \"{{amount_msat}}\"\n    }\n    // Find a route for a Lightning payment.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::send_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::send_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment\": {\n            \"type\": \"invoice\",\n            \"invoice\": \"{{invoice}}\"\n        }\n    }\n    // Example for keysend:\n    // \"params\": {\n    //     \"coin\": \"{{lightning_coin}}\",\n    //     \"payment\": {\n    //         \"type\": \"keysend\",\n    //         \"destination\": \"enter_destination_node_pubkey_hex\",\n    //         \"amount_in_msat\": 10000,\n    //         \"expiry\": 144 \n    //     }\n    // }\n    // Send a Lightning payment using an invoice or keysend.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::close_channel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::close_channel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"channel_id\": \"{{channel_id}}\",\n        \"counterparty_node_id\": \"{{counterparty_node_id}}\",\n        \"force_close\": \"{{force_close}}\"\n    }\n    // Close an existing Lightning channel.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::get_preimage_from_htlc_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::get_preimage_from_htlc_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment_hash\": \"{{payment_hash}}\"\n    }\n    // Get payment preimage from an HTLC payment.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::get_preimage_from_successful_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::get_preimage_from_successful_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment_hash\": \"{{payment_hash}}\"\n    }\n    // Get payment preimage from a successful payment.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::remove_failed_htlc_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::remove_failed_htlc_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment_hash\": \"{{payment_hash}}\"\n    }\n    // Remove a failed HTLC payment record.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::remove_successful_htlc_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::remove_successful_htlc_payment\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"payment_hash\": \"{{payment_hash}}\"\n    }\n    // Remove a successful HTLC payment record.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::get_total_htlc_count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::get_total_htlc_count\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\"\n    }\n    // Get the total count of HTLCs.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				},
				{
					"name": "lightning::update_channel (formerly set_channel_fee)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments",
									"const rawData = pm.request.body.toString();",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m);",
									"pm.request.body.raw = strippedData;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"method\": \"lightning::update_channel\",\n    \"mmrpc\": \"2.0\",\n    \"params\": {\n        \"coin\": \"{{lightning_coin}}\",\n        \"uuid\": \"{{uuid}}\",\n        \"channel_options\": {\n            \"base_fee_msat\": \"{{base_fee_msat}}\",\n            \"proportional_fee_in_millionths_sats\": \"{{proportional_fee_in_millionths_sats}}\",\n            \"cltv_expiry_delta\": \"{{cltv_expiry_delta}}\",\n            \"max_dust_htlc_exposure_msat\": \"{{max_dust_htlc_exposure_msat}}\",\n            \"force_close_avoidance_max_fee_sats\": \"{{force_close_avoidance_max_fee_sats}}\"\n        }\n    }\n    // Update routing fees or other options for a specific Lightning channel.\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mmhost}}:{{mmport}}",
							"host": [
								"{{mmhost}}"
							],
							"port": "{{mmport}}"
						}
					},
					"response": []
				}
			]
		}
	]
} 