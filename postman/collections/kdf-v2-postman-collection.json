{
  "info": {
    "name": "Komodo DeFi Framework API V2",
    "description": "Complete collection of Komodo DeFi Framework API V2 methods with 437 requests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "d50b13d0-ee91-4ec9-b596-2ef75e4a2fbb",
    "_exporter_id": "kdf-docs-generator"
  },
  "item": [
    {
      "name": "Coin Activation",
      "description": "API methods related to coin activation",
      "item": [
        {
          "name": "get_enabled_coins - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_enabled_coins\",\n  \"params\": {},\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the get_enabled_coins method in KDF API V2.\n\nMethod: get_enabled_coins\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_enabled_coins",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Task",
          "description": "Examples for the task method",
          "item": [
            {
              "name": "task::enable_bch::cancel - Enable Bch-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_bch::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::cancel method in KDF API V2.\n\nMethod: task::enable_bch::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::cancel - Enable Bch-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_bch::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::cancel method in KDF API V2.\n\nMethod: task::enable_bch::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::cancel - Enable Bch-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_bch::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::cancel method in KDF API V2.\n\nMethod: task::enable_bch::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::init - Enable Bch-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::init\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"activation_params\": {\n      \"bchd_urls\": [\n        \"https://bchd.dragonhound.info\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"bch.imaginary.cash:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"cashnode.bch.ninja:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"bch.soul-dev.com:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20055\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"slp_tokens_requests\": [\n        {\n          \"ticker\": \"USDF\"\n        },\n        {\n          \"ticker\": \"ASLP-SLP\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"cashaddress\",\n        \"network\": \"bitcoincash\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::init method in KDF API V2.\n\nMethod: task::enable_bch::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::init - Enable Bch-Init-Bch Electrum Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::init\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"activation_params\": {\n      \"bchd_urls\": [\n        \"https://bchd.dragonhound.info\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"bch.imaginary.cash:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"cashnode.bch.ninja:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"bch.soul-dev.com:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20055\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"slp_tokens_requests\": [\n        {\n          \"ticker\": \"USDF\"\n        },\n        {\n          \"ticker\": \"ASLP-SLP\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"cashaddress\",\n        \"network\": \"bitcoincash\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::init method in KDF API V2.\n\nMethod: task::enable_bch::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::init - Enable Bch-Init-Bch Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::init\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"activation_params\": {\n      \"bchd_urls\": [\n        \"https://bchd.dragonhound.info\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"bch.imaginary.cash:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"cashnode.bch.ninja:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"bch.soul-dev.com:50002\",\n              \"protocol\": \"SSL\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20055\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"slp_tokens_requests\": [\n        {\n          \"ticker\": \"USDF\"\n        },\n        {\n          \"ticker\": \"ASLP-SLP\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"cashaddress\",\n        \"network\": \"bitcoincash\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::init method in KDF API V2.\n\nMethod: task::enable_bch::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::status - Enable Bch-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::status method in KDF API V2.\n\nMethod: task::enable_bch::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::status - Enable Bch-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::status method in KDF API V2.\n\nMethod: task::enable_bch::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::status - Enable Bch-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::status method in KDF API V2.\n\nMethod: task::enable_bch::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::user_action - Enable Bch-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::user_action method in KDF API V2.\n\nMethod: task::enable_bch::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::user_action - Enable Bch-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::user_action method in KDF API V2.\n\nMethod: task::enable_bch::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_bch::user_action - Enable Bch-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_bch::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_bch::user_action method in KDF API V2.\n\nMethod: task::enable_bch::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_bch::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::cancel - Enable Eth-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_eth::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::cancel method in KDF API V2.\n\nMethod: task::enable_eth::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::cancel - Enable Eth-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_eth::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::cancel method in KDF API V2.\n\nMethod: task::enable_eth::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::cancel - Enable Eth-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_eth::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::cancel method in KDF API V2.\n\nMethod: task::enable_eth::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::init - Enable Eth-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::init\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"activation_params\": {\n      \"eth_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"evm_tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"ethereum\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::init method in KDF API V2.\n\nMethod: task::enable_eth::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::init - Enable Eth-Init-Eth Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::init\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"activation_params\": {\n      \"eth_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"evm_tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"ethereum\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::init method in KDF API V2.\n\nMethod: task::enable_eth::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::init - Enable Eth-Init-Example-1-Matic Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::init\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"swap_v2_contracts\": {\n      \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://poly-rpc.gateway.pokt.network\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"path_to_address\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    },\n    \"gap_limit\": 20,\n    \"scan_policy\": \"scan_if_new_wallet\",\n    \"min_addresses_number\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::init method in KDF API V2.\n\nMethod: task::enable_eth::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::status - Enable Eth-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::status method in KDF API V2.\n\nMethod: task::enable_eth::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::status - Enable Eth-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::status method in KDF API V2.\n\nMethod: task::enable_eth::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::status - Enable Eth-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::status method in KDF API V2.\n\nMethod: task::enable_eth::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::user_action - Enable Eth-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::user_action method in KDF API V2.\n\nMethod: task::enable_eth::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::user_action - Enable Eth-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::user_action method in KDF API V2.\n\nMethod: task::enable_eth::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_eth::user_action - Enable Eth-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_eth::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_eth::user_action method in KDF API V2.\n\nMethod: task::enable_eth::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_eth::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::cancel - Enable Lightning-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::cancel\",\n  \"params\": {\n    \"task_id\": 1\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::cancel method in KDF API V2.\n\nMethod: task::enable_lightning::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::cancel - Enable Lightning-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::cancel\",\n  \"params\": {\n    \"task_id\": 1\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::cancel method in KDF API V2.\n\nMethod: task::enable_lightning::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::cancel - Enable Lightning-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::cancel\",\n  \"params\": {\n    \"task_id\": 1\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::cancel method in KDF API V2.\n\nMethod: task::enable_lightning::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::init - Enable Lightning-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"task::enable_lightning::init\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"tBTC-lightning\",\n    \"activation_params\": {\n      \"name\": \"KomoDeFi-Docs-Node-1\",\n      \"listening_port\": 9735,\n      \"color\": \"000000\",\n      \"payment_retries\": 5\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::init method in KDF API V2.\n\nMethod: task::enable_lightning::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::init - Enable Lightning-Init-Example-1-Tbtc-Lightning Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"task::enable_lightning::init\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"tBTC-lightning\",\n    \"activation_params\": {\n      \"name\": \"KomoDeFi-Docs-Node-1\",\n      \"listening_port\": 9735,\n      \"color\": \"000000\",\n      \"payment_retries\": 5\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::init method in KDF API V2.\n\nMethod: task::enable_lightning::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::init - Enable Lightning-Init-Tbtc-Lightning Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"task::enable_lightning::init\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"tBTC-lightning\",\n    \"activation_params\": {\n      \"name\": \"KomoDeFi-Docs-Node-1\",\n      \"listening_port\": 9735,\n      \"color\": \"000000\",\n      \"payment_retries\": 5\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::init method in KDF API V2.\n\nMethod: task::enable_lightning::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::status - Enable Lightning-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::status method in KDF API V2.\n\nMethod: task::enable_lightning::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::status - Enable Lightning-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::status method in KDF API V2.\n\nMethod: task::enable_lightning::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_lightning::status - Enable Lightning-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_lightning::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_lightning::status method in KDF API V2.\n\nMethod: task::enable_lightning::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_lightning::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::cancel - Enable Qtum-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_qtum::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::cancel method in KDF API V2.\n\nMethod: task::enable_qtum::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::cancel - Enable Qtum-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_qtum::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::cancel method in KDF API V2.\n\nMethod: task::enable_qtum::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::cancel - Enable Qtum-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_qtum::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::cancel method in KDF API V2.\n\nMethod: task::enable_qtum::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::init - Enable Qtum-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::init\",\n  \"params\": {\n    \"ticker\": \"QTUM\",\n    \"activation_params\": {\n      \"qtum_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"qrc20_tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"qtum\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::init method in KDF API V2.\n\nMethod: task::enable_qtum::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::init - Enable Qtum-Init-Example-1-Qtum Electrum Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::init\",\n  \"params\": {\n    \"ticker\": \"QTUM\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum2.cipig.net:10050\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20050\",\n              \"ws_url\": \"electrum3.cipig.net:30050\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"scan_policy\": \"scan_if_new_wallet\",\n      \"priv_key_policy\": \"Trezor\",\n      \"min_addresses_number\": 3,\n      \"gap_limit\": 20\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::init method in KDF API V2.\n\nMethod: task::enable_qtum::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::init - Enable Qtum-Init-Qtum Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::init\",\n  \"params\": {\n    \"ticker\": \"QTUM\",\n    \"activation_params\": {\n      \"qtum_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"qrc20_tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"qtum\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::init method in KDF API V2.\n\nMethod: task::enable_qtum::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::status - Enable Qtum-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::status method in KDF API V2.\n\nMethod: task::enable_qtum::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::status - Enable Qtum-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::status method in KDF API V2.\n\nMethod: task::enable_qtum::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::status - Enable Qtum-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::status method in KDF API V2.\n\nMethod: task::enable_qtum::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::user_action - Enable Qtum-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::user_action method in KDF API V2.\n\nMethod: task::enable_qtum::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::user_action - Enable Qtum-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::user_action method in KDF API V2.\n\nMethod: task::enable_qtum::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_qtum::user_action - Enable Qtum-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_qtum::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_qtum::user_action method in KDF API V2.\n\nMethod: task::enable_qtum::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_qtum::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::cancel - Enable Tendermint-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_tendermint::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::cancel method in KDF API V2.\n\nMethod: task::enable_tendermint::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::cancel - Enable Tendermint-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_tendermint::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::cancel method in KDF API V2.\n\nMethod: task::enable_tendermint::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::cancel - Enable Tendermint-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_tendermint::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::cancel method in KDF API V2.\n\nMethod: task::enable_tendermint::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::init - Enable Tendermint-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::init\",\n  \"params\": {\n    \"ticker\": \"TENDERMINT\",\n    \"activation_params\": {\n      \"tendermint_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"tendermint\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::init method in KDF API V2.\n\nMethod: task::enable_tendermint::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::init - Enable Tendermint-Init-Example-1-Iris Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::init\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::init method in KDF API V2.\n\nMethod: task::enable_tendermint::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::init - Enable Tendermint-Init-Tendermint Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::init\",\n  \"params\": {\n    \"ticker\": \"TENDERMINT\",\n    \"activation_params\": {\n      \"tendermint_node_urls\": [\n        \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\"\n      ],\n      \"mode\": {\n        \"rpc\": \"Infura\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\",\n              \"protocol\": \"HTTPS\"\n            }\n          ]\n        }\n      },\n      \"tokens_requests\": [\n        {\n          \"ticker\": \"USDT\"\n        },\n        {\n          \"ticker\": \"DAI\",\n          \"required_confirmations\": 3\n        }\n      ],\n      \"tx_history\": true,\n      \"required_confirmations\": 5,\n      \"requires_notarization\": false,\n      \"address_format\": {\n        \"format\": \"hex\",\n        \"network\": \"tendermint\"\n      },\n      \"utxo_merge_params\": {\n        \"merge_at\": 50,\n        \"check_every\": 10,\n        \"max_merge_at_once\": 25\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::init method in KDF API V2.\n\nMethod: task::enable_tendermint::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::status - Enable Tendermint-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::status method in KDF API V2.\n\nMethod: task::enable_tendermint::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::status - Enable Tendermint-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::status method in KDF API V2.\n\nMethod: task::enable_tendermint::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::status - Enable Tendermint-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::status method in KDF API V2.\n\nMethod: task::enable_tendermint::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::user_action - Enable Tendermint-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::user_action method in KDF API V2.\n\nMethod: task::enable_tendermint::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::user_action - Enable Tendermint-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::user_action method in KDF API V2.\n\nMethod: task::enable_tendermint::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_tendermint::user_action - Enable Tendermint-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_tendermint::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_tendermint::user_action method in KDF API V2.\n\nMethod: task::enable_tendermint::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_tendermint::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::cancel - Enable Utxo-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_utxo::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::cancel method in KDF API V2.\n\nMethod: task::enable_utxo::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::cancel - Enable Utxo-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_utxo::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::cancel method in KDF API V2.\n\nMethod: task::enable_utxo::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::cancel - Enable Utxo-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_utxo::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::cancel method in KDF API V2.\n\nMethod: task::enable_utxo::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::init - Enable Utxo-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::init\",\n  \"params\": {\n    \"ticker\": \"KMD\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum2.cipig.net:10001\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20001\",\n              \"ws_url\": \"electrum3.cipig.net:30001\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"scan_policy\": \"scan_if_new_wallet\",\n      \"priv_key_policy\": \"Trezor\",\n      \"min_addresses_number\": 3,\n      \"gap_limit\": 20\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::init method in KDF API V2.\n\nMethod: task::enable_utxo::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::init - Enable Utxo-Init-Example-1-Kmd Electrum Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::init\",\n  \"params\": {\n    \"ticker\": \"KMD\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum2.cipig.net:10001\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20001\",\n              \"ws_url\": \"electrum3.cipig.net:30001\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"scan_policy\": \"scan_if_new_wallet\",\n      \"priv_key_policy\": \"Trezor\",\n      \"min_addresses_number\": 3,\n      \"gap_limit\": 20\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::init method in KDF API V2.\n\nMethod: task::enable_utxo::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::init - Enable Utxo-Init-Kmd Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::init\",\n  \"params\": {\n    \"ticker\": \"KMD\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Electrum\",\n        \"rpc_data\": {\n          \"servers\": [\n            {\n              \"url\": \"electrum2.cipig.net:10001\"\n            },\n            {\n              \"url\": \"electrum3.cipig.net:20001\",\n              \"ws_url\": \"electrum3.cipig.net:30001\",\n              \"protocol\": \"SSL\"\n            }\n          ]\n        }\n      },\n      \"scan_policy\": \"scan_if_new_wallet\",\n      \"priv_key_policy\": \"Trezor\",\n      \"min_addresses_number\": 3,\n      \"gap_limit\": 20\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::init method in KDF API V2.\n\nMethod: task::enable_utxo::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::status - Enable Utxo-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::status method in KDF API V2.\n\nMethod: task::enable_utxo::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::status - Enable Utxo-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::status method in KDF API V2.\n\nMethod: task::enable_utxo::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::status - Enable Utxo-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::status\",\n  \"params\": {\n    \"task_id\": 1,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::status method in KDF API V2.\n\nMethod: task::enable_utxo::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::user_action - Enable Utxo-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::user_action\",\n  \"params\": {\n    \"task_id\": 1,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::user_action method in KDF API V2.\n\nMethod: task::enable_utxo::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::user_action - Enable Utxo-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::user_action\",\n  \"params\": {\n    \"task_id\": 1,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::user_action method in KDF API V2.\n\nMethod: task::enable_utxo::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_utxo::user_action - Enable Utxo-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_utxo::user_action\",\n  \"params\": {\n    \"task_id\": 1,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_utxo::user_action method in KDF API V2.\n\nMethod: task::enable_utxo::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_utxo::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::cancel - Enable Z Coin-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::cancel method in KDF API V2.\n\nMethod: task::enable_z_coin::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::cancel - Enable Z Coin-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::cancel method in KDF API V2.\n\nMethod: task::enable_z_coin::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::cancel - Enable Z Coin-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::cancel method in KDF API V2.\n\nMethod: task::enable_z_coin::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ]\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"height\": 2528700\n          }\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": \"earliest\"\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"protocol\": \"SSL\",\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"date\": 1672704000\n          }\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Example-1-Zombie Light Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ]\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Example-10-Zombie Light Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"height\": 2528700\n          }\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Example-11-Zombie Light Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": \"earliest\"\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Example-12-Zombie Light Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"protocol\": \"SSL\",\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"date\": 1672704000\n          }\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Zombie Rpc Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ]\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Zombie Rpc Activation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"height\": 2528700\n          }\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Zombie Rpc Activation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"url\": \"zombie.dragonhound.info:10133\"\n            },\n            {\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"protocol\": \"SSL\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": \"earliest\"\n        }\n      },\n      \"zcash_params_path\": \"/home/username/path_to/.zcash-params\",\n      \"scan_blocks_per_iteration\": 100,\n      \"scan_interval_ms\": 200\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::init - Enable Z Coin-Init-Zombie Rpc Activation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::init\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ZOMBIE\",\n    \"activation_params\": {\n      \"mode\": {\n        \"rpc\": \"Light\",\n        \"rpc_data\": {\n          \"electrum_servers\": [\n            {\n              \"protocol\": \"SSL\",\n              \"url\": \"zombie.dragonhound.info:20133\",\n              \"ws_url\": \"zombie.dragonhound.info:30059\"\n            }\n          ],\n          \"light_wallet_d_servers\": [\n            \"http://zombie.dragonhound.info:1443\"\n          ],\n          \"sync_params\": {\n            \"date\": 1672704000\n          }\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::init method in KDF API V2.\n\nMethod: task::enable_z_coin::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::status - Enable Z Coin-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::status\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::status method in KDF API V2.\n\nMethod: task::enable_z_coin::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::status - Enable Z Coin-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::status\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::status method in KDF API V2.\n\nMethod: task::enable_z_coin::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::status - Enable Z Coin-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::enable_z_coin::status\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::status method in KDF API V2.\n\nMethod: task::enable_z_coin::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::user_action - Enable Z Coin-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_z_coin::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::user_action method in KDF API V2.\n\nMethod: task::enable_z_coin::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::user_action - Enable Z Coin-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_z_coin::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::user_action method in KDF API V2.\n\nMethod: task::enable_z_coin::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::enable_z_coin::user_action - Enable Z Coin-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::enable_z_coin::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::enable_z_coin::user_action method in KDF API V2.\n\nMethod: task::enable_z_coin::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::enable_z_coin::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Enable",
          "description": "Examples for the enable method",
          "item": [
            {
              "name": "enable_bch_with_tokens - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_bch_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"allow_slp_unsafe_conf\": false,\n    \"bchd_urls\": [\n      \"https://bchd.dragonhound.info\"\n    ],\n    \"mode\": {\n      \"rpc\": \"Electrum\",\n      \"rpc_data\": {\n        \"servers\": [\n          {\n            \"url\": \"bch.imaginary.cash:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"cashnode.bch.ninja:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"electrum3.cipig.net:20055\",\n            \"protocol\": \"SSL\"\n          }\n        ]\n      }\n    },\n    \"tx_history\": true,\n    \"slp_tokens_requests\": [\n      {\n        \"ticker\": \"ASLP-SLP\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false,\n    \"address_format\": {\n      \"format\": \"cashaddress\",\n      \"network\": \"bitcoincash\"\n    },\n    \"utxo_merge_params\": {\n      \"merge_at\": 50,\n      \"check_every\": 10,\n      \"max_merge_at_once\": 25\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_bch_with_tokens method in KDF API V2.\n\nMethod: enable_bch_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_bch_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_bch_with_tokens - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_bch_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"allow_slp_unsafe_conf\": false,\n    \"bchd_urls\": [\n      \"https://bchd.dragonhound.info\"\n    ],\n    \"mode\": {\n      \"rpc\": \"Electrum\",\n      \"rpc_data\": {\n        \"servers\": [\n          {\n            \"url\": \"bch.imaginary.cash:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"cashnode.bch.ninja:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"electrum3.cipig.net:20055\",\n            \"protocol\": \"SSL\"\n          }\n        ]\n      }\n    },\n    \"tx_history\": true,\n    \"get_balances\": false,\n    \"slp_tokens_requests\": [\n      {\n        \"ticker\": \"ASLP-SLP\",\n        \"required_confirmations\": 4\n      }\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_bch_with_tokens method in KDF API V2.\n\nMethod: enable_bch_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_bch_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_bch_with_tokens - Bch Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_bch_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"allow_slp_unsafe_conf\": false,\n    \"bchd_urls\": [\n      \"https://bchd.dragonhound.info\"\n    ],\n    \"mode\": {\n      \"rpc\": \"Electrum\",\n      \"rpc_data\": {\n        \"servers\": [\n          {\n            \"url\": \"bch.imaginary.cash:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"cashnode.bch.ninja:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"electrum3.cipig.net:20055\",\n            \"protocol\": \"SSL\"\n          }\n        ]\n      }\n    },\n    \"tx_history\": true,\n    \"slp_tokens_requests\": [\n      {\n        \"ticker\": \"ASLP-SLP\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false,\n    \"address_format\": {\n      \"format\": \"cashaddress\",\n      \"network\": \"bitcoincash\"\n    },\n    \"utxo_merge_params\": {\n      \"merge_at\": 50,\n      \"check_every\": 10,\n      \"max_merge_at_once\": 25\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_bch_with_tokens method in KDF API V2.\n\nMethod: enable_bch_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_bch_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_bch_with_tokens - Bch Activation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_bch_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BCH\",\n    \"allow_slp_unsafe_conf\": false,\n    \"bchd_urls\": [\n      \"https://bchd.dragonhound.info\"\n    ],\n    \"mode\": {\n      \"rpc\": \"Electrum\",\n      \"rpc_data\": {\n        \"servers\": [\n          {\n            \"url\": \"bch.imaginary.cash:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"cashnode.bch.ninja:50002\",\n            \"protocol\": \"SSL\"\n          },\n          {\n            \"url\": \"electrum3.cipig.net:20055\",\n            \"protocol\": \"SSL\"\n          }\n        ]\n      }\n    },\n    \"tx_history\": true,\n    \"get_balances\": false,\n    \"slp_tokens_requests\": [\n      {\n        \"ticker\": \"ASLP-SLP\",\n        \"required_confirmations\": 4\n      }\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_bch_with_tokens method in KDF API V2.\n\nMethod: enable_bch_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_bch_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_erc20 - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_erc20\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BAT-ERC20\",\n    \"activation_params\": {\n      \"required_confirmations\": 3\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_erc20 method in KDF API V2.\n\nMethod: enable_erc20\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_erc20",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_erc20 - Bat-Erc20 Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_erc20\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"BAT-ERC20\",\n    \"activation_params\": {\n      \"required_confirmations\": 3\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_erc20 method in KDF API V2.\n\nMethod: enable_erc20\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_erc20",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n    \"gas_station_decimals\": 8,\n    \"gas_station_policy\": {\n      \"policy\": \"MeanAverageFast\"\n    },\n    \"mm2\": 1,\n    \"priv_key_policy\": {\n      \"type\": \"ContextPrivKey\"\n    },\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n    \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n    \"nodes\": [\n      {\n        \"url\": \"https://eth1.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth2.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth3.cipig.net:18555\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"APE-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"BCH-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"MINDS-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"BUSD-ERC20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"swap_v2_contracts\": {\n      \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"nft_req\": {\n      \"type\": \"Moralis\",\n      \"info\": {\n        \"url\": \"https://moralis-proxy.komodo.earth\"\n      }\n    },\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n    \"gas_station_decimals\": 8,\n    \"gas_station_policy\": {\n      \"policy\": \"MeanAverageFast\"\n    },\n    \"mm2\": 1,\n    \"rpc_mode\": \"Default\",\n    \"priv_key_policy\": {\n      \"type\": \"WalletConnect\",\n      \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"\n    },\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n    \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n    \"nodes\": [\n      {\n        \"url\": \"https://eth1.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth2.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth3.cipig.net:18555\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PEPE-ERC20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Eth Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n    \"gas_station_decimals\": 8,\n    \"gas_station_policy\": {\n      \"policy\": \"MeanAverageFast\"\n    },\n    \"mm2\": 1,\n    \"priv_key_policy\": {\n      \"type\": \"ContextPrivKey\"\n    },\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n    \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n    \"nodes\": [\n      {\n        \"url\": \"https://eth1.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth2.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth3.cipig.net:18555\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"APE-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"BCH-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"MINDS-ERC20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"BUSD-ERC20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Eth Activation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ETH\",\n    \"gas_station_url\": \"https://ethgasstation.info/json/ethgasAPI.json\",\n    \"gas_station_decimals\": 8,\n    \"gas_station_policy\": {\n      \"policy\": \"MeanAverageFast\"\n    },\n    \"mm2\": 1,\n    \"rpc_mode\": \"Default\",\n    \"priv_key_policy\": {\n      \"type\": \"WalletConnect\",\n      \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"\n    },\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\",\n    \"fallback_swap_contract\": \"0x8500AFc0bc5214728082163326C2FF0C73f4a871\",\n    \"nodes\": [\n      {\n        \"url\": \"https://eth1.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth2.cipig.net:18555\",\n        \"komodo_proxy\": false\n      },\n      {\n        \"url\": \"https://eth3.cipig.net:18555\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PEPE-ERC20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Example-2-Matic Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"swap_v2_contracts\": {\n      \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Example-3-Matic Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"nft_req\": {\n      \"type\": \"Moralis\",\n      \"info\": {\n        \"url\": \"https://moralis-proxy.komodo.earth\"\n      }\n    },\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Matic Activation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"swap_v2_contracts\": {\n      \"maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"taker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n      \"nft_maker_swap_v2_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\"\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_eth_with_tokens - Matic Activation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_eth_with_tokens\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"MATIC\",\n    \"get_balances\": false,\n    \"tx_history\": false,\n    \"nft_req\": {\n      \"type\": \"Moralis\",\n      \"info\": {\n        \"url\": \"https://moralis-proxy.komodo.earth\"\n      }\n    },\n    \"gas_station_url\": \"https://gasstation-mainnet.matic.network/\",\n    \"swap_contract_address\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"fallback_swap_contract\": \"0x9130b257D37A52E52F21054c4DA3450c72f595CE\",\n    \"nodes\": [\n      {\n        \"url\": \"https://polygon-rpc.com\"\n      },\n      {\n        \"url\": \"https://node.komodo.earth:8080/polygon\"\n      },\n      {\n        \"url\": \"https://block-proxy.komodo.earth/rpc/matic\"\n      }\n    ],\n    \"erc20_tokens_requests\": [\n      {\n        \"ticker\": \"PGX-PLG20\",\n        \"required_confirmations\": 4\n      },\n      {\n        \"ticker\": \"AAVE-PLG20\",\n        \"required_confirmations\": 4\n      }\n    ],\n    \"required_confirmations\": 5,\n    \"requires_notarization\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_eth_with_tokens method in KDF API V2.\n\nMethod: enable_eth_with_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_eth_with_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_nft - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\": {\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"komodo_proxy\": true\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_nft method in KDF API V2.\n\nMethod: enable_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_nft - Example-1-Nft Matic Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\": {\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"komodo_proxy\": true\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_nft method in KDF API V2.\n\nMethod: enable_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_nft - Nft Matic Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"NFT_MATIC\",\n    \"activation_params\": {\n      \"provider\": {\n        \"type\": \"Moralis\",\n        \"info\": {\n          \"url\": \"https://moralis-proxy.komodo.earth\",\n          \"komodo_proxy\": true\n        }\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_nft method in KDF API V2.\n\nMethod: enable_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_slp - Example-1-Spice-Slp Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_slp\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"SPICE-SLP\",\n    \"activation_params\": {\n      \"required_confirmations\": 3\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_slp method in KDF API V2.\n\nMethod: enable_slp\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_slp",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_token - Atom-Ibc Iris Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_tendermint_token\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ATOM-IBC_IRIS\",\n    \"activation_params\": {\n      \"required_confirmations\": 3\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_token method in KDF API V2.\n\nMethod: enable_tendermint_token\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_token",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_token - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_tendermint_token\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ATOM-IBC_IRIS\",\n    \"activation_params\": {\n      \"required_confirmations\": 3\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_token method in KDF API V2.\n\nMethod: enable_tendermint_token\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_token",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Atom Activation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_tendermint_with_assets\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ATOM\",\n    \"tx_history\": true,\n    \"get_balances\": true,\n    \"activation_params\": {\n      \"priv_key_policy\": {\n        \"type\": \"WalletConnect\",\n        \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"\n      }\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://cosmos-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://cosmos-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://cosmos-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://cosmos-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://cosmoshub.rpc.stakin-nodes.com/\"\n      }\n    ],\n    \"tokens_params\": []\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"get_balances\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"get_balances\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"enable_tendermint_with_assets\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"ATOM\",\n    \"tx_history\": true,\n    \"get_balances\": true,\n    \"activation_params\": {\n      \"priv_key_policy\": {\n        \"type\": \"WalletConnect\",\n        \"data\": \"3569914dd09a5cc4ac92dedab354f06ff5db17ef616233a8ba562cbea51269fd\"\n      }\n    },\n    \"nodes\": [\n      {\n        \"url\": \"https://cosmos-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://cosmos-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://cosmos-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://cosmos-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://cosmoshub.rpc.stakin-nodes.com/\"\n      }\n    ],\n    \"tokens_params\": []\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Example-1-Iris Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"get_balances\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Example-2-Iris Activation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"get_balances\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Iris Activation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"tx_history\": true,\n    \"get_balances\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "enable_tendermint_with_assets - Iris Activation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"enable_tendermint_with_assets\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"ticker\": \"IRIS\",\n    \"tokens_params\": [\n      {\n        \"ticker\": \"ATOM-IBC_IRIS\"\n      }\n    ],\n    \"nodes\": [\n      {\n        \"url\": \"https://iris-rpc.alpha.komodo.earth/\",\n        \"api_url\": \"https://iris-api.alpha.komodo.earth/\",\n        \"grpc_url\": \"https://iris-grpc.alpha.komodo.earth/\",\n        \"ws_url\": \"wss://iris-rpc.alpha.komodo.earth/websocket\"\n      },\n      {\n        \"url\": \"https://rpc.irishub-1.irisnet.org\",\n        \"komodo_proxy\": false\n      }\n    ],\n    \"get_balances\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the enable_tendermint_with_assets method in KDF API V2.\n\nMethod: enable_tendermint_with_assets\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for enable_tendermint_with_assets",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Stream",
          "description": "Examples for the stream method",
          "item": [
            {
              "name": "stream::balance::enable - Balance-Enable-Example-1-Matic Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::balance::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"config\": {\n      \"stream_interval_seconds\": 15\n    },\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::balance::enable method in KDF API V2.\n\nMethod: stream::balance::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::balance::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::balance::enable - Balance-Enable-Matic Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::balance::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"config\": {\n      \"stream_interval_seconds\": 15\n    },\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::balance::enable method in KDF API V2.\n\nMethod: stream::balance::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::balance::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::disable - Disable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::disable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"streamer_id\": \"BALANCE:MATIC\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::disable method in KDF API V2.\n\nMethod: stream::disable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::disable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::fee_estimator::enable - Fee Estimator-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::fee_estimator::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"coin\": \"{{coin}}\",\n    \"config\": {\n      \"estimate_every\": 33.4,\n      \"estimator_type\": \"Provider\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::fee_estimator::enable method in KDF API V2.\n\nMethod: stream::fee_estimator::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::fee_estimator::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::fee_estimator::enable - Fee Estimator-Enable-Example-1-Matic Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::fee_estimator::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"coin\": \"{{coin}}\",\n    \"config\": {\n      \"estimate_every\": 33.4,\n      \"estimator_type\": \"Provider\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::fee_estimator::enable method in KDF API V2.\n\nMethod: stream::fee_estimator::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::fee_estimator::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::fee_estimator::enable - Fee Estimator-Enable-Matic Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::fee_estimator::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"coin\": \"{{coin}}\",\n    \"config\": {\n      \"estimate_every\": 33.4,\n      \"estimator_type\": \"Provider\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::fee_estimator::enable method in KDF API V2.\n\nMethod: stream::fee_estimator::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::fee_estimator::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::heartbeat::enable - Heartbeat-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::heartbeat::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"config\": {\n      \"stream_interval_seconds\": 30\n    },\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::heartbeat::enable method in KDF API V2.\n\nMethod: stream::heartbeat::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::heartbeat::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::network::enable - Network-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::network::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"config\": {\n      \"stream_interval_seconds\": 60\n    },\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::network::enable method in KDF API V2.\n\nMethod: stream::network::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::network::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::order_status::enable - Order Status-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::order_status::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::order_status::enable method in KDF API V2.\n\nMethod: stream::order_status::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::order_status::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::orderbook::enable - Orderbook-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::orderbook::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::orderbook::enable method in KDF API V2.\n\nMethod: stream::orderbook::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::orderbook::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::orderbook::enable - Orderbook-Enable-Doc Marty Trade-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::orderbook::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::orderbook::enable method in KDF API V2.\n\nMethod: stream::orderbook::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::orderbook::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::swap_status::enable - Swap Status-Enable-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::swap_status::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::swap_status::enable method in KDF API V2.\n\nMethod: stream::swap_status::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::swap_status::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "stream::tx_history::enable - Tx History-Enable-Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"stream::tx_history::enable\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"client_id\": 1,\n    \"coin\": \"{{coin}}\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the stream::tx_history::enable method in KDF API V2.\n\nMethod: stream::tx_history::enable\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for stream::tx_history::enable",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Lightning",
      "description": "API methods related to lightning",
      "item": [
        {
          "name": "Lightning",
          "description": "Examples for the lightning method",
          "item": [
            {
              "name": "lightning::channels::close_channel - Channels-Close Channel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::close_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"channel_id\": \"1234567890abcdef\",\n    \"force\": true\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::close_channel method in KDF API V2.\n\nMethod: lightning::channels::close_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::close_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::close_channel - Channels-Close Channel-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::close_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"2b50e274-c173-4fa1-95f3-97f9f82ace92\",\n    \"force_close\": true\n  },\n  \"id\": 8\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::close_channel method in KDF API V2.\n\nMethod: lightning::channels::close_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::close_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::close_channel - Channels-Close Channel-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::close_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"channel_id\": \"1234567890abcdef\",\n    \"force\": true\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::close_channel method in KDF API V2.\n\nMethod: lightning::channels::close_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::close_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::get_channel_details - Channels-Get Channel Details-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_channel_details\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"2b50e274-c173-4fa1-95f3-97f9f82ace92\"\n  },\n  \"id\": 54\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::get_channel_details method in KDF API V2.\n\nMethod: lightning::channels::get_channel_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::get_channel_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::get_channel_details - Channels-Get Channel Details-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_channel_details\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"2b50e274-c173-4fa1-95f3-97f9f82ace92\"\n  },\n  \"id\": 54\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::get_channel_details method in KDF API V2.\n\nMethod: lightning::channels::get_channel_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::get_channel_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::get_channel_details - Channels-Get Channel Details-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_channel_details\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"2b50e274-c173-4fa1-95f3-97f9f82ace92\"\n  },\n  \"id\": 54\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::get_channel_details method in KDF API V2.\n\nMethod: lightning::channels::get_channel_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::get_channel_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Example-10-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"channel_type\": \"Inbound\"\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Example-11-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"counterparty_node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Example-12-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"from_funding_value_sats\": 100000,\n      \"to_funding_value_sats\": 500000\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_closed_channels_by_filter - Channels-List Closed Channels By Filter-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_closed_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_closed_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_closed_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_closed_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Example-10-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"is_outbound\": false\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Example-11-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"counterparty_node_id\": \"02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1\"\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Example-12-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"from_funding_value_sats\": 1000,\n      \"to_funding_value_sats\": 500000\n    }\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::list_open_channels_by_filter - Channels-List Open Channels By Filter-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::list_open_channels_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 55\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::list_open_channels_by_filter method in KDF API V2.\n\nMethod: lightning::channels::list_open_channels_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::list_open_channels_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Exact\",\n      \"value\": 0.004\n    }\n  },\n  \"id\": 22\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Max\"\n    },\n    \"push_msat\": 0,\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 0,\n      \"base_fee_msat\": 1000,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    },\n    \"channel_configs\": {\n      \"counterparty_locktime\": 144,\n      \"our_htlc_minimum_msat\": 1,\n      \"negotiate_scid_privacy\": false,\n      \"max_inbound_in_flight_htlc_percent\": 10,\n      \"commit_upfront_shutdown_pubkey\": true,\n      \"inbound_channels_confirmations\": 3,\n      \"their_channel_reserve_sats\": 10000\n    }\n  },\n  \"id\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Exact\",\n      \"value\": 0.004\n    }\n  },\n  \"id\": 22\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Example-10-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Max\"\n    },\n    \"push_msat\": 0,\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 0,\n      \"base_fee_msat\": 1000,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    },\n    \"channel_configs\": {\n      \"counterparty_locktime\": 144,\n      \"our_htlc_minimum_msat\": 1,\n      \"negotiate_scid_privacy\": false,\n      \"max_inbound_in_flight_htlc_percent\": 10,\n      \"commit_upfront_shutdown_pubkey\": true,\n      \"inbound_channels_confirmations\": 3,\n      \"their_channel_reserve_sats\": 10000\n    }\n  },\n  \"id\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Exact\",\n      \"value\": 0.004\n    }\n  },\n  \"id\": 22\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::open_channel - Channels-Open Channel-Tbtc-Lightning Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::open_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\n    \"amount\": {\n      \"type\": \"Max\"\n    },\n    \"push_msat\": 0,\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 0,\n      \"base_fee_msat\": 1000,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    },\n    \"channel_configs\": {\n      \"counterparty_locktime\": 144,\n      \"our_htlc_minimum_msat\": 1,\n      \"negotiate_scid_privacy\": false,\n      \"max_inbound_in_flight_htlc_percent\": 10,\n      \"commit_upfront_shutdown_pubkey\": true,\n      \"inbound_channels_confirmations\": 3,\n      \"their_channel_reserve_sats\": 10000\n    }\n  },\n  \"id\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::open_channel method in KDF API V2.\n\nMethod: lightning::channels::open_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::open_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::update_channel - Channels-Update Channel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::update_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"434681f8-95e5-484f-af49-fa80d8ae857b\",\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 1,\n      \"base_fee_msat\": 1100,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::update_channel method in KDF API V2.\n\nMethod: lightning::channels::update_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::update_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::update_channel - Channels-Update Channel-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::update_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"434681f8-95e5-484f-af49-fa80d8ae857b\",\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 1,\n      \"base_fee_msat\": 1100,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::update_channel method in KDF API V2.\n\nMethod: lightning::channels::update_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::update_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::channels::update_channel - Channels-Update Channel-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::update_channel\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"uuid\": \"434681f8-95e5-484f-af49-fa80d8ae857b\",\n    \"channel_options\": {\n      \"proportional_fee_in_millionths_sats\": 1,\n      \"base_fee_msat\": 1100,\n      \"cltv_expiry_delta\": 72,\n      \"max_dust_htlc_exposure_msat\": 5000000,\n      \"force_close_avoidance_max_fee_satoshis\": 1000\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::channels::update_channel method in KDF API V2.\n\nMethod: lightning::channels::update_channel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::channels::update_channel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::add_trusted_node - Nodes-Add Trusted Node-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::add_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::add_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::add_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::add_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::add_trusted_node - Nodes-Add Trusted Node-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::add_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::add_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::add_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::add_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::add_trusted_node - Nodes-Add Trusted Node-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::add_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::add_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::add_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::add_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::connect_to_node - Nodes-Connect To Node-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::connect_to_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::connect_to_node method in KDF API V2.\n\nMethod: lightning::nodes::connect_to_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::connect_to_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::connect_to_node - Nodes-Connect To Node-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::connect_to_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::connect_to_node method in KDF API V2.\n\nMethod: lightning::nodes::connect_to_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::connect_to_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::connect_to_node - Nodes-Connect To Node-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::connect_to_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::connect_to_node method in KDF API V2.\n\nMethod: lightning::nodes::connect_to_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::connect_to_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::list_trusted_nodes - Nodes-List Trusted Nodes-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::list_trusted_nodes\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::list_trusted_nodes method in KDF API V2.\n\nMethod: lightning::nodes::list_trusted_nodes\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::list_trusted_nodes",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::list_trusted_nodes - Nodes-List Trusted Nodes-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::list_trusted_nodes\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::list_trusted_nodes method in KDF API V2.\n\nMethod: lightning::nodes::list_trusted_nodes\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::list_trusted_nodes",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::list_trusted_nodes - Nodes-List Trusted Nodes-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::list_trusted_nodes\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::list_trusted_nodes method in KDF API V2.\n\nMethod: lightning::nodes::list_trusted_nodes\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::list_trusted_nodes",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::remove_trusted_node - Nodes-Remove Trusted Node-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::remove_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::remove_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::remove_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::remove_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::remove_trusted_node - Nodes-Remove Trusted Node-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::remove_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::remove_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::remove_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::remove_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::nodes::remove_trusted_node - Nodes-Remove Trusted Node-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::nodes::remove_trusted_node\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"node_id\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::nodes::remove_trusted_node method in KDF API V2.\n\nMethod: lightning::nodes::remove_trusted_node\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::nodes::remove_trusted_node",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::generate_invoice - Payments-Generate Invoice-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::generate_invoice\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"amount\": \"10000\",\n    \"description\": \"Test invoice\"\n  },\n  \"id\": 101\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::generate_invoice method in KDF API V2.\n\nMethod: lightning::payments::generate_invoice\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::generate_invoice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::generate_invoice - Payments-Generate Invoice-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::generate_invoice\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"description\": \"For the burger on Tuesday\",\n    \"amount_in_msat\": 10000,\n    \"expiry\": 600\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::generate_invoice method in KDF API V2.\n\nMethod: lightning::payments::generate_invoice\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::generate_invoice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::generate_invoice - Payments-Generate Invoice-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::generate_invoice\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"amount\": \"10000\",\n    \"description\": \"Test invoice\"\n  },\n  \"id\": 101\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::generate_invoice method in KDF API V2.\n\nMethod: lightning::payments::generate_invoice\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::generate_invoice",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::get_payment_details - Payments-Get Payment Details-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::get_payment_details\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::get_payment_details method in KDF API V2.\n\nMethod: lightning::payments::get_payment_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::get_payment_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::get_payment_details - Payments-Get Payment Details-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::get_payment_details\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::get_payment_details method in KDF API V2.\n\nMethod: lightning::payments::get_payment_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::get_payment_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::get_payment_details - Payments-Get Payment Details-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::get_payment_details\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"payment_hash\": \"414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::get_payment_details method in KDF API V2.\n\nMethod: lightning::payments::get_payment_details\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::get_payment_details",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 104\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"payment_type\": {\n        \"type\": \"Inbound Payment\"\n      }\n    },\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"pending\",\n      \"from_amount_msat\": 10000,\n      \"to_amount_msat\": 40000\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"succeeded\",\n      \"from_timestamp\": 1681948800,\n      \"to_timestamp\": 1682035199\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Example-10-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"payment_type\": {\n        \"type\": \"Inbound Payment\"\n      }\n    },\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Example-11-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"pending\",\n      \"from_amount_msat\": 10000,\n      \"to_amount_msat\": 40000\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Example-12-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"succeeded\",\n      \"from_timestamp\": 1681948800,\n      \"to_timestamp\": 1682035199\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 104\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Tbtc-Lightning Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"payment_type\": {\n        \"type\": \"Inbound Payment\"\n      }\n    },\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Tbtc-Lightning Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"pending\",\n      \"from_amount_msat\": 10000,\n      \"to_amount_msat\": 40000\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::list_payments_by_filter - Payments-List Payments By Filter-Tbtc-Lightning Operation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"lightning::payments::list_payments_by_filter\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"filter\": {\n      \"status\": \"succeeded\",\n      \"from_timestamp\": 1681948800,\n      \"to_timestamp\": 1682035199\n    }\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::list_payments_by_filter method in KDF API V2.\n\nMethod: lightning::payments::list_payments_by_filter\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::list_payments_by_filter",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::send_payment - Payments-Send Payment-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::send_payment\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"invoice\": \"lnbc1...\"\n  },\n  \"id\": 102\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::send_payment method in KDF API V2.\n\nMethod: lightning::payments::send_payment\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::send_payment",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::send_payment - Payments-Send Payment-Example-1-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::send_payment\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"payment\": {\n      \"type\": \"invoice\",\n      \"invoice\": \"lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y\"\n    }\n  },\n  \"id\": 6\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::send_payment method in KDF API V2.\n\nMethod: lightning::payments::send_payment\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::send_payment",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::send_payment - Payments-Send Payment-Example-10-Tbtc-Lightning Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::send_payment\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"payment\": {\n      \"type\": \"keysend\",\n      \"destination\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\",\n      \"amount_in_msat\": 1000,\n      \"expiry\": 24\n    }\n  },\n  \"id\": 6\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::send_payment method in KDF API V2.\n\nMethod: lightning::payments::send_payment\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::send_payment",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "lightning::payments::send_payment - Payments-Send Payment-Tbtc-Lightning Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::payments::send_payment\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"invoice\": \"lnbc1...\"\n  },\n  \"id\": 102\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the lightning::payments::send_payment method in KDF API V2.\n\nMethod: lightning::payments::send_payment\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for lightning::payments::send_payment",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Nft",
      "description": "API methods related to nft",
      "item": [
        {
          "name": "clear_nft_db - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\",\n      \"BSC\"\n    ]\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the clear_nft_db method in KDF API V2.\n\nMethod: clear_nft_db\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for clear_nft_db",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "clear_nft_db - Basic Request-Request-2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"clear_nft_db\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"clear_all\": true\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the clear_nft_db method in KDF API V2.\n\nMethod: clear_nft_db\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for clear_nft_db",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "refresh_nft_metadata - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"refresh_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff\",\n    \"token_id\": \"5\",\n    \"chain\": \"POLYGON\",\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the refresh_nft_metadata method in KDF API V2.\n\nMethod: refresh_nft_metadata\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for refresh_nft_metadata",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "update_nft - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"update_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"BSC\",\n      \"POLYGON\"\n    ],\n    \"komodo_proxy\": false,\n    \"url\": \"https://moralis-proxy.komodo.earth\",\n    \"url_antispam\": \"https://nft.antispam.dragonhound.info\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the update_nft method in KDF API V2.\n\nMethod: update_nft\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for update_nft",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get",
          "description": "Examples for the get method",
          "item": [
            {
              "name": "get_nft_list - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_list\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"BSC\",\n      \"POLYGON\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_nft_list method in KDF API V2.\n\nMethod: get_nft_list\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_nft_list",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_nft_list - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_list\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"BSC\",\n      \"POLYGON\"\n    ],\n    \"limit\": 1,\n    \"page_number\": 2\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_nft_list method in KDF API V2.\n\nMethod: get_nft_list\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_nft_list",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_nft_list - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_list\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"BSC\",\n      \"POLYGON\"\n    ]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_nft_list method in KDF API V2.\n\nMethod: get_nft_list\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_nft_list",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_nft_metadata - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_metadata\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"token_address\": \"0xfd913a305d70a60aac4faac70c739563738e1f81\",\n    \"token_id\": \"214300044414\",\n    \"chain\": \"BSC\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_nft_metadata method in KDF API V2.\n\nMethod: get_nft_metadata\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_nft_metadata",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_nft_transfers - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_nft_transfers\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"chains\": [\n      \"POLYGON\"\n    ],\n    \"max\": true,\n    \"filters\": {\n      \"receive\": true,\n      \"from_date\": 1678233600\n    },\n    \"protect_from_spam\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_nft_transfers method in KDF API V2.\n\nMethod: get_nft_transfers\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_nft_transfers",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Staking",
      "description": "API methods related to staking",
      "item": [
        {
          "name": "add_delegation - Example-1-Tqtum Operation-Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"add_delegation\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"staking_details\": {\n      \"type\": \"Qtum\",\n      \"address\": \"qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE\"\n    }\n  },\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the add_delegation method in KDF API V2.\n\nMethod: add_delegation\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for add_delegation",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_staking_infos - Example-1-Tqtum Operation-Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_staking_infos\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the get_staking_infos method in KDF API V2.\n\nMethod: get_staking_infos\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_staking_infos",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "remove_delegation - Example-1-Tqtum Operation-Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"remove_delegation\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the remove_delegation method in KDF API V2.\n\nMethod: remove_delegation\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for remove_delegation",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Experimental",
          "description": "Examples for the experimental method",
          "item": [
            {
              "name": "experimental::staking::claim_rewards - Staking-Claim Rewards-Iris Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::claim_rewards\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"claiming_details\": {\n      \"type\": \"Cosmos\",\n      \"validator_address\": \"iva1qq93sapmdcx36uz64vvw5gzuevtxsc7lcfxsat\",\n      \"force\": true\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::claim_rewards method in KDF API V2.\n\nMethod: experimental::staking::claim_rewards\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::claim_rewards",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::delegate - Staking-Delegate-Iris Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::delegate\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"staking_details\": {\n      \"type\": \"Cosmos\",\n      \"validator_address\": \"iva1qq93sapmdcx36uz64vvw5gzuevtxsc7lcfxsat\",\n      \"amount\": \"7.77\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::delegate method in KDF API V2.\n\nMethod: experimental::staking::delegate\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::delegate",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::delegate - Staking-Delegate-Tqtum Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::delegate\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"staking_details\": {\n      \"type\": \"Qtum\",\n      \"address\": \"qbgHcqxXYHVJZXHheGpHwLJsB5epDUtWxe\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::delegate method in KDF API V2.\n\nMethod: experimental::staking::delegate\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::delegate",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::delegations - Staking-Query-Delegations-Atom Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::query::delegations\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"info_details\": {\n      \"type\": \"Cosmos\",\n      \"limit\": 20,\n      \"page_number\": 1\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::query::delegations method in KDF API V2.\n\nMethod: experimental::staking::query::delegations\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::query::delegations",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::delegations - Staking-Query-Delegations-Tqtum Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"experimental::staking::query::delegations\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::query::delegations method in KDF API V2.\n\nMethod: experimental::staking::query::delegations\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::query::delegations",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::ongoing_undelegations - Staking-Query-Ongoing Undelegations-Iris Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::query::ongoing_undelegations\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"info_details\": {\n      \"type\": \"Cosmos\",\n      \"limit\": 20,\n      \"page_number\": 1\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::query::ongoing_undelegations method in KDF API V2.\n\nMethod: experimental::staking::query::ongoing_undelegations\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::query::ongoing_undelegations",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::query::validators - Staking-Query-Validators-Iris Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::query::validators\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"info_details\": {\n      \"type\": \"Cosmos\",\n      \"filter_by_status\": \"Bonded\",\n      \"limit\": 20,\n      \"page_number\": 1\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::query::validators method in KDF API V2.\n\nMethod: experimental::staking::query::validators\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::query::validators",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::undelegate - Staking-Undelegate-Iris Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"experimental::staking::undelegate\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"staking_details\": {\n      \"type\": \"Cosmos\",\n      \"validator_address\": \"iaa1ev23fc700js5d7hvtw0785yfayaazpawn8phv4\",\n      \"amount\": \"0.777\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::undelegate method in KDF API V2.\n\nMethod: experimental::staking::undelegate\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::undelegate",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "experimental::staking::undelegate - Staking-Undelegate-Tqtum Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"experimental::staking::undelegate\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the experimental::staking::undelegate method in KDF API V2.\n\nMethod: experimental::staking::undelegate\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for experimental::staking::undelegate",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Task Operations",
      "description": "API methods related to task operations",
      "item": [
        {
          "name": "Task",
          "description": "Examples for the task method",
          "item": [
            {
              "name": "task::create_new_account::cancel - Create New Account-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::cancel method in KDF API V2.\n\nMethod: task::create_new_account::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::cancel - Create New Account-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::cancel method in KDF API V2.\n\nMethod: task::create_new_account::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::init - Create New Account-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_id\": 77,\n    \"scan\": true,\n    \"gap_limit\": 20\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::init method in KDF API V2.\n\nMethod: task::create_new_account::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::init - Create New Account-Init-Example-1-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_id\": 77,\n    \"scan\": true,\n    \"gap_limit\": 20\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::init method in KDF API V2.\n\nMethod: task::create_new_account::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::init - Create New Account-Init-Kmd Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_id\": 77,\n    \"scan\": true,\n    \"gap_limit\": 20\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::init method in KDF API V2.\n\nMethod: task::create_new_account::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::status - Create New Account-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::status\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::status method in KDF API V2.\n\nMethod: task::create_new_account::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::status - Create New Account-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::status\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::status method in KDF API V2.\n\nMethod: task::create_new_account::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::status - Create New Account-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::status\",\n  \"params\": {\n    \"task_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::status method in KDF API V2.\n\nMethod: task::create_new_account::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::user_action - Create New Account-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::user_action method in KDF API V2.\n\nMethod: task::create_new_account::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::create_new_account::user_action - Create New Account-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::create_new_account::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::create_new_account::user_action method in KDF API V2.\n\nMethod: task::create_new_account::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::create_new_account::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::cancel - Init Trezor-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::cancel\",\n  \"params\": {\n    \"task_id\": 0\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::cancel method in KDF API V2.\n\nMethod: task::init_trezor::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::cancel - Init Trezor-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::cancel\",\n  \"params\": {\n    \"task_id\": 0\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::cancel method in KDF API V2.\n\nMethod: task::init_trezor::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::cancel - Init Trezor-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::cancel\",\n  \"params\": {\n    \"task_id\": 0\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::cancel method in KDF API V2.\n\nMethod: task::init_trezor::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::init - Init Trezor-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::init\",\n  \"params\": {}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::init method in KDF API V2.\n\nMethod: task::init_trezor::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::init - Init Trezor-Init-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::init\",\n  \"params\": {\n    \"device_pubkey\": \"066deb87b0d0500ec2e9b85f5314870b03a53517\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::init method in KDF API V2.\n\nMethod: task::init_trezor::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::status - Init Trezor-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::status method in KDF API V2.\n\nMethod: task::init_trezor::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::status - Init Trezor-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::status method in KDF API V2.\n\nMethod: task::init_trezor::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::status - Init Trezor-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::status\",\n  \"params\": {\n    \"task_id\": 0,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::status method in KDF API V2.\n\nMethod: task::init_trezor::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPassphrase\",\n      \"passphrase\": \"breakfast\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Example-10-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPassphrase\",\n      \"passphrase\": \"breakfast\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::init_trezor::user_action - Init Trezor-User Action-Task Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::init_trezor::user_action\",\n  \"params\": {\n    \"task_id\": 0,\n    \"user_action\": {\n      \"action_type\": \"TrezorPassphrase\",\n      \"passphrase\": \"breakfast\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::init_trezor::user_action method in KDF API V2.\n\nMethod: task::init_trezor::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::init_trezor::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Trading",
      "description": "API methods related to trading",
      "item": [
        {
          "name": "active_swaps - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"active_swaps\",\n  \"params\": {\n    \"include_status\": false\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the active_swaps method in KDF API V2.\n\nMethod: active_swaps\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for active_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "active_swaps - Basic Request-Request-2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"active_swaps\",\n  \"params\": {\n    \"include_status\": true\n  },\n  \"id\": 42\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the active_swaps method in KDF API V2.\n\nMethod: active_swaps\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for active_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_swap_transaction_fee_policy - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_swap_transaction_fee_policy\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the get_swap_transaction_fee_policy method in KDF API V2.\n\nMethod: get_swap_transaction_fee_policy\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_swap_transaction_fee_policy",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "get_swap_transaction_fee_policy - Eth Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_swap_transaction_fee_policy\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the get_swap_transaction_fee_policy method in KDF API V2.\n\nMethod: get_swap_transaction_fee_policy\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for get_swap_transaction_fee_policy",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "my_recent_swaps - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_recent_swaps\",\n  \"params\": {\n    \"my_coin\": \"MARTY\",\n    \"other_coin\": \"DOC\",\n    \"from_timestamp\": 1672531200,\n    \"to_timestamp\": 1734067200,\n    \"from_uuid\": \"0a3859ba-0e28-49de-b015-641c050a6409\",\n    \"limit\": 5,\n    \"page_number\": 1\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the my_recent_swaps method in KDF API V2.\n\nMethod: my_recent_swaps\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for my_recent_swaps",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orderbook\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\"\n  },\n  \"id\": 42\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the orderbook method in KDF API V2.\n\nMethod: orderbook\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "orderbook - Dgb Dash Trade-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"orderbook\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\"\n  },\n  \"id\": 42\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the orderbook method in KDF API V2.\n\nMethod: orderbook\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for orderbook",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "recreate_swap_data - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"recreate_swap_data\",\n  \"params\": {\n    \"swap\": {\n      \"type\": \"Taker\",\n      \"uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\",\n      \"my_order_uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\",\n      \"events\": [\n        {\n          \"timestamp\": 1638984440546,\n          \"event\": {\n            \"type\": \"Started\",\n            \"data\": {\n              \"taker_coin\": \"MARTY\",\n              \"maker_coin\": \"DOC\",\n              \"maker\": \"15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n              \"my_persistent_pub\": \"03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd\",\n              \"lock_duration\": 7800,\n              \"maker_amount\": \"0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091\",\n              \"taker_amount\": \"1\",\n              \"maker_payment_confirmations\": 1,\n              \"maker_payment_requires_nota\": false,\n              \"taker_payment_confirmations\": 1,\n              \"taker_payment_requires_nota\": false,\n              \"taker_payment_lock\": 1638992240,\n              \"uuid\": \"f87fa9ce-0820-4675-b85d-db18c7bc9fb4\",\n              \"started_at\": 1638984440,\n              \"maker_payment_wait\": 1638987560,\n              \"maker_coin_start_block\": 1207822,\n              \"taker_coin_start_block\": 1222573,\n              \"fee_to_send_taker_fee\": {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"paid_from_trading_vol\": false\n              },\n              \"taker_payment_trade_fee\": {\n                \"coin\": \"MARTY\",\n                \"amount\": \"0.00001\",\n                \"paid_from_trading_vol\": false\n              },\n              \"maker_payment_spend_trade_fee\": {\n                \"coin\": \"DOC\",\n                \"amount\": \"0.00001\",\n                \"paid_from_trading_vol\": true\n              }\n            }\n          }\n        },\n        {\n          \"timestamp\": 1638984456603,\n          \"event\": {\n            \"type\": \"Negotiated\",\n            \"data\": {\n              \"maker_payment_locktime\": 1639000040,\n              \"maker_pubkey\": \"0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732\",\n              \"secret_hash\": \"4da9e7080175e8e10842e0e161b33cd298cab30b\",\n              \"maker_coin_swap_contract_addr\": null,\n              \"taker_coin_swap_contract_addr\": null\n            }\n          }\n        },\n        {\n          \"timestamp\": 1638984456814,\n          \"event\": {\n            \"type\": \"TakerFeeSent\",\n            \"data\": {\n              \"tx_hex\": \"0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000\",\n              \"tx_hash\": \"fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc\"\n            }\n          }\n        },\n        {\n          \"timestamp\": 1638984457822,\n          \"event\": {\n            \"type\": \"MakerPaymentReceived\",\n            \"data\": {\n              \"tx_hex\": \"0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000\",\n              \"tx_hash\": \"6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d\"\n            }\n          }\n        },\n        {\n          \"timestamp\": 1638984457826,\n          \"event\": {\n            \"type\": \"MakerPaymentWaitConfirmStarted\"\n          }\n        },\n        {\n          \"timestamp\": 1638984503611,\n          \"event\": {\n            \"type\": \"MakerPaymentWaitConfirmFailed\",\n            \"data\": {\n              \"error\": \"An error\"\n            }\n          }\n        },\n        {\n          \"timestamp\": 1638984503615,\n          \"event\": {\n            \"type\": \"Finished\"\n          }\n        }\n      ],\n      \"maker_amount\": \"0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091\",\n      \"maker_coin\": \"DOC\",\n      \"taker_amount\": \"1\",\n      \"taker_coin\": \"MARTY\",\n      \"gui\": \"KomodoWallet 0.5.1 iOS\",\n      \"mm_version\": \"1b065636a\",\n      \"success_events\": [\n        \"Started\",\n        \"Negotiated\",\n        \"TakerFeeSent\",\n        \"MakerPaymentReceived\",\n        \"MakerPaymentWaitConfirmStarted\",\n        \"MakerPaymentValidatedAndConfirmed\",\n        \"TakerPaymentSent\",\n        \"TakerPaymentSpent\",\n        \"MakerPaymentSpent\",\n        \"Finished\"\n      ],\n      \"error_events\": [\n        \"StartFailed\",\n        \"NegotiateFailed\",\n        \"TakerFeeSendFailed\",\n        \"MakerPaymentValidateFailed\",\n        \"MakerPaymentWaitConfirmFailed\",\n        \"TakerPaymentTransactionFailed\",\n        \"TakerPaymentWaitConfirmFailed\",\n        \"TakerPaymentDataSendFailed\",\n        \"TakerPaymentWaitForSpendFailed\",\n        \"MakerPaymentSpendFailed\",\n        \"TakerPaymentWaitRefundStarted\",\n        \"TakerPaymentRefunded\",\n        \"TakerPaymentRefundFailed\"\n      ]\n    }\n  },\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the recreate_swap_data method in KDF API V2.\n\nMethod: recreate_swap_data\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for recreate_swap_data",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_swap_transaction_fee_policy - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"set_swap_transaction_fee_policy\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"swap_tx_fee_policy\": \"High\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the set_swap_transaction_fee_policy method in KDF API V2.\n\nMethod: set_swap_transaction_fee_policy\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_swap_transaction_fee_policy",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "set_swap_transaction_fee_policy - Eth Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"set_swap_transaction_fee_policy\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"swap_tx_fee_policy\": \"High\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the set_swap_transaction_fee_policy method in KDF API V2.\n\nMethod: set_swap_transaction_fee_policy\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for set_swap_transaction_fee_policy",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Best",
          "description": "Examples for the best method",
          "item": [
            {
              "name": "best_orders - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"request_by\": {\n      \"type\": \"number\",\n      \"value\": 100\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"exclude_mine\": true,\n    \"request_by\": {\n      \"type\": \"number\",\n      \"value\": 100\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"request_by\": {\n      \"type\": \"volume\",\n      \"value\": 0.01\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Btc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"request_by\": {\n      \"type\": \"volume\",\n      \"value\": 0.01\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Btc Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"request_by\": {\n      \"type\": \"volume\",\n      \"value\": 0.01\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Dgb Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"request_by\": {\n      \"type\": \"number\",\n      \"value\": 100\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "best_orders - Dgb Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"best_orders\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"action\": \"buy\",\n    \"exclude_mine\": true,\n    \"request_by\": {\n      \"type\": \"number\",\n      \"value\": 100\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the best_orders method in KDF API V2.\n\nMethod: best_orders\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for best_orders",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "1inch",
          "description": "Examples for the 1inch method",
          "item": [
            {
              "name": "1inch_v6_0_classic_swap_create - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_create\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"amount\": 0.1,\n    \"slippage\": 1,\n    \"include_tokens_info\": true,\n    \"include_protocols\": true,\n    \"include_gas\": true,\n    \"fee\": 0,\n    \"complexity_level\": 3,\n    \"gas_limit\": 11500000,\n    \"main_route_parts\": 50,\n    \"parts\": 100,\n    \"protocols\": \"\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_create method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_create\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_create",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "1inch_v6_0_classic_swap_create - Eth Usdc-Erc20 Trade-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_create\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"amount\": 0.1,\n    \"slippage\": 1,\n    \"include_tokens_info\": true,\n    \"include_protocols\": true,\n    \"include_gas\": true,\n    \"fee\": 0,\n    \"complexity_level\": 3,\n    \"gas_limit\": 11500000,\n    \"main_route_parts\": 50,\n    \"parts\": 100,\n    \"protocols\": \"\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_create method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_create\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_create",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "1inch_v6_0_classic_swap_liquidity_sources - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_liquidity_sources\",\n  \"params\": {\n    \"chain_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_liquidity_sources method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_liquidity_sources\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_liquidity_sources",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "1inch_v6_0_classic_swap_quote - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_quote\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"amount\": 0.1,\n    \"include_tokens_info\": true,\n    \"include_protocols\": true,\n    \"include_gas\": true,\n    \"fee\": 0,\n    \"complexity_level\": 3,\n    \"gas_limit\": 11500000,\n    \"main_route_parts\": 50,\n    \"parts\": 100,\n    \"protocols\": \"\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_quote method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_quote\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_quote",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "1inch_v6_0_classic_swap_quote - Eth Usdc-Erc20 Trade-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_quote\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"amount\": 0.1,\n    \"include_tokens_info\": true,\n    \"include_protocols\": true,\n    \"include_gas\": true,\n    \"fee\": 0,\n    \"complexity_level\": 3,\n    \"gas_limit\": 11500000,\n    \"main_route_parts\": 50,\n    \"parts\": 100,\n    \"protocols\": \"\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_quote method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_quote\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_quote",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "1inch_v6_0_classic_swap_tokens - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"1inch_v6_0_classic_swap_tokens\",\n  \"params\": {\n    \"chain_id\": 1\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the 1inch_v6_0_classic_swap_tokens method in KDF API V2.\n\nMethod: 1inch_v6_0_classic_swap_tokens\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for 1inch_v6_0_classic_swap_tokens",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Trade",
          "description": "Examples for the trade method",
          "item": [
            {
              "name": "trade_preimage - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"0.1\",\n    \"swap_method\": \"setprice\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"0.1\",\n    \"swap_method\": \"buy\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"2.21363478\",\n    \"swap_method\": \"sell\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"2.21363478\",\n    \"swap_method\": \"setprice\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Bat Qc Trade-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"2.21363478\",\n    \"swap_method\": \"setprice\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Bat Qc Trade-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"2.21363478\",\n    \"swap_method\": \"setprice\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Btc Doc Trade-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"0.1\",\n    \"swap_method\": \"setprice\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Btc Doc Trade-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"0.1\",\n    \"swap_method\": \"buy\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "trade_preimage - Btc Doc Trade-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"trade_preimage\",\n  \"params\": {\n    \"base\": \"{{base}}\",\n    \"rel\": \"{{rel}}\",\n    \"price\": \"1\",\n    \"volume\": \"2.21363478\",\n    \"swap_method\": \"sell\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the trade_preimage method in KDF API V2.\n\nMethod: trade_preimage\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for trade_preimage",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Utility",
      "description": "API methods related to utility",
      "item": [
        {
          "name": "add_node_to_version_stat - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"add_node_to_version_stat\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"name\": \"seed1\",\n    \"address\": \"168.119.236.241\",\n    \"peer_id\": \"12D3KooWEsuiKcQaBaKEzuMtT6uFjs89P1E8MK3wGRZbeuCbCw6P\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the add_node_to_version_stat method in KDF API V2.\n\nMethod: add_node_to_version_stat\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for add_node_to_version_stat",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "approve_token - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"approve_token\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"spender\": \"0x1234567890123456789\",\n    \"amount\": 1.23\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the approve_token method in KDF API V2.\n\nMethod: approve_token\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for approve_token",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "approve_token - Example-1-Usdt-Erc20 Operation-Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"approve_token\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"spender\": \"0x1234567890123456789\",\n    \"amount\": 1.23\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the approve_token method in KDF API V2.\n\nMethod: approve_token\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for approve_token",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "approve_token - Usdt-Erc20 Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"approve_token\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"spender\": \"0x1234567890123456789\",\n    \"amount\": 1.23\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the approve_token method in KDF API V2.\n\nMethod: approve_token\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for approve_token",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "change_mnemonic_password - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"change_mnemonic_password\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"current_password\": \"old_password123\",\n    \"new_password\": \"new_password456\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the change_mnemonic_password method in KDF API V2.\n\nMethod: change_mnemonic_password\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for change_mnemonic_password",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "max_maker_vol - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"max_maker_vol\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the max_maker_vol method in KDF API V2.\n\nMethod: max_maker_vol\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for max_maker_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "max_maker_vol - Doc Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"max_maker_vol\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the max_maker_vol method in KDF API V2.\n\nMethod: max_maker_vol\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for max_maker_vol",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "peer_connection_healthcheck - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"peer_connection_healthcheck\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"peer_address\": \"12D3KooWCcjBQ3kG3BzjVwuZqGDL2YxXik6SCDv2YAHj4E54NiAy\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the peer_connection_healthcheck method in KDF API V2.\n\nMethod: peer_connection_healthcheck\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for peer_connection_healthcheck",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "remove_node_from_version_stat - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"remove_node_from_version_stat\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"name\": \"dragonhound_DEV\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the remove_node_from_version_stat method in KDF API V2.\n\nMethod: remove_node_from_version_stat\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for remove_node_from_version_stat",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "start_simple_market_maker_bot - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"start_simple_market_maker_bot\",\n  \"params\": {\n    \"price_urls\": [\n      \"https://prices.komodo.live:1313/api/v2/tickers?expire_at=600\",\n      \"https://prices.komodo.earth/api/v2/tickers?expire_at=600\",\n      \"https://prices.komodian.info/api/v2/tickers?expire_at=600\"\n    ],\n    \"bot_refresh_rate\": 60,\n    \"cfg\": {\n      \"DASH/KMD\": {\n        \"base\": \"{{base}}\",\n        \"rel\": \"{{rel}}\",\n        \"max\": true,\n        \"min_volume\": {\n          \"percentage\": \"0.25\"\n        },\n        \"spread\": \"1.025\",\n        \"base_confs\": 3,\n        \"base_nota\": false,\n        \"rel_confs\": 3,\n        \"rel_nota\": false,\n        \"enable\": true,\n        \"price_elapsed_validity\": 30,\n        \"check_last_bidirectional_trade_thresh_hold\": true\n      },\n      \"DASH/DGB\": {\n        \"base\": \"{{base}}\",\n        \"rel\": \"{{rel}}\",\n        \"min_volume\": {\n          \"usd\": \"20\"\n        },\n        \"min_base_price\": \"250\",\n        \"spread\": \"1.04\",\n        \"base_confs\": 1,\n        \"base_nota\": false,\n        \"rel_confs\": 1,\n        \"rel_nota\": false,\n        \"enable\": true,\n        \"price_elapsed_validity\": 60,\n        \"check_last_bidirectional_trade_thresh_hold\": false\n      },\n      \"DASH/LTC\": {\n        \"base\": \"{{base}}\",\n        \"rel\": \"{{rel}}\",\n        \"max_volume\": {\n          \"usd\": \"500\"\n        },\n        \"min_volume\": {\n          \"usd\": \"50\"\n        },\n        \"min_base_price\": \"250\",\n        \"spread\": \"1.04\",\n        \"base_confs\": 1,\n        \"base_nota\": false,\n        \"rel_confs\": 1,\n        \"rel_nota\": false,\n        \"enable\": true,\n        \"price_elapsed_validity\": 60,\n        \"check_last_bidirectional_trade_thresh_hold\": false\n      }\n    }\n  },\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the start_simple_market_maker_bot method in KDF API V2.\n\nMethod: start_simple_market_maker_bot\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for start_simple_market_maker_bot",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "start_version_stat_collection - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"start_version_stat_collection\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"interval\": 600\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the start_version_stat_collection method in KDF API V2.\n\nMethod: start_version_stat_collection\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for start_version_stat_collection",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "stop_simple_market_maker_bot - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"stop_simple_market_maker_bot\",\n  \"params\": {},\n  \"id\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the stop_simple_market_maker_bot method in KDF API V2.\n\nMethod: stop_simple_market_maker_bot\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for stop_simple_market_maker_bot",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "stop_version_stat_collection - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"stop_version_stat_collection\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the stop_version_stat_collection method in KDF API V2.\n\nMethod: stop_version_stat_collection\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for stop_version_stat_collection",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "update_version_stat_collection - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"update_version_stat_collection\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"interval\": 900\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the update_version_stat_collection method in KDF API V2.\n\nMethod: update_version_stat_collection\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for update_version_stat_collection",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "verify_message - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"verify_message\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\",\n    \"signature\": \"H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY=\",\n    \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the verify_message method in KDF API V2.\n\nMethod: verify_message\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for verify_message",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "verify_message - Doc Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"verify_message\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\",\n    \"signature\": \"H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY=\",\n    \"address\": \"RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the verify_message method in KDF API V2.\n\nMethod: verify_message\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for verify_message",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "z_coin_tx_history - Arrr Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"z_coin_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the z_coin_tx_history method in KDF API V2.\n\nMethod: z_coin_tx_history\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for z_coin_tx_history",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "z_coin_tx_history - Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"z_coin_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the z_coin_tx_history method in KDF API V2.\n\nMethod: z_coin_tx_history\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for z_coin_tx_history",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get",
          "description": "Examples for the get method",
          "item": [
            {
              "name": "get_current_mtp - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"get_current_mtp\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 42,\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_current_mtp method in KDF API V2.\n\nMethod: get_current_mtp\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_current_mtp",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_current_mtp - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"get_current_mtp\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 42,\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_current_mtp method in KDF API V2.\n\nMethod: get_current_mtp\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_current_mtp",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_eth_estimated_fee_per_gas\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"estimator_type\": \"Simple\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_eth_estimated_fee_per_gas method in KDF API V2.\n\nMethod: get_eth_estimated_fee_per_gas\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_eth_estimated_fee_per_gas",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_eth_estimated_fee_per_gas\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"estimator_type\": \"Provider\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_eth_estimated_fee_per_gas method in KDF API V2.\n\nMethod: get_eth_estimated_fee_per_gas\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_eth_estimated_fee_per_gas",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Eth Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_eth_estimated_fee_per_gas\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"estimator_type\": \"Simple\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_eth_estimated_fee_per_gas method in KDF API V2.\n\nMethod: get_eth_estimated_fee_per_gas\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_eth_estimated_fee_per_gas",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_eth_estimated_fee_per_gas - Eth Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_eth_estimated_fee_per_gas\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"estimator_type\": \"Provider\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_eth_estimated_fee_per_gas method in KDF API V2.\n\nMethod: get_eth_estimated_fee_per_gas\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_eth_estimated_fee_per_gas",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_locked_amount - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_locked_amount\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 42\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_locked_amount method in KDF API V2.\n\nMethod: get_locked_amount\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_locked_amount",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_locked_amount - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_locked_amount\",\n  \"params\": {\n    \"coin\": \"{{coin}}\"\n  },\n  \"id\": 42\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_locked_amount method in KDF API V2.\n\nMethod: get_locked_amount\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_locked_amount",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_mnemonic - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_mnemonic\",\n  \"params\": {\n    \"format\": \"encrypted\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_mnemonic method in KDF API V2.\n\nMethod: get_mnemonic\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_mnemonic",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_mnemonic - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_mnemonic\",\n  \"params\": {\n    \"format\": \"plaintext\",\n    \"password\": \"Q^wJZg~Ck3.tPW~asnM-WrL\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_mnemonic method in KDF API V2.\n\nMethod: get_mnemonic\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_mnemonic",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_public_key - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_public_key\",\n  \"params\": {},\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_public_key method in KDF API V2.\n\nMethod: get_public_key\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_public_key",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_public_key_hash - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_public_key_hash\",\n  \"params\": {},\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_public_key_hash method in KDF API V2.\n\nMethod: get_public_key_hash\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_public_key_hash",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_raw_transaction - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_raw_transaction\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"tx_hash\": \"989360b0225b4e05fa13643e2e306c8eb5c52fa611615dfd30195089010b1c7b\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_raw_transaction method in KDF API V2.\n\nMethod: get_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_raw_transaction - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_raw_transaction\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"tx_hash\": \"989360b0225b4e05fa13643e2e306c8eb5c52fa611615dfd30195089010b1c7b\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_raw_transaction method in KDF API V2.\n\nMethod: get_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_raw_transaction - Eth Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_raw_transaction\",\n  \"userpass\": \"{{userpass}}\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"tx_hash\": \"0x529aca42b6b592cca5d400832c83854135b924cada6e1c41b85f27fa0a0984b9\"\n  },\n  \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_raw_transaction method in KDF API V2.\n\nMethod: get_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_token_allowance - Aave-Plg20 Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_token_allowance\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_token_allowance method in KDF API V2.\n\nMethod: get_token_allowance\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_token_allowance",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_token_allowance - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"get_token_allowance\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"spender\": \"0x083C32B38e8050473f6999e22f670d1404235592\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_token_allowance method in KDF API V2.\n\nMethod: get_token_allowance\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_token_allowance",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_token_info - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_token_info\",\n  \"params\": {\n    \"protocol\": {\n      \"type\": \"ERC20\",\n      \"protocol_data\": {\n        \"platform\": \"AVAX\",\n        \"contract_address\": \"0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6\"\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_token_info method in KDF API V2.\n\nMethod: get_token_info\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_token_info",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "get_wallet_names - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"get_wallet_names\",\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the get_wallet_names method in KDF API V2.\n\nMethod: get_wallet_names\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for get_wallet_names",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Sign",
          "description": "Examples for the sign method",
          "item": [
            {
              "name": "sign_message - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sign_message\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"derivation_path\": \"m/84'/2'/0'/0/1\"\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"sign_message\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Between subtle shading and the absence of light lies the nuance illusion\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Example-2-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"derivation_path\": \"m/84'/2'/0'/0/1\"\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Example-3-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Kmd Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"derivation_path\": \"m/84'/2'/0'/0/1\"\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_message - Kmd Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_message\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"message\": \"Very little worth knowing is taught by fear.\",\n    \"address\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    }\n  },\n  \"id\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_message method in KDF API V2.\n\nMethod: sign_message\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_message",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\",\n      \"prev_txns\": [\n        {\n          \"tx_hash\": \"36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8\",\n          \"index\": 2,\n          \"script_pub_key\": \"76a914d346067e3c3c3964c395fee208594790e29ede5d88ac\",\n          \"amount\": 1e-05\n        }\n      ]\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"ETH\",\n    \"tx\": {\n      \"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\",\n      \"value\": \"0.85\",\n      \"gas_limit\": \"21000\",\n      \"pay_for_gas\": {\n        \"tx_type\": \"Eip1559\",\n        \"max_fee_per_gas\": \"1234.567\",\n        \"max_priority_fee_per_gas\": \"1.2\"\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Example-1-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Example-2-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\",\n      \"prev_txns\": [\n        {\n          \"tx_hash\": \"36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8\",\n          \"index\": 2,\n          \"script_pub_key\": \"76a914d346067e3c3c3964c395fee208594790e29ede5d88ac\",\n          \"amount\": 1e-05\n        }\n      ]\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Example-3-Matic Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"ETH\",\n    \"tx\": {\n      \"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\",\n      \"value\": \"0.85\",\n      \"gas_limit\": \"21000\",\n      \"pay_for_gas\": {\n        \"tx_type\": \"Eip1559\",\n        \"max_fee_per_gas\": \"1234.567\",\n        \"max_priority_fee_per_gas\": \"1.2\"\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Kmd Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Kmd Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"UTXO\",\n    \"tx\": {\n      \"tx_hex\": \"0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000\",\n      \"prev_txns\": [\n        {\n          \"tx_hash\": \"36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8\",\n          \"index\": 2,\n          \"script_pub_key\": \"76a914d346067e3c3c3964c395fee208594790e29ede5d88ac\",\n          \"amount\": 1e-05\n        }\n      ]\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "sign_raw_transaction - Matic Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"sign_raw_transaction\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"type\": \"ETH\",\n    \"tx\": {\n      \"to\": \"0x927DaFDDa16F1742BeFcBEAE6798090354B294A9\",\n      \"value\": \"0.85\",\n      \"gas_limit\": \"21000\",\n      \"pay_for_gas\": {\n        \"tx_type\": \"Eip1559\",\n        \"max_fee_per_gas\": \"1234.567\",\n        \"max_priority_fee_per_gas\": \"1.2\"\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the sign_raw_transaction method in KDF API V2.\n\nMethod: sign_raw_transaction\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for sign_raw_transaction",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Wc",
          "description": "Examples for the wc method",
          "item": [
            {
              "name": "wc_delete_session - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_delete_session\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"with_pairing_topic\": false,\n    \"topic\": \"008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_delete_session method in KDF API V2.\n\nMethod: wc_delete_session\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_delete_session",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "wc_get_session - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_get_session\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"with_pairing_topic\": true,\n    \"topic\": \"ad2fbcc28d410158431a3dc181d4365462df5cef6c90402b3e415c9d75f7c6f1\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_get_session method in KDF API V2.\n\nMethod: wc_get_session\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_get_session",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "wc_get_session - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_get_session\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"with_pairing_topic\": false,\n    \"topic\": \"008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_get_session method in KDF API V2.\n\nMethod: wc_get_session\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_get_session",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "wc_get_sessions - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_get_sessions\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_get_sessions method in KDF API V2.\n\nMethod: wc_get_sessions\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_get_sessions",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "wc_new_connection - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_new_connection\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"required_namespaces\": {\n      \"eip155\": {\n        \"chains\": [\n          \"eip155:1\",\n          \"eip155:56\",\n          \"eip155:137\",\n          \"eip155:43114\"\n        ],\n        \"methods\": [\n          \"eth_sendTransaction\",\n          \"eth_signTransaction\",\n          \"personal_sign\"\n        ],\n        \"events\": [\n          \"accountsChanged\",\n          \"chainChanged\"\n        ]\n      },\n      \"cosmos\": {\n        \"chains\": [\n          \"cosmos:cosmoshub-4\"\n        ],\n        \"methods\": [\n          \"cosmos_signDirect\",\n          \"cosmos_signAmino\",\n          \"cosmos_getAccounts\"\n        ],\n        \"events\": []\n      }\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_new_connection method in KDF API V2.\n\nMethod: wc_new_connection\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_new_connection",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "wc_ping_session - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"method\": \"wc_ping_session\",\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"topic\": \"008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the wc_ping_session method in KDF API V2.\n\nMethod: wc_ping_session\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for wc_ping_session",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Wallet",
      "description": "API methods related to wallet",
      "item": [
        {
          "name": "lightning::channels::get_claimable_balances - Channels-Get Claimable Balances-Basic Request-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_claimable_balances\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"include_open_channels_balances\": true\n  },\n  \"id\": 762\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the lightning::channels::get_claimable_balances method in KDF API V2.\n\nMethod: lightning::channels::get_claimable_balances\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for lightning::channels::get_claimable_balances",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "lightning::channels::get_claimable_balances - Channels-Get Claimable Balances-Example-1-Tbtc-Lightning Operation-Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_claimable_balances\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"include_open_channels_balances\": true\n  },\n  \"id\": 762\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the lightning::channels::get_claimable_balances method in KDF API V2.\n\nMethod: lightning::channels::get_claimable_balances\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for lightning::channels::get_claimable_balances",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "lightning::channels::get_claimable_balances - Channels-Get Claimable Balances-Tbtc-Lightning Operation-Request-1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"lightning::channels::get_claimable_balances\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"include_open_channels_balances\": true\n  },\n  \"id\": 762\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{kdf_url}}",
              "host": [
                "{{kdf_url}}"
              ]
            },
            "description": "Execute the lightning::channels::get_claimable_balances method in KDF API V2.\n\nMethod: lightning::channels::get_claimable_balances\nOperation: default"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for lightning::channels::get_claimable_balances",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has result\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('result');",
                  "});",
                  "",
                  "pm.test(\"No error in response\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('error');",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Task",
          "description": "Examples for the task method",
          "item": [
            {
              "name": "task::account_balance::cancel - Account Balance-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::cancel\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::cancel method in KDF API V2.\n\nMethod: task::account_balance::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::cancel - Account Balance-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::cancel\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::cancel method in KDF API V2.\n\nMethod: task::account_balance::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::cancel - Account Balance-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::cancel\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::cancel method in KDF API V2.\n\nMethod: task::account_balance::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::init - Account Balance-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_index\": 0\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::init method in KDF API V2.\n\nMethod: task::account_balance::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::init - Account Balance-Init-Coin Name Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_index\": 0\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::init method in KDF API V2.\n\nMethod: task::account_balance::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::status - Account Balance-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::status method in KDF API V2.\n\nMethod: task::account_balance::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::status - Account Balance-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::status method in KDF API V2.\n\nMethod: task::account_balance::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::account_balance::status - Account Balance-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::account_balance::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::account_balance::status method in KDF API V2.\n\nMethod: task::account_balance::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::account_balance::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::cancel - Get New Address-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::cancel method in KDF API V2.\n\nMethod: task::get_new_address::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::cancel - Get New Address-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::cancel method in KDF API V2.\n\nMethod: task::get_new_address::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::cancel - Get New Address-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::cancel method in KDF API V2.\n\nMethod: task::get_new_address::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::init - Get New Address-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_id\": 0,\n    \"chain\": \"External\",\n    \"gap_limit\": 20\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::init method in KDF API V2.\n\nMethod: task::get_new_address::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::init - Get New Address-Init-Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_id\": 0,\n    \"chain\": \"External\",\n    \"gap_limit\": 20\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::init method in KDF API V2.\n\nMethod: task::get_new_address::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::status - Get New Address-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::status method in KDF API V2.\n\nMethod: task::get_new_address::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::status - Get New Address-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::status method in KDF API V2.\n\nMethod: task::get_new_address::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::status - Get New Address-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::status method in KDF API V2.\n\nMethod: task::get_new_address::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::user_action - Get New Address-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::user_action method in KDF API V2.\n\nMethod: task::get_new_address::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::user_action - Get New Address-User Action-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::user_action method in KDF API V2.\n\nMethod: task::get_new_address::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::get_new_address::user_action - Get New Address-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::get_new_address::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::get_new_address::user_action method in KDF API V2.\n\nMethod: task::get_new_address::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::get_new_address::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::cancel - Scan For New Addresses-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::cancel method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::cancel - Scan For New Addresses-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::cancel\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::cancel method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::init - Scan For New Addresses-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_index\": 0,\n    \"gap_limit\": 20\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::init method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::init - Scan For New Addresses-Init-Dgb Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"account_index\": 0,\n    \"gap_limit\": 20\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::init method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::status - Scan For New Addresses-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::status method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::status - Scan For New Addresses-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::status method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::scan_for_new_addresses::status - Scan For New Addresses-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::scan_for_new_addresses::status\",\n  \"params\": {\n    \"task_id\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::scan_for_new_addresses::status method in KDF API V2.\n\nMethod: task::scan_for_new_addresses::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::scan_for_new_addresses::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::cancel - Withdraw-Cancel-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 6\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::cancel method in KDF API V2.\n\nMethod: task::withdraw::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::cancel - Withdraw-Cancel-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 6\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::cancel method in KDF API V2.\n\nMethod: task::withdraw::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::cancel - Withdraw-Cancel-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::cancel\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"task_id\": 6\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::cancel method in KDF API V2.\n\nMethod: task::withdraw::cancel\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::cancel",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"max\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"UtxoFixed\",\n      \"amount\": \"0.001\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"UtxoPerKbyte\",\n      \"amount\": \"0.00097\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"derivation_path\": \"DERIVATION_PATH\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Basic Request-Request-6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": \"ADDRESS_ID\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-10",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"derivation_path\": \"DERIVATION_PATH\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-11",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": \"ADDRESS_ID\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"max\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"UtxoFixed\",\n      \"amount\": \"0.001\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"UtxoPerKbyte\",\n      \"amount\": \"0.00097\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"derivation_path\": \"DERIVATION_PATH\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::init - Withdraw-Init-Coin Name Operation-Request-6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::init\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"ADDRESS_OF_RECIPIENT\",\n    \"amount\": \"AMOUNT_TO_SEND\",\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": \"ADDRESS_ID\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::init method in KDF API V2.\n\nMethod: task::withdraw::init\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::init",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::status - Withdraw-Status-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::status method in KDF API V2.\n\nMethod: task::withdraw::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::status - Withdraw-Status-Example-1-Task Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::status method in KDF API V2.\n\nMethod: task::withdraw::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::status - Withdraw-Status-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"task::withdraw::status\",\n  \"params\": {\n    \"task_id\": 3,\n    \"forget_if_finished\": false\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::status method in KDF API V2.\n\nMethod: task::withdraw::status\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::user_action - Withdraw-User Action-Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::user_action method in KDF API V2.\n\nMethod: task::withdraw::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "task::withdraw::user_action - Withdraw-User Action-Task Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"task::withdraw::user_action\",\n  \"params\": {\n    \"task_id\": 3,\n    \"user_action\": {\n      \"action_type\": \"TrezorPin\",\n      \"pin\": \"862743\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the task::withdraw::user_action method in KDF API V2.\n\nMethod: task::withdraw::user_action\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for task::withdraw::user_action",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Withdraw",
          "description": "Examples for the withdraw method",
          "item": [
            {
              "name": "withdraw - Atom Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\n    \"amount\": 0.1,\n    \"memo\": \"In the blackest of your moments, wait with no fear.\",\n    \"ibc_source_channel\": 141,\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Atom Operation-Request-13",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\n    \"amount\": 0.1,\n    \"memo\": \"In the blackest of your moments, wait with no fear.\",\n    \"ibc_source_channel\": 141,\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\",\n    \"amount\": \"10\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-10",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10,\n    \"fee\": {\n      \"type\": \"Qrc20Gas\",\n      \"gas_limit\": 250000,\n      \"gas_price\": 40\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-11",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29\",\n    \"amount\": 0.1,\n    \"broadcast\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-12",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n    \"amount\": 13,\n    \"memo\": \"It was a bright cold day in April, and the clocks were striking thirteen.\",\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-13",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4\",\n    \"amount\": 0.1,\n    \"memo\": \"In the blackest of your moments, wait with no fear.\",\n    \"ibc_source_channel\": 141,\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"derivation_path\": \"m/44'/141'/0'/0/0\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 2\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoFixed\",\n      \"amount\": \"0.1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoPerKbyte\",\n      \"amount\": \"1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-7",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"EthGas\",\n      \"gas_price\": \"3.5\",\n      \"gas\": 55000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-8",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"max\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Basic Request-Request-9",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Coin Name Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"EthGas\",\n      \"gas_price\": \"3.5\",\n      \"gas\": 55000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Coin Name Operation-Request-7",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RECIPIENT_ADDRESS\",\n    \"amount\": \"AMOUNT\",\n    \"fee\": {\n      \"type\": \"EthGas\",\n      \"gas_price\": \"3.5\",\n      \"gas\": 55000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoPerKbyte\",\n      \"amount\": \"1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Doc Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoFixed\",\n      \"amount\": \"0.1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Doc Operation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoFixed\",\n      \"amount\": \"0.1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Doc Operation-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW\",\n    \"amount\": \"1.0\",\n    \"fee\": {\n      \"type\": \"UtxoPerKbyte\",\n      \"amount\": \"1\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Eth Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"max\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Eth Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Eth Operation-Request-6",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Eth Operation-Request-8",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\n    \"max\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-1-Kmd Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\",\n    \"amount\": \"10\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-10-Qrc20 Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10,\n    \"fee\": {\n      \"type\": \"Qrc20Gas\",\n      \"gas_limit\": 250000,\n      \"gas_price\": 40\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-11-Iris Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n    \"amount\": 13,\n    \"memo\": \"It was a bright cold day in April, and the clocks were striking thirteen.\",\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-2-Mcl Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"derivation_path\": \"m/44'/141'/0'/0/0\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-3-Vrsc Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 2\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Example-9-Qrc20 Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Iris Operation-Request-12",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k\",\n    \"amount\": 13,\n    \"memo\": \"It was a bright cold day in April, and the clocks were striking thirteen.\",\n    \"fee\": {\n      \"type\": \"CosmosGas\",\n      \"gas_price\": 0.05,\n      \"gas_limit\": 150000\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Kmd Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\",\n    \"amount\": \"10\"\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Matic Operation-Request-11",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29\",\n    \"amount\": 0.1,\n    \"broadcast\": true\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Mcl Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"derivation_path\": \"m/44'/141'/0'/0/0\"\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Qrc20 Operation-Request-10",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10,\n    \"fee\": {\n      \"type\": \"Qrc20Gas\",\n      \"gas_limit\": 250000,\n      \"gas_price\": 40\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Qrc20 Operation-Request-9",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mmrpc\": \"2.0\",\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs\",\n    \"amount\": 10\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw - Vrsc Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"withdraw\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\n    \"amount\": 1.025,\n    \"from\": {\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 2\n    }\n  },\n  \"id\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw method in KDF API V2.\n\nMethod: withdraw\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc721\",\n    \"withdraw_data\": {\n      \"chain\": \"POLYGON\",\n      \"to\": \"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\",\n      \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\n      \"token_id\": \"1\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw_nft method in KDF API V2.\n\nMethod: withdraw_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc1155\",\n    \"withdraw_data\": {\n      \"chain\": \"POLYGON\",\n      \"to\": \"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498\",\n      \"token_address\": \"0x73a5299824cd955af6377b56f5762dc3ca4cc078\",\n      \"token_id\": \"1\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw_nft method in KDF API V2.\n\nMethod: withdraw_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "withdraw_nft - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"withdraw_nft\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"type\": \"withdraw_erc1155\",\n    \"withdraw_data\": {\n      \"chain\": \"POLYGON\",\n      \"to\": \"0x27Ad1F808c1ef82626277Ae38998AfA539565660\",\n      \"token_address\": \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\",\n      \"token_id\": \"110473361632261669912565539602449606788298723469812631769659886404530570536720\",\n      \"max\": true\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the withdraw_nft method in KDF API V2.\n\nMethod: withdraw_nft\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for withdraw_nft",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "My",
          "description": "Examples for the my method",
          "item": [
            {
              "name": "my_tx_history - Basic Request-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_tx_history\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 10,\n    \"paging_options\": {\n      \"PageNumber\": 1\n    },\n    \"target\": {\n      \"type\": \"account_id\",\n      \"account_id\": 77\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Basic Request-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_tx_history\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 1,\n    \"paging_options\": {\n      \"PageNumber\": 1\n    },\n    \"target\": {\n      \"type\": \"address_id\",\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Basic Request-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Basic Request-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"FromId\": \"433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Basic Request-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 50\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Bch Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Bch Operation-Request-3",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"PageNumber\": 2\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Bch Operation-Request-4",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"FromId\": \"433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Doc Operation-Request-1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_tx_history\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 10,\n    \"paging_options\": {\n      \"PageNumber\": 1\n    },\n    \"target\": {\n      \"type\": \"account_id\",\n      \"account_id\": 77\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Doc Operation-Request-2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"mmrpc\": \"2.0\",\n  \"method\": \"my_tx_history\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 1,\n    \"paging_options\": {\n      \"PageNumber\": 1\n    },\n    \"target\": {\n      \"type\": \"address_id\",\n      \"account_id\": 0,\n      \"chain\": \"External\",\n      \"address_id\": 1\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Example-4-Ttt-Slp Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 2,\n    \"paging_options\": {\n      \"FromId\": \"433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970\"\n    }\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Example-5-Iris Operation-Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 50\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "my_tx_history - Iris Operation-Request-5",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userpass\": \"{{userpass}}\",\n  \"method\": \"my_tx_history\",\n  \"mmrpc\": \"2.0\",\n  \"params\": {\n    \"coin\": \"{{coin}}\",\n    \"limit\": 50\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{kdf_url}}",
                  "host": [
                    "{{kdf_url}}"
                  ]
                },
                "description": "Execute the my_tx_history method in KDF API V2.\n\nMethod: my_tx_history\nOperation: default"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for my_tx_history",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has result\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('result');",
                      "});",
                      "",
                      "pm.test(\"No error in response\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.not.have.property('error');",
                      "});",
                      "",
                      "pm.test(\"Response time is reasonable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for KDF API",
          "// Set up common variables and validation",
          "",
          "// Ensure required variables are set",
          "if (!pm.collectionVariables.get('kdf_url')) {",
          "    throw new Error('kdf_url collection variable must be set');",
          "}",
          "",
          "if (!pm.collectionVariables.get('userpass')) {",
          "    throw new Error('userpass collection variable must be set');",
          "}",
          "",
          "// Set default timeout",
          "pm.timeout = 30000;"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "kdf_url",
      "value": "http://127.0.0.1:7783",
      "type": "string",
      "description": "Base URL for KDF API"
    },
    {
      "key": "userpass",
      "value": "RPC_UserP@SSW0RD",
      "type": "string",
      "description": "Authentication userpass for KDF API"
    },
    {
      "key": "coin",
      "value": "KMD",
      "type": "string",
      "description": "Default coin for testing"
    },
    {
      "key": "base",
      "value": "KMD",
      "type": "string",
      "description": "Base coin for trading"
    },
    {
      "key": "rel",
      "value": "BTC",
      "type": "string",
      "description": "Related coin for trading"
    },
    {
      "key": "amount",
      "value": "0.1",
      "type": "string",
      "description": "Default amount for transactions"
    },
    {
      "key": "address",
      "value": "",
      "type": "string",
      "description": "Address for testing"
    },
    {
      "key": "fee",
      "value": "0.0001",
      "type": "string",
      "description": "Default fee amount"
    }
  ]
}