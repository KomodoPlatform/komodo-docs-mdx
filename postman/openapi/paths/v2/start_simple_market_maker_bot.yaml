/start_simple_market_maker_bot:
  post:
    operationId: start_simple_market_maker_bot
    summary: Start Simple Market Maker Bot
    description: |
      The Komodo DeFi Framework API allows for simple bot trading via the start_simple_market_maker_bot method. This method takes as input a url to a price service, and configuration parameters of the pair to trade at a defined spread percentage value. It will update orders every 30 seconds (or higher values if defined with the bot_refresh_rate parameter).
      
      Note: If using a custom prices API endpoint, please ensure it conforms to the same schema as the url in the example.
    x-mdx-doc-path: ../../src/pages/komodo-defi-framework/api/v20/swaps_and_orders/start_simple_market_maker_bot/index.mdx
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - method
              - userpass
              - mmrpc
              - params
            properties:
              method:
                type: string
                enum: ["start_simple_market_maker_bot"]
                description: The method name
                example: "start_simple_market_maker_bot"
              userpass:
                type: string
                description: RPC password for authentication
                example: "RPC_UserP@SSW0RD"
              mmrpc:
                type: string
                enum: ["2.0"]
                description: The JSON-RPC version
                example: "2.0"
              id:
                type: integer
                description: Optional. Identifies a request to allow matching it with a response. Defaults to null
                example: 0
              params:
                type: object
                required:
                  - cfg
                properties:
                  price_urls:
                    type: array
                    items:
                      type: string
                    description: Optional. A list of URLs serving price data in JSON format. During each update loop, price data will be sourced from the first working URL in the list. If not defined, a default list will be used
                    example: 
                      - "https://prices.komodo.live:1313/api/v2/tickers?expire_at=600"
                      - "https://prices.komodo.earth/api/v2/tickers?expire_at=600"
                      - "https://prices.komodian.info/api/v2/tickers?expire_at=600"
                  bot_refresh_rate:
                    type: number
                    description: Bot loop interval in seconds (optional, 30 sec default)
                    default: 30
                    example: 60
                  cfg:
                    type: object
                    description: Configuration for trading pairs
                    additionalProperties:
                      type: object
                      properties:
                        base:
                          type: string
                          description: Ticker of the coin you wish to sell
                          example: "DASH"
                        rel:
                          type: string
                          description: Ticker of the coin you wish to buy
                          example: "KMD"
                        max:
                          type: boolean
                          description: Set to true if you would like to trade your whole balance (optional)
                          example: true
                        max_volume:
                          type: object
                          description: Maximum volume configuration
                          properties:
                            percentage:
                              type: string
                              description: Percentage of balance to trade (can not use at same time as max_volume.usd)
                              example: "0.5"
                            usd:
                              type: string
                              description: Maximum USD trade volume value to trade (can not use at same time as max_volume.percentage)
                              example: "500"
                        min_volume:
                          type: object
                          description: Minimum volume configuration
                          properties:
                            percentage:
                              type: string
                              description: Minimum percentage of balance to accept in trade (can not use at same time as min_volume.usd)
                              example: "0.25"
                            usd:
                              type: string
                              description: Minimum USD trade volume of trades accepted for order (can not use at same time as min_volume.percentage)
                              example: "20"
                        min_base_price:
                          type: number
                          description: Minimum USD price of base coin to accept in trade (optional)
                          example: 250
                        min_rel_price:
                          type: number
                          description: Minimum USD price of rel coin to accept in trade (optional)
                        min_pair_price:
                          type: number
                          description: Minimum USD price of pair (base/rel) to accept in trade (optional)
                        spread:
                          type: string
                          description: Target price in relation to prices API value (e.g. 1.05 = 5% over API price)
                          example: "1.025"
                        base_confs:
                          type: integer
                          description: Number of required blockchain confirmations for base coin atomic swap transaction
                          example: 3
                        base_nota:
                          type: boolean
                          description: Whether dPoW notarization is required for base coin atomic swap transaction
                          example: false
                        rel_confs:
                          type: integer
                          description: Number of required blockchain confirmations for rel coin atomic swap transaction
                          example: 3
                        rel_nota:
                          type: boolean
                          description: Whether dPoW notarization is required for rel coin atomic swap transaction
                          example: false
                        enable:
                          type: boolean
                          description: Bot will ignore this config entry if set to false
                          example: true
                        price_elapsed_validity:
                          type: number
                          description: Will cancel current orders for this pair and not submit a new order if last price update time has been longer than this value in seconds (optional; defaults to 5 minutes)
                          example: 30
                        check_last_bidirectional_trade_thresh_hold:
                          type: boolean
                          description: Will readjust the calculated cex price if a precedent trade exists for the pair (or reversed pair), applied via a VWAP logic (optional; defaults to false)
                          example: true
    responses:
      '200':
        description: Bot started successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                mmrpc:
                  type: string
                  description: The JSON-RPC version (should be '2.0')
                  example: "2.0"
                result:
                  type: object
                  properties:
                    result:
                      type: string
                      description: Success confirmation
                      example: "Success"
                id:
                  type: integer
                  description: Identifies a response to allow matching it with a request
                  example: 0
      '400':
        description: Bad request - Bot already started
        content:
          application/json:
            schema:
              type: object
              properties:
                mmrpc:
                  type: string
                  example: "2.0"
                error:
                  type: string
                  description: Error message describing what went wrong
                  example: "The bot is already started"
                error_path:
                  type: string
                  description: Path where the error occurred
                  example: "simple_market_maker"
                error_trace:
                  type: string
                  description: Error trace information
                  example: "simple_market_maker:770]"
                error_type:
                  type: string
                  description: Type of error
                  enum:
                    - "AlreadyStarted"
                id:
                  type: integer
                  example: 0
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties:
                mmrpc:
                  type: string
                  example: "2.0"
                error:
                  type: string
                  description: Error message describing the internal error
                id:
                  type: integer 