/electrum:
  post:
    operationId: electrum
    summary: Electrum Mode Coin Activation
    description: |
      Activates coins in 'lite mode' by connecting to electrum servers. 
      Available for UTXO based coins and QTUM/QRC20 tokens.
      The Komodo DeFi Framework API communicates with external electrum servers to perform transactions and query the blockchain.
    x-mdx-doc-path: ../../src/pages/komodo-defi-framework/api/legacy/coin_activation/index.mdx
    requestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '../../../components/schemas/Common.yaml#/RpcV1Request'
              - type: object
                properties:
                  method:
                    type: string
                    enum: [electrum]
                    description: Method name
                  coin:
                    $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                    description: Ticker of coin to activate
                  servers:
                    type: array
                    description: A list of standard ActivationServers objects
                    items:
                      $ref: ../../components/schemas/Activation.yaml#/ActivationServers
                  mm2:
                    type: integer
                    description: |
                      Required if not set in coins file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. 
                      Accepted values are 0 or 1
                    enum: [0, 1]
                    example: 1
                  min_connected:
                    type: integer
                    description: Optional, defaults to 1. Minimum number of electrum servers to maintain an active connection to
                    default: 1
                    minimum: 1
                    example: 1
                  max_connected:
                    type: integer
                    description: |
                      Optional. Maximum number of electrum servers to maintain an active connection to. 
                      If not set, defaults to all servers in activation request
                    minimum: 1
                    example: 2
                  required_confirmations:
                    type: integer
                    description: |
                      Optional, defaults to 3. Number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap
                    default: 3
                    minimum: 1
                    example: 3
                  requires_notarization:
                    type: boolean
                    description: |
                      Optional, defaults to false. If true, coins protected by Komodo Platform's dPoW security will wait for a notarization before progressing to the next atomic swap transactions step
                    default: false
                    example: false
                  swap_contract_address:
                    type: string
                    pattern: "^0x[a-fA-F0-9]{40}$"
                    description: QRC20 only. Address of etomic swap smart contract
                    example: "0x2f754733acd6d753731c00fee32cb484551cc15d"
                  fallback_swap_contract:
                    type: string
                    pattern: "^0x[a-fA-F0-9]{40}$"
                    description: QRC20 only. Address of backup etomic swap smart contract
                    example: "0x8500AFc0bc5214728082163326C2FF0C73f4a871"
                  utxo_merge_params:
                    $ref: ../../components/schemas/Activation.yaml#/UtxoMergeParams
                required:
                  - coin
                  - servers
    responses:
      '200':
        description: Coin activation successful
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: The address of the user's coin wallet, based on the user's passphrase
                  example: "Lh2zFS66gP5qF1bRxoCXT6bMw8YShjoRry"
                balance:
                  $ref: ../../../components/schemas/Common.yaml#/AmountString
                  description: The amount of coin the user holds in their wallet; does not include unspendable_balance
                unspendable_balance:
                  $ref: ../../../components/schemas/Common.yaml#/AmountString
                  description: The coin balance that is unspendable at the moment (e.g. if the address has immature UTXOs)
                coin:
                  $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                  description: The ticker of the enabled coin
                required_confirmations:
                  type: integer
                  description: The number of transaction confirmations for which the Komodo DeFi Framework API must wait during the atomic swap process
                  minimum: 1
                  example: 3
                mature_confirmations:
                  type: integer
                  description: The number of coinbase transaction confirmations required to become mature; UTXO coins only
                  minimum: 1
                  example: 100
                requires_notarization:
                  type: boolean
                  description: Whether the node must wait for a notarization of the selected coin that is performing the atomic swap transactions; applicable only for coins using Komodo dPoW
                  example: false
                result:
                  type: string
                  description: The result of the request; this value either indicates success, or an error, or another type of failure
                  example: "success"
      '400':
        description: Bad request - Invalid parameters
        content:
          application/json:
            schema:
              $ref: '../../../components/schemas/Common.yaml#/RpcErrorResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../../../components/schemas/Common.yaml#/RpcErrorResponse' 