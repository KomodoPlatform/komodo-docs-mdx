# Stage 1: Build Environment
# This stage installs all system-level dependencies and the Rust toolchain.
# It is cached and only rebuilt when system dependencies change.
FROM docker.io/debian:buster-slim AS build-env

LABEL MAINTAINER="Dragonhound <smk@komodoplatform.com>"

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
    build-essential ca-certificates cmake curl gcc-multilib git gnupg \
    gettext-base libffi-dev libudev-dev python-dev python3 python3-pip \
    sudo unzip wget zip software-properties-common lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Install protoc
RUN PROTOC_VERSION="21.12" && \
    PROTOC_ZIP="protoc-${PROTOC_VERSION}-linux-x86_64.zip" && \
    wget "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP}" && \
    unzip -o "${PROTOC_ZIP}" -d /usr/local && \
    chmod +x /usr/local/bin/protoc && \
    rm -f "${PROTOC_ZIP}"

RUN pip3 install --upgrade pip && pip3 install paramiko

# Install LLVM/Clang 16
RUN curl --output llvm.sh https://apt.llvm.org/llvm.sh && \
    chmod +x llvm.sh && \
    ./llvm.sh 16 && \
    rm ./llvm.sh && \
    ln -s /usr/bin/clang-16 /usr/bin/clang

ENV AR=/usr/bin/llvm-ar-16
ENV CC=/usr/bin/clang-16

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# ---
# Stage 2: KDF Builder
# This stage builds the KDF binary. It uses the build-env and caches dependencies.
FROM build-env AS builder

WORKDIR /app

# Copy the kdf_repo source code from the build context.
COPY ./kdf_repo .

# Build the binary.
# This step is re-run when source code changes, but it benefits from Cargo's
# incremental compilation and the cached build environment from the previous stage.
RUN cargo build --release --features "enable-sia,run-sia-functional-tests"

# ---
# Stage 3: Final runtime image
# This creates a minimal image containing only the compiled binary.
FROM docker.io/debian:buster-slim AS final

ARG RPC_PORT=7783

# Copy the compiled binary from the builder stage
COPY --from=builder /app/target/release/kdf /usr/local/bin/kdf

# Copy and set up the entrypoint script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

EXPOSE ${RPC_PORT}

# Set the entrypoint to run the KDF application.
# It can now also accept other commands, like 'bash'.
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]