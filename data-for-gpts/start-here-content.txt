export const title = "Komodo Platform Overview";
export const description =
  "Komodo Platform: Secure, Scalable, Interoperable, and Adaptable multi-chain architecture for limitless blockchain possibilities.";

import blurIndigoImage from "@/public/images/docs/blur-indigo.png";
import Security_Light from "@/public/images/docs/Security_Light.png";
import Scalability_Light from "@/public/images/docs/Scalability_Light.png";
import Interoperability_Light from "@/public/images/docs/Interoperability_Light.png";
import Adaptability_Light from "@/public/images/docs/Adaptability_Light.png";

# Komodo Platform Overview

After years of innovation and development, Komodo's multi-chain architecture overcomes the challenges faced by other smart-contract platforms.

The philosophy behind Komodo's multi-chain architecture relies on four pillars.

*   Security
*   Scalability
*   Interoperability
*   Adaptability

With these four pillars in place, users of all types will find powerful, customizable solutions that will set your blockchain creativity free.

## Security

### Enjoy the Protection of the Litecoin Hash Rate

"Secure your project with the power of the Litecoin network via Komodo’s delayed proof of work security mechanism. Don’t waste time worrying about attackers."

*   Approximately every half hour, a hash of the developers blockchain is notarized to Litecoin
*   All transactions included in the hash are considered to have achieved finality
*   For the consensus mechanism, arbitrarily choose between a mixture of Proof-of-Work and Proof-of-Stake

## Scalability

### Have a Blockchain All To Yourself. Want More Than One? No Problem

"Developers and their users have a full Smart Chain all to themselves, and can combine any number of Smart Chains together into one cluster."

*   Developers and their users can securely own a full Smart Chain
*   Each Smart Chain is completely autonomous
*   If your project grows beyond the capacity of a single chain, simply add more
*   Scale your maximum transaction-per-second throughput into the millions, if desired
*   No gas fees. All transaction fees are paid in your Smart Chain’s coin

## Interoperability

### Link Your Smart Chain to Other Chains

"Your project is interoperable with all others in the Komodo ecosystem, plus connected with over 99% of coins and tokens through Komodo’s industry-leading atomic-swap technology."

*   Komodo’s Multi-Chain Syncing feature allows you to scale out linearly on demand
*   Smart Chains can verify and update local state based on the activity of compatible Smart Chains
*   Transfer assets and tokens between compatible Smart Chains
*   Use Komodo's atomic-swap DEX software to trade your Smart Chain assets with Non-Smart assets.

## Adaptability

### Develop Your Smart Chain at Will

"Adapt your blockchain to create a purpose-built solution that fits your individual needs. Receive all new features developed by Komodo to ensure your project is future-proofed."

*   Twenty-four different launch parameters are available to customize the functionality of your Smart Chain
*   Rely on the Antara framework to fully customize your Smart Chain with unique and arbitrary code within the consensus mechanism
*   Share and adopt code in Komodo's open-source community
*   Dispose of Smart Chains that become data-weight heavy, or transfer them to fresh Smart Chains for ease of use
*   No need for a virtual machine (VM) nor a VM-based programming language

### Together, the Komodo Platform is Unlike Anything Else

With the Komodo architecture at your command, you are prepared to lift your Smart Chain software to levels never before seen in the blockchain industry. And, the innovation of the [Komodo SDK](/start-here/core-technology-discussions/komodo-sdk/) makes connecting to the wider crrypto ecosystem a breeze, offering crooss-chain/cross-protocol DEX capabilities and non-custodial wallet solutions [with just a few lines of config](https://github.com/KomodoPlatform/coins).

### Komodo's White-Label Software Brings Your Innovation to Market Faster

The Komodo Platform offers many free white-label applications that can help you bring your innovation to market faster.

*   Atomic-Swap powered Decentralized Exchange & Multi-Asset Wallet
*   Decentralized-Crowdfunding App
*   Custom Block Explorers
*   SPV Electrum Server Integration
*   Core Antara Modules

### Installing, Using, and Testing Komodo Software is Free

The best way to learn about Komodo is to use it for yourself.
export const title = "Introduction to Smart Chain Documentation";
export const description = "Get oriented in the Komodo Smart Chain technical documentation, designed for developers in the ecosystem. Prerequisite knowledge and compatibility details explained.";

# Documentation Orientation

The following section answers common questions a newcomer may have, and prepares the new reader for the installation procedure.

## Intended Audience of this Technical Documentation Website

This website is targeted for developers in the Komodo ecosystem.

Users who are not interested in developing Komodo-based software, but only in using existing software, should instead turn to the [support section of the Komodo forum](https://forum.komodoplatform.com/tags/c/support/guides/16/collections) for questions and answers.

## Assumptions for this Documentation

To limit the scope of what we cover on the technical-documentation website, we list the following prerequisite knowledge.

### Familiarity with the Concept of Blockchain Technology

The reader should be generally familiar with the basic concept of blockchain technology and why it matters. If you're not yet familiar, we recommend that you first read our Core Technology Discussion regarding our Delayed Proof of Work consensus mechanism.

[Link to Core Technology Discussion: Delayed Proof of Work](/start-here/core-technology-discussions/delayed-proof-of-work/)

### Simple Programming Skills

Much of the content on this site will be more understandable for the reader who has a rudimentary understanding of a mainstream programming language.

Beginner-level knowledge should be sufficient for the majority of the site. For example, the reader should be able to:

*   Execute commands on the command line
*   Utilize an Application Programming Interface (API)
*   Write and execute a rudimentary script in any mainstream language

If you do not have these prerequisite experiences, we encourage you to reach out to our community on [Discord.](https://komodoplatform.com/discord) There are thousands of free tutorials online that can help you quickly cover these topics. We will be happy to help you in your search.

## A Note Regarding Komodo Language Compatibility

Komodo is a highly capable blockchain technology, and it is designed for compatibility with essentially all mainstream programming languages. However, not all developers will need to use its most advanced aspects.

### A Normal Developer in the Komodo Ecosystem

A typical developer in the Komodo ecosystem will build all their application logic in a separate application that runs outside of their Smart Chain daemon.

The developer's software will send API requests to their Smart Chain's daemon to update the blockchain state and take advantage of Komodo's default Antara Modules. (Antara Modules provide functionality similar to the "smart contracts" that are common on other platforms. However, we argue that Antara Modules are dramatically more powerful.)

For this developer, any programming language that is capable of sending API requests to the software daemon is compatible.

### An Advanced Antara Developer

A highly advanced developer may be interested to take advantage of the full potential of Komodo technology.

This developer can utilize Komodo's Antara Framework to add arbitrary code to the consensus mechanism of their autonomous Smart Chain.

Although the Antara Framework can be compatible with essentially all mainstream programming languages, at this time we encourage developers to stay close to the C/C++ languages.

## The Cost of a Smart Chain

### Installation and Testing is Free

Creating and experimenting with Komodo Smart Chains is completely free. Even for Production Smart Chains, hardware needed to run the Smart Chains and the other essential associated infrastructure like Electrum servers, Explorers is the only expense if you are doing everything by yourself.

### Production Smart Chains Typically Require Komodo Security Services

If your Smart Chain is pure PoW based and doesn't include greater than 50% [PoS](/antara/setup/antara-customizations/#ac-staked) based block generation, it is only truly secure once it receives the Komodo dPoW Security Service.

Please reach out to our bizdev team for a cost quote on our [Discord](https://komodoplatform.com/discord) live-chat server. Their usernames are:

*   `ptyx#6840`
*   `polycryptoblog#1173`

## The Cost of Using Komodo DeFi Framework Software

Currently, there are no additional costs for Komodo DeFi Framework beyond the fees listed for each trade.

## Differences between KMD and a Smart Chain

The main KMD blockchain runs on the same underlying framework as all Smart Chains in the ecosystem, but not all features are active on the KMD blockchain.

The KMD chain's active features include Bitcoin-hash rate supported security and the ability to execute Antara Modules. Other features, such as zero-knowledge privacy, are disabled.

This limitation is intentional. The KMD chain holds all the meta data of the ecosystem. By keeping the functionality limited, Komodo discourages rapid data growth on this central blockchain.

All other Smart Chains in the ecosystem are fully customizable.

## Licensing Information

All technical-documentation content on this website can be considered to be available under the MIT standard license. Some of the content, including many of the remote procedure call (RPC) documentation that relates to upstream software, such as Bitcoin and Zcash, is derived from upstream documentation that is also freely available.

For questions and inquiries about licensing information, please reach out to the Komodo team.
export const title = "Product Introductions";
export const description =
  "Explore Smart Chains, Antara framework, and Komodo DeFi Framework for customizable blockchains and seamless asset trading.";

import komodoLayer1 from "@/public/images/docs/start-here-images/Komodo-layers-1.png";
import komodoLayer2 from "@/public/images/docs/start-here-images/Komodo-layers-2.png";
import komodoLayer3 from "@/public/images/docs/start-here-images/Komodo-layers-3.png";
import komodoLayer4 from "@/public/images/docs/start-here-images/Komodo-layers-4.png";
import komodoLayer5 from "@/public/images/docs/start-here-images/Komodo-layers-5.png";

# Product Introductions

## Komodo DeFi Framework

Komodo provides open-source atomic-swap software for trading seamlessly between essentially any blockchain asset in existence.

{/* TODO: get an updated video <iframe width="100%" height="315" src="https://www.youtube.com/embed/PeavTHz8LSA" frameBorder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowFullScreen /> */}

### Enjoy All the Benefits of the Old System, and of the New

Everything that was possible in the old centralized-exchange system is also possible in the new atomic-swap system.

High-speed trading is easy, the DEX API allows you to create atomic-swap powered apps and trading bots, and you can even trade on your mobile phone.

Our DEX software is not bound to Komodo-based blockchain assets. If a blockchain asset can trade on a centralized exchange, odds are you can atomically swap this asset on our DEX software.

### Skip the Centralized Middleman and Trade Directly with Your Trading Partner

In an atomic swap, there is no need to lend your money to a third party for temporary holding. This keeps security in the hands of the user, reduces the cost of fees, and prevents the users from coalescing their funds into a large target for hackers.

### Keep Your Private Keys Private, At All Times

Unlike a centralized exchange, users maintain ownership over their blockchain assets at all times, right up until the moment when their assets are atomically swapped.

### Join the Crowd, or Start a New One

Users create their own oders for trading between assets. You can fill an already exisitng order, or create a new one if you don't like the price.

### No Manual Interventions Required

The Komodo software uses atomic-swap technology, pioneered by Tier Nolan and our very own JL777, to ensure that a trade either happens, or it doesn't. If a trade stalls or fails halfway through the process, blockchain software ensures that these funds automatically reappear in the users' wallets.

### Integrate Your Coin/Token/Smart-Chain Asset with Our Software

Integration requires only a few simple steps, and once up and running, you are free to trade your new blockchain-based asset with whomever you decide.

You are free to discover your own audience.

[Read an in-depth discussion about Komodo DeFi Framework here.](/komodo-defi-framework/tutorials/#why-is-komodo-de-fi-framework-special)

## Antara Smart Chains

Komodo's Smart Chain technology allows you to create secure and fully autonomous blockchains that are designed for a specific purpose.

### Smart Chains Rely on the Next Step in Blockchain Evolution: The Antara Framework

The Antara framework allows you to customize your Smart Chain and add arbitrary code to the consensus mechanism.
This blockchain evolution allows innovators to better meet the demands of your customers.

### Comparing a Smart Chain to a Smart-Contract Platform

| Layer             | Branded Terminology | Universally Defined As: | Smart-Contract Comparison |
| ----------------- | ------------------- | ----------------------- | ------------------------- |
| Application Layer | Antara Apps         | Smart-Chain Apps        | dApps                     |
| API Layer         | Antara API          | Smart-Chain API         | -                         |
| Service Layer     | Antara Module       | Smart-Chain Module      | Smart Contract            |
| Blockchain Layer  | Antara Smart Chains | Smart Chains            | (Shared Chain)            |
| Platform Layer    | Komodo Platform     | Smart-Chain Platform    | Smart-Contract Platform   |

### Smart Chains and Antara Create a Convenient Development Workflow

For developers, the unique combination of Smart Chain technology and Antara simplifies the adoption of blockchain technology.

*   Start by creating a new Smart Chain that will serve your specific application
*   Use the library of existing Antara modules to craft application-specific functionality
*   Optionally, use Antara to add arbitrary code to your consensus mechanism
*   When your Smart Chain becomes popular, scale into a cluster of Smart Chains
*   Link your Smart Chain to other Smart Chains using Antara and Komodo technology
*   Trade your assets with essentially any blockchain token using Komodo DeFi Framework
*   Stay up-to-date with the latest industry innovations through no-cost updates

[Read an in-depth discussion on the advantages of the Antara Framework here.](/antara/tutorials/overview-of-antara-modules-part-i/)

## The Architecture of Antara-Powered Smart Chains

### Antara API

### Produced by Antara Modules

\- Open API
\- Permissionless Innovation
\- Language Agnostic

### Antara Modules

### Attached to the chain daemon.

\- Pluggable Modules
\- Growing Module Library
\- Build Your Own

### Antara Smart Chains

### Purpose-built blockchains

\- Autonomous & Sovereign
\- Customizable Parameters
\- Atomic Swap Compatible

### Komodo Platform

### Composable & Open

\- Connect to the Bitcoin Hash Rate
\- Composable Architecture
\- Open-Source Innovation

## Advantages of the Antara Framework

### Programmable Daemon

Arbitrary code is added directly into the blockchain daemon. This stands apart from the traditional smart-contract platforms, which abstract a smart contract on top of a virtual machine.

### Modular Design

Smart Chains are composed of independent and autonomous modules that are decoupled from the underlying blockchain consensus mechanism.

### Autonomous & Sovereign

Smart Chains are not child chains, nor are they dependent on other blockchains.

### Turing-Complete

The Antara framework supports C/C++, and in the future it will also support other languages. Therefore, Antara allows for Turing-complete code. With Antara, any program or software can be coded to run within your blockchain daemon.

### No Gas Fees

There are no gas fees with Antara. Regardless of how many processes an Antara module requires, running an instance of the module will only need a single transaction fee, paid in your blockchain’s coin.

### Antara Module Library

The Antara framework already hosts a library of plug-and-play modules. Each module can add special conditions that affect the nature of transaction consensus on your Smart Chain.

### Create Your Own Modules

Experienced developers can write custom modules, creating the building blocks and RPC calls they need to build more advanced blockchain-based software.

[Learn more about Smart Chains here.](/start-here/core-technology-discussions/antara/#antara-smart-chains-2)
export const title = "Simple Installations";
export const description =
  "Install Komodo Smart Chain and Komodo DeFi Framework software effortlessly with pre-compiled binaries or Docker images.";

# Simple Installations

## Smart Chain Installation

To install the Komodo daemon, `komodod`, and its necessary counterpart, `komodo-cli`, the simplest method is to download pre-compiled binaries.

Downloadable packages are available for Linux, MacOS, and Windows.

### Link to Download Software

[Download and unzip the software files for your operating system..](https://github.com/KomodoPlatform/komodo/releases)

### Installing the Simple Downloadable Files

Once unzipped, the executables do not require installation. Simply find `komodod` and `komodo-cli` in the directory where you unzipped the files.

You may also build `komodod` and `komodo-cli` from source. This is not required, but it is considered the best practice. Building from source enables you to receive the latest patches and security upgrades the moment they are pushed to the `komodod` source.

### Using the official Docker image

Komodo offers a Docker image that has pre-built versions of the Komodo software. The image is based on the Ubuntu operating system and offers different versions of the software that are built from different Komodo Github repositories, such as the `dev`, `beta`, and `research` branches.

The Docker image can be found here: [https://hub.docker.com/r/komodoofficial/komodo](https://hub.docker.com/r/komodoofficial/komodo).

An example of how the image can be used is available in this [github repository](https://github.com/tonymorony/komodo_docker_tests).

### See the Smart Chains Documentation for Further Details

Please see the full [Smart Chains](/smart-chains/) technical documentation for full software explanations. You will find [a walkthrough on building from source here.](/smart-chains/setup/installing-from-source/)

## Komodo DeFi Framework Installation

### Installing Komodo DeFi Framework Software

The following links contain downloadable Komodo DeFi Framework software. Simply download the files appropriate for your operating system, extract them to your desired location, and double click the application to begin. [Link to Komodo DeFi Framework Software - Simple Installations](https://github.com/KomodoPlatform/komodo-defi-framework/releases)

### Using the official Docker image

Komodo offers a Docker image that features the Komodo DeFi Framework software. This Docker image is based on the Ubuntu (Linux) operating system.

The image can be found here: [https://hub.docker.com/r/komodoofficial/komodo-defi-framework](https://hub.docker.com/r/komodoofficial/komodo-defi-framework).

An explanation of how the image can be used is available in the "Overview" section of the above linked webpage.

### Additional Komodo DeFi Framework Documentation

Please see the following links for further details regarding Komodo DeFi Framework software.

[Link to Source Code Installation Methods](/komodo-defi-framework/setup/)

[Link to Komodo DeFi Framework API](/komodo-defi-framework/api/)
export const title = "The Antara Framework";
export const description = "Antara is an adaptable framework for end-to-end blockchain development.";

# The Antara Framework

## Introduction

Antara is an adaptable framework for end-to-end blockchain development. This framework allows developers to build blockchain-based applications in a more simple, quick, and less resource intensive manner than ever before. The framework reduces the barriers to adopting blockchain technology and opens up a universe of possibilities.

### The Three Layers of the Antara Framework

There are three layers to Komodo’s Antara Framework.

#### Generating Customizable Smart Chains

The first layer allows for the generation of a customized, independent chain called a Smart Chain.

#### Core-Level Antara Modules

Modules are inserted into the consensus mechanism of a Smart Chain that allow the developer to change the nature of the chain.

#### Antara Application Programmable Interface

The third layer is the technology that integrates a Komodo Smart chain with other software. This includes an open API for language-agnostic, blockchain-based application development, an atomic-swap powered DEX, and more.

### Antara Smart Chains

Chains launched with Antara are not ordinary blockchains. They’re “Smart Chains.” They’re smart because they’re customizable, completely independent, scalable, and modular.

Smart Chains are customizable along 18 different parameters, allowing for customization of block time, block rewards, consensus rules, algorithms, privacy settings, and much more.

Smart Chains are also infinitely scalable, as multiple Smart Chains can be clustered together to function as one. Moreover, each Smart Chain comes with built-in modules that accelerate development. This leads us to the second layer of the Antara Framework.

### Antara Modules

Each Smart Chain comes with a library of powerful modules built-in. These modules include features like tokens, oracles, stablecoins, quantum security, lightning payments, and more.

Antara Modules are activated prior to launch to meet the unique needs of every project that builds with Komodo’s Antara Framework. They provide an enormous boost in performance and drastically reduce the workload for a new project, ultimately leading to a faster product launch.

Advanced developers can optionally program new modules, giving the developer complete freedom over their Smart Chain's behavior.

### Antara Integration Layer

The third layer of the Antara Framework is the Integration Layer. The Integration Layer offers a series of white-label products, including a multi-coin wallet, a fully decentralized exchange, a decentralized crowdfunding application, custom block explorers, and SPV server integration.

The Antara Integration Layer also provides an open API that can be used to write blockchain-based applications and software in any programming language. All custom-built apps and software run natively and at the consensus level of each individual Smart Chain.

## Antara Smart Chains

Antara Smart Chains are completely independent and sovereign.

Each Smart Chain has its own consensus rules, decentralized network, and currency. The consensus rules are decided prior to launch and the network validates transactions and blocks according to those rules. Transaction fees are always paid in each Smart Chain’s coin, not in the Komodo Platform’s native currency. Smart Chains never pay any gas fees to the platform.

While multi-chain platforms are on the rise, many of Komodo’s competitors do not offer true sovereignty. The chains offered on other prominent multi-chain platforms are “child chains” or “side chains." Those types of chains are almost always forced to rely upon the platform’s parent chain in some way.

Antara Smart Chains never depend on the Komodo Platform, the Komodo blockchain, or the KMD coin. Komodo believes that this open model is the only way to create an ecosystem in which blockchain startups can thrive. Further, a forced dependence on the Komodo blockchain or the KMD coin may provide short-term demand but is sure to be self-defeating in the long run.

In addition, Smart Chains can also choose to participate in delayed Proof of Work (dPoW) security and Platform Synchronizations to enable interoperability and scalability features.

Antara Smart Chains are customizable along 18 different parameters, offering hundreds of billions of different configurations to all projects that build with Komodo’s Antara Framework.

| Customization             | Description                                                                       |
| ------------------------- | --------------------------------------------------------------------------------- |
| Name                      | the name of the Smart Chain and the ticker symbol for the chain’s coin            |
| Block Time                | the number of seconds that elapse between block generation                        |
| Consensus Rules           | Proof of Work (PoW) or Proof of Stake (PoS) or a combination                      |
| PoS Implementation        | VerusPoS rules or PoS64 rules                                                     |
| PoW Hashing Algorithm     | Equihash or VerusHash                                                             |
| Privacy Settings          | mandatory privacy, optional privacy, or complete transparency                     |
| Interoperability Settings | choose which chains your Smart Chain will communicate with                        |
| Pre-Mine Supply           | the number of coins mined in the first block of the Smart Chain                   |
| Block Rewards             | the number of coins awarded to a miner or staker for finding a block              |
| Reward Reductions         | the number of blocks between reductions in block rewards                          |
| Block Reward Decay        | percentage by which block rewards decline at each reduction                       |
| Reward Eras               | an optional feature to fully customize a chain’s coin emission schedule           |
| Time Locking              | the option to make block rewards frozen for a set number of blocks                |
| Taxation                  | an optional, inflationary feature that generates a small tax for all transactions |
| Founder’s Bonus           | optional feature that makes periodic payouts to the chain’s founder               |
| Pubkey                    | designate the address to which pre-mine supply, tax, and bonuses are paid         |
| Multi-Signature           | the option to designate a multi-sig address to receive pub key payouts            |
| Antara Modules            | choose which Antara Modules that you would like to activate                       |

## Antara Modules

Antara Modules act as the foundation upon which advanced blockchain-based applications and software can be built. They offer an enormous level of functionality and cut down on the amount of time a new blockchain project needs to spend on development before going to market.

As they run natively on every individual Smart Chain, Antara Modules are faster and more secure than traditional smart contracts. They also run at the consensus level, meaning every module is verified by every node in the network upon each use.

In addition, Antara Modules are written in the C and C++ programming languages so they are Turing complete and can be coded to perform any functions that any existing software performs.

Significantly, Antara Modules do not require any gas fees. Instead, a single use of a module requires just one ordinary transaction fee, which is always paid in each respective Smart Chain’s coin. This makes it far more practical and profitable to build and run a complex blockchain-based applications on Komodo than on any other multi-chain platform in existence.

All Smart Chains come with a library of powerful, built-in modules to choose from.

| Module                | Description                                                              |
| --------------------- | ------------------------------------------------------------------------ |
| Tokens                | create tokens (fungible or non-fungible) on your own Smart Chain         |
| Oracles               | use an aggregated data oracles solution to bring off-chain data on chain |
| Proxy Token DEX       | trade tokenized representations of foreign blockchain assets             |
| Instant Micropayments | a channel for secure and instant micropayments                           |
| Funds Recovery        | allow users to designate a backup address to safeguard funds             |
| Stablecoins           | an algorithmic stablecoin solution with optional digital asset backing   |
| Trustless Price Feeds | bring price data on-chain in a trustless, decentralized manner           |
| Rewards               | give users the option to earn rewards by locking coins for a set time    |
| Quantum Security      | make all transactions on your Smart Chain quantum secure                 |
| MuSig Payments        | enable private, fast, low-data multi-signature payments                  |
| Faucet                | an automated crypto faucet feature with built-in spam prevention         |

The option to code custom modules is also available to all Smart Chain projects. While coding custom modules is an advanced development task, it offers an unparalleled degree of flexibility and customization. Any processes imaginable can be coded into an Antara Module, which will then run natively and at the consensus level of a project’s Smart Chain.

## Antara Integration Layer

The third and final layer of Komodo’s Antara Framework is the Integration Layer, which consists of an open API and a selection of white-label applications to accelerate development.

Each Antara Module activated on a Smart Chain provides a number of remote procedure calls (RPC). Each individual call executes a different process and offers a unique functionality. Together, these RPCs from all of the the Antara Modules make up the open API.

The Antara open API is language agnostic so developers can use it to code blockchain-based applications in the programming language of their choosing. This makes Komodo’s Antara Framework the fastest, easiest, and most cost effective way to adopt blockchain technology.
export const title = "Delayed Proof of Work";
export const description =
  "Komodo’s form of providing security is called Delayed Proof of Work (dPoW). It builds on the most advanced form of blockchain security in existence.";

# Delayed Proof of Work

## A Foundational Discussion of Blockchain Security

Komodo’s form of providing security is called Delayed Proof of Work (dPoW). This security method builds on the most advanced form of blockchain security in existence, Proof of Work (PoW). The latter form of security is the method utilized by most of the secure PoW networks out there like the Bitcoin/Litecoin networks.

To understand the value of Komodo’s dPoW security, we must first explain how PoW works and why it is the most secure method of maintaining a decentralized blockchain. We must also examine PoW’s shortcomings, so that we may understand the need for Komodo’s dPoW method and the advantages it provides to the blockchain community.

To understand how PoW technology functions, we begin by explaining the roots that make the Bitcoin/Litecoin protocol a viable means of securely transferring value.

## What Is A Consensus Mechanism?

### The "Double Spend" Problem

The creation of blockchain technology stems from the early mathematical studies of encryption using computer technology.

One such example is related to the information-encoding device, "Enigma," invented by the Germans at the end of World War I. Alan Turing, a British Intelligence agent, famously beat the Enigma device by inventing the world’s first "digital computer." This provided enough computing power to break [Enigma’s](https://en.wikipedia.org/wiki/Enigma_machine) encryption and discover German secret communications.

This early affair with encryption set off a race throughout the world to develop myriad forms of securely transferring information from one party to another via computer technology. While each new form of computer encryption provided more advantages, there remained one problem that prevented encryption from being useful as a means of transferring not just information, but also financial value.

This challenge is known as the "Double Spend" problem. The issue lies in the ability of computers to endlessly duplicate information. In the case of financial value, there are three important things to record: who owns a specific value; the time at which the person owns this value; the wallet address in which the value resides. When transferring financial value from one person to another, it is essential that if Person A sends money to Person B, Person A should not be able to duplicate the same money and send it again to Person C.

The [Bitcoin protocol](https://en.wikipedia.org/wiki/Bitcoin_network), invented by an anonymous person (or persons) claiming the name of Satoshi Nakamoto, solved the Double Spend problem. The underlying math and computer code is both highly complex and innovative. For the purposes of this paper we need only focus on the one aspect of the Bitcoin protocol that solves the Double Spend problem: the consensus mechanism.

### The Consensus Mechanism Provides Security Against a "Double Spend"

The consensus mechanism created by Nakamoto is perhaps one of the most powerful innovations of the twenty-first century. His invention allows individual devices to work together, using high levels of encryption, to securely and accurately track ownership of digital value (be it financial resources, digital real estate, etc.). The mechanism performs this in a manner that does not allow anyone on the same network (i.e. the Internet) to spend the same value twice.

Let us suppose a user, Alice, indicates in her digital wallet that she wants to send cryptocurrency money to a friend. Alice’s computer now gathers several pieces of information, including any necessary permissions and passwords, the amount that Alice wants to spend, and the receiving address of her friend’s wallet. All this information is gathered into a packet of data, called a "transaction," and Alice’s device sends the transaction to the Internet.

There are several types of devices that will interact with Alice’s transaction. These devices will share the transaction information with other devices supporting the cryptocurrency network. For this discussion, we need only focus on one type of device: a cryptocurrency miner.

The following descriptions are simplified explanations of a truly complex
process. There are many other strategies cryptocurrency miners devise to
out-mine their competition, and those strategies can vary widely.

### A Miner Competes to Add Blocks to the Network’s History, in Exchange for a Reward

#### Step One: Preparing the Preliminary Information

This device is performing an activity called cryptocurrency "mining." Let us focus now on a mining device that captures Alice’s raw transaction data. This device is owned by a tech-savvy miner, named Bob, who wants to add Alice’s transaction to the permanent history of the Bitcoin network.

If Bob is the first person to properly process Alice’s transaction he will receive a financial reward. One key part of this reward is a percentage-based fee, taken from Alice’s total transaction amount.

#### The Mempool is the Collection of All Raw Transactions Waiting to be Processed

Furthermore, Bob does not have just one transaction alone to mine. Rather, he has an entire pool of raw transactions, created by many people across the Internet. The raw data for each of these transactions sits in the local memory bank of each miner’s mining device, awaiting the miner’s commands. Miners call this pool of transactions, the "mempool." Most miners have automated systems to determine the transaction-selection process, based on estimated profit.

#### Creating Transaction Hashes

After Bob makes his choices about which transactions he will attempt to mine (and we assume that he includes Alice’s transaction), Bob’s mining device then begins a series of calculations.

His device will first take each individual transaction’s raw data and use mathematical formulas to compress the transaction into a smaller, more manageable form. This new form is called a "transaction hash." For instance, Alice’s transaction hash could look like this:

```bash
b1fea52486ce0c62bb442b530a3f0132b826c74e473d1f2c220bfa78111c5082
```

Bob will prepare potentially hundreds of transaction hashes before proceeding to the next step. One important thing to understand about the compression of data in the Bitcoin protocol, including the transaction hash above, is that calculations herein obey a principle called, The Cascade Effect.

#### The Cascade Effect: Changing One Bit of Data Changes the Entire Result

The Cascade Effect simply means that were Bob to attempt to change even the smallest bit in the raw data—whether from a desire to cheat, or by mistake, or for any other reason—the entire transaction hash would dramatically change. In this way, the mathematical formulas in the Bitcoin protocol ensure that Bob cannot create an improper history.

Were Bob to attempt to create an incorrect transaction hash, other miners would discover the falseness of the hash during their automated mining process. The miners would use the same raw transaction data from Alice, perform the proper mathematical formulas in the Bitcoin protocol, and immediately discover that Bob's attempted hash was incorrect. All the devices on the network would reject Bob’s attempt and this would prevent Bob from claiming rewards.

#### Step One Continued: Finishing the Preliminary Calculations

Now, using more mathematical formulas, Bob takes the transaction hashes he is attempting to process and compresses them into a new manageable piece of data.

This is called, "the merkle root." This represents all the transactions that Bob hopes to process, and from which he hopes to gain a reward. Bob’s merkle root could look like this:

```bash
7dac2c5666815c17a3b36427de37bb9d2e2c5ccec3f8633eb91a4205cb4c10ff
```

Finally, Bob will gather information provided from the last miner that successfully added to the permanent blockchain history. This information is called, "the block header." It contains a large amount of complex data, and we won’t go into all the details. The one important element to note is that the block header gives Bob clues about how to properly add the next piece of information to the permanent Bitcoin history. One of these hints could look like this:

```bash
"difficulty" : 1.00000000
```

We will return to this clue further on.

Having all this information, Bob is nearly prepared. His next step is where the real challenge begins.

#### Step Two: The Race to Finish First

Bob’s computer is going to gather all the above information and collect it into a set of data called a "block." Mining this block and adding it to the list of blocks that came before is the process of creating a "chain" of blocks—hence the industry title, "blockchain."

However, adding blocks to the blockchain is not so easy. While Bob may have everything up to this point correctly prepared, the Bitcoin protocol does not yet give Bob the right to add his proposed block to the chain.

The consensus mechanism is designed to force the miners to compete for this right. By requiring the miners to work for the right to mine a new valid block, competition spreads across the network. This provides many benefits, including time for the transactions of users (like Alice) to disseminate around the world, thus providing a level of decentralization to the network.

Therefore, although Bob would prefer to immediately create a new valid block and collect his reward, he cannot. He must win the competition by performing the proper work first. This is the source of the title of the Bitcoin-protocol consensus mechanism, "Proof of Work" (PoW).

The competition that Bob must win is to be the first person to find an answer to a simple mathematical puzzle, designed by Satoshi Nakamoto. To solve the puzzle, Bob guesses at random numbers until he discovers a correct number. The correct number is determined by the internal complex formulas of the consensus mechanism and cannot be discovered by any means other than guessing. Bitcoin miners call this number a "nonce," which is short for "a ‘number’ you use ‘once.’"

Bob’s mining device will make random guesses at the nonce, one after another, until a correct nonce is found. With each attempt, Bob will first insert the proposed nonce into the rest of his block. To find out if his guess is correct, he will next use mathematical formulas (like those he used earlier) to compress his attempt into a "block hash." A block hash is a small and manageable form of data that represents the entire history of the Bitcoin blockchain and all the information in Bob’s proposed block. A block hash can look like this:

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

Recall now The Cascade Effect, and how it states that changing one small number in the data before performing the mathematical computations creates a vastly different outcome. Since Bob is continually including new guesses at the nonce with each computation of a block hash, each block-hash attempt will produce a widely different sequence of numbers. Miners on the Bitcoin network know when a miner, such as Bob, solves the puzzle; by observing the clues that were provided earlier. Recall that the last time a miner successfully added data to the blockchain, they provided these clues in their block header. One of the clues can look like this:

```bash
"difficulty" : 1.00000000
```

This detail, "difficulty," simply tells miners how many zeros should be at the front of the next valid block hash. When the difficulty setting is the level displayed above, it tells miners that there should be exactly ten zeros. Observe Bob’s attempted block hash once again, which he created after making a guess at a nonce, adding this proposed nonce into his block, and performing the mathematical formulas:

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

The block hash above has ten zeros at the beginning, which matches the number of zeros in the difficulty level. Therefore, the hash that Bob proposed is correct. This must mean that he guessed a correct nonce. All the miners on the network can prove for themselves that Bob was correct by taking all the same information from their mempools, adding Bob’s nonce, and performing the mathematical calculations. They will receive the same result, and therefore Bob is the winner of this round.

On the other hand, due to the Cascade Effect, if Bob’s attempted nonce had produced a block hash with the incorrect number of zeros at the front, his block hash would be invalid. The network would not afford him the right to add an incorrect block hash to the network, and all the miners would continue searching.

#### Step Three: Bob Finds the Nonce

Once a miner discovers a nonce that produces a valid block hash, the miner has "found a new block," and can send the signal across the Internet. The consensus mechanism running on every other mining device can verify for themselves the calculations. Once verified, the consensus mechanism grants the miner the right both to add the proposed block to the blockchain, and to receive the reward.

Let us return to Bob’s machine, having just guessed a correct nonce, and thus holding a valid block hash. Bob’s machine instantly sends out the winning information across the Internet, and Bob collects his reward from the Bitcoin network. All the other miners must readjust. Earlier, they were searching for the correct nonce based off the information from the previous block header. However, Bob’s new valid block includes a new block header. All the other miners on the network abandon their current work, adopt Bob’s new block header, make many recalculations in their underlying data, and begin their search for the next nonce.

There is no sympathy in the Bitcoin protocol for any miner’s wasted efforts. Suppose another machine on the network was also trying to mine Alice’s transaction, and lost to Bob in the race. Only Bob earns the reward from Alice’s transaction, and the other miner receives nothing in return for their costs and time.

For Alice, this process seems simple. She first indicated the wallet address of her friend and sent cryptocurrency. After a certain amount of time, her friend received the money. Alice can ignore the byzantine process of the miners that occurred between these two events. Alice may not realize it, but the PoW consensus mechanism provides the foundation of security upon which she relies.

## The Dominance of the Proof-of-Work Consensus Mechanism

### Proof of Work (PoW) Fosters Ever Increasing Security

There are several reasons why PoW networks, especially Bitcoin, continue to dominate in terms of security and blockchain success.

A simple, preliminary reason is that PoW networks foster ever-increasing speed and computer power. Miners must constantly update and innovate above their competitors to continue earning rewards.

### Speed and Power are of the Essence

Among miners, having a faster and more powerful computer can mean earning rewards more frequently. For miners seeking to maximize profit, competition requires constant upgrades to machinery and to a miner’s customized underlying code.

The frequency at which a device can create proposed block hashes is called "hash power." The more hash power a collective PoW network has across all miners mining the blockchain, the more secure the network. This competitive pressure provides one important advantage in security to PoW networks, when compared to alternate consensus mechanisms.

### The Network Effect: Bitcoin’s Ability to Dominate Begins

A high level of security fosters a sense of trust among users, and this can grow a PoW network’s audience. As the audience grows, both the number of transactions and the price of the coin increase. This attracts more miners. The rising level of miners provides greater overall hash rate to the network, which in turn fosters a stronger sense of trust. This increased sense of security can raise the number of users on the network, which can increase the number of miners, and the cycle repeats.

In economics, this is classified as a "Network Effect," where a cycle of behavior encourages more of the same behavior, with compounding interest. Due to the Network Effect, and the fact that Bitcoin is the oldest PoW network, Bitcoin is increasing its security at a rate faster than the rate of other PoW networks.

Furthermore, consider the effect caused when the price of a PoW-blockchain coin rises. Before the rise, assume the blockchain coin is worth one dollar. A miner is justified in spending the necessary money (on equipment, upgrades, and electrical costs, etc.) to justify one dollar’s worth of hash rate. If the price shifts upwards to two dollars, the miner must upgrade their entire business to justify two dollars’ worth of a matching hash rate. If the miner does not upgrade, their competitor will, and then the miner will no longer be able to compete for rewards.

### The Longest Chain Rule: The True "Secret Sauce" of PoW Domination

There are many more reasons why PoW networks continue to dominate in security. Yet, for our discussion, there is one element that rises above all others. It is called, "The Longest Chain Rule," and some blockchain developers may argue that it is "the secret sauce" that fuels PoW’s strength.

The Longest Chain Rule is the determining factor whenever two competing versions of the blockchain history arise on the network. The rule simply states that whichever of the two versions grows longer first, wins. The other version is deactivated, and therefore all transactions and rewards on that version are not visible to users. The simplicity of this rule is a key to understanding why PoW consensus mechanisms continue to outperform their competition.

### The Simple Effects of The Longest Chain Rule

On a surface level, this rule prevents a double spend by a network user. For instance, consider a husband and wife accidentally attempting to spend the same money at the exact same time, while each person is traveling in a different part of the world.

For the sake of the discussion, we are oversimplifying the following actions
so that they take place within only a few milliseconds. We also oversimplify
the technical details, for clarity. The full explanation of this process is
provided in the [Bitcoin wiki](https://en.bitcoin.it/wiki/Main_Page), for
those who would like to gain a deeper understanding.

### A Tale of Two Blockchains

Let us suppose that the husband is in Asia and the wife is in the Americas. Both are purchasing a car. The husband uses all the funds from the family Bitcoin wallet to purchase a car at precisely 8:00 PM (UTC). The wife makes her purchase at the exact same moment, for a similar amount.

After making his purchase, the husband’s transaction hash is immediately sent to a mining device in China, where it is held in the miner’s local mempool. (Recall that a mempool is a collection of all raw transaction data across the network.)

Let us suppose that the husband’s transaction arrives in the Chinese miner’s mempool, the miner adds this transaction in a new block and soon the Chinese mining equipment finds a correct nonce and a valid block hash. The Chinese miner declares the winning information by sending out a message with a new block (note that he also collects a reward in this block). All the miners in his local (Asian) vicinity (who receive the winning information faster than in the Americas, due to proximity) complete the block verification process, increase the length of the blockchain, and begin assembling and mining the next block on top of the Chinese block.

On the opposite side of the world, essentially the exact same actions happen. The wife’s transaction is sent to the nearest miner, this time located in Washington state of the United States. Just as the transaction enters the Washington state miner’s mempool, the miner adds it to a new block and discovers a valid block hash. Then he sends out a message with the new block (in this block he also collects the reward - this is the same reward that the Chinese miner is attempting to claim). All the miners in the local (US) vicinity verify the information immediately, add the new block to their chain database and begin assembling a new block and then searching for a valid hash for this block, to connect it to the Washington state miner’s recent block.

### An Internal Conflict of Interest Arises Within the Bitcoin Network

Note the paradox here. There are now two versions of the Bitcoin history that are valid, yet different.

These two versions make their way across the Internet, around the world, each to the other side. When the competing messages arrive, the Bitcoin protocol sees two conflicting chain histories: the same money was spent twice (once on each competing chain).

Consider how on each side of the world the miners are spending their financial and temporal resources to further their own interests. There is no economic incentive for either side to submit to the other, by nature. Therefore, there is a conflict of interest within the Bitcoin network itself. The Bitcoin network would swiftly fail, were it not for The Longest Chain Rule.

### The Longest Chain Rule: The History Which is Longer First, Wins

The Longest Chain Rule simply declares that whichever of the two competing blockchains grows longer first, wins. The consensus mechanism deactivates the other version and chain users won't see it anymore.

Let us suppose that the Chinese mining equipment is superior in this instance, and the Chinese miner manages to discover the next valid block hash and send out a message with the new block before the Washington state miner can do likewise. Across the world, the moment the message with the block that Chinese miner completed, the Bitcoin protocol will select the best chain between both Chinese miner's and the Washington state miner’s versions of the Bitcoin history, based on more proof-of-work in Chinese miner's history.

There is no sympathy for any wasted efforts, nor for any misunderstandings between the wife and her car dealer. The Bitcoin protocol’s consensus mechanism simply presses forward. The Washington state miner’s rewards disappear, as though they never occurred. The wife’s purchase of a car likewise evaporates.

*(Typically, a normal and prepared car dealer utilizing cryptocurrency would not consider a customer’s transactions acceptable until several new blocks were added to the blockchain. In this manner, cryptocurrency users can ensure that a transaction is beyond contestation before the customer can, for example, drive a new car off the lot.)*

The Washington state miner gets a raw deal in this scenario, but the network benefits as a whole. The Longest Chain Rule provides the necessary security to prevent a Double Spend. The network accurately recorded one family member’s purchase of a car, prevented the mistaken double spend, and ensured that the most competitive miner received a just reward.

This example illuminates the importance of The Longest Chain Rule. However, there is a dark side to this rule for the unsuspecting and unprepared blockchain developer.

## The 51% Attack

Here’s where intrigue enters the picture. The "easiest" way to steal money on a PoW blockchain (such as Bitcoin) is to perform a 51% Attack.

In this attack, the malicious actor first spends cryptocurrency in exchange for something of value, which they take from their victim. Next, the malicious actor creates an alternate version of the PoW network’s history wherein those transactions never took place. Using advanced mining equipment, the malicious actor then "attacks" the PoW network by mining blocks to this "false" history faster than the rate at which other miners on the PoW network can mine blocks to the "true" history.

Assuming the malicious actor has a sufficient hash rate, as this "false" history grows longer than the "true" history, the Longest Chain Rule will cause the consensus mechanism to overwrite the "true" version. The earlier transactions the malicious actor made would be as though they never occurred. Therefore, the malicious actor would keep both their original funds and whatever item of value they exacted from their victim.

This is known as the 51% Attack. The number 51% derives from the fact that to successfully perform this attack, the attacker must add enough hashing power to the overall PoW network to form a majority of the hash rate.

### Size is Yet Another Reason Behind Bitcoin’s Current Success Among PoW Networks

Today, Bitcoin’s overall hash rate is enormous. The collective of computers around the world mining Bitcoin is effectively the largest supercomputer ever created by man. As of the writing of this paper, some estimate that [the Bitcoin network consumes more electricity than the entire country of Denmark](https://arstechnica.com/tech-policy/2017/12/bitcoins-insane-energy-consumption-explained/), and the number of miners continues to grow.

Therefore, to attempt a 51% Attack against the Bitcoin network could cost millions, if not billions of dollars in computer hardware. This attack would also require a sustained consumption of electricity that is likely unfeasible for a single geographical location, and would be expensive even for a decentralized-hardware network. So long as the miners of Bitcoin remain interested in the Bitcoin network, therefore, Bitcoin has a level of security that is nigh impenetrable.

*We will return to the proposition of the miners’ ability to choose a different network to mine later in our discussion.*

## The Genesis Attack

### A Genesis Attack on the Bitcoin Network

Recall that according to the original version of the Bitcoin protocol, sometimes called the ["vanilla" version,](https://www.worldcryptoindex.com/bitcoin-scaling-problem-explained/) the Longest Chain Rule only requires that the blocks in the longest chain all be properly mined. Furthermore, recall that computers can endlessly duplicate code.

Finally, note that during our explanation, when describing a malicious actor’s attempt to create an empty, meaningless blockchain history, we use quotation marks when employing the word, "false." Likewise, when describing the blockchain history trusted by the people on the network, we include the word "true" in quotations.

We do this because at the core level, the consensus mechanism is purposefully blind regarding any human user’s preference between "truth" and "false." The code only sees "truth" in terms of properly mined blocks, and overall blockchain length. Nothing more.

Now suppose the existence of a supercomputer a thousand times more powerful than the entirety of the Bitcoin-miner network. This supercomputer could, in theory, stealthily re-create and execute the initial code that spawned the very first block of the Bitcoin blockchain—the "Genesis Block." The supercomputer could then grind out block hashes, one-by-one, mining meaningless blocks and adding them to this empty, "false" version of the Bitcoin history.

Once this meaningless blockchain’s length sufficiently exceed the so-called "true" blockchain used today, the supercomputer could then release its "false" version to the Internet.

Throughout the world, (assuming the vanilla protocol) the Bitcoin network would automatically recognize the "false" blockchain as the correct blockchain! This would all be according to the code. The so-called "false" blocks would be properly mined, and the length would be longer than the chain that users currently trust. The vanilla protocol would, in theory, replace the so-called "true" history with the empty variant.

Such an event might seem to users like a virus being uploaded to the Internet. The event could destroy all human trust in the current version of the Bitcoin protocol, wreaking financial havoc throughout the cryptocurrency realm. While users of the Bitcoin protocol would naturally protest, the entire operation would be entirely in agreement with the underlying code.

When observing Bitcoin’s current hash power, the creation of such an anti-Bitcoin supercomputer is clearly not feasible in the immediate future. Assuming Bitcoin miners remain interested in the Bitcoin network, the risk of a Genesis Attack on Bitcoin is essentially non-existent.

However, consider the implications of the Genesis Attack on unsuspecting or underprepared smaller PoW blockchain projects.

### The More Realistic Dangers of The Genesis Attack

Let us assume a naïve blockchain entrepreneur building a new product. They are generally aware that malicious actors throughout the world are likely to attack their blockchain, stealing funds and otherwise causing trouble. Therefore, the naïve entrepreneur decides to implement what they believe is the most secure method of a blockchain consensus mechanism, PoW, and they offer ample financial rewards to miners to incentivize a secure network.

The entrepreneur and their entire audience may not realize it, but so long as their network’s overall hash rate remains below the threshold of an attack by even an average supercomputer, their entire blockchain history is vulnerable to complete annihilation. A technically astute competitor, seeing the vulnerability, and possessing ownership of the requisite computer hardware, would be able to create an empty and longer version of the same blockchain code and vaporize their competitor’s financial records.

The cryptocurrency industry is young, and few but the most advanced of developers understand the many ways in which blockchain competition can be technically eliminated. Therefore, we have seen but a few serious cases of the Genesis Attack.

One notable instance occurred when an original Bitcoin developer, Luke-jr, used a variation of the attack to destroy a blockchain project called Coiledcoin. Luke-jr performed this attack out of a belief that Coiledcoin was a [disingenuous project.](https://bitcointalk.org/index.php?topic=56675.msg678006#msg678006) Setting aside any human sentiment on either side of the event, the fact stands that Luke-jr’s variation of the Genesis Attack was the end of the Coiledcoin network.

The complexity in establishing a secure PoW blockchain remains a challenge for would-be entrepreneurs. Furthermore, there are existing PoW developers that are not fully aware of their vulnerability. Likewise, there are would-be malicious actors that have yet to realize the many methods available to cause frustration. The potential danger surrounding the issue of the Genesis Attack shows the relative youthfulness of the cryptocurrency industry.

For a PoW blockchain network to maintain Bitcoin-level security, therefore, it must maintain a hash rate that is high enough to constantly mine blocks faster than a potential competitor could either perform the 51% Attack (rewriting the most recent history of transactions), or the deadly Genesis Attack (complete chain rebuilding).

## The Financial and Eco-Unfriendly Problems With All PoW Networks

The problems with young PoW networks do not stop there, and furthermore, even Bitcoin’s PoW network has issues: the security of a PoW network comes at a high cost to the environment, and miners have no obligation to mine any particular network.

### PoW Networks Are Expensive

Some estimate that by 2020, the Bitcoin network alone will consume more electricity than the entire world currently consumes (as of [2017](https://arstechnica.com/tech-policy/2017/12/bitcoins-insane-energy-consumption-explained/)). Having just one PoW network in existence, therefore, is already strain enough on our environment. The network is also a burden on our infrastructure and our worldwide economy.

On the one hand, adding additional PoW blockchains to the world can serve the purpose of forcing free-market competition on the Bitcoin developers, encouraging ethical and innovative behavior. Therefore, some competition among PoW networks is likely useful.

However, as a human species, we can consider that there are more financially sound and eco-friendly methods of innovating with blockchain technology without always directly competing with Bitcoin PoW security. Our innovation, delayed Proof of Work, is one response to this fact, as we will soon discuss.

### Miners are Free to Mine Other Networks

Another inherent weakness of the PoW consensus mechanism to discuss is the ability of miners to choose alternate networks.

In November of 2017, for a few hours the majority of Bitcoin network miners switched their hash power to a competitor’s PoW network, the ["Bitcoin Cash"](https://www.coinwarz.com/mining/bitcoincash/hashrate-chart) network. This switch was the result of clever software engineering on the part of the Bitcoin Cash team.

The team recognized that most miners are mining Bitcoin only because this network is the most profitable. Therefore, the team conducted a calculated change in the underlying protocol of Bitcoin Cash that caused its mining profitability to dramatically increase. The majority of the world’s Bitcoin miners recognized the higher profitability and switched to the Bitcoin Cash network instantly.

While Bitcoin Cash’s play for a majority hash rate proved effective only for a matter of hours, their accomplishment raised awareness to a tacit principle in the network: Bitcoin’s hash rate is not bound to Bitcoin. The hardware is free to serve any compatible network the miners choose.

At the time of the writing of this paper, between Bitcoin and Bitcoin Cash, \~80% of the available hash rate is aligned with the former, and \~20% with the latter. There is speculation in the industry that if the Bitcoin Cash network creates a more favorable position, the balance of hashing power could change on a long-term basis. Furthermore, there are many other blockchain competitors who may gain the attention of Bitcoin’s miners in the future.

Were a shift in the balance of hash rate to occur, Bitcoin would no longer be the leader of security in the cryptocurrency realm. The price of Bitcoin would likely drop as users realized the resulting lack of security leadership. This might cause more miners to switch to a more profitable network to cover the cost of operating their expensive hardware. As miners abandon Bitcoin, and as users continue to leave, the situation becomes a reversal of the Network Effect. The Bitcoin network would come crashing downwards at an ever-compounding rate.

This is all theoretical, but it raises yet another concern that we need to illuminate: the security of a blockchain depends on many things, including the potentially fickle support of human blockchain miners. Our innovation, delayed Proof of Work (dPoW), takes this fact into account as we empower members of the Komodo ecosystem with Bitcoin-level security. Before we finally turn to our own solution, we must discuss the primary competitor to the PoW consensus mechanism, Proof of Stake (PoS).

### The Primary Alternative: Proof of Stake

Perhaps the most popular alternative consensus mechanism is Proof of Stake (PoS). In this mechanism, blocks are mined not by miners performing work, but rather by any user "staking" their coins on the open network for the right to mine blocks.

The meaning of "staking" has different variations depending on the specific rules set forth by the developers of the unique variant of the PoS consensus mechanism. In general, staking one’s coins means placing them as collateral on the open network in exchange for the right to mine new blocks.

Users who stake their coins, thereby, can periodically extract a portion of the mempool, mine new blocks, and earn rewards. There is no need to perform any hardware-expensive proof-of-work calculations, as the user’s incentive to be honest is encouraged by the fact that their own wealth hangs in the balance.

### The Security Risks and Shortcomings of PoS

The downside to PoS is that a user who simply leaves a large portion of wealth staked (and therefore continually claims rewards) gradually becomes a centralized point of wealth through the power of compound interest. On PoS networks, monopolies are a constant danger. The owner of a monopoly has power over the well-being of the network.

Once a majority of the supply is obtained, the owner gains a position known as "Nothing at Stake." The owner can mine "false" blocks to the PoS blockchain and use their own majority supply over the network to declare these "false" blocks valid. All other stakeholders on the network must adopt these "false" blocks, lest the majority holder use their strength to declare competing blockchain versions as invalid.

If a non-majority holder attempts to challenge the monopoly holder’s version, the non-majority holder can achieve little more than the loss of coins they placed at stake. Compare this with a non-majority holder in a PoW system: the question over the "truth" of the blockchain history depends not upon ownership of wealth, but upon the miner’s innovation and performance. PoW-based systems do not suffer from the risk of monopolies, therefore, as majority stakeholders gain no unique control over the mining of new blocks.

Variations of PoS, including the popular Delegated Proof of Stake (DPoS) and Delegated Byzantine Fault Tolerance (DBFT) systems, do not resolve the underlying issue of monopoly ownership and centralized manipulation. In a vanilla PoS system, the malicious actor needs only to purchase a majority supply of the coin to mine "false" blocks. Alternatively, as the PoS network grows to maturity, the collective of majority stakeholders will identify their financial equals, and they may find that they share a mutual interest in disadvantaging less financially established members of the network.

In a DPoS/DBFT type system, wherein the ecosystem stakeholders elect and endow delegates with the responsibility to mine new blocks, the malicious actor has only to compromise the integrity of most of the delegates. Thereafter, the compromised delegates can mine "false" blocks, and the users of the ecosystem have no direct means to retaliate, beyond abandoning the network.

This is not to say that PoS and its variants have no use cases. Indeed, there are scenarios in which PoS can be useful for entrepreneurs. In the Komodo ecosystem, our dPoW consensus mechanism can provide security to networks that use either type of consensus mechanism.

After the following section summary, we finally turn our attention to dPoW.

## A Summary of the PoW Consensus Mechanism

In short, the PoW consensus mechanism, as designed by Satoshi Nakamoto, is currently the soundest method of blockchain security. The mechanism solves the Double Spend problem and creates a secure network, capable of transferring financial value. Furthermore, competition among miners and the Longest Chain Rule create fairness on the blockchain. The combination of features provides a high level of defense against two of the most dangerous methods of blockchain destruction—the 51% Attack and the Genesis Attack—assuming a strong overall hash rate on the network.

New PoW blockchains can opt to compete directly with Bitcoin’s hash rate, and some level of competition is good for the ethical values and innovative power of the cryptocurrency industry. However, it is not necessary, cost-effective, nor eco-friendly that every new blockchain innovation requiring security should attempt to compete directly with Bitcoin. Not only is this unsustainable, but it is also unreliable, as it depends on the arbitrary choices of the decentralized network of miners around the world.

## The Komodo Solution: Delayed Proof Of Work (dPOW)

Komodo presents a technology, the delayed Proof of Work consensus mechanism, that solves the problems described above. Komodo’s unique consensus mechanism provides the same level of security as the strongest PoW network, without attempting direct competition. Instead, Komodo’s consensus mechanism uses the chosen PoW network as a storage space for "backups" of Komodo transactions. By this method, in the event of an attempted attack on Komodo’s blockchain history, even a single surviving copy of the Komodo main chain will allow the entire ecosystem to overwrite and overrule any of the attacker’s attempted changes.

In a key difference separating Komodo from regular PoW networks, our dPoW consensus mechanism does not recognize the Longest Chain Rule for any transactions that are older than the most recent "backup" of the Komodo blockchain. For conflicts that may arise which refer to transactions that are older than the most recent "backup," our consensus mechanism looks to the backups in the chosen PoW blockchain (Bitcoin) to find the accurate record.

Furthermore, entrepreneurs who build independent blockchains (Smart Chains) in the Komodo ecosystem can likewise elect to have backups of their own records inserted into the Komodo main chain. In this manner, the records of the entrepreneur’s chain are then included in the backup that is pushed into the protective hash rate of the main PoW blockchain (Bitcoin). Thus, entrepreneurs and developers in the Komodo ecosystem can have their independent blockchains protected by the hash rate of the chosen PoW blockchain (Bitcoin).

Therefore, to destroy even the smallest Smart Chain that is employing Komodo’s dPoW security, the attacker would have to destroy: a) all existing copies of the Smart Chain; b) all copies of the Komodo main chain; c) the accompanying PoW security network into which the dPoW backups are inserted (Bitcoin). This endows the Komodo ecosystem with higher than Bitcoin-level security, while avoiding the excessive financial and eco-unfriendly costs.

In addition, the dPoW security provided by Komodo is not only greater than Bitcoin, but is also more flexible. The Komodo security services are performed by notary nodes, chosen through a stake-weighted vote. Notary nodes have the freedom to switch notarization to another PoW network. Reasons the notary nodes might elect to switch networks could include an event where worldwide miners’ hashing power changes to another PoW network, or the cost of notarization to the current PoW network becomes more than necessary. Through this flexibility, the Komodo ecosystem maintains both a superior level of security and a more flexible and adaptive nature than Bitcoin itself.

### A Note About Komodo’s Iguana Core Technology

All the following processes are supported by a deeper Komodo technology called Iguana Core. Readers of the entire Core Technology Discussion sections will note that Iguana Core is featured in each section. This is because Iguana Core is the heart of the underlying technology that enables the vast Komodo ecosystem to work together. The Iguana Core code itself is complex and to fully explain would require a separate whitepaper.

In short, Iguana Core is a collection of code that serves many purposes. One function of Iguana Core is to empower the blockchain technologies Komodo either builds or adopts to act in coordination with each other. Often, Iguana Core can advance their initial capabilities beyond original expectations. In the case of dPoW, the code that underlies notary-node functionality spawned from Iguana Core technology.

Iguana Core is coded in the C programming language—the language of choice of our lead developer, JL777. The C language is designed to enable computers to process high volumes of information in a secure manner at high speed. This aligns with Komodo’s directives to provide security and scalability to our users.

## An Overview of Notary Nodes

The Komodo ecosystem uses a stake-weighted vote to elect parties who will run sixty-four separate "notary nodes." These notary nodes are the key to transferring the history of transactions performed in the Komodo ecosystem into the protection of the Litecoin hash rate.

### Notary Nodes Are Elected IT Professionals

There are no requirements to run in the yearly election, and candidates may form groups of individuals to work together in competing for each of the notary-node positions.

Although the positions are open, voters in the ecosystem are encouraged to favor candidates that exhibit strong professional skill sets in the computer sciences. Notary nodes' primary responsibility is to maintain and adapt the Komodo ecosystem's security as needed.

### Notary Nodes Hash and Notarize the Komodo Ecosystem History

The elected notary nodes perform a type of "backup" process, using Komodo software. These backups are called "notarizations."

Each notarization acts as a marker of the "true" history for the Komodo ecosystem at the time the notarization was created.

Notary nodes write each notarization into the history of the Litecoin blockchain as a permanent indicator of the history of the Komodo ecosystem. This allows any person to observe the notarization in Litecoin and thereby verify data and transaction history anywhere in the Komodo ecosystem.

The notary nodes work together in a decentralized and trustless manner to achieve each notarization. The frequency of notarizations varies between two to six notarizations per hour.

With the notarizations recorded into the Litecoin history, each confirmation on the Litecoin network is also a confirmation of the history of the entire Komodo ecosystem.

The primary sacrifice that is made is the time between the creation of a transaction and the confirmation on the Litecoin (LTC) network that confirms the most recent notarization. For this reason, we name our consensus mechanism, "delayed Proof of Work" (dPoW).

*   The dPoW service used the Bitcoin(BTC) network for security till Mid 2021. But, switched to the Litecoin (LTC) network at the beginning of Notary Node Season 5.
*   The Bitcoin protocol has a proven track record of excellent security and is becoming more secure by the day with more miners joining the network and hash rates climbing.
*   That being said, the Bitcoin network is also becoming costlier and more congested to make transactions due to increased demand and limited on-chain scalability. Read [this blog post](https://komodoplatform.com/en/blog/dpow-litecoin-notarizations/) for more info regarding this change.

### Notary Node Power is Restricted to History Transfer and Nothing More

Our dPoW consensus mechanism is designed to keep the advantages provided by the PoW system, circumvent the excessive financial and eco-unfriendly overhead costs, and avoid the security risks found in a PoS system. We use several methods to this effect.

Most importantly, all actions a notary node takes are publicly verifiable, and Komodo software running on each full user's machine automatically verifies notary nodes’ actions.

Notary nodes are not arbiters of "truth."

They only transfer a history of activity in the Komodo ecosystem into the protective custody of the Litecoin hash rate – nothing more.

The only type of power notary nodes hold over the ecosystem is the ability to grant or withhold notarization.

There are sixty-four notary nodes, and the minimum number of notary nodes required to maintain activity in the Komodo ecosystem is thirteen. Thus, for any activity in the Komodo ecosystem to be excluded entirely would require that at least fifty-one of the notary nodes withhold notarization.

Such an action would be uneconomic, as this would destroy the access to the financial rewards a notary node receives for performing their duties.

By this design, notary nodes' primary economic incentive is to properly transfer the records of the Komodo ecosystem into a secure location and to increase the value of the KMD rewards they receive for this service.

### Users Need Only Wait Until They Are Satisfied With a Transaction's Number of Notarizations and Other Security Features

For the average user, when performing a trade of goods and services where security is desired, the user simply needs to wait until the notary nodes complete the notarization process. Once a transaction's history is included in a notarization in the Litecoin blockchain, the only way to break the security protecting their transaction history requires breaking the security of the Litecoin.

Komodo software automates the verification process, and developers can tailor their individual communities around the needs of their audience.

Through these measures, Komodo’s dPoW consensus mechanism maintains the security innovated by Satoshi Nakamoto, and because dPoW enables the Bitcoin/Litecoin hash rate to serve more independent blockchains than just the single Bitcoin blockchain, dPoW even expands on Nakamoto’s original design.

## The Notarization Process

### Step One: Gathering the Appropriate Data

The process of notarization is simple. Roughly every ten to twenty-five minutes, notary nodes perform a special block hash mined on the Komodo blockchain and take note of the overall Komodo blockchain "height" (i.e. the number of total blocks in the Komodo blockchain since inception). The notary nodes process this specific block in such a manner that their signatures are cryptographically included within the content of the notarized data.

(All examples herein are estimated based off this actual KMD notarization to the BTC network:
[https://blockstream.info/tx/313031a1ed2dbe12a20706dff48d3dffb0e39d15e3e4ff936d01f091fb3b8556?expand](https://blockstream.info/))

The pieces going into the notarization process could look like this:

#### Block Hash

```bash
0a88371cc63969d29492110592189f839557e606db6f2b418ecfe8af24451c07
```

This is the "block hash" from the KMD blockchain—mined and cryptographically signed by the notary nodes

#### Block Height

```bash
607240
```

This is the blockchain "height" of the Komodo blockchain at the time of notarization (i.e. the total number of KMD blocks ever created)

#### Name of Komodo Smart Chain

```bash
KMD
```

The letters "KMD" are added into the notarization mixture to indicate the name of the blockchain to which this notarization belongs

#### Creating a Notarization

The notary nodes will take these three pieces of information and compress them into a format that is more computer-friendly. The result will look like this:

```bash
6a28071c4524afe8cf8e412b6fdb06e65795839f189205119294d26939c61c37880a084409004b4d4400
```

The above number can be said to be a cryptographic representation of all that has happened on the Komodo blockchain up to this point in time. According to the Cascade Effect, were an attacker to attempt to go back in the history of the Komodo blockchain and change even a single character of data, and then perform the same hashing formulas in the Komodo code, the number above would dramatically change.

This makes the notary nodes’ notarization a useful backup, assuming this number is in a safe location where anyone on the Internet can view and verify it. The notarization enables a single surviving copy of the "true" Komodo main chain to identify itself to the rest of the Komodo network, as only the "true" data can produce the same result.

On the other hand, an incorrect history of the Komodo network will not be able to produce the same notarization. Through the automation in the Iguana Core software that underlies the Komodo ecosystem, all users will align with the "true" blockchain history and ignore any malicious actors’ "false" attempts.

### Step Two: Notarizing the Data to a Secure Location

Naturally, for security purposes this number cannot simply be saved to one person’s local computer, or be written down on a piece of paper. Were the number to be in such a centralized location, a would-be attacker could simply destroy the backup, or replace it with a "false" version.

For the number to be useful, it must be placed in a secure and decentralized location. Here is where Komodo adopts security from another network: Komodo will perform a simple transaction in which it writes the above number into the data history of one of the strongest PoW blockchains (currently Litecoin). This location is as secure as the miners’ hash rate makes it, and the location is decentralized, by nature.

To place this information in the accompanying PoW network, the notary nodes will use a feature that exists at the core of the Bitcoin/Litecoin protocol when making a transaction. The feature is called "OP\_RETURN," and it allows for a message to be added to the blockchain, permanently, as a part of performing a transaction.

A notable use of the ability to write messages to a PoW blockchain is found in the first actions of Satoshi Nakamoto himself (themselves). In the first Bitcoin block ever mined, Satoshi used a feature like OP\_RETURN to include this [message](https://en.bitcoin.it/wiki/Genesis_block):

```bash
03-Jan-2009 Chancellor on brink of second bailout for banks
```

Nakamoto used a feature called "coinbase," which is similar to OP\_RETURN. A
primary difference between coinbase and OP\_RETURN is that coinbase is used by
miners when mining a block, whereas OP\_RETURN can be used by any user when
performing transactions.

Readers who have downloaded the Bitcoin blockchain to their local computer, and who possess the knowledge necessary to inspect the raw Bitcoin data, can discover these very words written to their own hard drive. The important thing to understand for our discussion is that any message written to a secure and decentralized PoW blockchain is viewable and verifiable to all.

The permanence and security of OP\_RETURN messages are a core aspect of dPoW’s security. In the event of a powerful attack on the Komodo network, there need be no argument over the correct notarized marker upon which the ecosystem members should rely. The Iguana Core code running at the heart of each user’s Komodo software can continue securing, decentralizing, and distributing the accurate version of the Komodo history as though the attack never occurred.

### Step Three: Notarizing the PoW Network Information Back to the KMD Main Chain

One final step remains to complete the loop of security between the KMD main chain and the chosen PoW network. The KMD blockchain must record within its own records the specific location where it placed this backup into the PoW blockchain. This enables the Iguana Core software to identify the location of the most recent notarization.

To create this reminder, the notary nodes will now gather one more piece of information, this time drawn from the accompanying PoW network: the transaction hash identifying the location of the first notarization. This information could look like this:

```bash
313031a1ed2dbe12a20706dff48d3dffb0e39d15e3e4ff936d01f091fb3b8556
```

The notary nodes will combine it with all the information that has come before. The result will be transformed, again, into a computer-friendly version:

```bash
6a28071c4524afe8cf8e412b6fdb06e65795839f189205119294d26939c61c37880a0844090056853bfb91f0016d93ffe4e3159de3b0ff3d8df4df0607a212be2deda13130314b4d4400
```

This number is a compressed cryptographic representation of everything that has happened in the Komodo ecosystem up to this point in time. The notarization is placed as a transaction message directly into the KMD main chain itself, and thus the notarization enables the Komodo ecosystem to know how to find a reference of its own history.

## Extending Notarization to Komodo Smart Chains

dPoW notarization allows Komodo to secure not just one chain, but many chains. Komodo is capable of using this notarization process to "recycle" the Bitcoin hash rate onto potentially thousands of other blockchains.

A blockchain that uses Komodo technology to take advantage of this protective service is called a Smart Chain. Komodo provides Smart Chains to interested entrepreneurs and developers in the Komodo ecosystem.

Each Smart Chain comes with many features, which are discussed in greater detail throughout the Core Technology Discussions section.

### Notarization Extends to Each Participating Smart Chain

This same security process extends to any Smart Chain that is under the protection of the notary nodes. The primary difference between a Smart Chain and the KMD main chain is that the main chain notarizes to an external PoW network (Litecoin), whereas the Smart Chain notarizes to the KMD main chain.

#### Notarization Flow

&#x20;Smart Chain —> Komodo Main Chain (KMD) —> Litecoin (LTC)

To summarize, the notarization process of a transaction on a default PoW-based Smart Chain is as follows.

*   A transaction is performed on a Smart Chain
*   Miners on the Smart Chain create a block for the transaction
*   Notary nodes create a notarization for the current period of blocks
*   Notary nodes write this notarization to the KMD main chain
    *   Notary nodes here also perform a quick special transaction on the Smart Chain to alert this chain's network that the notarization process is starting
    *   Once this special transaction enters the Smart Chain's mempool, the default Komodo software considers all included transactions to be final. Users and developers can decide for themselves whether to trust this first KMD notarization, or to wait for the LTC notarization to come
*   A few minutes later, notary nodes create a notarization to represent the KMD main chain's history and write this into the LTC chain
*   Notary nodes then perform a special transaction on the KMD main chain to alert all KMD nodes of the notarization
*   Notary nodes also perform a special transaction on all Smart Chains to alert all nodes of the LTC notarization
*   At this point, users often consider all transactions on their Smart Chains to have achieved finality

#### Only the Most Recent Notarization Matters

As each notarization is built upon all the notarizations that came before, Iguana Core does not need to monitor every notarization ever created. Rather, the software only needs to observe the most recent iteration.

This is favorable for Komodo security, as there is always a possibility that the chosen PoW network (Litecoin) could fail. In this event, the notary nodes would place their next notarization in a competing PoW network (such as Bitcoin/Bitcoin Cash) and the entire Komodo ecosystem would remain secure. The notarizations in the failing PoW network would no longer be required to verify ecosystem accuracy.

## Understanding Security and Economic Incentives

The nature of mining in the Komodo ecosystem serves as an incentive to motivate the notary nodes to perform their job well. This setup is also a principle method by which the Komodo ecosystem dramatically reduces the overhead costs necessary to function. Portions of the mining rewards are available not just to the notary nodes, but also to all members of the Komodo ecosystem, through various means.

The Komodo network on a surface-level is a minable network, like other PoW networks. Any technically savvy user can activate a device capable of mining the Komodo network, and thereby process users’ transactions, mine blocks, and receive rewards. For these miners, the Komodo protocol functions in almost the exact same manner as the Bitcoin blockchain.

Understanding the similarities will explain to the reader the motivations for the notary nodes and other Komodo miners to secure the Komodo network. The differences, on the other hand, are explained [in another section of the Core Technology Discussions.](/start-here/core-technology-discussions/miscellaneous/#details-regarding-kmd-main-chain)

(See the section regarding the 5.1% rewards allocated to all users who hold at
least 10 KMD in their wallet address. This 5.1% reward is given to users out
of the funds that would normally be given to a Bitcoin miner as a method of
minting new Bitcoin coins.)

### "Easy Difficulty" in dPoW: The Key to Notary Nodes’ Financial Incentives

The foundational similarity to understand is that with each block header, clues are provided for miners to find the next valid block hash. The specific clue, "difficulty," changes with each block header.

Under normal circumstances on a PoW blockchain, with each block header the difficulty level can change. The Bitcoin/Litecoin protocol itself decides what the difficulty for the next valid block should be.

The difficulty is decided based on the amount of overall hash power mining the network. If many miners are active, then the hash rate is high, and the Bitcoin /Litecoin protocol sets the difficulty to a higher number. On the other hand, if the hash rate is low, then the protocol sets the difficulty to a lower number.

Recall that the "difficulty" level determines the number of zeros at the beginning of the next valid block hash. The more zeros at the beginning of a valid block hash, the more unlikely each attempt at finding a valid block hash will be.

When the Bitcoin protocol was in its infancy, the difficulty setting was easy. In fact, the block hash we used earlier as an example is, in truth, the very first block hash ever created—by Satoshi Nakamoto himself (themselves).

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

He (they) designed the difficulty setting to encourage the network to find new block hashes once every ten minutes, on average.

For a computer, to guess within ten minutes a nonce that will produce a block hash beginning with ten zeros is relatively easy. This is so simple, in fact, no special computer is required. Early Bitcoin miners could use nothing more than the average desktop machine, having the CPU—the small heart of the computer—performing the calculations.

As more miners joined the network, however, the Bitcoin protocol automatically increased the difficulty. This maintained the speed at which the pool of all miners discovered new blocks, despite the increased size of the pool. Stabilizing the speed created several benefits, including an amount of economic predictability upon which users can rely.

Today, at Bitcoin’s current level of overall hash power, a valid block hash requires a much higher level of difficulty. Here is a recent successful block hash:

```bash
0000000000000000002d08398d6f21f038019600266b419bad5ab88add5b638d
```

There are seventeen zeros, and to find a valid block hash at this level requires a prodigious effort.

In the race to win blockchain rewards, miners all over the world have built entire farms of specialized equipment for mining. The small CPU of a desktop is no longer useful, and the time of "easy difficulty" on Bitcoin has passed.

### Notary Nodes are Special Miners on the KMD Blockchain

Here is where our dPoW consensus mechanism diverges from the Bitcoin/Litecoin protocol’s limitations. In addition to performing the notarizations of the Komodo ecosystem, notary nodes are also a special type of blockchain miner. They have a certain feature in their underlying code that both enables them to maintain an effective and cost-efficient blockchain ecosystem and provides the notary nodes with a financial incentive. The combination of benefits prevents the Komodo ecosystem from falling into the trap of directly competing with other PoW networks for hash-rate security status.

### Each Notary Node Gets One Chance Per Every Sixty-Five Blocks to Mine on Easy

Each individual node periodically receives the privilege to mine a block on "easy difficulty." In other words, while the rest of the miners in the Komodo ecosystem are mining at a calculated difficulty level, the notary nodes occasionally receive the chance to mine as though they are alone on the network.

The notary nodes’ "easy difficulty" setting operates in a cyclical manner, with each notary node on its own cycle. At the start of the cycle the notary node holds the "easy difficulty" ability until it mines one "easy" block. Then the Iguana Core code removes the ability for the next sixty-four blocks. After the sixty-four block period passes, the notary node can once again attempt to capture a block on "easy difficulty."

Therefore, while everyone else on the network mines at an adjustable level of difficulty according to the normal PoW consensus mechanism (which keeps the overall speed of the Komodo network stable) the notary nodes have a chance to step outside the normal rules. For every sixty-five block period on the Komodo blockchain, the odds that a block will be mined by a notary node, as opposed to a normal miner, are essentially 3:1.

Since the rest of the miners have an adjustable difficulty ratio, it does not matter how many more miners attempt to mine Komodo. Most of the valid blocks will always be found by the sixty-four elected notary nodes, even were the equivalent of entire hash power of the Bitcoin network to switch all its attention to mining Komodo.

The mining rewards that a notary node receives through this feature are \~50 KMD per day. This reward occurs regardless of KMD’s popularity, market value, or even of the competition from normal KMD miners. The reward notary nodes receive creates an economic incentive for each party controlling a notary node to support and protect the Komodo ecosystem, and to increase the relative value of this daily \~50 KMD reward.

## Komodo’s Protective Measures in Action

There are myriad ways that an attacker can assail a blockchain project, and the Komodo ecosystem is well prepared. In this foundational paper, we only discuss two of the most crucial attacks—the 51% Attack and the Genesis Attack.

### Notarizations Provide a Defense Against Both the 51% Attack and the Genesis Attack

By relying on the notarizations in the chosen PoW network’s hash rate (Litecoin), users in the Komodo ecosystem are well protected from both the 51% Attack and the Genesis Attack.

Recall that in a 51% Attack, the attacker first makes a transaction and then 'erases' it by providing 51% of the total hash rate to create another blockchain branch where the transaction never occurred. In the Genesis Attack, the attacker recreates the genesis block of a blockchain and mines an entirely false history.

For either of these attacks to play any part in the Komodo ecosystem, the successful attack would have to destroy every transaction at every level it is recorded.

#### Defense Against the Genesis Attack

First, let us consider the implications of the notarization process provided against the Genesis Attack.

Once an independent blockchain has even just a single transaction pushed through the notarization process into the chosen PoW network, that notarization protects against the Genesis Attack.

To successfully complete a Genesis Attack against a Komodo Smart Chain, the attacker would have to destroy the chosen PoW network’s records from that moment going forward. The attacker would also have to destroy the KMD main chain from that moment forward, and the entire independent Smart Chain.

The likelihood of achieving this task is effectively as probable as performing a Genesis Attack on the chosen PoW network itself.

#### Defense Against the 51% Attack

The Komodo ecosystem is also well protected against the 51% Attack. Consider an attacker attempting to create a malicious transaction on a default PoW-based Smart Chain in the Komodo ecosystem. The attacker creates their transaction and sends it to the Smart Chain's PoW network for processing.

#### Before Notarization

During the waiting period for notarization, on a default PoW-based Smart Chain, any transaction is vulnerable to the attacker's 51% Attack. The attacker would simply wait until the opportune moment to attack their victim by providing 51% of the total hash rate to a new version of the independent Smart Chain wherein the transaction never occurred. This new chain version, having more PoW, would override the original chain history with the transaction before the notary nodes create the next notarization, and therefore the unfortunate recipient of the transaction would no longer have the funds from the vanished transaction.

On a default PoW-based Smart Chain, therefore, the recipient of any transaction should always wait until the notarization process is underway before exchanging their valuables.

An important aside here is that Komodo Smart Chains have additional settings
beyond the default PoW-based setup that reduce the time required to wait for
notarizations. In some instances, the waiting time can be eliminated. The
[Channels Antara Module](/antara/api/channels/#introduction) is an effective
example, as this module allows instantaneous secure transactions.

#### Notarization to the KMD Main Chain

However, if the attacker fails to perform their 51% Attack before the notary nodes notarize to the KMD main chain, the difficulty of successfully attacking their victim increases. Now, the attacker must successfully perform the 51% Attack against both the KMD main chain and the independent Smart Chain.

Attacking the KMD main chain is difficult to achieve, as it is not a normal PoW blockchain. Rather, this chain is designed to withstand attacks. The attacker would have to compromise many of the notary-node machines while simultaneously performing a 51% Attack against both the KMD main chain and the independent Smart Chain.

While the KMD main chain provides a certain level of protection, this chain is not the ultimate goal. The KMD chain is merely a transfer point before moving the notarization data to the LTC main chain, as LTC is dramatically more secure. Therefore, while entrepreneurs, developers, and users await notarization to LTC, they should decide for themselves how much trust they wish to place in the system at this point of the process.

A frequent concern that many newcomers have here can be described as a fear that the notary nodes could potentially falsify information about a transaction on a Smart Chain.

This concern sometimes mistakenly leads some observers to believe that notary nodes are a centralized group who are providing financial governance to the ecosystem.

This is neither true nor possible.

Notary nodes are not arbiters of truth.

As stated before, all information that goes into a notarization is generated by the Smart Chain network and is publicly verified by all nodes on the network. This includes the notarization itself.

Notary nodes' sole additional power is the ability to sign a transaction that records this notarization to the network. Either notary nodes perform this service, or they do not. There are no other options available to them.

Any attempt by the notary nodes to falsify information in a notarization would be automatically rejected by all users of the Smart Chain network.

#### Notarization to LTC

After another ten to twenty minutes, the notary nodes will perform the notarization process for the KMD main chain. Here, they gather all the information for the entire ecosystem, create a hash, and record this hash to the LTC main chain. Once this is completed, they inform the entire ecosystem through a special transaction on the KMD main chain, and on each individual Smart Chain.

At this point, one can argue that the attacker's job is nigh impossible. To 51% Attack the Smart Chain, the attacker must compromise LTC, KMD, and the Smart Chain. This would require an incredible amount of equipment and expertise, and therefore most users in the Komodo ecosystem may now feel safe to consider all transactions to have achieved permanent finality.

Therefore, any record that has at least one full notarization has a fortress of security at its guard. So long as users and developers are mindful to wait for the desired number of notarizations to secure their payments, both the 51% Attack and the Genesis Attack are highly unlikely either to be successful, or to provide economic value to the would-be malicious actor.

Nevertheless, we remind all users of our ecosystem to consider their own vigilance and mindfulness as the most effective protection against the would-be attacker. Users, entrepreneurs, and developers utilize all aspects of the Komodo network at their own risk.

### Considering an Attack on the Notarization Process

To create a notarization for the KMD main chain, the minimum number of notary nodes required is 13. If the notary nodes themselves come under attack and must work to maintain access to the Internet, just 13 of the full 64 are required for the Komodo ecosystem to continue its operations.

In the possible event of a disconnect from the minimum number of notary nodes, chains in the Komodo ecosystem should simply be on the alert. Users, developers, and entrepreneurs would simply need to wait for the notary nodes to regain access to the Internet and resume the notarization process before considering any transaction final.

For this reason, the position of a notary node is held with high importance, and the parties which gain these positions are measured foremost by their Information Technology experience and capabilities. Komodo stakeholders are responsible to vote for candidates that are the most qualified to perform in the notary-node duties.

## The dPOW Consensus Mechanism is Inherent in all Komodo Smart Chains

The notarization for the Smart Chain is performed by the notary nodes as a service to the independent developer and entrepreneur.

Notary nodes create a notarization of the Smart Chain and write it into the KMD main chain. Then they write their actions into the Smart Chain itself. This allows Iguana Core (running at the heart of the Smart Chain) to identify where its most recent notarization can be found.

The notarization process cycles every ten minutes, assuming the Smart Chain’s network is consistently active. If the network has periods of inactivity, the notary nodes halt the process (to save against unnecessary notarization costs) and reactivate as soon as new transaction activity appears on the Smart Chain’s network.

We invite the reader to consider that as each Smart Chain can support thousands of transactions per minute, this makes the combined ecosystem capable of supporting millions of transactions per minute. This includes cross-blockchain interoperability and Smart Chain clustering, via our atomic-swap powered technology and our Antara Framework. This makes Komodo among the most scalable of financial-technology solutions in existence, and capable of competing with the transaction volumes of fiat networks.

Naturally, as each level of notarization takes time to perform, there is an additional delay for Smart Chains as compared to the KMD main chain. A Smart Chain’s history is notarized into the KMD main chain approximately every ten minutes, assuming constant activity. This notarization will then be pushed through the notarization process into the chosen PoW network (Bitcoin). We estimate that a transaction performed on a Smart Chain will receive the KMD main chain’s protection within approximately ten minutes, and will receive the Bitcoin hash rate’s protection in approximately twenty to thirty minutes.

Another difference between the KMD main chain and a Smart Chain is that the notary nodes only mine the KMD main chain. Smart-chain developers are responsible to create any required network of miners to process their Smart Chain’s transactions.

This does not need to be a full network of mining farms, such as those in Bitcoin/Litecoin. Rather, power only needs to be of a level necessary to process transactions, and to provide any desired level of hash-rate security. For a small business with intermittent periods of transaction activity, a single, dedicated, full-time server may be enough. Larger businesses can scale as desired and can also work to attract a network of freelance miners.

Furthermore, developers of Smart Chains need not create their chain so that it relies solely on a PoW consensus mechanism. Instead, developers can utilize Antara Customizations (discussed later in the Core Technology Discussions section and elsewhere in this documentation). These Antara Customizations allow the developer to utilize a hybrid consensus model that combines Proof-of-Stake (PoS) with Proof-of-Work (PoW).

The PoS consensus mechanism does not require high electrical costs to maintain a basic level of network security. Therefore having a certain percentage of blocks mined via PoS can increase security during the ten-minute waiting period before notarization.

There are also various members of the Komodo ecosystem who mine for profit, and can be motivated to assist Smart Chain developers in securing a network in exchange for block rewards.

This combination of options available to a blockchain entrepreneur dramatically reduces the overhead costs and effort the entrepreneur and developer would otherwise have to allocate to a network of high-hash rate miners. These freed resources of the entrepreneur and developer can therefore be allocated to other uses in their business models. The total yearly cost for the Komodo notary nodes to notarize the KMD main chain into the currently chosen PoW chain, Litecoin, is approximately \~180 LTC/year.

This security mechanism is not limited to Smart Chains created within the Komodo ecosystem. In fact, Komodo’s Blockchain Security Services are available to any existing blockchain. With Komodo, any blockchain can be protected with the power of the Litecoin hash rate for a tiny percentage of the cost.

Thus, an entrepreneur in our ecosystem can have their own independent blockchain that is backed up by the hash rate of the Litecoin mining network, at only a fraction of the cost. In the following sections, we discuss the formation of a new Komodo Smart Chain, the method of distribution and trading using our atomic-swap technology, Komodo DeFi Framework, and our "smart contract" like technology, the Antara Framework.
export const title = "Introduction";
export const description = "Komodo empowers blockchain entrepreneurs and investors with security, decentralized exchanges, and privacy features, creating a thriving economic ecosystem.";

# Introduction

***

Advanced Blockchain Technology, Focused On Freedom

***

The Komodo project focuses on empowering users with Freedom through
blockchain technology. There are many forms of Freedom that Komodo can provide, and we currently focus on empowering two types of users: the blockchain entrepreneur, and the average cryptocurrency investor. Together, our community of entrepreneurs, investors, and other users form an economic ecosystem.

The foundational pillar of the Komodo ecosystem is security. Komodo provides a unique and innovative form of security that is as strong as the Bitcoin network, yet does not require the incredible cost. Every member of the Komodo ecosystem receives the benefits of this security. The investor relies on it for everyday use. The entrepreneur relies on it to protect their blockchain innovation at a cost that is affordable even to small businesses and startups.

Another of Komodo’s powerful technologies is a new method of trading cryptocurrencies directly from one person to another. It is a new kind of "decentralized exchange." Our decentralized exchange removes all forms of middlemen, vouchers, and escrow services. It relies on an underlying concept called the "atomic swap", and we are the leaders in this technology.

Our atomic-swap powered decentralized exchange serves both the investor and the blockchain entrepreneur.

For the investor, they can trade cryptocurrencies without having to pass through a centralized exchange, which can be an arduous and even dangerous process. They also do not have to use an escrow service, voucher, nor even an intermediary coin—not even Bitcoin. Furthermore, there is no registration process required, nor are there any withdrawal limits. We currently support approximately 95% of the cryptocurrencies in existence, including Bitcoin-protocol based coins, Ethereum, and Ethereum-based ERC20 tokens.

For the entrepreneur, our decentralized exchange enables the release of new products to the world without middleman involvement. Furthermore, even entrepreneurs who have previously built other blockchain projects outside our ecosystem can easily feature their coin on our decentralized exchange. The only requirement is that the blockchain product have the proper security elements in the core of the blockchain’s code.

Komodo also has powerful privacy features built into our platform. When activated, these features allow the investor to trade and purchase goods and services within their right to privacy. This also allows the entrepreneur to release their product, and to crowdsource funds, from an audience that may prefer to maintain this privacy.

There are many other technologies and features in the Komodo ecosystem, and we are experiencing a rapid growth of both entrepreneurs and investors.

The documentation in the Core Technology Discussion section provides an in-depth discussion about Komodo’s unique security features, our decentralized exchange, the method of releasing new products on it, and our native privacy features.

We welcome feedback from our readers. If you have any questions or concerns over the course of reading this material, please reach out to our team directly. You may find our contact information on our accompanying website: [https://komodoplatform.com/en/](https://komodoplatform.com/en/)

## Note on Changes Since Whitepaper Creation (cr. 2019)

The documentation in this section is based on the Komodo whitepaper that was written in 2017. The content was updated in July 2019 to ensure technical accuracy. We recommend that all newcomers read this documentation to enhance their understanding of the nature and design of Komodo.

Since 2017, the Komodo team has greatly advanced the technologies on the Komodo Platform, and these new technologies are discussed in other areas of the technical-documentation website.

Also, zero-knowledge transactions are still available on Komodo-based blockchains, but they are no longer available on the KMD main chain. This change was made largely in response to community feedback and industry developments.
export const title = "Initial DEX Offering";
export const description = "Komodo's Initial DEX Offering (IDO) technology revolutionizes the ICO model, ensuring Decentralization, Security, and Privacy for entrepreneurs and participants.";

# Initial DEX Offering (IDO)

## Abstract

There lies great power in the idea that any person, regardless of nationality, creed, or background, can obtain funding to innovate and prosper. An integral tenet of blockchain technology is "decentralization." By decentralizing systems, we reduce the number of control points that can be compromised and manipulated.

Decentralization plays a more common role in our new cryptocurrency economy, but there is one area of the market that remains centralized and vulnerable: the initial coin offering (ICO). The cryptocurrency industry needs a solution, and Komodo presents an answer with our initial DEX offering (IDO) technology.

In today’s common ICO model, the high level of centralization creates many problems. Third parties can block or manipulate entrepreneurs’ efforts to innovate and prosper. The centralized location of releasing an ICO blockchain product is vulnerable, allowing whales, hackers, and human error to corrupt or destroy an entrepreneur’s efforts. The negative experience of users in these situations can also impact the perception and adoption of cryptocurrency. Furthermore, the traceable nature of an ICO prevents society from crowdsourcing and purchasing within our inherent right to barter in private.

The IDO model, as created by Komodo Platform, overcomes these challenges. It provides the necessary technology to create and release a blockchain product to the world with the full power of decentralization.

Entrepreneurs building on our platform can begin by creating a Smart Chain, and our technology simplifies this process. One need only install the necessary software, execute a few commands on a command prompt, and then establish a connection between two or more Komodo-enabled devices as explained below. Komodo’s core technology will do the rest of the work necessary to create a fully independent blockchain, empowered with an array of features.

Our dPoW technology is a key feature that provides the necessary security to protect the integrity of the blockchain. Use of dPoW is optional, and since Smart Chains in the Komodo ecosystem are independent by nature, entrepreneurs can discontinue dPoW services at will.

After creating a blockchain, the entrepreneur then uses our software to release the project to the world. Komodo DeFi Framework — our decentralized exchange — is a useful software solution to conduct an Initial DEX Offering (IDO). Because Komodo DeFi Framework relies on atomic swaps, enabling you to trade value across any supported blockchain protocol. No third-party manipulators can prevent the entrepreneur from their crowdsourcing and innovative endeavors.

Through [the privacy technology](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem) available on Komodo Smart Chains, IDO participants can purchase the product within their inherent right to barter in private if they take some precautions.

Do note that, ERC20 tokens, ETH forks/clones, QRC20 tokens, QTUM forks/clones, and most UTXO type blockchains can also be distributed through an IDO using Komodo DeFi Framework. While these types of coins/tokens don't receive other benefits of the Komodo Ecosystem like the dPoW service and UTXO smart contracts (CC modules), they can still be traded on Komodo DeFi Framework.

## The Challenges in Current ICO Platforms

### Specific Weaknesses in the Centralized ICO Model

There are many weaknesses present in today’s Initial Coin Offering (ICO) model. Several notable weaknesses include third-party discrimination, vulnerability to theft and human error, and a lack of privacy.

#### Third-Party Discrimination

An entrepreneur seeking to serve their intended audience may experience adverse intervention from a third party. The antagonists may display personal and malicious intent, regardless of the value of the entrepreneur’s innovation.

#### Centralization of Technology: Theft and Human Error

Today’s ICOs are typically conducted in escrow, where the purchasers must transfer money to one location for holding. This typically occurs through a single website, and the cryptocurrency funds are held on a centralized collection of server(s).

The user must wait while the ICO administrators first verify the transactions and distribute the coins. During this time the funding is centralized, and therefore vulnerable to thieves and human error.

#### Lack of Privacy

Because ICO transactions are highly traceable, it is difficult, if not impossible, to perform ICOs within our right to barter in private.

### Third-Party Discrimination via the Centralized ICO

The centralized ICO process fails to harness the borderless nature of blockchain technology. A key strength of any blockchain is that any human capable of accessing the technology can activate the blockchain, regardless of their geographical location or social status. Thus, anyone can provide yet another verifiable record of the transaction history, and this decentralization provides a crucial element of security to the blockchain.

An ICO innovator, therefore, may prefer to use a blockchain platform that transcends man-made barriers, to protect their innovation. Circumventing man-made barriers could be integral to the blockchain’s survival because the element of decentralization prevents malicious actors from creating subjective borders around the blockchain records and then using authority to falsify and manipulate.

This creates a conundrum. As a human race, we also find strength and empowerment in subjectively defining our own demographics for various reasons, whether they be to form companies, cultures, communities, etc.

While we find the ability to create subjective demographics useful, it contrasts with the borderless nature of blockchain technology. Members of one demographic may desire to participate in a specific ICO, but another demographic may find this unfavorable. Therefore, the second party might try to forestall progress. The paradox lies in the fact that for the underlying blockchain product to maintain its integrity, it must serve both communities without regard to any man-made barrier between them.

The problem compounds even further as we observe that on a decentralized blockchain platform, a new ICO product is capable of functioning anywhere there is access to the underlying technology. On a decentralized platform, once a new blockchain product is released any person from either demographic is now able to utilize it. The sentiment of either demographic is irrelevant. The problem becomes most pronounced if members of a competing group attempt to even maliciously prevent an innovation out of selfish reasons. Thus, the innovator must have the option to protect against would-be malicious competitors.

The overall centralized nature of today’s ICO process, therefore, presents a problem. Entrepreneurs who are not able to navigate the adverse effects of an inhibiting third party may be unable to realize their creative potential.

### Centralization of ICO Technology: Hackers and Human Error

Yet another issue with the traditional ICO model is that the technology upon which an ICO is released is also centralized, which presents vulnerabilities due to human foibles.

#### Hackers and Human Error

Because all coins of an ICO typically process through one centralized point during the purchasing period, the entire supply is vulnerable to any person with access to the node. Therefore, both malicious and clumsy human agents can destroy an ICO. The data holding the cryptocurrency can be damaged, stolen, or simply lost through incompetence.

An entrepreneur can also consider that in today’s ICO model both the funding provided by the purchasers, as well as the actual ICO coins that the entrepreneur intends to sell, remain on the centralized node for a long period of time. It is not just one side of the crowdsourcing endeavor that is at risk, but both.

This central point of failure can be catastrophic for all participants.

#### The Right to Barter in Private

Finally, the lack of current privacy options in the ICO process inhibits blockchain participants from purchasing within our right to barter in private. This right to privately exchange goods and services extends further into history than the written word. We have, as a species, utilized this right to organize into communities, institutions, and even nations.

Many of humanity’s most meaningful advancements in art, technology, and other human endeavors began in situations where the creator had the security of privacy in which to explore, to discover, to make mistakes, and to learn.

The right to barter in private, however, is under modern threat as the recent monumental and historical phenomenon known as "The Internet of Information" permits many kinds of people to quietly and without inhibition monitor other people’s shopping and bartering behavior. This is a dangerous development, as it destroys the privacy that empowers much of humanity’s personal growth. We must reserve our right to barter in private, for we observe that there is a myriad of ways in which a common person may explore personal growth in an economic environment.

The highly traceable nature of today’s centralized ICO model is in direct contradiction to this human need.

### The Blockchain Industry Needs a Solution

Together, these issues show that the current state of the ICO market is plagued with limitations that inhibit freedom, security, entrepreneurship, and even human growth. The cryptocurrency industry needs a solution to these problems, and Komodo presents an answer.

## The Initial DEX Offering

The Komodo ecosystem presents a solution, the initial DEX offering (IDO), that solves these issues and even adds new possibilities to the cryptocurrency market.

The decentralized nature of the IDO enables the entrepreneur to release a blockchain product beyond the reach of a malicious third-party influencer.

Furthermore, through our decentralized exchange, Komodo DeFi Framework, the IDO allows an entrepreneur to release their product in a manner that mitigates and even eliminates many of the issues regarding hackers and human error.

With the advantage of Komodo’s privacy technology, the participants in an IDO are empowered with their right to barter in private.

## The Process of Creating a New Blockchain in the Komodo Ecosystem

Formerly, coding and generating the blockchain itself were the most difficult aspects of the development process. Now, the Komodo team has simplified the process into easy steps. Through Komodo’s Iguana Core technology (introduced in Part I), the entrepreneur can create a new independent blockchain by entering just two simple commands in the command prompt of their computer.

The following steps rely on one of Komodo’s underlying software processes that run in the background on a user’s computer. The name of this software is the "Komodo daemon," or `komodod`, for brevity. `komodod` is rooted in Iguana Core technology.

### The First Command to Create a New Coin

```bash
./komodod -ac_name=[ENTREPRENEUR\'S COIN] -ac_supply=[TOTAL COIN SUPPLY] -gen
```

The first part of the command, `./komodod`, initiates a new instance of komodod.

By default, the initial `./komodod` command executed alone would launch the Komodo main chain, KMD, on the user’s computer. However, the next part of the command tells komodod to behave differently.

```bash
-ac_name=[ENTREPRENEUR\'S COIN]
```

This command tells komodod not to launch the main KMD chain, but rather to launch the chain that has the indicated name.

```bash
-ac_supply=[TOTAL COIN SUPPLY]
```

This tells komodod how many total coins there should be in this chain.

```bash
-gen
```

This tells `komodod` that the user desires to mine this network.

Komodod now begins the automated process of creating a new Smart Chain in the Komodo ecosystem. Komodod will first make a fresh and empty clone of the KMD main chain (though it will not yet generate the actual coins), with only a few differences to the underlying nature of the chain.

### The Features of the New Smart Chain

There are several primary differences between a Smart Chain and the main Komodo chain. For example, unlike the main Komodo chain, the Smart Chain will not automatically generate 5.1% rewards for all wallet addresses holding coins. Furthermore, the Smart Chain’s dPoW consensus mechanism is built to notarize to the KMD main chain (as opposed to LTC).

Some of the differences reveal strong advantages held by members of the Komodo ecosystem. By design, this Smart Chain is capable of automatically adopting any updates that the Komodo core development team add to the framework. The Smart Chain also has a built-in capacity within the framework to allow the entrepreneur to code new rules.

For example, the entrepreneur may decide not to use a PoW consensus mechanism, but may instead prefer PoS. Other changes can also be made, according to the entrepreneur’s imagination and developer knowledge. So long as the new code that the entrepreneur adds to the Smart Chain does not interfere with the overall framework, the Smart Chain will smoothly integrate with the rest of the Komodo ecosystem.

For the purposes of our discussion, this new Smart Chain is otherwise the same as the Komodo main chain, including the features to communicate natively with other blockchains via Komodo DeFi Framework. The reader may note that this new Komodo Smart Chain is not a colored-token running on top of a parent blockchain, as is often the case in other blockchain ecosystems (like ERC20 tokens on the Ethereum network). Instead, this Smart Chain is a unique and independent blockchain unto itself.

This empowers the entrepreneur with significant advantages over other blockchain ecosystems. The Smart Chain can run on its own nodes, act according to whatever rules the entrepreneur can imagine, and can scale according to its own audience. Should a Smart Chain in the Komodo network experience an explosion of activity, the overall Komodo ecosystem will not be negatively impacted. This independence grants a significant competitive advantage in the form of overall security, speed, and ease of use for end-users.

Consider the advantage of developing an entrepreneurial product as a fully independent blockchain. Should the entrepreneur desire at a future point to leave the Komodo ecosystem for any reason, they are free to take their blockchain product with them.

### Generating and Mining the New Coins

Let us return now to the moment after the entrepreneur executes the first command in the command prompt, and komodod creates a fresh and empty clone of the Komodo main chain. While the instance of the komodod program (running on the entrepreneur’s local computer device) will create the necessary code for the new Smart Chain, komodod will not yet generate the coin supply itself. Komodod instead will wait for the next few steps to occur.

The reason for the wait is that a blockchain’s essence depends upon existing not in isolation, but in a network of multiple devices. This is the nature of decentralization. Komodod will wait until it receives a signal from another device, thus indicating that it has a peer with which to form the Smart Chain network.

#### The Entire Coin Supply is Distributed in the Genesis Block

Typically, the entire coin supply for the IDO is created and distributed immediately to the device that mines the first block, the Genesis Block. The code performs this distribution as a one-time reward for discovering the first valid block hash.

Having established a secure connection with a second device, the entrepreneur will enter the following command on the second device.

```bash
./komodod -ac_name=[ENTREPRENUER\'S COIN] -ac_supply=[TOTAL COIN SUPPLY] -addnode=[INSERT IP ADDRESS OF FIRST DEVICE]
```

Note that the first three elements of the command, `./komodod`, `-ac_name`, and `-ac_supply`, are the same. It is important that the parameters inserted into these commands match exactly. Otherwise, the instances of komodod running on the separate devices will ignore each other, and the coin will not be mined.

In the second device, the -gen command is not present. In this circumstance, we are assuming that the entrepreneur wants to capture the entire coin supply on the first device. Technically speaking, assuming the entrepreneur has ownership over both devices, it does not matter if both devices initiate the -gen command. Both devices will attempt to mine the first block and the superior device will receive the coin supply.

There is another key difference in the command.

```bash
-addnode=[INSERT IP ADDRESS OF FIRST DEVICE]
```

With the execution of the IP address command, the second device knows to look across the available connection (the Internet, VPS service, etc.) for the first device, which is already running an instance of komodod and the new coin. The command here simply tells the computer the proper IP address of the first device.

As soon as these two devices connect, having all the proper komodod software running and set in place, the mining begins. One of the devices will mine the first block and instantly receive the total coin supply of the entire blockchain into the user’s chosen wallet.

Both devices sync this information to each other, and the `ENTREPRENEUR’S COIN` now exists in the world. The entrepreneur can also add more and more devices to the network.

### Notarizing to the Komodo Main Chain

To receive the security of the dPoW consensus mechanism, the entrepreneur simply needs to have the elected notary nodes add the `ENTREPENEUR’S COIN` to their internal list of coins to notarize. This will empower the entrepreneur’s product with the same verifiable and decentralized security of the Komodo main chain.

The process of adding a new notarization service can be executed by the notary nodes with just a simple command. While we are at this early stage of development, this sign-up process for new IDO products is not yet automated. In the future, we intend to automate as much of this process as possible.

There is a fee for receiving notarization services to help cover the business costs associated with notarization (recall that all notarizations are financial transactions by nature).

Entrepreneurs are thus able to use the Smart Chain’s native dPoW consensus mechanism to notarize to the Komodo main chain to create a secure backup of the coin’s history. Even in the event of an attack at this early stage of existence, the entrepreneur can rest assured that their product will survive, so long as one copy of the blockchain’s history exists.

Everything is set on the backend for the entrepreneur, and they are now fully prepared to begin the IDO process. Naturally, we understand that for many potential entrepreneurs in the Komodo ecosystem, this process is unfamiliar territory. We encourage interested entrepreneurs to reach out to our team at `partners@komodoplatform.com` for guidance during development.

## The Distribution of Coins

### Observations on the Centralized ICO Method

Previously, the entrepreneur at this point would have been required to go through a centralized ICO process.

This could have required several cumbersome and possibly dangerous steps. For example, the entrepreneur would begin gathering cryptocurrencies from their audience to personally hold in escrow before the process of matching purchases to the new blockchain coin were conducted. Until the distribution of the new blockchain coin is completed, the purchasers have to trust the issuer.

To distribute these coins, the entrepreneur had two primary options. They could have created and distributed a digital software wallet capable of holding the entrepreneur’s coins. The entrepreneur would then have to send all the appropriate coins to each wallet address, according to the process they established during their ICO. This process may be error-prone as the issuer either has to do it manually or write a custom program to do it.

Or, the entrepreneur would have to make formal arrangements with another service to manage this process, such as with a centralized exchange, and then be required to act within the centralized exchange’s arbitrary framework.
The centralized ICO process can be arduous and, at times, disastrous.

### Enter the IDO

#### Powered by Komodo’s Komodo DeFi Framework & Privacy Technology

The Komodo IDO model is an extension of Komodo’s Komodo DeFi Framework technology. Komodo DeFi Framework is an atomic swap powered, decentralized exchange. It enables users to directly exchange cryptocurrencies from one person to another without third-party involvement (i.e. no centralized exchanges, escrow services, vouchers, etc.). Furthermore, as the IDO model is entirely decentralized, anyone can use it at will. There are no centralized authority figures capable of creating artificial control points that can be manipulated at the expense of the users.

To begin the distribution process, the entrepreneur first chooses how many nodes they would like to use for the distribution. Nodes can be any type of machine capable of connecting to Komodo DeFi Framework. Typically, a small business entrepreneur may choose to use server machines. Server capacity can be rented online, and the servers can be distributed geographically throughout the world if desired.

While renting a multiplicity of servers may be the method of choice for an established small business, it is not a requirement. An owner of an even smaller business, operating on a low budget, can simply use their own computer(s), geographically stationed nearby for convenience. On the other hand, a large corporation could use the server capacity they already own. The number and strength of the machines is a choice made by the entrepreneur.

Having decided the method of distribution, the entrepreneur will then prepare the total supply of coins. (We are assuming the coins are still located on the first device that mined the entrepreneur’s Genesis Block.) The entrepreneur will first break down the total collection of coins into smaller digital pouches and distribute them to the Komodo DeFi Framework nodes previously created. These small bags of coins are ultimately what will be traded on Komodo DeFi Framework with their audience.

When the entrepreneur sends the coins to all their nodes throughout the Komodo DeFi Framework network, they are distributed to each node's wallet through a normal transaction. With the coins distributed as desired, the entrepreneur then elects the time and date when each bag of coins will be available for purchase. When a bag of coins becomes available on Komodo DeFi Framework for trading, members of the Komodo ecosystem simply purchase the coins using atomic swaps.

#### The Many Solutions of the IDO Model: Security, Privacy, Decentralization, and Freedom

This method of conducting an Initial DEX Offering mitigates and circumvents the issues found in a centralized ICO. The entire process is conducted in a decentralized manner. The IDO entrepreneur has direct access to their audience, as no centralized human authorities are acting as middlemen.

The IDO process implements solutions that prevent both methods of theft that are possible in the centralized ICO process. Unlike the centralized ICO, once the distribution of the bags takes place the effect of their distribution adds a layer of security from a would-be hacker. The hacker can only steal funds at the node they manage to penetrate. Were the hacker to steal coins before the actual IDO, the entrepreneur would have the option to simply create a `NEW ENTREPRENEUR’S COIN` again, without losing any personal wealth.

Furthermore, since the trades happen atomically, the entrepreneur is only in possession of either their own `ENTREPRENEUR’S COIN` or the cryptocurrency funds provided by the IDO participants — but not both. The entrepreneur is never at risk of losing both their own funds and the funds of their audience, which is a strong advantage over today’s ICO model.

Since the coins are immediately available on Komodo DeFi Framework for trading, the entrepreneur’s audience has an immediate trading market. This stands in contrast to today’s ICO model, where users often wait weeks or even months before liquidity for their ICO product arises in a centralized exchange.

Finally, through Komodo's [inherent zero-knowledge technology](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem), participants have the option of privacy when purchasing the IDO product. This enables them to support the crowdsourcing efforts of the entrepreneur within their inherent right to barter in private.

Upon conclusion of the distribution of the IDO coin supply, the entrepreneur has successfully and immediately completed all the crowdsourcing-related steps that could have taken months in today’s typical ICO model.

Komodo’s IDO model provides greater ease-of-use, flexibility, and security.

#### Ways an IDO can be Conducted

At this point, let us assume that the Entrepreneur has created their coin using one of the following processes: creating a Komodo Smart Chain, cloning/forking ETH or QTUM, cloning/forking any other [compatible UTXO-based blockchain](/komodo-defi-framework/tutorials/listing-a-new-coin/#1b-utxo-coins-btc-ltc-kmd-zec-dash-doge-dgb) or minting a new ERC20/QRC20 token. There are several ways an IDO can be conducted using Komodo DeFi Framework, and all the coins/tokens can be distributed in return for any coin/token already available on Komodo DeFi Framework. The entrepreneur can decide the available pairs, prices, and volumes available on each pair.

##### The Straightforward Method

*   The entrepreneur can fork the [Komodo DeFi Framework Desktop repository](https://github.com/KomodoPlatform/komodo-wallet-desktop) and add their coin/token to the GUI.
*   This modified software will be used both by the entrepreneur to place sell orders and by the purchasers to buy.
*   This method needs the entrepreneur to launch electrum servers for their coin if it is a Komodo Smart Chain or another UTXO type blockchain. The entrepreneur will need server software that supports lite wallets if their coin is an ETH or QTUM fork/clone.
*   The entrepreneur must also launch [Komodo DeFi Framework](https://github.com/KomodoPlatform/komodo-defi-framework) on a server to act as a seed node for the trading pairs they are planning to support.

##### A Slightly more Involved Method

*   The entrepreneur can fork the [Komodo DeFi Framework Desktop repository](https://github.com/KomodoPlatform/komodo-wallet-desktop) or start from scratch. They create a custom IDO GUI with the specific features needed to conduct an IDO and only add the coins/tokens involved in their IDO.
*   This method allows the entrepreneur to create an exclusive feel to their IDO and remove distractions. This GUI is developed for the IDO and will only be used for it.
*   This method also needs the entrepreneur to launch electrum servers for their coin if it is a Komodo Smart Chain or another UTXO type blockchain. And server software that supports lite wallets if their coin is a ETH or QTUM fork/clone.
*   The entrepreneur must also launch [Komodo DeFi Framework](https://github.com/KomodoPlatform/komodo-defi-framework) on a server to act as a seed node for the trading pairs they are planning to support.

##### Easy method, be Featured on Komodo DeFi Framework

*   The entrepreneur can contact the Komodo team at `partners@komodoplatform.com` and discuss their requirements.
*   The Komodo team can add a new tab to the subsequent release of Komodo DeFi Framework that features the new coin and has all the features needed to conduct an IDO.
*   The Komodo team can also launch the necessary infrastructure needed to enable a coin to have lite wallets and be enabled in Komodo DeFi Framework.
*   The entrepreneur and the purchasers can both use this software and an IDO can be conducted through it.
export const title = "Komodo DeFi Framework and Atomic Swaps";
export const description = "Komodo DeFi Framework allows people to trade cryptocurrency coins without a counterparty risk.";

# Komodo DeFi Framework and Atomic Swaps

## Introduction

Komodo DeFi Framework allows people to trade cryptocurrency coins without a counterparty risk. The protocol is open source and trading is available for any coin that any developers choose to connect to Komodo DeFi Framework.

Our service fully realizes decentralized order matching and trade clearing. The order-matching aspect relies on a peer-to-peer network to build public orderbooks, and trade clearing is executed through an atomic cross-chain protocol, also called an "atomic swap."

## Current Problems in Cryptocurrency Exchange

### Centralized Exchanges are Popular, but Limited

The current, most practical method for cryptocurrency exchange requires the use of centralized exchange services.

These centralized solutions require vouchers to perform the exchange, wherein the user sends their funds into the care of a corporate entity and receives "I Owe You" (IOU) statements in return. The user then trades these IOUs within a controlled environment and, when finished, returns their IOUs to the corporate entity for reimbursement.

Centralized exchanges carry great risk. Among many dangers present in this system, users are under the constant risk of their assets being stolen either by an inside theft or an outside hack. Furthermore, the operators of centralized exchanges are under intense legal and social pressure, as the operators are responsible both for the safety of thousands of users' funds and for the users' behaviors on their platforms.

To eliminate such dangers and limitations requires the creation of a decentralized alternative, wherein either the entity holding the funds during the trading process is not centralized, or the users are allowed to trade directly without middleman involvement.

### The Concept and Shortcomings of a Normal Decentralized Exchange

A decentralized exchange (DEX) allows users to trade funds within an environment that is at least partially decentralized.

Decentralization of an exchange can take many forms. For example, in 2014 Komodo developers began one of the earliest instances of a decentralized exchange, called "InstantDEX."

In this DEX, users sent their blockchain coins not to a centralized entity, but rather to a decentralized "gateway." The gateway was owned and controlled by several cooperating entities who were chosen from the online community. The gateway automatically distributed IOUs (called "proxy tokens") to the users, who then traded within the partially decentralized environment.

When finished, users sent their proxy tokens back to the gateway, and the gateway managers collectively signed for the release of the users' blockchain funds. The underlying technology of this solution is still in use by many blockchain platforms, and is sometimes referred to as a proxy-token protocol.

This form of a DEX is too limited to compete with centralized exchanges. Among many drawbacks, a proxy-token decentralized exchange must still have a storage center to hold the external cryptocurrencies represented by the proxy tokens. At best, this storage center is only distributed across several authority figures, and therefore users must still surrender control over their assets for the duration of the trading process.

As of today, no decentralized exchange has successfully replaced any of their centralized counterparts.

## Komodo DeFi Framework — A Complete Solution

We now present a fully functional, new decentralized technology that makes a competitive decentralized exchange possible. We call our technology Komodo DeFi Framework, and it allows people to freely and safely exchange cryptocurrency coins from one person to another.

The Komodo DeFi Framework includes a decentralized exchange and creates a competitive method for bartering cryptocurrencies, combining the key components of order matching and trade clearing.

These components are combined into a single integrated system that allows users to make a request to trade their coins, find a suitable trading partner, and complete the trade using an "atomic swap."

Unlike previous DEXs, Komodo DeFi Framework does not require users to send funds to either a centralized or decentralized party during the trading process. Rather, users maintain full control over the private keys of their funds at all times.

## The Decentralized Orderbook

The first component of Komodo DeFi Framework is Order Matching. This is the process of pairing a user’s offer to buy with another user’s offer to sell. The data of these offers form an orderbook.

The process of matching orders is not the actual trade itself, but is only a digitally created promise between users stating that they will perform their parts of the trade.

Komodo DeFi Framework features several technologies to facilitate order matching, including a peer-to-peer network, a decentralized orderbook, and a multicoin passphrase.

### Order Matching with Full-Relay and Non-Relay Nodes

To create a decentralized orderbook, Komodo DeFi Framework creates a custom peer-to-peer (P2P) network.

In this network, when a node places an order, other nodes on the network collaborate to distribute the data until all nodes are informed. Each node utilizes the data to build the orderbook locally. No centralized server is required.

To manage this P2P network, Komodo DeFi Framework utilizes two separate types of nodes: a full-relay node and a non-relay node.

The difference between a full-relay node and a non-relay node is that the former is typically a high-volume trader who provides liquidity to the network in exchange for being a trading hub on the network. This puts the trader in the position of being able to complete trades more quickly than their competitors.

The latter type of node (non-relay) is the more common user, and these nodes rely on the full-relay nodes. A non-relay node has all the same available trading options. We expect that most nodes joining the network will be non-relay nodes.

There are no requirements or payments necessary to become either type of node, and so anyone desiring to become a high-volume full-relay node will find no restrictions.

### One Passphrase, Many Addresses

As a part of order matching, Komodo DeFi Framework features a specialty wallet that can manage and trade among a multiplicity of different blockchain coins. In this technology, the user creates a single passphrase and uses this to unlock all public addresses associated with their desired coins.

The complexities of this process are managed by Komodo's Iguana Core technology.

## Atomic Swaps

For trade clearing, Komodo DeFi Framework implements our own unique variation of atomic swaps.

An atomic swap is a technology that allows two users to trade cryptocurrencies across two separate blockchains without requiring an intermediary third party.

The original concept of an atomic swap was created in 2013 by Tier Nolan and many other Bitcoin enthusiasts on the Bitcointalk.org chat forum. In 2014, this conversation inspired members of the Komodo development team to experiment with atomic swaps, and they have remained a key technology in our strategy ever since.

### The Value of the Atomic Swap

To understand why the atomic-swap protocol is necessary, one must first recall that computer code is executed in linear fashion. Even if we were to assume that both parties in a trade may be honest, on a computer the process of taking money from each digital wallet and pulling the money into the open must happen one wallet at a time.

Therefore, one person must release control over their money first. The atomic-swap protocol protects that person from vulnerability. Without the atomic swap, any malicious party involved would be able to destroy the fairness of the trade.

A key aspect of a proper atomic swap is that at each stage of the trade-clearing process, each user has incentives to proceed to the next step in the proper manner and disincentives to avoid abandoning the procedure. With this structure in place, regardless of a failure by either user to complete the protocol, each user receives a proper reward.

### Komodo DeFi Framework Manages a Public Trading Profile for Maker and Taker

In addition to the atomic-swap protocol, Komodo DeFi Framework also allows users to track the behavior of trading partners on the network via a Trust API.

The Trust API is not based on personal identity, but rather on behavior as associated with public addresses.

As a user practices good behavior on the network while maintaining a consistent public address, their network trust can increase, thus improving their odds of a willing trading partner.

Use of the Trust API is optional for all users.

### Introducing Taker and Maker

There are two parties in an atomic swap: the liquidity provider and the liquidity receiver. We call the provider "Maker" and the receiver "Taker."

#### Taker Makes a Request

The process of an atomic swap begins with the person who makes the initial request.

Taker will need two transactions to perform her swap. One transaction will cover the protocol fee, which is roughly 1/777th the size of the desired order. We call this fee the `<dexfee>`, and its primary purpose is to serve as a disincentive to Taker from spamming the network with rapid requests.

The `dexfee` is actually calculated as "the greater of either `0.0001 TAKER COIN` or `1/777th` the size of the desired order"

The second transaction required of Taker sends the actual amount she intends to swap. Komodo DeFi Framework first verifies that she has these funds, but for the moment she retains these funds in the safety of her own digital wallet.

#### Maker Answers Taker

On the other side of the atomic swap, we have the liquidity provider — Maker. Maker sees the request on the network for Taker’s atomic swap and decides to accept the trade. Now his part of the process begins.

To complete the trade, he must send one transaction. It will be worth 100% of what he and Taker intend to actually trade.

### Taker and Maker Are Committed

Assuming Taker and Maker are successfully connected, the process from this point forward becomes quite simple:

A summary of the procedure, starting from the beginning.

1.  Taker requests a swap and sends the `<dexfee>` transaction data to Maker.

2.  Maker receives the `<dexfee>`, verifies it, and sends `<makerpayment>`

    *   Maker generates a "secret", creates a hash of the secret, and shares this hash with Taker

    *   Maker does not send the payment to Taker directly, but rather into a temporary holding address

        *   On [utxo-based](/start-here/core-technology-discussions/miscellaneous/#the-utxo-an-elusive-yet-fundamental-concept) blockchains, this holding address is a P2SH hash/time locked output
        *   On ETH/ERC20 based blockchains, this address is an etomic-swap smart contract

    *   `<makerpayment>` enters a state of limbo on the Maker's coin network, held safely by encryption, awaiting either for Taker to spend the payment, or for the swap to time out

    *   If the latter occurs, `<makerpayment>` is automatically refunded to Maker via the Komodo DeFi Framework protocol

3.  Taker now sends `<takerpayment>`

    *   Taker does not send the payment to Maker directly, but rather into a temporary holding address

        *   On [utxo-based](/start-here/core-technology-discussions/miscellaneous/#the-utxo-an-elusive-yet-fundamental-concept) blockchains, this holding address is a P2SH hash/time locked output
        *   On ETH/ERC20 based blockchains, this address is an etomic-swap smart contract

    *   `<takerpayment>` enters a state of limbo on the Taker's coin network, held safely by encryption, awaiting either for Maker to spend the payment, or for the swap to time out

    *   If the latter occurs, `<takerpayment>` is automatically refunded to Taker via the Komodo DeFi Framework protocol

4.  Maker now spends the `<takerpayment>`

    *   To spend the payment Maker reveals the secret

5.  Taker now "spends" the `<makerpayment>`

    *   Taker finds that `<takerpayment>` is spent and extracts the secret from the spending transaction. The secret can be used to unlock the `<makerpayment>` and send the coins to Taker's address

While it may seem inefficient to have five transactions for a swap that could be done with two, the complexity of this process provides us with the requisite "trustless-ness" to maintain user safety.

### Incentives and Disincentives to Maintain Good Behavior

As we will now explain, at every step along the way there are incentives for each side to proceed, and there are various financial protections in place should one side fail.

Also, because payments are sent to these "temporary holding addresses" that exist within the Komodo DeFi Framework protocol, the protocol itself can assist in the process of moving money at the appropriate steps.

Let us now examine what is happening after each step.

#### 1 - Taker Sends `<dexfee>`

If Maker accepts the offer to trade, but does not send `<makerpayment>`, Taker only stands to lose the `<dexfee>`. This is only 1/777th of the entire transaction amount, so she loses very little.

Maker, on the other hand, stands to lose more. Since Maker did not follow through with his end of the bargain, the Komodo DeFi Framework network indicates on his public Komodo DeFi Framework trading profile that he failed in a commitment, thus decreasing his profile’s reputation. If Maker continues this behavior as a habit, he may find it difficult to discover trading partners.

So long as the frequency of Makers failing is low, the occasional extra `<dexfee>` paid by a Taker is a minor issue. However, if there is a sudden spike in misbehavior, the Komodo DeFi Framework code has built-in contingency plans which can provide refunds to Takers.

#### 2 - Maker Successfully Sends `<makerpayment>`

If Taker does not follow with her next step, the `<takerpayment>`, then Taker loses not only the `<dexfee>`, but she also receives a mark on her public Komodo DeFi Framework profile. She gains nothing, and Maker has no reason to fear as `<makerpayment>` will automatically return to him via the Komodo DeFi Framework protocol.

#### 3 - Taker Successfully Sends `<takerpayment>`

If Maker does not proceed with his next step (spending the payment), then after lock time expires Taker can simply activate an Komodo DeFi Framework protocol that will refund the payment.

#### 4 - Maker Spends `<takerpayment>`

If Taker does not follow by also "spending" the `<makerpayment>`, it is of no concern to Maker because he has already received his funds. If Taker is simply sleeping and forgets to spend the `<makerpayment>`, she can only hurt herself.

Naturally, for Taker this is slightly dangerous. Taker’s best course of action is to remain alert and spend the `<makerpayment>` once the `<takerpayment>` is spent and the secret is revealed.

#### 5 - Taker Spends `<makerpayment>`

The process is complete. Taker received the `<makerpayment>`. Maker received the `<takerpayment>`. The entire process only cost Taker the original `<dexfee>`.

At each step along the way, the side that needs to take the next step is motivated to do so, with greater and greater urgency until the process is complete.

## Additional Details

### Always Manage Risk Appropriately

Naturally, users must understand that outside forces can disable the process and thereby damage one of the users. For instance, an Internet outage for Taker could be particularly dangerous. Therefore, users are advised only to trade manageable sums that they are willing to put at risk, and only with nodes that have reliable reputations.

### The Connection is the True Challenge of an Atomic Swap

Performing a successful connection between Maker and Taker, and verifying their funds, is the most complex and difficult aspect of creating the Komodo DeFi Framework network.

Myriad factors are involved in a successful attempt for Maker and Taker to connect: human motivation; the experience level of the users; economics; connection technology; user hardware setups; normal variations within Internet connections; etc.

We emphasize to users here that the process of performing these actions over a peer-to-peer network has almost an artistic element to it. An attempt to successfully connect Maker and Taker can be thought of more like fishing, where we must simply cast and recast our line until we successfully connect with our target.

If a user attempts a trade and no response returns from the network, the user should slightly adjust the parameters of their offer and try again. As Komodo DeFi Framework continues to iterate and improve, and as the number of users increases, we expect any required effort to lessen for users, the network, and the Komodo DeFi Framework GUI apps.

### The DEX Fee

People will notice that there is a small `<dexfee>` required as part of the Komodo DeFi Framework protocol. This is 1/777 of the transaction amount and it is calibrated to make spam attacks impractical. The 1/777 fee is about equal to 0.1287% of the `<takerpayment>`.

By forcing a would-be attacker to spend real money, attacking the network becomes costly. Without this spam prevention, Komodo DeFi Framework could otherwise be attacked at the protocol level by any person performing a plethora of trade requests.

Naturally, some atomic swaps can initiate and then fail to complete, which raises questions about what happens to the `<dexfee>` in this scenario. The `<dexfee>` is the first charge in the protocol; in this sense, there is a `<dexfee>` charged for these failed atomic swaps.

However, this failure should not be looked upon in isolation. The Komodo DeFi Framework protocol is based on statistics. Statistically speaking, there will be some percentage of atomic swaps that start and will not complete.

Let us suppose a 15% failure rate at this stage of the atomic swap (15% is three times higher than the rate of failure we currently observe in our testing). Even in this scenario, the effective `<dexfee>` cost is still only 0.15% to all Taker-side requests across the entire network.

If you experience the loss of a `<dexfee>` transaction for an atomic swap that fails to complete, know that this is all part of the statistical process. If you find yourself paying more than 0.15% of your completed trades in fees, please let us know.

As an organization, when speaking generally to our audience online, we state that the `<dexfee>` is just 0.15%. In this manner, we hope to create the expectation that 0.15% is normal; if the network performs perfectly, on the other hand, users will get a blessing in the form of a lower fee, 0.1287%.

### Dealing with Confirmations

Since Komodo DeFi Framework is trading permanently on blockchains — as opposed to updating an internal database of vouchers — both sides of the trading pair need to wait and watch as miners on the respective blockchains calculate transaction confirmations.

Because the payments that occur on one blockchain will proceed regardless of the actions on the other blockchain — a confirmation failure on one chain will not stop with the other blockchain performing its duties as normal — the Komodo DeFi Framework protocol must automatically observe and adjust as necessary.

### Komodo DeFi Framework is Entirely Experimental, and Should Be Treated As Such

We warn our readers, nevertheless. Every element of the Komodo ecosystem is still considered to be highly experimental. We provide no investment advice, nor any guarantees of any funds utilized on our network. Use our products only at your own risk.

### The Komodo DeFi Framework API

We created an API model that is generally the same for all coins.

For more information, [please turn to the Komodo DeFi Framework documentation.](/komodo-defi-framework/)
export const title = "Komodo SDK";
export const description = "Build and launch your blockchain and DeFi projects with ease. Komodo SDK offers a complete suite of tools, APIs, and libraries for streamlined development.";

import komodoSDKarch from "@/public/images/docs/komodo-sdk/komodo-sdk-arch.png";
import komodoSDKbrand from "@/public/images/docs/komodo-sdk/komodo-sdk-brand.jpg";

# Komodo SDK

Komodo SDK is an all-in-one solution for building, deploying, and managing blockchain and DeFi (d)applications. It includes the Komodo DeFi Framework, Komodo Core Protocol and the Komodo GUI/DAPP Suite, which make up a complete set of tools, APIs, and libraries to help you create your own blockchain-based products.

All these tools empower developers, businesses, and end-users alike. Each component within the Komodo SDK serves a distinct purpose and contributes to an integrated experience, streamlining the process of building, deploying, and managing blockchain and DeFi applications. In this doc, we will explore the key components that make up the “new” Komodo SDK and discuss their features, functions, and key purpose.

## Komodo SDK Components

### Komodo DeFi Framework

It is the ultimate solution for blockchain and DeFi developers. Includes a Wallet API and DEX API bundled together. Handles order-matching, p2p communication network for nodes etc.,

*   Build a non-custodial wallet
*   Launch a cross-chain/protocol decentralized exchange
*   Create custom apps such as an initial DEX offering (IDO) portal

### Komodo Wallet, GUI or Dapp Suite

It is the flagship 3-in-1 decentralized application.

*   Non-custodial wallet
*   Cross-chain/protocol DEX
*   Crypto Bridge

Available in web browser, mobile, and desktop

### Komodo Core Protocol

Blockchain network with a scalable multi-chain architecture. Enables anyone to launch an independent blockchain with its own coin - no gas fees and no secondary cryptocurrency needed.

### KMD

Native coin of the Komodo Crypto Ecosystem

*   Transactions fees on the KMD blockchain are currently fractions of a cent
*   Taker orders on DEX trades within Komodo Wallet (and any Komodo DeFi Framework Powered DEX) receive a 10% dex-fee reduction on all KMD trading pairs
*   (On roadmap) KMD burn mechanism for each trade within Komodo Wallet (and any Komodo DeFi Framework Powered DEX)
export const title = "Miscellaneous";
export const description = "Komodo's KMD coin provides rewards and privacy features, ensuring security and empowering users in the decentralized ecosystem.";

# Miscellaneous

## Details Regarding KMD Main Chain

| Era of Block Rewards   | Block Height | Block Reward | Coin Supply |
| ---------------------- | ------------ | ------------ | ----------- |
| Current Block Rewards  | \~1150000    | 3 KMD        | \~115000000 |
| First Reward Reduction | 7777777      | 2 KMD        | \~200000000 |
| Final Reward Reduction | 15555553     | 1 KMD        | \~215000000 |

The foundational coin of the Komodo ecosystem is named after the ecosystem itself, Komodo (KMD).

### Rewards

Those who hold KMD may earn rewards of up to 5.1% annually. Any wallet address that holds at least 10 KMD is eligible. KMD holders must simply move their KMD once a month—even if the funds are sent back to the same address from which they originated—in order to earn their reward. This reward is built into the core code of Komodo.

The reward comes from an opportunity provided by our unique security system, dPoW. The nature of the reward is rooted in the financial incentive that is typically given to miners on a normal PoW chain. On a normal PoW chain, when a miner mines a new block, the blockchain mints new coins and delivers them to the miner’s indicated wallet. For instance, on the Bitcoin blockchain, the reward for mining a new block is currently \~12.5 BTC. In dPoW, we do not need to allocate such a high incentive to miners, as we already maintain access to the hash rate of our chosen PoW network, Bitcoin. Therefore, when we created the KMD main chain, we recoded this coin-minting reward to distribute 5.1% annual rewards to all holders of at least 10 KMD.

To earn rewards in the full amount of 5.1%, users must move their funds on the blockchain at least once per month. The reward is calculated as a part of the utxo transfer process. The KMD code only calculates rewards for utxos up to one month, and then stops. By simply sending the full balance of a wallet to the same receiving address, a user can generate a new utxo. In this manner, the user can claim their current rewards, and continue receiving them for at least one month.

The KMD 5.1% reward will continue for a period of approximately twelve to fourteen years. Specifically, the reward will cease when the KMD chain reaches a block height of 7777777.

Note that no one is forced into using KMD in our ecosystem. We are often asked why we chose this route, as the free nature of the Komodo ecosystem can be in direct contrast to the philosophies of many other ecosystems and exchanges. Other ecosystems often require users to use the developer’s coin.

The reason why we follow a more open practice is that we strive to adhere to the guiding principles of decentralization and open-source technology. We want to create a blockchain platform where people are free to use whatever is most useful for them in their entrepreneurial endeavors. Keeping KMD as an optional element empowers the members of the Komodo ecosystem with freedom.

## The Nature of Privacy Features in the Komodo Ecosystem

### The Option of Privacy is Essential

One primary goal of the Komodo ecosystem is to provide our users with the highest levels of security. The option to enable oneself with privacy is an inherent part of a strong security system. Privacy empowers users with the ability to make choices without being directly controlled or observed by a third-party actor.

Many of humanity’s most meaningful advancements in art, technology, and other human endeavors began in situations where the creator had the security of privacy in which to explore, to discover, to make mistakes, and to learn thereby.

### Privacy Issues in Popular Privacy-Centric Blockchains

Across the entire cryptocurrency industry, current pathways to obtain privacy in the blockchain industry have many problems.

One of the most popular methods to obtain privacy is the use of a centralized mixing service. In this process, users send their cryptocurrencies to service providers, who then mix all the participants’ coins together, and return the coins according to the relevant contributions. With this method, the most dangerous issue, among many, is that for the duration of the mixing period users lose control over their currency. The funds, therefore, are subject to theft and human error.

Other decentralized coin-mixing methods, such as the [coin shuffle,](https://bitcoinmagazine.com/articles/shuffling-coins-to-protect-privacy-and-fungibility-a-new-take-on-traditional-mixing-1465934826/) require coordinating with other human parties. This also introduces the potential for the same issues of theft and human error, and adds yet another risk: the coordination between human parties can result in the disclosure of a user’s privacy.

Some cryptocurrencies support mixing as a part of the normal transaction process out of a desire to provide constant anonymization. Varying methods for randomizing these transaction-mixing patterns exist among the many different brands of relevant cryptocurrencies, and each feature strengths and weaknesses in their approach.

### Komodo's Approach to Privacy Technologies

The roots of the Komodo ecosystem stem from the seminal work of Satoshi Nakamoto and his Bitcoin protocol. One of the key challenges in this technology is that the original protocol does not make any account for privacy. Therefore, Komodo began not as a fork of the vanilla Bitcoin protocol, but rather as a fork of Zcash. The latter is a privacy-centric fork of Bitcoin, and therefore Komodo inherits technology from both Bitcoin and Zcash by this action.

The Komodo Smart Chain software, komodod, retains the inherent privacy features of Zcash. These primarily consist of the ability to convert money from a transparent address to a private address, and then to transfer money from one private address to another. When sending money that is already private to an address that is also private, Zcash technology allows the funds to move without leaving a public data trail for later analysis.

This is one of the most powerful forms of blockchain privacy in existence, as the provided privacy is effectively permanent.

#### Private and Non-Private Addresses

On any privacy-enabled Smart Chain, there are two types of addresses. One is transparent, the other is private.

#### Transparent Addresses

We call a transparent address a "T address." These are fully accessible to the user, and they are the means of conducting normal transactions. All currency entering and leaving a T address is fully visible to the network.

The user must use these addresses for most interactions on-chain, including most, if not all, of the Antara Module transactions, and when using Komodo DeFi Framework.

#### Private Addresses

We call a privacy-enabled address a "Z address," as they utilize the Zcash parameters and zk-SNARK technology.

Z addresses often have RPCs that are separate from the RPCs used for T addresses. For example, [z\_gettotalbalance](/smart-chains/api/wallet/#z-gettotalbalance) is separate from [getbalance.](/smart-chains/api/wallet/#getbalance)

The cost of interacting with Z addresses is often higher than the cost of interacting with a T address. This is due to the fact that Z transactions require more block space, due to their demands for increased levels of encryption.

### Method of Moving Funds Privately

There are three types of transactions that can take place in respect to privacy technology.

All of the following transactions are accomplished using the [z\_sendmany](/smart-chains/api/wallet/#z-sendmany) RPC.

#### Transparent to Private

***

T -> Z

***

A user sends funds from a T address to a Z address.

This is not a private transaction. An observer of the blockchain can observe both the T address from which the funds are consumed and the Z address to which the funds are sent.

#### Private to Private

***

Z -> Z

***

This is a private transaction. Using zk-SNARK technology inherited from Zcash, this transaction moves funds from one address to another without leaving any data available in the public domain for later observation.

The user may also consider enhancing their privacy through services such as [Tor](https://www.torproject.org/).

All privacy from zk-SNARK technology is derived solely as a part of this type of transaction.

#### Private to Transparent

***

Z -> T

***

This is not a private transaction. Rather, this is the transaction wherein funds again become public, and therefore usable for services such as a typical Antara Module or an Komodo DeFi Framework exchange.

Observers on the blockchain can observe both the Z address from which the funds are consumed and the T address to which the funds are sent.

### Additional Privacy Considerations

Although the anonymization process provides a measure of privacy and may appear to be sufficient, there are still more precautions a user must take. Two main attacks are available to a would-be sleuth.

#### The Timing Attack

In this attack, the sleuth simply studies the time the funds disappear from a T address and looks for funds to appear in another T address soon thereafter. If the privacy-user persistently chooses predictable timing for initiating and completing their transfer of funds, a determined sleuth may deduce the user's trail of funds.

For effective privacy, the user should wait for other users on the Smart Chain to exercise privacy transactions, and thereby conceal their own privacy behavior. The more users using privacy features, the more private the transactions become.

#### The Knapsack Attack

The Knapsack Attack is similar to the Timing Attack, but as applied to amounts. For example, if there is only one KMD address that sends 1000000 KMD from a T address to a Z address, and later 1000000 KMD emerges from a Z address to a T address, the sleuth can easily discern the user’s trail of funds.

To protect against the Knapsack Attack, users can vary their amount of funds in both `T -> Z` and `Z -> T` transactions.

### A Word on Risks Inherent in zk-SNARK Technology

Zero-knowledge transactions rely on the Zcash parameters as put forth by the Zcash team. The Zcash parameters are a "zero-knowledge" form of technology. This is a powerful form of privacy, and arguably superior to other forms as it is effectively permanent. Relying on the Zcash parameters allows us to turn our creative resources to other blockchain-technology challenges, while still empowering members of the Komodo ecosystem with the option of privacy.

To create the Zcash parameters, the original Zcash developers had to create a series of keys that, when combined, created a master key that could unlock and lock the parameters. After using the master key to create the parameters, the team destroyed every individual key. The team conducted this endeavor in a public manner. We encourage interested readers to view the "Zcash Ceremony" explanation, and to search for other viewpoints as well.

To briefly summarize the security measures, the Zcash team used several layers of protection including: multi-party computation, air-gapped compute nodes, hard-copy evidence trails, a uniquely crafted distribution of the Linux operating system, and the physical destruction of each piece of hardware that held an individual key. The resulting layers of defense would be of the highest level of difficulty for an outsider to penetrate. Furthermore, the method of creation and destruction ensured that the internal security of the project was faultless, so long as at least one member of the entire Zcash team was honest.

By our observation, the team performed this endeavor with sufficient competence and due diligence. Furthermore, given the nature of the project, the longstanding reputation of the Zcash developers, and the modus operandi of their lives’ work, we believe they were properly motivated to perform the creation and destruction in a capable and honest manner.

Nevertheless, there are privacy advocates in the cryptocurrency industry who maintain a degree of suspicion over any project that requires an element of human trust. This suspicion extends to the Zcash parameters. These observers continually scrutinize the Zcash project, searching for more and more processes by which the creation ceremony could have failed. Yet, while various theories have been put forth, no actual failure in the Zcash parameters has been discovered.

In adopting the Zcash parameters, we receive frequent questions regarding how they affect Komodo-based currency. The answer is that the privacy in the Komodo ecosystem is permanent, regardless of any potential fault by the Zcash team. Furthermore, we can adopt any updates the Zcash team releases to the parameters.

In the unlikely event that someone was able to retain a complete copy of the master key, the only power the holder would have, would be the ability to create new private money in the currency of any Smart Chains utilizing zero-knowledge transactions.

This holder could then shift that value into transparent, spendable money. This could negatively impact any affected Smart Chain's local community, and we would be required to adapt our platform. If a fault in the Zcash parameters were to be discovered, the Komodo team has various contingency methods at our disposal to remove the Zcash parameters and replace them with a new set of parameters.

Though in Komodo we do not see this as a realistic threat, we nevertheless include the information here in our documentation to provide complete transparency for any user who seeks to invest their resources in a privacy-enabled Komodo Smart Chain.

## The Utxo: An Elusive, Yet Fundamental Concept

All Bitcoin-based software relies heavily on a technology called the "utxo," short for Unspent Transaction. This technology was invented in the original Bitcoin protocol. Yet despite the technology's age, even the most active of cryptocurrency users rarely know what utxos are or why they exist.

To better understand utxos, let us first examine the language of a common user when describing how much cryptocurrency money they have and how they perceive those funds. We will therefore need to understand the concept of "satoshis," the way a blockchain handles the collection and distribution of funds, and how we utilize these core technologies when trading on Komodo DeFi Framework.

### Comparing the Utxo to Fiat Money

Let us assume a cryptocurrency user, whom we name Charlie, has $10,000 in his physical wallet. Naturally, when Charlie thinks about the amount of physical (or "fiat") money he has, he says to himself, "I have $10,000."

However, there is no such thing as a $10,000-dollar bill. Instead, Charlie actually has a collection of smaller bills stacked together. For instance, he could have a stack of $100-dollar bills, the total of which equals $10,000 dollars.

If Charlie goes to purchase an item that costs $1, and he only has $100-dollar bills in his wallet, to make his purchase he will take out a single $100-dollar bill and give it to the cashier. The cashier then breaks that $100-dollar bill down into a series of smaller bills. The cost for the item, $1, remains with the cashier, and the cashier then provides change—perhaps in the form of one $50-dollar bill, two $20-dollar bills, one $5-dollar bill, and four $1-dollar bills.

Charlie now thinks to himself, "I have $9,999." Specifically, however, he has ninety-nine $100-dollar bills, a $50-dollar bill, two $20-dollar bills, one $5-dollar bill, and four $1-dollar bills.

We emphasize that not only does he not have ten thousand $1-dollar bills, he also does not have one million pennies ($0.01). Furthermore, because pennies are the smallest divisible unit of value in Charlie’s wallet, we could point out that each bill is a collection of its respective units of pennies. For instance, a $1-dollar bill in Charlie’s wallet we could describe as, "a bill that represents a collection of one hundred pennies and their value."

### Understanding Cryptocurrencies and Their Utxos

#### A Satoshi is The Smallest Divisible Unit of a Cryptocurrency

Continuing with our explanation of utxos, we next need to understand the concept of "satoshis." The name "satoshi" is derived in honor of Satoshi Nakamoto, author of the original Bitcoin whitepaper. By convention in the cryptocurrency community, one satoshi is equal to one unit of a coin at the smallest divisible level. For instance, 1 satoshi of Bitcoin is equal to 0.00000001 BTC.

Let us suppose now that Charlie has 9.99000999 BTC (Bitcoin) in his digital wallet. Assuming Charlie correctly understands the concept of satoshis, Charlie could say to himself, "I have nine hundred and ninety-nine million, nine hundred and ninety-nine satoshis of bitcoin." This is how Charlie might mentally perceive the collection of money that exists in his digital wallet, like he perceives the $9,999 in his fiat wallet.

#### A Utxo is a Packet of Satoshis, just as a Fiat Dollar Bill is a Packet of Pennies

Recall now that with fiat money, Charlie did not think about how his original $10,000 was comprised of smaller individual $100-dollar bills. Similarly, Charlie also does not think about how his 9.99000999 BTC could be comprised of smaller collections of satoshis.

Furthermore, just as Charlie did not carry around fiat money as a collection of pennies, he also is not carrying around a raft of satoshis. Were he to try to carry a million pennies in his physical wallet, the weight of the wallet would be unmanageable. Similarly, if the Bitcoin protocol were to attempt to manage nine hundred and ninety-nine million, nine-hundred and ninety-nine satoshis, the "data weight" would be so heavy, the Bitcoin protocol would be enormous and unmanageable.

To optimize "data weight," the Bitcoin protocol therefore bundles up the satoshis into something that is like the example of dollar bills earlier, but with one important difference. In fact, here is where the Bitcoin protocol exercises a superiority over fiat money by deviating from the limitations fiat money must obey when bundling smaller values into larger values.

In fiat money, one hundred pennies are bundled into a one-dollar bill, which can then be bundled into a larger bill, and so on. All the sizes of fiat money are preset and predetermined by the issuer of the fiat money when they print their bills and coins.

The Bitcoin protocol, however, does not need to pre-plan the sizes of "bills" (i.e. the collections of satoshis) in the owner’s wallet. Bitcoin is freer in this sense; it can shift and change the sizes of its "bills" at will because there is no need to accommodate for the printing of physical coins and paper.

Instead, the Bitcoin protocol allows for the developer of digital wallets to write code that can optimize how bitcoin satoshis are packaged into "bills," and thus the community of developers can work together to keep the data weight of the blockchain manageable. The better the digital-wallet developer, the more efficient the size of the "bills" (a.k.a. the packets of satoshis).

The Bitcoin protocol does have one limitation, however: It must keep track of how these satoshis are being collected into larger "bills" in everyone’s digital wallets. After all, a key idea of Bitcoin is that everything happens under the public eye, where it can be verified.

Because the Bitcoin blockchain must keep track of the sizes of these packets of satoshis, the only time the packets can be assembled or disassembled into larger and smaller sizes is at the moment when the user is spending money on the public blockchain. It is at this time that the user is under the public eye, and therefore his actions can be verified.

To compare this limitation to fiat money, consider the effect created were Charlie to cut a $100-dollar bill into smaller pieces. The $100-dollar bill would no longer be respected as a valid form of currency.

As the word "utxo" is not a sonorous word, some users in the Komodo ecosystem simply refer to utxos as "bills." The concept is effectively the same. However, as the rest of the blockchain industry primarily uses the word "utxo," we frequently must use this word to maintain a common line of communication. The word utxo will be used throughout the rest of this documentation, to keep in line with industry practices.

The utxo packet can be any size, and the developer of the GUI software decides on this process. Most importantly, and to reiterate, a utxo can only be resized during the process of spending, as this is the moment when the user interacts with the public blockchain.

To further clarify this, let us return to Charlie’s example with fiat money. Recall that when Charlie went to purchase a $1-dollar item, he only had $100-dollar bills in his wallet. He had to give out one $100-dollar bill, and then receive a broken-down collection of dollar bills in return.

This is exactly how it works with utxos. Charlie has a collection of utxos in his digital wallet. When he goes to buy something, he will give out utxos until he surpasses how much he owes, and then the extra change from the last utxo will be broken down and returned to him.

For example, let us suppose that Charlie’s 9.99000999 BTC is comprised of three utxos worth the following values:

| Utxos in Charlie’s Wallet | Value          |
| ------------------------- | -------------- |
| Utxo #1:                  | 0.50000000 BTC |
| Utxo #2:                  | 0.49000999 BTC |
| Utxo #3:                  | 9.00000000 BTC |
| Total                     | 9.99000999 BTC |

Charlie now desires to purchase an item that costs 0.60000000 BTC. He will have to hand out enough utxos from his wallet until he covers the costs of this transaction, just as he would if he were using fiat money. The Bitcoin protocol calculates the change from the transaction and then returns his change to him.

Remember that there is a fee when spending money on a blockchain. Since we are using Bitcoin in this example, the fee would be paid to cryptocurrency miners. Let us imagine that the fee the miners charge Charlie is 999 satoshis.

We begin by looking at how Charlie would see the process of making the purchase, assuming he does not understand the concept of utxos. For now, Charlie only understands how much is in his wallet at the satoshi level as he conducts his transaction.

| Value              | Description                                                       |
| ------------------ | ----------------------------------------------------------------- |
| 9.99000999 BTC     | The amount Charlie initially owns                                 |
| (-) 0.60000000 BTC | The amount Charlie sends to the digital cashier for his purchase  |
| (-) 0.00000999 BTC | The network fee paid to miners                                    |
| ------------------ | ----------------------------------------------------------------- |
| 9.39000000 BTC     | The amount left in his wallet                                     |

This deduction for his purchase all appears very simple to Charlie—a testament to
the Bitcoin protocol’s effective design.

In the background, however, the digital wallet handles the utxos and the change process in a manner as determined by the programmer. In Charlie’s example, let us assume that it proceeds this way:

| Value                    | Description                                                              |
| ------------------------ | ------------------------------------------------------------------------ |
| 0.60000999 BTC           | The total amount that Charlie owes to the cashier and network            |
| (-) 0.50000000 BTC       | The wallet sends the full value of **utxo #1** to the digital cashier    |
| ------------------------ | ------------------------------------------------------------------------ |
| 0.10000999 BTC           | This is the remaining total amount that Charlie still owes               |

The wallet now brings out utxo #2, which is worth 0.49000999 BTC:

This utxo is broken down or shattered into smaller pieces.

| Value                | Description                                                            |
| -------------------- | ---------------------------------------------------------------------- |
| 0.49000999 BTC       | The size of Charlie’s **utxo #2**, now in the process of change        |
| (-) 0.10000000 BTC   | This shatter of **utxo #2** goes to the cashier (payment fulfilled)    |
| (-) 0.00000999 BTC   | This shatter of **utxo #2** pays the network fee to the miners         |
| -------------------- | ---------------------------------------------------------------------- |
| 0.39000000 BTC       | This last shatter now returns to Charlie’s wallet as a new utxo        |

Charlie now has one new utxo in his wallet, and it is worth 0.39000000 BTC:

| Charlie’s New Wallet State   | Value            |
| ---------------------------- | ---------------- |
| Utxo #3:                     | 9.00000000 BTC   |
| Utxo #4:                     | 0.39000000 BTC   |
| ---------------------------- | ---------------- |
| Total                        | 9.39000000 BTC   |

If Charlie wants to buy something later, these utxos will have to be broken up once more, according to the costs and programming of the digital wallet. Again, whatever is left over from his last utxo comes back to his own wallet as a new utxo.

Now let us suppose that Charlie receives 0.4 BTC from someone else. In Charlie’s wallet, he will see a total of 9.79 BTC. However, in his wallet there are now actually three utxos:

| Charlie’s New Wallet State | Value          |
| -------------------------- | -------------- |
| Utxo #3:                   | 9.00000000 BTC |
| Utxo #4:                   | 0.39000000 BTC |
| Utxo #5:                   | 0.4000000 BTC  |
| Total                      | 9.79000000 BTC |

As a result, the number and sizes of utxos in Charlie’s wallet will vary over time. He may have many smaller utxos that make up his full balance, or sometimes he might just have one large utxo that comprises all of it. For Charlie, it is normally possible to ignore this since the wallet developer could handle everything automatically.

However, a developer in the Komodo ecosystem will likely encounter the concept of utxos in the course of software development, and therefore we encourage developers to practice their understanding.

## Conclusion

This concludes a thorough explanation of the foundational technologies of the Komodo ecosystem. We are working diligently to improve the user experience. While some may say that the cryptocurrency industry is but a bubble, at Komodo we believe we have not yet begun the fight. We hope that the innovations we provide will be a meaningful contribution to the remarkable advent of blockchain, decentralization, and open-source technologies.
export const title = "Acknowledgements and References";
export const description = "This page has acknowledgements and references used in the Core Technology Discussions Section.";

# Acknowledgements and References

*   BarterDEX – A Practical Native DEX ( [https://github.com/SuperNETorg/komodo/wiki/barterDEX-Whitepaper-v2](https://github.com/SuperNETorg/komodo/wiki/barterDEX-Whitepaper-v2) )
*   Nakamoto Satoshi (2008): Bitcoin: A peer-to-peer electronic cash system. ( [https://bitcoin.org/en/](https://bitcoin.org/en/) )
*   Mtchl (2014): The math of Nxt forging ( [https://www.docdroid.net/ahms/forging0-4-1-pdf](https://www.docdroid.net/ahms/forging0-4-1-pdf) )
*   King Sunny, Nadal Scott (2012): PPCoin: Peer-to-Peer Crypto-Currency with Proof-of-Stake ( [https://www.peercoin.net/read/papers/peercoin-paper.pdf](https://www.peercoin.net/read/papers/peercoin-paper.pdf) )
*   Delegated Proof-of-Stake Consensus ( [https://komodoplatform.com/en/academy/delegated-proof-of-stake/](https://komodoplatform.com/en/academy/delegated-proof-of-stake/) )
*   Miers Ian, Garman Christina, Green Matthew, Rubin Aviel: Zerocoin: Anonymous Distributed E-Cash from Bitcoin ( [https://isi.jhu.edu/\~mgreen/ZerocoinOakland.pdf](https://isi.jhu.edu/~mgreen/ZerocoinOakland.pdf) )
*   Ben-Sasson Eli, Chiesa Alessandro, Garman Christina, Green Matthew, Miers Ian, Troer Eran, Virza Madars (2014): Zerocash: Decentralized Anonymous Payments from Bitcoin ( [http://zerocash-project.org/media/pdf/zerocash-extended-20140518.pdf](http://zerocash-project.org/media/pdf/zerocash-extended-20140518.pdf) )
*   Ben-Sasson Eli, Chiesa Alessandro, Green Matthew, Tromer Eran, Virza Madars (2015): Secure Sampling of Public Parameters for Succinct Zero Knowledge Proofs ( [https://www.ieee-security.org/TC/SP2015/papers-archived/6949a287.pdf](https://www.ieee-security.org/TC/SP2015/papers-archived/6949a287.pdf) )
*   NXT Community: NXT White paper (Previously available at `http://wiki.nxtcrypto.org/wiki/Whitepaper:Nxt`)
*   Larimer Daniel, Scott Ned, Zavgorodnev Valentine, Johnson Benjamin, Calfee James, Vandeberg
*   Michael (March 2016): Steem, An incentivized, blockchain-based social media platform.( [https://steem.com/SteemWhitePaper.pdf](https://steem.com/SteemWhitePaper.pdf) )
*   BitFury Group (Sep 13, 2015): Proof of Stake versus Proof of Work White Paper ( [https://bitfury.com/content/downloads/pos-vs-pow-1.0.2.pdf](https://bitfury.com/content/downloads/pos-vs-pow-1.0.2.pdf) )
export const title = "Start Here"
export const description = "This section contains descriptions of the technologies offered by Komodo Platform, links to guides, tutorials for the technologies, a glossary and an outline of a learning path"

# Start Here

This section of the documentation presents an in-depth exploration of the various technologies that comprise the Komodo Platform. It not only describes each technology in detail but also provides valuable links to comprehensive guides and engaging tutorials, tailored to ensure a thorough understanding of each technology.

For your convenience, we've also included a comprehensive glossary to elucidate key terminologies. Furthermore, we've curated a logical and progressive learning path, designed to help you master the technologies offered by Komodo Platform effectively and efficiently.

Join us as we embark on this enlightening journey of discovery, providing you with the tools and resources necessary to unleash the full potential of the Komodo Platform.

ToC for this section:
export const title = "Common Terminology and Concepts";
export const description = "Learn about common terminology and concepts in the Komodo ecosystem, including 51% attacks, Antara addresses, Antara customization, Atomic Swaps, and more.";

# Common Terminology and Concepts

## 51% Attack

A 51% attack is a dangerous event wherein an attacker uses the fair rules of blockchain technology to "steal" an item of value from their intended victim.

A Komodo Smart Chain that uses the Komodo Notary Node dPoW service receives protection from the 51% Attack.

### Process of Conducting a 51% Attack

In a 51% Attack, an attacker first performs a transaction that spends funds to their intended victim.

Once the victim distributes to the attacker the purchased item of value, the attacker then provides 51% of the total hash rate of the blockchain network to support a version of the blockchain history wherein the transaction never took place.

The attacker must maintain this hash rate long enough for the "false" version of history to become so deeply embedded, removal is impossible. Once accomplished, the attacker may discontinue their hash rate and leave with their spoils.

### Komodo's dPoW Security Service is Designed to Prevent 51% Attacks

The Komodo blockchain's consensus mechanism protects Komodo Smart Chains from 51% Attacks. For more information, see the [Delayed Proof of Work Core Technology Discussion.](/start-here/core-technology-discussions/delayed-proof-of-work/#the-51-attack)

## Antara Address

An Antara Address is a user address that is uniquely associated with a single Antara Module.

The Antara Address is based in part on the private key associated with the pubkey that the user provides during the initiation of an Antara-enabled Smart Chain instance.

The Antara Address is different from a normal base58 encoded address, as the Antara Address also takes into account other information besides the pubkey's private key. The additional information includes an EVAL code that is unique to the Antara Module associated with this Antara Address.

For more information, see the [Understanding Antara Addresses section here.](/antara/tutorials/understanding-antara-addresses/)

## Antara Customization

An Antara Customization is a blockchain-functionality enhancement created by the Komodo team to add features that extend the capabilities of the default Bitcoin/Zcash protocol fork, upon which Komodo is based.

Antara Customizations are activated at runtime using special parameters.

For more information, see the [Antara Customizations section here.](/antara/setup/antara-customizations/)

## Antara Framework

The Antara Framework is a collection of features and functionality created by the Komodo developers to enhance the capabilities available to a Smart Chain developer.

The framework includes Antara Customizations, Antara Modules, Antara Smart Chain Composer (coming soon), among other Komodo technologies.

## Antara Module

An Antara Module is a Smart Chain enhancement that allows for arbitrary code to be included and evaluated as a part of achieving consensus.

Most developers use Antara Modules without directly engaging with the arbitrary code of the module.

Advanced developers can develop new modules by adding new arbitrary code into a new Antara Module.

## Asset

An asset in the Komodo ecosystem typically refers to a blockchain coin or token that represents value to the holder.

Assets can represent both digital and real-world valuables. However, enforcing blockchain asset behavior on real-world valuables requires an arbitrating party, such as a legal system or physical security service.

## Atomic Swap

An atomic swap is an exchange of assets that takes place between two separate and unconnected blockchains.

Atomic swap technology is unique in that it requires no middleman to hold the assets in escrow during the process of exchange. Instead, users retain the private keys to their funds until the precise moment the exchange occurs.

Should either party fail to complete the trade, Komodo's atomic-swap software ensures that all parties receive their funds in return, and neither side receives a reward for the failure.

For more information, [discover the Komodo DeFi Framework Introduction section here.](/komodo-defi-framework/tutorials/)

## Block

A block is a collection of transactions.

In the Komodo ecosystem, by default miners and stakers on a Smart Chain network create a new block every minute. Each block contains transactions that were created by users since the previous block.

Various block customizations are available in the [Antara Customizations section.](/antara/setup/antara-customizations/#ac-blocktime)

## Block Explorer

A block explorer is a website that allows users to query information about a particular blockchain.

Users can request information about a specific transaction, block, address, and more.

## Block Reward

A block reward is a financial reward given to the miner or staker who finds the nonce necessary to create a new valid block hash.

Because the Komodo ecosystem and the KMD main chain are designed to avoid competing directly with the Bitcoin hash rate, KMD also features a different kind of block reward.

Users automatically receive a monthly 5.1% Reward (given in KMD) for holding +10KMD in any address on the KMD main chain.

This reward derives from the funds that would otherwise be granted to a miner on a competitive Proof-of-Work based blockchain.

For more information, see the [Rewards section.](/start-here/core-technology-discussions/miscellaneous/#details-regarding-kmd-main-chain)

## Burn

In various instances, a user can "burn" cryptocurrency assets by sending the assets to an address from which recovery is provably impossible. The address in this situation is called a "burn address."

Burn addresses can only receive funds. These addresses do not have associated private keys necessary for spending, and this can be verified using publicly available encryption tools.

## CC Address

"CC Address" is another name for an [Antara Address.](/start-here/learning-launchpad/common-terminology-and-concepts/#antara-address)

The term "CC Address", however, is used only among developers of Antara Modules, as this activity involves directly managing CryptoConditions (CC).

## CC Transaction

A CC transaction is a transaction that is directly associated in any way with an Antara Module.

A normal user would not call these types of transactions "CC transactions," but would instead call them "transactions" as normal.

## Centralized Exchange (CEX)

A centralized exchange is a corporate entity that allows users to send cryptocurrency funds into the care of the corporation to hold in escrow while the user trades for alternate currencies with other users.

For more information about centralized exchanges, [read the Introduction to Komodo DeFi Framework here.](/komodo-defi-framework/tutorials/#why-is-komodo-de-fi-framework-special)

## Cluster

A "cluster" can refer to a Smart Chain Cluster in the Komodo ecosystem.

A Smart Chain cluster is a collective of Smart Chains that act in unison to manage a single coin supply, or to serve a unified purpose that requires multiple chains acting under a compatible directive.

This technology uses Komodo Antara Cross-Chain Syncing ("MoMoM") to function.

## Coinbase

To add coins into the total coin supply of a blockchain, the blockchain must mint new coins.

This minting process occurs in a special transaction that is included as the first transaction in each block of the blockchain.

This transaction is called the `coinbase` transaction.

## Confirmation

Confirmation typically refers to the confirmation of a block.

A block is confirmed when a miner or staker submits a correctly formed block hash to the network for processing and the blockchain network accepts this block hash into the blockchain history.

## Consensus Mechanism

A consensus mechansim is a core aspect of any blockchain software. The consensus mechanism is the aspect of the software's code that collects all publicly available information, performs calculations to ensure that the history of the chain is proceeding in an honest manner, and sends the final result to be added to the chain of block histories that have come before.

Komodo software builds upon the Bitcoin consensus mechanism by default. The Bitcoin protocol is arguably the most secure and well tested consensus mechanism in existence, and therefore this provides Komodo users with a strong degree of security in any associated Komodo technology.

## Cross-Chain Syncing

Cross-Chain syncing is the process by which Smart Chains in the Komodo ecosystem are able to make actionable information on one chain available to another participating chain.

For more information, [read the Crosschain API documentation.](/smart-chains/api/crosschain/)

## CryptoCondition (CC)

A CryptoCondition is a conditational statement that is evaluated by the consensus mechanism. CryptoConditions allows for arbitrary logical requirements and fulfillments to be evaluated during runtime.

For more information, [read the Advanced Development Tutorial Series.](/antara/tutorials/advanced-series-0/)

## Daemon

A daemon is an instance of software running on the user's machine. Typically, the word "daemon" refers to a software process that runs in the background on the user's node, as opposed to running in a manner that would require constant direct engagement.

The name of the Komodo Smart Chain software, "komodod," is an abbreviation of "Komodo Daemon."

## Decentralization

Decentralization is the movement of transferring any subject from centralized parties and individuals to decentralized parties.

In blockchain, decentralization often refers to the ability to accurately record and verify a historical record. Whereas in the old record-keeping system, a centralized authority recorded and verified the accuracy of a ledger, the blockchain system allows all users on the network to record and verify all activity.

## Decentralized Exchange (DEX)

A decentralized exchange (DEX) is an entity that enables users to trade assets within at least a partially decentralized environment.

For example, a common DEX uses a decentralized network of gateway nodes to hold user funds in escrow within the trading environment. No single individual has access to the escrow treasury.

Komodo features a new form of DEX: Komodo DeFi Framework. This uses atomic swaps, and provides a revolutionary form of trading cryptocurrencies. Users maintain control over their assets at all times during the trading process, which makes Komodo DeFi Framework a truly decentralized DEX.

## Initial DEX Offering (IDO)

A initial DEX offering (IDO) is a method of releasing cryptocurrency assets to the public without passing through the technology of a centralized authority.

For more information, [read the IDO section.](/start-here/core-technology-discussions/initial-dex-offering/)

## Delayed Proof of Work (dPoW)

Delayed Proof of Work is Komodo's signature method for achieving consensus on a network of multiple blockchains.

Delayed proof of work relies on a small network of sixty-four nodes that create a trustless notarization of all the history of the Komodo ecosystem and write this notarization into the history of a stronger Proof of Work blockchain network (Bitcoin).

By having the notarization visible for all to view and verify, Komodo enables the ecosystem to operate with Bitcoin-level security without having to compete directly with Bitcoin for PoW hash rate security.

An important aspect of notary nodes to understand is that notary nodes are not arbiters of "truth." All information a notary nodes signs in a notarization is created publicly and verified by all full nodes on any participating blockchain. Notary nodes cannot alter transaction histories; notary nodes can only notarize the history on behalf of the network, and nothing more.

For more information, [read the Core Technology Discussion regarding dPoW.](/start-here/core-technology-discussions/delayed-proof-of-work/)

## Dependency

In a programming environment, a dependency can be described as a foreign collection of code that the developer adds to their source code in order to enhance functionality.

The developer typically does not hold a strong understanding of the dependency and must trust that the developer of this dependency is acting with professional due diligence.

In blockchain technology, developers are encouraged to avoid dependencies wherever possible.

## Double Spend

A "double spend" is the act of spending the same value twice, and blockchain technology is built to prevent users from this behavior.

In a double spend, a user sends money to one person, and then sends the exact same money again to another person.

The dangers associated with a double spend prevented digital currency from becoming feasible until the invention of the Bitcoin protocol's consensus mechanism.

## Equihash Algorithm

An equihash algorithm is a blockchain mining algorithm that discourages certain high-powered and specially built mining devices from mining on the network.

## Gas

Gas is a concept that pertains to foreign blockchain platforms, such as Ethereum.

Gas is a cryptocurrency that is spent as payment for the blockchain's decentralized network of nodes to process arbitrary "smart contract" code.

Komodo does not require gas. Rather, when users execute arbitrary code (using Antara Modules), the only fee required is the fee paid to the miners when performing a transaction. This fee is paid in the native coin on which the arbitrary code is run. Compared to the gas-based smart-contract model, the Komodo fee structure is exponentially less expensive.

## Genesis Attack

In a Genesis Attack, the attacker launches a fresh version of the targeted blockchain. Using a high rate of hash power and competitive mining equipment, the attacker proceeds to recreate the entire blockchain history as though the so-called "true" history never existed.

Once the block height of the attacker's chain surpasses the height of the "true" chain, the attacker releases their empty creation on the network.

When the default Bitcoin protocol encounters the attacker's chain on the network, the protocol observes that this "empty" chain is created properly and is longer than the so-called "true" chain.

At this point, the protocol will automatically erase the "true" chain from all nodes on the network and the nodes will then sync the "empty" blockchain to their local machines.

## Genesis Block

The first block in a blockchain.

Historically, a large portion of the total coin supply of the associated blockchain is distributed to the miner who mines the Genesis Block.

## Hash Rate

The rate at which hashes are created by a node on the network.

Often, the term "hash rate" is used in reference to the total power of all miners mining a blockchain network. Miners produce hashes in their search for a properly formed hash that satisfies the requirements for adding the next block to the blockchain history.

## Iguana Core

Iguana Core is a core component in essentially all Komodo software. Iguana is a collection of blockchain tools and enhancements, designed by Komodo's lead developer, JL777.

## Jumblr

Jumblr was a decentralized zk-SNARK based mixing service on the Komodo main chain, KMD. Jumblr enabled users to coordinate their transparent-to-private and private-to-transparent currency conversions. This allowed users to mask their privacy-related transactions by performing them in equal amounts synchronously.

In the spring of 2019, Jumblr technology was removed from the KMD chain. This occurred in response to community feedback and industry developments.

## Liquidity Maker

A liquidity maker on the Komodo DeFi Framework network is a user who offers assets for trade and waits for a user to accept the offer.

## Liquidity Pool

A liquidity pool is a collection of live offers on an Komodo DeFi Framework trading network.

## Liquidity Taker

A liquidity taker on the Komodo DeFi Framework network is a user who accepts a standing and live offer of another user.

## Magic

To help differentiate one runtime instance of Komodo software from another, komodod creates a unique number for each chain.

The development name this number is "magic."

Each time a request arrives in the Komodo daemon, the magic number is checked to ensure that it is the number expected. When correct, the daemon allows the request access to the process.

## Mempool

The collection of unprocessed transactions on the network waiting for confirmation.

## Miner

A user, or hardware controlled by a user, that is attempting to collect transactions from the mempool and format them in a new block.

The miner who is first to mine a new block typically receives a reward from the network. This can include fees from the transactions successfully mined in the block. This can also include a possible coinbase transaction that adds new coins to the chain's total coin supply and gives them to the miner.

## Multi-Chain Syncing

Multi-chain syncing is the act of syncing one Komodo Smart Chain with another with verifiable and actionable information.

This allows Komodo Smart Chains to work together to serve an audience that may need more than one blockchain for scalability or other purposes.

## Multi-Chain Architecture

A multi-chain architecture is a term to describe a blockchain platform that allows for multiple blockchains to operate and collaborate together within the same network, and optionally using the same coin supply.

## Node

A node can be a unique desktop computer connected to the Internet. It can also be a virtual-private server (VPS) that is rented or purchased, and which the developer can access at will. Or, it can be another type of unique instance of a computational machine.

## Nonce

A nonce is a number that the miner guesses while attempting to create a block hash that fits the requirements for the consensus mechanism and the next block.

Nonce is short for, "a number you use once."

More information [is available in this section.](/start-here/core-technology-discussions/delayed-proof-of-work/#what-is-a-consensus-mechanism)

## Notarization

A "notarization" in the Komodo ecosystem is a special transaction performed by the notary nodes that writes a hash of the entire Komodo history up to this point in time.

Notarizations are a foundational aspect of Komodo's security capabilities.

For more information, [read the dPoW section on notary nodes.](/start-here/core-technology-discussions/delayed-proof-of-work/#the-komodo-solution-delayed-proof-of-work-d-pow)

## Notary Node

A notary node is an elected security steward in the Komodo ecosystem.

There are 64 notary nodes in total.

Notary nodes can be either a single individual, or a group of people working together to secure and manage one node.

## On-Demand Notarization

The software of a default, unmodified, PoW-based Komodo Smart Chain will only instruct mining nodes to attempt to mine a new block when there are a few transactions in the mempool. This conserves energy and helps the chains to avoid processing nearly empty blocks.

Developers who wish to avoid the on-demand notarization situation have a few options available. Using Antara Customizations that allow for a hybrid of PoS and PoW will help to keep the blockchain stable when transaction activity is low. Also, developers can create a node on the network that constantly executes transactions of low value, to ensure the mempool is always non-empty.

## Orderbook

An orderbook is a record of all trade offers on an exchange. Typically, the orderbook only displays current offers.

Komodo's Komodo DeFi Framework software offers a decentralized orderbook, wherein users send orders to a P2P network for distribution, and all nodes on the network assemble the orderbook locally.

## Passphrase

A passphrase is typically a twelve to twenty-four sequence of words that is used as a base password to create a series of blockchain addresses and private keys.

## Proof of Stake (PoS)

A proof-of-stake (PoS) consensus mechansim requires users to place personal funds on the network as collatoral in exchange for the right to "stake" new blocks on the blockchain.

## Proof of Work

A proof-of-work (PoW) consensus mechanism requires miners on the network to complete a simple puzzle before the miner may obtain the right to add a new block to the blockchain and receive a block reward.

Solving the puzzle requires work from the computer, and therefore the correct answer to the puzzle is considered to be "proof of work" accomplished in solving the puzzle.

## Public Key (pubkey)

A public key or pubkey is a blockchain address that can receive funds on the network.

Sending funds out of this pubkey requires a matching private key that unlocks this public key (also called a public address).

On a non-Komodo blockchain a user may not interact often with their full pubkey, but rather they may use an abbreviated version of it. This shorter version is called a based58 encoded address.

On the other hand, users are required to use at least one full pubkey when using Antara Modules. This pubkey serves as the basis for all Antara-related addresses.

## Remote Procedure Call (RPC)

A remote procedure call (RPC) is a call to the Komodo daemon from a separate software process.

An RPC can request that the Komodo daemon send money to an address, or the RPC could request information about the state of the chain, among many other possibilities.

## Runtime Fork

In general, Komodo Smart Chains are created using the exact same software installation, but each Smart Chain has a separate data directory.

Each time the user initiates an instance of Smart Chain software, the user includes parameters that indicate which Smart Chain they are launching. These parameters can be simple, such as the "name" or "coin supply" of the desired Smart Chain.

Because each Smart Chain is based on the same software (generally speaking) and they differentiate at the moment of initiation, they are called "runtime forks." This represents the fact that each Smart Chain forks from the main KMD chain at runtime.

## Satoshi

The smallest divisible unit of a coin. All coins in the Komodo ecosystem follow the Bitcoin-protocol standard where `1` coin has `8` decimal places. Therefore, a satoshi is `0.00000001` of a coin.

## SPV Electrum Server

An SPV Electrum Server is a server that provides "lite mode" type functionality. These servers have a full copy of the blockchain history and the servers are able to help complete the requests of users on the blockchain network who do not want to download and sync the full blockchain history.

SPV Servers cannot assist a user to perform a zero-knowledge type transaction. Instead, users creating zero-knowledge transactions must download the full blockchain to their local node.

## Seed Node

A seed node is a node that is called at runtime and helps the caller to find other nodes on the network.

Seed nodes help new nodes on the network to obtain enough of a connection to the peer-to-peer network to download and sync the blockchain's history.

## Smart Chain

A Smart Chain is a blockchain built on Komodo technology.

Komodo is a fork of Zcash, which is itself a fork of Bitcoin. Therefore, each Smart Chain contains all the upstream technology, including Komodo, Zcash, and Bitcoin features.

A few notable Komodo-based features of Smart Chains include Antara Modules, which allow for arbitrary code to be executed as a part of achieving consensus, and cross-chain syncing, which allow for multiple Smart Chains to collaborate in maintaining scarcity and user activity.

## Smart Contract

A smart contract is a popular concept on other blockchain platforms. A smart contract allows developers to program scripts that update blockchain state based on user activity.

Komodo has a replacement technology, Antara Modules, that are capable of achieving all that a smart contract can achieve, and more. Please see the [Antara Overview discussions](/antara/tutorials/overview-of-antara-modules-part-i/#introduction) for more information.

## Staker

A staker is a user, or a node controlled by a user, that places funds in escrow on a Smart Chain network in exchange for the right to "stake" new blocks in the blockchain history. A staker receives rewards each time they successfully stake a block.

## T Address

A "t address" is a transparent address. Transactions performed in this address are fully visible to the network.

## T Transaction

A "t transaction" is a transparent transaction. The transaction can be fully viewed by the network.

## Terminal

The UNIX terminal is a simple software application that allows a user to execute commands and receive replies without a graphical user interface (GUI).

Linux and MacOS users will find a UNIX terminal installed by default, whereas Windows users may need to install secondary software, such as [GitBash.](https://gitforwindows.org/)

## Token

A token is a digital asset which functions on top of a blockchain. Tokens are separate from coins.

Foreign blockchain platforms, such as Ethereum, use token models such as ERC20 to allow users to print, distribute, and program their own currencies.

The Komodo Platform uses the Tokens Antara Module (or any similar module) to transform and restrict the Smart Chain's coins so that they behave as tokens with desirable features This allows for ERC20-like possibilities, and more.

## Trade Clearing

The term "trade clearing" refers to the process of completing a promised trade between users.

In Komodo DeFi Framework, trades are first matched on the peer-to-peer network, and then Komodo DeFi Framework uses our own signature atomic-swap process to clear the trade. Once both users either complete their sides of the trade, or abandon the procedure (and receive their appropriate refunds), the trade is considered cleared.

## Trade Matching

The term "trade matching" refers to the process of matching an offer to buy or sell with a willing trade partner.

In Komodo DeFi Framework, trade offers are distributed on a decentralized peer-to-peer network. Liquidity makers make new offers, and liquidity takers accept offers made by liquidity makers.

## Trustless

The word "trust" has a different connotation in blockchain technology.

Blockchain's specific and unique contribution to the field of technology is to allow users not to trust each other in achieving consensus over a history of transactions.

Rather, users all collect the same data from the open peer-to-peer network and use the same software and calculations to arrive at the same conclusions themselves. The less an individual user must trust another individual user, the more effective the blockchain is.

By removing the need for trust, power over the history of transactions and the correct "truth" of history is decentralized in favor of the average user, and away from centralized points of control. As centralized points of control are easily corrupted and manipulated, this has the potential to allow the average user to have a more fair level of influence within the blockchain network.

## Turing Complete

A programming language is considered "Turing Complete" if, when granted a few basic assumptions, the language is theoretically able to “compute any computable sequence.”

In other words, the language should be able to solve any mathematical problem that uses only computable numbers.

According to Turing’s definition, “...a number is computable if its decimal can be written down by a machine.”

Komodo's Antara Modules allow for Turing Complete programming languages to add arbitrary code to the evaluation process of a consensus mechanism of a Smart Chain.

## Tx

An abbreviation of "transaction."

## Txid

An abbreviation of "transaction id."

## Utxo

The term "utxo" is an abbreviated form of "unspent transaction."

Utxos can be difficult for new developers to understand.

For more information, please [read the Utxo explanation here.](/start-here/core-technology-discussions/miscellaneous/#the-utxo-an-elusive-yet-fundamental-concept)

## Virtual Machine Interpreter

A Virtual Machine (VM) interpreter is a popular concept on other blockchain platforms. The virtual machine is decentralized across all nodes on the network. Any smart contract code that a user pays gas to have executed will be evaluated within the VM. The VM sends the results to the associated blockchain for transaction processing.

Komodo's Smart Chain technology eliminates the need for a virtual machine. Instead, developers add their arbitrary code to an Antara Module. The code is evaluated as a part of achieving blockchain consensus. Users do not need to pay gas fees. Instead, they only pay the transaction fee necessary to send their transaction to the network. This is paid in the native coin of the Smart Chain.

## Z Address

A "z address" is a privacy-enabled address. These are active on a default Smart Chain, but developers of the Smart Chain can elect to disable z addresses.

Users use the [z\_sendmany](/smart-chains/api/wallet/#z-sendmany) remote procedure call (RPC) when dealing with z addresses.

Z addresses only offer privacy when funds are sent from one z address to another. When a user sends money from a t address to a z address, or vice versa, the transaction should not be considered private.

Please see the [privacy discussion section](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem) for further details and warnings.

## Z Transaction

A "z transaction" is a zero-knowledge transaction. When a z transaction occurs between two z addresses, only the user is able to see the details of the transaction. No further data remains in the public domain for later analysis.

Please see the [privacy discussion section](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem) for further details and warnings.

## Zcash Parameters

The Zcash parameters are an implementation of zk-SNARK technology that allow for zero-knowledge transactions.

Assuming the Zcash parameters were implemented properly, zero-knowledge transactions leave no trace in the public domain for later data analysis.

Please see the [privacy discussion section](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem) for further details and warnings.

## zk-SNARK

"zk-SNARK" stands for "zero-knowledge succinct non-interactive argument of knowledge." This is a powerful form of privacy technology pioneered by the Zcash team.

As Komodo is downstream from the Zcash protocol (which is itself downstream from Bitcoin), Komodo inherits all zk-SNARK technology by default.

Please see the [privacy discussion section](/start-here/core-technology-discussions/miscellaneous/#the-nature-of-privacy-features-in-the-komodo-ecosystem) for further details and warnings.
export const title = "Learning Path Outline";
export const description = "Welcome to the educational center for Komodo technology. This section provides a descriptive outline for new developers in the Komodo ecosystem.";

# Learning Path Outline

## Introduction

Welcome to the educational center for Komodo technology. This section provides a descriptive outline for new developers in the Komodo ecosystem.

The content first familiarizes the developer with basic blockchain principles, and then narrows down on principles that are unique to Komodo.

Once the developer is comfortable on a conceptual level, the content leads the developer into the process of utilizing the Komodo software itself in a development environment.

Using Komodo software is about as difficult as using any other programming framework. The developer needs to first understand how the software functions on a conceptual level, and then the developer learns the vocabulary necessary to integrate Komodo software into their personal creative endeavors.

This process can take anywhere from a single full day to a few weeks, depending upon the skill level of the developer. Each step of the journey provides a time estimate based on a normal developer that has a few years' experience in a mainstream programming language.

## A Description of Our Intended Audience

As mentioned in the [Documentation Orientation](/start-here/about-komodo-platform/orientation/) section, this website is intended for readers who are already familiar with a mainstream programming language.

Now, we divide readers further into two categories.

### The Normal Komodo Developer

The first is a developer who intends to utilize Komodo technology only as it is provided to them. This is the most common type of developer we expect in the Komodo ecosystem.

This developer likely intends to utilize Komodo software to release a blockchain product that either stands alone, or compliments another software product the developer is creating.

For example, this developer could be involved with the creation of a blockchain-based asset for a business they are building. This developer expects an audience to purchase and trade these assets, and the audience may utilize Komodo's white-label software for asset management.

As another example, this type of developer could be building software for a web application that integrates with blockchain technology. The developer could be utilizing Antara Modules, such as [Oracles,](/antara/api/oracles/#introduction) to securely record data that is relevant to or even created by their audience. Once the data is recorded, the developer could display this information on their website, for simple gameplay enhancements or data-driven storytelling.

### The Advanced Komodo Developer

The advanced Komodo developer intends both to use the Komodo software as it is provided to them, and also to add in their own customized functionality beyond the scope of the normal software. This developer is highly skilled in a mainstream programming language, such as C/C++, and is prepared to thoroughly understand and manipulate blockchain software.

For example, this developer may intend to build customized Antara Modules to add to the consensus mechanism of their Smart Chain. These customized modules could create unique and fully playable blockchain-based games of a complexity level similar to [this Komodo-based Roguelike game](/antara/tutorials/rogue-module-tutorial/#introduction), or [this Komodo-based version of Sudoku.](/antara/api/sudoku/)

#### How Each Type of Developer Should Approach the Educational Outlines

Both types of developers should begin at the beginning.

The Normal Developer should proceed until they reach the content with a difficulty level labeled `Advanced` and then stop, while the Advanced Developer there should proceed.

We recommend that developers complete steps with a priority label of `Recommended`. There are also a few sections labeled `Optional` that may be skipped, although the developer who completes them will, hopefully, find them worth the while as these sections contain short cuts and other recommended best practices.

## Step 0: Install Komodo Software

Priority: Recommended

Difficulty: Normal

Time: 10 Minutes

***

Access to Komodo software allows the developer to immediately begin learning through direct experimentation.

We recommend that all developers install Komodo software not by using pre-built binaries, but rather by installing and compiling from source code.

This allows the developer to later have instant access to Komodo security patches, feature enhancements, and upgrades.

[Link to Komodo Source Code Installation Methods](/smart-chains/setup/installing-from-source/)

[Link to Komodo DeFi Framework Source Code Installation Methods](/komodo-defi-framework/setup/)

## Step 1: Reach Out to Our Community on Discord

Priority: Recommended

Difficulty: Normal

Time: 5 Minutes

***

Discovering Komodo is best accomplished with a friend.

Komodo utilizes a third-party chat service called Discord.

[Reach out to us on Discord at this link.](https://komodoplatform.com/discord)

Once you are logged in to the Komodo Discord server, you will see a list of channels on the left side of your browser. All channels begin with a `#` hashtag.

Say hello in channels such as `#arrivals`, `#start-here`, or `#introductions`.

The `#support` channel is a good place to ask for basic support with Komodo software.

To find fellow developers, head to the `#dev-general` channel. All channels that begin with `dev` are created for developers.

We look forward to meeting you there!

## Step 2: Begin a Conceptual Understanding of Komodo's Software

Priority: Recommended

Difficulty: Normal

Time: 10 Minutes

***

With the Komodo software installed and a connection made to our community, you are prepared to begin learning about Komodo on a conceptual level.

These conceptual concepts must be grasped first, before attempting to manipulate blockchain assets and software. The concepts help to orient you in your development process.

### Platform Overview

The Platform Overview section provides the broadest conceptual understanding of the Komodo Platform.

[Link to Platform Overview.](/start-here/about-komodo-platform/)

### Product Introductions

The Production Introductions section contains simplified introductions to Komodo software products and their architecture.

[Link to Product Introductions](/start-here/about-komodo-platform/product-introductions/)

### Doc Orientation

The Doc Orientation section gives the reader an understanding of the nature of this documentation website.

[Doc Orientation](/start-here/about-komodo-platform/orientation/)

## Step 3: Read the Core Technology Discussions Section

Priority: Recommended

Difficulty: Normal

Time: 1 - 8 Hours

***

The Core Technology Discussions section provides a thorough explanation of blockchain technology and Komodo. The principles explained herein are crucial in later stages.

### Introduction

The Introduction section presents a broad overview of the nature of the Komodo ecosystem and the philosophy and goals that drive this community.

[Link to Introduction Section](/start-here/core-technology-discussions/)

### Komodo DeFi Framework and Atomic Swaps

As a developer gains understanding of blockchain technology, and as your audience grows, you will likely seek to make atomic swaps available to your users. The Komodo DeFi Framework software is our signature method for conducting atomic swaps.

This section helps the reader to understand why atomic swaps are a key to the future of cryptocurrency trading and how they work.

[Link to Komodo DeFi Framework and Atomic Swaps Section](/start-here/core-technology-discussions/komodo-defi-framework/)

### Komodo SDK

Komodo SDK encompasses several key components, including the Komodo DeFi Framework, Komodo Core Protocol and the Komodo GUI/DAPP Suite. By providing a complete suite of technologies and tools, the Komodo SDK aims to simplify the development and deployment process for developers, while offering flexibility and scalability for different project requirements.

[Link to Komodo SDK Section](/start-here/core-technology-discussions/komodo-sdk/)

### Initial DEX Offering (IDO)

This section helps the reader to understand the basic process an entrepreneur and developer goes through in releasing a new blockchain-based product. This can be called a "Initial DEX Offering," or IDO for brevity.

This also helps the reader to understand how Komodo uses runtime forks to allow each Komodo developer to create their own blockchain that can be connected to the rest of the ecosystem.

[Link to IDO Section](/start-here/core-technology-discussions/initial-dex-offering/)

### Delayed Proof of Work

The Delayed Proof of Work section explains to the reader the fundamental aspects of blockchain technology that apply to members of the Komodo ecosystem. The primary aspects that a developer should understand here are the value of the consensus mechanism and the nature of Komodo notarization.

[Link to Delayed Proof of Work Section](/start-here/core-technology-discussions/delayed-proof-of-work/)

### The Antara Framework

The Antara Framework section explains to the reader the basic concepts of the Antara Framework. This framework is a key aspect of the Komodo development process. The framework provides functionality that can be compared to "smart contracts" found on other blockchain platforms.

[Link to Antara Framework Section](/start-here/core-technology-discussions/antara/)

### Miscellaneous

The Miscellaneous section explains a few leftover concepts that we recommend the reader understand. For example, a developer will no doubt encounter a "Utxo," or the developer may be curious about privacy on a Komodo Smart Chain, and this section provides preparation.

[Link to Miscellaneous Section](/start-here/core-technology-discussions/miscellaneous/)

## Step 4: Complete the Beginner Series in the Antara Tutorials Section

Priority: Recommended

Difficulty: Normal

Time: 1 Hour

***

The Beginner Series tutorials provide the reader with an easy pathway into the process of using Komodo technology.

Many of the technical aspects of using Komodo software are simplified here, to allow you to familiarize yourself with the nature of blockchain commands and responses without having to encounter everything all at once.

As a part of this tutorial, you will download a separate piece of software (a Docker-based image) in which you will enter your first commands.

Towards the end of the series, we then walk you through the process of interacting with Komodo Smart Chains in the terminal.

[Link to Beginner Series Tutorial - Part 0 - Preparation](/antara/tutorials/beginner-series-part-0/)

## Step 5: Familiarize Yourself with Smart Chain API Basics

Priority: Recommended

Difficulty: Normal

Time: \< 1 Hour

***

Having completed the Beginner Series, the reader is now prepared to use the terminal more frequently while interacting with Komodo Smart Chains.

The Smart Chain API Basics tutorial walks the reader through many of the common commands and Remote Procedure Calls (RPCs) and assists the reader in becoming comfortable in the Komodo environment.

[Link to Smart Chain API Basics Tutorial](/smart-chains/tutorials/smart-chain-api-basics/#api-tutorials-introduction)

## Step 6: Enhance Your Development Environment and Experience

Priority: Optional

Difficulty: Normal

Time: 1 - 5 Hours

***

At this point, the Normal Developer should be generally comfortable with the basic concepts of utilizing the default Komodo Smart Chain software.

The following tutorials are optional, but we still recommend that the developer explore the concepts contained herein. You may find short cuts and solutions that will help you avoid common pitfalls in the development process.

### Basic Environment Setup for Linux VPS

Many, if not most, developers in the Komodo ecosystem use a Linux-based Virtual Private Server (VPS) to build software. Working on a VPS simplifies many aspects of the development process, as the VPS grants the developer a disposable and rapidly customizable environment for troubleshooting.

[Link to Basic Environment Setup for Linux](/smart-chains/tutorials/basic-environment-setup-for-linux-vps/#introduction)

### Creating Komodo Smart Chains

Up to this point in the outline, the developer has either relied on tutorial software to provide a Smart Chain, or the developer has relied on a `regtest` chain.

Now, it is time to try creating your own Smart Chain.

[Link to Creating a Default Smart Chain](/smart-chains/tutorials/create-a-default-smart-chain/#creating-komodo-smart-chains)

### Creating a Smart Chain on a Single Node

Sometimes in the development process, the developer may find convenience in having a Smart Chain running on a single node. This is not the way that blockchain software is intended to function, but single-node blockchains are useful, nonetheless.

[Link to Creating a Smart Chain on a Single Node](/smart-chains/tutorials/creating-a-smart-chain-on-a-single-node/)

### Running Komodo Software in Debug Mode

Debug Mode allows a developer to access the last lines of code executed by the daemon before the software crashes.

A Normal Developer will likely only use this when communicating with a support agent, in the unlikely event of a malfunction in the software. An Advanced Developer, on the other hand, may use Debug Mode frequently.

[Link to Running Komodo Software in Debug Mode](/smart-chains/tutorials/running-komodo-software-in-debug-mode/)

### Updating Smart Chain Software From Source Code

As the developer installs their software from source code, updating frequently is easy and recommended. Read the following section to become familiarized.

[Link to Updating Smart Chain Software From Source Code](/smart-chains/setup/updating-from-source/)

### Ecosystem Launch Parameters

The developer is likely to encounter an opportunity to interact with members of another Smart Chain community in the Komodo ecosystem.

At some future point, you may also be interested in having your own Smart Chain added to this list by purchasing Komodo's dPoW security services.

The list of launch parameters for all Smart Chains supported by the Komodo notary nodes can be found here.

[Link to Ecosystem Launch Parameters](/smart-chains/setup/ecosystem-launch-parameters/)

### Learn How to Manually Delete Blockchain Data

Sometimes, a developer will need to delete their synced blockchain data and re-sync with the network. The following section teaches the safe way to conduct this process.

[Link to Smart Chain Maintenance Section](/smart-chains/setup/smart-chain-maintenance/)

### Common Runtime Parameters

As Komodo Smart Chain software is based on the Bitcoin protocol, we inherit many runtime parameters that are useful in creating a secure and efficient blockchain network.

We recommend that the developer search through our abbreviated list of popular runtime parameters and experiment with one or two, to gain a conceptual understanding. This can help to expand your growing awareness of the potential of blockchain technology and how it is superior to fiat-based currency systems.

[Link to Common Runtime Parameters](/smart-chains/setup/common-runtime-parameters/)

## Step 7: Experiment with Antara Customizations

Priority: Recommended

Difficulty: Normal

Time: 20 - 60 Minutes

***

The most basic aspect of Komodo's Antara Framework is the ability to customize your Smart Chain. These customizations are provided by Komodo as enhancements to the default Bitcoin/Zcash protocol.

We recommend that you scan through the list of enhancements, read the basic descriptions, and experiment with one or two that interest you.

[Link to Antara Customizations](/antara/setup/antara-customizations/#antara-customizations)

## Step 8: Read the Overview of Antara Modules - Part I

Priority: Recommended

Difficulty: Normal

Time: 30 Minutes

***

Antara Modules are where the power of the Komodo Smart Chain and the Antara Framework begin to come into full display. Antara Modules allow the developer to expand blockchain potential far beyond the limits by which many other blockchain ecosystems are bound.

The Overview Part I provides a more thorough discussion about how the framework overcomes many problems faced by the blockchain industry.

[Link to Overview of Antara Modules - Part I](/antara/tutorials/overview-of-antara-modules-part-i/#introduction)

## Step 9: Read the Overview of Antara Modules - Part II

Priority: Recommended

Difficulty: Normal

Time: 30 Minutes

***

Part II of this discussion delves more deeply into the underlying methods by which Antara allows developers to solve problems.

[Link to Overview of Antara Modules - Part II](/antara/tutorials/overview-of-antara-modules-part-ii/)

## Step 10: Understand Antara Addresses

Priority: Recommended

Difficulty: Normal

Time: 5 Minutes

***

At this point, the developer is familiar with common blockchain addresses.

However, Antara requires the user to manage additional addresses for Antara-based currency. The passphrase for these addresses can all be the same, but the public address will not be.

These addresses keep funds separate between different modules on a Smart Chain, and assist in maintaining token scarcity, among other uses.

[Understanding Antara Addresses](/antara/tutorials/understanding-antara-addresses/)

## Step 11: Experiment With the Default Heir Antara Module

Priority: Recommended

Difficult: Normal

Time: 15 Minutes

***

A simple application of the Antara Framework is the Heir Antara Module. This simple module allows a user to designate an inheritor of their funds, should the user become inactive on a Smart Chain.

Read the introductory section to gain a more thorough understanding, and then try executing each command found in the Heir Module Flow section.

The Heir Antara Module is active on the MARTY Smart Chain that serves as a test chain in the Komodo ecosystem.

```bash
./komodod -pubkey=$pubkey -ac_name=MARTY -ac_supply=90000000000 -ac_reward=100000000 -ac_cc=3 -addnode=138.201.136.145 &
.
```

Funds are freely available on this chain. Use the following [faucetget](/antara/api/faucet/#faucetget) RPC to tap the community faucet and receive `0.1` coins. This should be enough for the Heir Module Flow experiment.

```bash
./komodo -ac_name=MARTY faucetget
```

Copy the returned hex value and broadcast it using the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) RPC.

[Link to Heir Module Introduction](/antara/api/heir/#introduction)

[Link to Heir Module Flow](/antara/api/heir/#heir-module-flow)

## Step 12: Experiment with the Tokens Antara Module

Priority: Recommended

Difficulty: Normal

Time: 15 Minutes

***

The Tokens Antara Module is often useful as it allows the developer to quickly and easily mint new currencies on their Smart Chain.

Use the `tokenscreate` RPC method to create your own tokens, and then experiment with other RPCs. This module is also available on the MARTY Smart Chain. Make sure to save the returned `txid` after broadcasting your raw transaction. (See the Examples section for a demonstration of the token creation method.)

[Link to Tokens Antara Module - tokenscreate RPC](/antara/api/tokens/#tokencreate)

Use the `tokensinfo` RPC method to view your new tokens.

[Link to Tokens Antara Module - tokensinfo RPC](/antara/api/tokens/#tokeninfo)

## Step 13: Read the Introduction to Komodo DeFi Framework

Priority: Optional

Difficulty: Normal

Time: 15 Minutes

***

The Normal Developer is now nearly finished with a grand tour of the Komodo software. The key remaining target is Komodo DeFi Framework, our signature method for exchanging cryptocurrencies using atomic swaps. Be one of the first people in the history of mankind to exchange assets with an anonymous person over the Internet without any middleman whatsoever.

This introductory discussion covers some of the same concepts that the reader encountered in the Core Technology Discussions section, but with several useful additional details.

[Link to Introduction to Komodo DeFi Framework](/komodo-defi-framework/tutorials/#why-is-komodo-de-fi-framework-special)

## Step 14: Experiment with Atomic Swaps

Priority: Recommended

Difficulty: Normal

Time: 1 Hour

***

Follow this walkthrough to perform your first atomic swaps.

[Link to Komodo DeFi Framework Walkthrough](/komodo-defi-framework/tutorials/api-walkthrough/#setting-up-the-coin-list)

(If you still need to install Komodo DeFi Framework software, [click here for instructions on installing from source code.)](/komodo-defi-framework/setup/)

For those Normal Developers who make it this far, congratulations! You have completed the grand tour of the Komodo software suite.

Going forward, we recommend that you experiment with individual RPCs and customizations throughout the documentation, until you feel fluent in utilizing Komodo technology.

Please keep in touch with our community on [Discord.](https://komodoplatform.com/discord) We are excited to see what you create!

## Step 15: Begin the Advanced Development Tutorial

Priority: Recommended

Difficulty: Advanced

Time: 5 - 15 Hours

***

Advanced Developers should now be familiar enough with the nature of Komodo technology to begin a more thorough approach to manipulating blockchain technology.

The following tutorial series walks the developer through the initial development process. The tutorial will first explain several integral aspects of blockchain technology that blockchain engineers are required to understand. Then, the series walks the reader through the process of creating a simplified version of the Heir Antara Module.

This tutorial series expects that you are comfortable with downloading a Github repository and manually inspecting the source code to determine the nature of the source code's functionality.

Once you complete this tutorial, you are among the most advanced of community developers. You may feel prepared to offer your services to businesses that would like to use your skills to commission customized Antara Modules for their unique business purposes and competitive-advantage desires.

[Link to Advanced Series - Part 0 - Introduction](/antara/tutorials/advanced-series-0/)

## Step 16: Inspect Komodo Community Bounties

Priority: Optional

Difficulty: Advanced

Time: \~

***

Now that you are comfortable building new Antara Modules, it's time to put your skills to use and build something for the community.

The Komodo team is looking for talented C/C++ developers to build new Antara Modules that can be included with Komodo's default suite of modules.

Creating a new default module can take up to a month's worth of time, and we try to make sure the value of the bounties is worth your while.

`[<b>Link to Komodo Bounties</b>](https://forum.komodoplatform.com/c/jobs-bounties)`

Alternatively, reach out to the Komodo development team on the `#dev-general` channel on [Discord](https://komodoplatform.com/discord) and ask where help is needed.

We look forward to working with you!
