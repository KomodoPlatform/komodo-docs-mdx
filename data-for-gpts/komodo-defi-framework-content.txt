export const title = "Komodo DeFi SDK Common Structures: Activation";
export const description = "The Komodo DeFi SDK uses a variety of activation methods, depending on the type of coin.";

# Activation Structures

### ActivationParams

The `ActivationParams` object defines additional parameters used for activation. These params may vary depending on the coin type.

| Parameter                    | Type    | Description                                                                                                                                                                                                                          |
| ---------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| required\_confirmations      | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set.                                                                                                                                   |
| requires\_notarization       | boolean | Optional, defaults to `false`. For [dPoW](https://komodoplatform.com/en/blog/dpow-demystified/) protected coins, a `true` value will wait for transactions to be notarised when doing swaps. Overrides value if set in `coins` file. |
| priv\_key\_policy            | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                                            |
| min\_addresses\_number       | integer | HD wallets only. How many additional addreesses to generate at a minimum.                                                                                                                                                            |
| scan\_policy                 | string  | HD wallets only. Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi SDK.                                       |
| gap\_limit                   | integer | HD wallets only. The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                             |
| zcash\_params\_path          | string  | ZHTLC coins only. Path to folder containing Zcash parameters. Optional, defaults to standard location as defined in [this guide](https://forum.komodoplatform.com/t/installing-zcash-params/603)                                     |
| scan\_blocks\_per\_iteration | integer | ZHTLC coins only. Sets the number of scanned blocks per iteration during `BuildingWalletDb` state. Optional, default value is 1000.                                                                                                  |
| scan\_interval\_ms           | integer | ZHTLC coins only. Sets the interval in milliseconds between iterations of `BuildingWalletDb` state. Optional, default value is 0.                                                                                                    |
| mode                         | object  | QTUM, UTXO & ZHTLC coins only. A standard [ActivationMode](/komodo-defi-framework/api/common_structures/activation/#activation-mode) object.                                                                                         |

For ZHTLC coins, older wallets need to set the `sync_params` field to a date before its
first transaction to see all balance and history. This may take a long time on the first
activation, but subsequent activations will be much faster.
Using a smaller `scan_blocks_per_iteration` and larger `scan_interval_ms`,
will reduce the average CPU load during ZHTLC coin activation (at the cost of a
longer activation time). These optional fields are recommended when developing
for iOS, where a high CPU load may kill the activation process. Android &
desktop operating systems do not appear to have any problems with high CPU
load during ZHTLC coin activation.

### ActivationMode

Defines the activation mode for QTUM, BCH, UTXO & ZHTLC coins.

| Parameter | Type   | Description                                                                                                                                           |
| --------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
| rpc       | string | `Native` if running a native blockchain node, `Electrum` if using electrum servers or `Light` for ZHTLC coins.                                        |
| rpc\_data | object | `Electrum` or `Light` mode only. A standard [ActivationRpcData](/komodo-defi-framework/api/common_structures/activation/#activation-rpc-data) object. |

### ActivationRpcData

Contains information about electrum & lightwallet\_d servers for coins being used in `Electrum` or `Light` mode.

| Parameter                 | Type              | Description                                                                                                                                                                                                                                                     |
| ------------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| light\_wallet\_d\_servers | list              | ZHTLC only. A list of urls which are hosting lightwallet\_d servers for a coin.                                                                                                                                                                                 |
| electrum\_servers         | list of objects   | ZHTLC only. A list of standard [ActivationServers](/komodo-defi-framework/api/common_structures/activation/#activation-servers) objects.                                                                                                                        |
| electrum                  | list of objects   | QTUM, BCH & UTXO coins only. A list of standard [ActivationServers](/komodo-defi-framework/api/common_structures/activation/#activation-servers) objects.                                                                                                       |
| sync\_params              | integer or string | ZHTLC coins only. Optional, defaults to two days ago. Defines where to start scanning blockchain data upon initial activation. Options: `"earliest"` (the coin's sapling\_activation\_height), `height` (a specific block height) or `date` (a unix timestamp). |

`electrum` and `electrum_servers` are both used for the same purpose. This should be consolidated in the API.

### ActivationServers

Contains information electrum servers for coins being used in `Electrum` or `Light` mode.

| Parameter                   | Type    | Description                                                                                                                                                |
| --------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| url                         | string  | The URL and port for an electrum server.                                                                                                                   |
| ws\_url                     | string  | Optional, for WSS only. The URL and port for an electrum server's WSS port.                                                                                |
| protocol                    | string  | Optional, defaults to `TCP`. Transport protocol used to connect to the server. Options: `TCP` or `SSL`                                                     |
| disable\_cert\_verification | boolean | Optional, defaults to `false`. If `true`, this disables server SSL/TLS certificate verification (e.g. for self-signed certificates). Use at your own risk! |

#### ZHTLC Example

```json
{
  "activation_params": {
    "mode": {
      "rpc": "Light",
      "rpc_data": {
        "electrum_servers": [
          {
            "url":"zombie.dragonhound.info:10033"
          }
        ],
        "light_wallet_d_servers": [
          "http://zombie.dragonhound.info:443"
        ]
      },
      "sync_params": { 
          "height":  2528700
      }
    },
    "zcash_params_path": "/home/username/path_to/.zcash-params",
    "scan_blocks_per_iteration": 100,
    "scan_interval_ms": 200
  }
}
```

#### HD UTXO Activation (v2)

```json
{
"activation_params": {
    "mode": {
        "rpc": "Electrum",
        "rpc_data": {
            "servers": [
                {
                    "url": "electrum2.cipig.net:10001"
                },
                {
                    "url": "electrum3.cipig.net:20001",
                    "ws_url": "electrum3.cipig.net:30001",
                    "protocol": "SSL"
                }
            ]
        }
    },
    "scan_policy": "scan_if_new_wallet",
    "priv_key_policy": "Trezor",
    "min_addresses_number": 3,
    "gap_limit": 20
}
}
```

### CoinProtocol

| Parameter      | Type    | Description                                                                                                        |
| -------------- | ------- | ------------------------------------------------------------------------------------------------------------------ |
| type           | integer | One of the Coin Types supported by the Komodo DeFi Framework                                                       |
| protocol\_data | object  | A standard [CoinProtocolData](/komodo-defi-framework/api/common_structures/activation/#coin-protocol-data) object. |

### CoinProtocolData

| Parameter             | Type   | Description                                                                                                            |
| --------------------- | ------ | ---------------------------------------------------------------------------------------------------------------------- |
| platform              | string | Indicates the platform parent coin for EMV-like protocols, or the coin used for lightning nodes.                       |
| network               | string | Either `mainnet` or \`testnet                                                                                          |
| confirmation\_targets | object | A standard [ConfirmationTargets](/komodo-defi-framework/api/common_structures/lightning/#confirmation-targets) object. |

### EvmNode

The `EvmNode` object includes the following items for a given coin or token:

| Parameter | Type    | Description                                                                                                         |
| --------- | ------- | ------------------------------------------------------------------------------------------------------------------- |
| url       | string  | URL of an RPC node                                                                                                  |
| gui\_auth | boolean | Optional, defaults to `false`. Must be set to `true` to access RPC nodes run officially by the Komodo Platform team |

```json
{
    "url": "http://eth1.cipig.net:8555",
    "gui_auth": false
}
```

### TokensRequest

The `TokensRequest` object includes the following items for a given coin or token:

| Parameter               | Type    | Description                                                                                                                    |
| ----------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------ |
| ticker                  | string  | Ticker of the token to be enabled                                                                                              |
| required\_confirmations | integer | How many confirmations to wait during the transaction steps of an atomic swap. Overwrites value in coins file; defaults to `3` |

```json
{
    "ticker": "MINDS-ERC20",
    "required_confirmations": 4
}
```

### UtxoMergeParams

The `UtxoMergeParams` object defines how often and at which thresholds to merge UTXOs. This is useful for wallets which have been used for a long time, and have many small UTXOs from mining activity.

| Parameter            | Type    | Description                                                                                                                                                                                                                 |
| -------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| merge\_at            | integer | Mamimum UTXO count before merge loop is initiated.                                                                                                                                                                          |
| check\_every         | integer | How frequently (in blocks) the wallet UTXO count is evaluated.                                                                                                                                                              |
| max\_merge\_at\_once | integer | The maximum nouber of UTXOs to inlude as inputs for a merge transaction. Note that more input UTXOs means a larger transaction and greater fees, and that each blockchain has a limit to the maximum size of a transaction. |

```json
{
"merge_at": 50,
"check_every": 10,
"max_merge_at_once": 25
}
```
export const title = "Komodo DeFi SDK RPC Protocol v2.0";
export const description = "Starting with version beta-2.1.3434, the Komodo DeFi SDK supports the standardized protocol format called mmrpc 2.0.";

# Komodo DeFi SDK Common Structures

The objects are in the request or response of multiple Komodo DeFi SDK methods have been grouped into the following sections:

*   [Activation](/komodo-defi-framework/api/common_structures/activation/)
*   [Swaps](/komodo-defi-framework/api/common_structures/swaps/)
*   [Lightning Network](/komodo-defi-framework/api/common_structures/lightning/)
*   [Non-fungible Tokens](/komodo-defi-framework/api/common_structures/nfts/)
*   [Wallet Operations](/komodo-defi-framework/api/common_structures/wallet/)

Structures which are used in more than one section are listed below:

## AddressFormat

| Structure | Type          | Description                                                                                                                                                                                        |
| --------- | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| format    | string (enum) | address format to which the input address should be converted. Possible values: `mixedcase` for ETH/ERC20 coins; `cashaddress` or `standard` for UTXO coins; `contract` or `wallet` for QTUM/QRC20 |
| network   | string (enum) | Optional, only used for UTXO coins. Network prefix for `cashaddress` format. Possible values: `bitcoincash` for BCH mainnet; `bchtest` for BCH testnet; `bchreg` for BCH regtest                   |

#### Example

```json
{
  "format": "mixedcase"
}
```

```json
{
  "format": "cashaddress",
  "network": "bitcoincash"
}
```

### AddressInfo

The `AddressInfo` object includes the following items for a given address:

| Parameter          | Type   | Description                                                                                                                                              |
| ------------------ | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| balances           | object | A standard [balanceInfos](/komodo-defi-framework/api/common_structures/#balance-infos) object. Not included in responses where `get_balances` is `false` |
| derivation\_method | object | A standard [DerivationMethod](/komodo-defi-framework/api/common_structures/#derivation-method) object                                                    |
| pubkey             | string | The public key associated with the seed used to launch Komodo DeFi Framework                                                                             |
| tickers            | array  | A list of tokens which were successfully activated. Only included in responses where `get_balances` is `false`                                           |

#### Example with balances

```json
"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
    "derivation_method": {
        "type": "Iguana"
    },
    "pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
    "balances": {
        "spendable": "0.11398301",
        "unspendable": "0.00001"
    }
}
```

#### Example without balances

```json
"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
    "derivation_method": {
        "type": "Iguana"
    },
    "pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
    "tickers": ["ASLP-SLP"]
}
```

### BalanceInfos

The `balanceInfos` object includes the following items for a given coin or token:

| Parameter   | Type             | Description                                                                                                              |
| ----------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------ |
| spendable   | string (numeric) | The available amount of a coin or token which is ready to be traded or withdrawn.                                        |
| unspendable | string (numeric) | The amount of a coin or token which is awaiting confirmation on the block chain for an incoming or outgoing transaction. |

```json
{
    "spendable": "12.11398301",
    "unspendable": "0.53"
}
```

### DerivationMethod

The `DerivationMethod` object includes the following items for a given coin or token:

| Parameter | Type   | Description                                                                     |
| --------- | ------ | ------------------------------------------------------------------------------- |
| type      | string | Defines how keypairs will be generated. Possible values: `Iguana` or `HDWallet` |

Using the same seed or private key to generate keypairs using different derivation methods will result in a different address and private key for each method.

Where the value indicates:

*   `Iguana`: The coin or token is was activated using Iguana derivation (default).
*   `HDWallet`: The coin or token is was activated using a Heirarchical Deterministic (HD) Wallet derivation path.

```json
{
    "type": "Iguana"
}
```

### EventStreamConfig

The `EventStreamConfig` object defines which events will be streamed to the client:

| Parameter                      | Type   | Description                                                                            |
| ------------------------------ | ------ | -------------------------------------------------------------------------------------- |
| access\_control\_allow\_origin | string | Defines CORS whitelist. Use "\*" to allow fromi any origin.                            |
| active\_events                 | object | Events to be streamed to the client, along with configuration defineing frequency etc. |
| worker\_path                   | string | WASM only. Path to a custom `worker.js` file.                                          |

Active events are defined as follows:

*   NETWORK: Network status changes. Requires `stream_interval_seconds` configuration.
*   HEARTBEAT: Allows clients to easily determine whether channels are functioning. Requires `stream_interval_seconds` configuration.
*   COIN\_BALANCE: Balance changes. Does not require `stream_interval_seconds` configuration, as the event is triggered by the balance change.

The `COIN_BALANCE` event may not be available for all coins or tokens.

An example of the event stream output can then be viewed in [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/examples/sse/index.html](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/examples/sse/index.html)

```json
"event_stream_configuration": {
    "access_control_allow_origin": "*",
    "active_events": {
        "NETWORK": {
            "stream_interval_seconds": 1.5,
        },
        "COIN_BALANCE": {},
        "HEATBEAT": {
            "stream_interval_seconds": 2.4,
        }
    },
    "worker_path": "index.js"
}
```

### NumericFormatsValue

The `NumericFormatsValue` returns a price or amount in three different formats: `fraction`, `rational`, and `decimal`.

| Parameter | Type           | Description                                                                                          |
| --------- | -------------- | ---------------------------------------------------------------------------------------------------- |
| decimal   | numeric string | A decimal number as a string.                                                                        |
| rational  | object         | A standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.     |
| fraction  | object         | A standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object. |

```json
{
  "decimal": "0.0001",
  "rational": [
    [1, [1]],
    [1, [10000]]
  ],
  "fraction": {
    "numer": "1",
    "denom": "10000"
  }
}
```

### FeeInfo

The `FeeInfo` response object includes the following items for [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/) requests:

| Parameter  | Type             | Description                                                                                                                               |
| ---------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| type       | string           | Type of transaction fee; possible values: `UtxoFixed`, `UtxoPerKbyte`, `EthGas`, `Qrc20Gas`, `CosmosGas`                                  |
| amount     | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte) |
| gas\_price | string (numeric) | Used only when fee type is `Qrc20Gas` or `EthGas`; sets the gas price in `gwei` units.                                                    |
| gas\_price | number (double)  | Used only when fee type is `CosmosGas`; sets the gas price.                                                                               |
| gas        | number (integer) | Used only when fee type is `EthGas`; sets the gas limit for transaction                                                                   |
| gas\_limit | number (integer) | Used only when fee type is `Qrc20Gas` or `CosmosGas`; sets the gas limit for transaction                                                  |

#### Examples

```json
{
  "type": "UtxoFixed",
  "amount": "0.0001"
}
```

```json
{
  "type": "UtxoPerKbyte",
  "amount": "0.0001"
}
```

```json
{
  "type": "EthGas",
  "gas_price": "10",
  "gas": 21000
}
```

```json
{
  "type": "Qrc20Gas",
  "gas_price": "10",
  "gas_limit": 21000
}
```

```json
{
  "type": "CosmosGas",
  "gas_price": 0.05,
  "gas_limit": 21000
}
```

### ExtendedFeeInfo

| Structure                | Type             | Description                                                                                                                                                   |
| ------------------------ | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                     | string           | the fee is paid from the user's balance of this coin. This coin name may differ from the `base` or `rel` coins. For example, ERC20 fees are paid by ETH (gas) |
| amount                   | string (numeric) | fee amount (in decimal representation)                                                                                                                        |
| amount\_rat              | rational         | fee amount (in rational representation)                                                                                                                       |
| amount\_fraction         | fraction         | fee amount (in fraction representation)                                                                                                                       |
| amount\_fraction         | fraction         | fee amount (in fraction representation)                                                                                                                       |
| paid\_from\_trading\_vol | bool             | whether the fee is paid from trading volume and not use actual `coin` balance                                                                                 |

### TotalFeeInfo

| Structure                   | Type             | Description                                                                                                                                                   |
| --------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                        | string           | the fee is paid from the user's balance of this coin. This coin name may differ from the `base` or `rel` coins. For example, ERC20 fees are paid by ETH (gas) |
| amount                      | string (numeric) | fee amount (in decimal representation)                                                                                                                        |
| amount\_rat                 | rational         | fee amount (in rational representation)                                                                                                                       |
| amount\_fraction            | fraction         | fee amount (in fraction representation)                                                                                                                       |
| required\_balance           | string (numeric) | the required `coin` balance to pay the fee                                                                                                                    |
| required\_balance\_rat      | rational         | `required_balance` in rational representation                                                                                                                 |
| required\_balance\_fraction | fraction         | `required_balance` in fraction representation                                                                                                                 |

### FractionalValue

The `FractionalValue` object includes a [numerator and denominator](https://www.freemathhelp.com/numerator-denominator/) values for a given price or amount:

| Parameter | Type             | Description                              |
| --------- | ---------------- | ---------------------------------------- |
| numer     | string (numeric) | The numerator of the fractional value.   |
| denom     | string (numeric) | The denominator of the fractional value. |

```json
{
    "numer": "4561782244811",
    "denom": "4000000"
}
```

### Pagination

For requests which return many results, pagination offsets may be applied. \*\* Use either value, not both. \*\*

| Parameter  | Type    | Description                                             |
| ---------- | ------- | ------------------------------------------------------- |
| PageNumber | integer | Optional, defaults to `1`. Offset for paginated results |
| FromId     | integer | Optional. Ignores any results prior to this UUID        |

#### Example

```json
{
    "PageNumber": 1
}
```

```json
{
    "FromId": 4
}
```

### RationalValue

The Komodo DeFi SDK now offers the [num-rational crate](https://crates.io/crates/num-rational) feature which allows for higher precision numeric values to represent order volumes and prices in a unique format as explained below:

```json
[
  [1, [0, 1]],
  [1, [1]]
]
```

In the above unique format, the first item `[1,[0,1]]` is the `numerator` and the second item `[1,[1]]` is the `denominator`.

The `numerator` and `denominator` are BigInteger numbers represented as a sign and a uint32 array (where numbers are 32-bit parts of big integer in little-endian order).

`[1,[0,1]]` represents `+0000000000000000000000000000000010000000000000000000000000000000` = `4294967296`

`[-1,[1,1]]` represents `-1000000000000000000000000000000010000000000000000000000000000000` = `-4294967297`

### SyncStatus

| Parameter        | Type   | Description                                                                                                                                                                                                     |
| ---------------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| state            | string | current state of sync; possible values: `NotEnabled`, `NotStarted`, `InProgress`, `Error`, `Finished`                                                                                                           |
| additional\_info | object | A standard [SyncStatusExtended](/komodo-defi-framework/api/common_structures/#sync-status-extended) object. Additional info that helps to track the progress; present for `InProgress` and `Error` states only. |

### SyncStatusExtended

| Parameter          | Type   | Description                                                                                                  |
| ------------------ | ------ | ------------------------------------------------------------------------------------------------------------ |
| blocks\_left       | number | present for ETH/ERC20 coins only; displays the number of blocks left to be processed for `InProgress` state  |
| transactions\_left | number | present for UTXO coins only; displays the number of transactions left to be processed for `InProgress` state |
| code               | number | displays the error code for `Error` state                                                                    |
| message            | number | displays the error message for `Error` state                                                                 |

#### Example

```json
{
    "sync_status": {
      "state": "NotStarted"
    }
}
```

```json
{
    "sync_status": {
      "additional_info": {
        "transactions_left": 126
      },
      "state": "InProgress"
    }
}
```

```json
{
    "sync_status": {
      "state": "Finished"
    }
}
```

### WithdrawFee

The `WithdrawFee` object varies depending on the coin or token type. Refer to the examples to view the object structure for each type.

| Parameter       | Type           | Description                                                                       |
| --------------- | -------------- | --------------------------------------------------------------------------------- |
| type            | string         | The fee type. Either `Utxo`, `Tendermint`, `Qrc20` or `Eth`.                      |
| amount          | numeric string | `Utxo` or `Tendermint` type only. The fee amount.                                 |
| coin            | string         | The coin which will be used to pay the transaction fee.                           |
| gas             | integer        | `Eth` type only. The amount of gas to be used for the transaction.                |
| gas\_price      | numeric string | `Eth` or `Qrc20` type only. Price per unit of gas to be used for the transaction. |
| gas\_limit      | numeric string | `Tendermint` or `Qrc20` type only. Maximum gas to be used for the transaction.    |
| miner\_fee      | numeric string | `Tendermint` type only. Fee to mine the transaction.                              |
| total\_fee      | numeric string | `Eth` type only. Gas price multiplied by gas amount.                              |
| total\_gas\_fee | numeric string | `Qrc20` type only. Gas price multiplied by gas amount.                            |

#### Example of Eth type

```json
{
  "type": "Eth",
  "coin": "BNB",
  "gas": 109739,
  "gas_price": "0.000000003",
  "total_fee": "0.000329217"
}
```

#### Example of Qrc20 type

```json
{
  "type": "Qrc20",
  "coin": "tQTUM",
  "miner_fee": "0.00000447",
  "gas_limit": 100000,
  "gas_price": 40,
  "total_gas_fee": "0.04"
}
```

#### Example of Tendermint type

```json
{
  "type": "Tendermint",
  "coin": "IRIS",
  "amount": "0.038553",
  "gas_limit": 100000
}
```

#### Example of Utxo type

```json
{
  "type": "Utxo",
  "amount": "0.00001"
}
```

### FilterCriteria

The `FilterCriteria` object includes different criteria to filter from the different recent swaps:

| Parameter  | Type                     | Description                                                            |
| ---------- | ------------------------ | ---------------------------------------------------------------------- |
| status     | object                   | Return only swaps that match the specified status (e.g., "completed"). |
| date\_from | string (ISO 8601 format) | Return only swaps that started on or after this date.                  |
| date\_to   | string (ISO 8601 format) | Return only swaps that started before this date.                       |

#### Example

```json
{
  "filter": {
      "status": "completed",
      "date_from": "2024-01-01T00:00:00Z",
      "date_to": "2024-07-01T00:00:00Z"
  }
}
```

### PagingOptions

The `PagingOptions` object includes options of page selection to consult when looking for recent swaps:

| Parameter    | Type             | Description                                                                                                            |
| ------------ | ---------------- | ---------------------------------------------------------------------------------------------------------------------- |
| from\_uuid   | string (or null) | Skips records until this UUID, excluding the record with this UUID. Convenient for infinite scrolling implementations. |
| limit        | number           | Limits the number of returned swaps.                                                                                   |
| page\_number | number           | Returns limit swaps from the selected page. This parameter is ignored if from\_uuid is set.                            |

#### Example

```json
{
  "paging_options": {
      "from_uuid": null,
      "limit": 10,
      "page_number": 1
  }
}
```
export const title = "Komodo DeFi SDK Common Structures: Lightning";
export const description = "Lightning network functionality is now available in the Komodo DeFi SDK!";

# Lightning Network Structures

### ConfirmationTargets

This object represents the number of blocks required for an on-chain lightning-related transaction to be confirmed.
It is used for estimating the transaction fee rate (`feerate`) for different transaction types in the context of permissionless transactions performed by the node. Different target types are `background`, `normal`, and `high_priority`.

| Parameter      | Type    | Description                                                                                                                                                                                                                                                                                                                                                              |
| -------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| background     | integer | Used for transactions that can tolerate slower confirmation times when the transaction fee rate decreases. These transactions are not time-sensitive and can afford to wait longer for confirmation. The recommended range is `12` to `144` blocks to ensure a low `feerate`.                                                                                            |
| normal         | integer | Used for transactions that we want to confirm promptly, without significant delay (e.g, transactions for opening payment channels). These transactions are important but not critical. Suggested value is `6` blocks to ensure a moderate `feerate`.                                                                                                                     |
| high\_priority | integer | Used for transactions that require quick confirmation to prevent potential loss of funds (e.g. redeeming a Hashed Time Lock Contract (HTLC) on the blockchain before it times out). These transactions are time-critical and must be confirmed promptly to ensure the security of funds. Recommended value for `high_priority` is 1-2 blocks to ensure a high `feerate`. |

Using the recommended values in the above table with a coin that has a block time of 10 minutes, the equivalent time in minutes is:

*   `background`: 120 minutes to 1440 minutes (2 hours to 1 day).
*   `normal`: 60 minutes (one hour).
*   `high_priority`: 10 to 20 minutes.

### CounterpartyChannelConfig

| Parameter                               | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                          |
| --------------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| allow\_outbound\_0conf                  | boolean | Optional, defaults to `true`. When setting an outbound channel, it can be used straight away [without waiting](https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelHandshakeLimits.html#structfield.trust_own_funding_0conf) for any on-chain confirmations.                                                                                                                        |
| force\_announced\_channel\_preference   | boolean | Optional, defaults to `true`. Set to force an incoming channel to match our announced channel preference in ChannelOptions announced\_channel.                                                                                                                                                                                                                                                       |
| outbound\_channels\_confirmations       | integer | Optional, defaults to `144`. Confirmations we will wait for before considering an inbound channel locked in.                                                                                                                                                                                                                                                                                         |
| our\_locktime\_limit                    | boolean | Optional, defaults to `2016`. Set to the amount of blocks we're willing to wait to claim money back to us.                                                                                                                                                                                                                                                                                           |
| min\_funding\_sats                      | boolean | Optional, defaults to `0`. Minimum allowed satoshis when an inbound channel is funded.                                                                                                                                                                                                                                                                                                               |
| max\_funding\_sats                      | boolean | Optional, defaults to `16777215`. Maximum allowed satoshis when an inbound channel is funded.                                                                                                                                                                                                                                                                                                        |
| max\_htlc\_minimum\_msat                | boolean | Optional, defaults to `18446744073709551615`. The remote node sets a limit on the minimum size of HTLCs we can send to them. This allows us to limit the maximum minimum-size they can require.                                                                                                                                                                                                      |
| min\_max\_htlc\_value\_in\_flight\_msat | boolean | Optional, defaults to `0`. The remote node sets a limit on the maximum value of pending HTLCs to them at any given time to limit their funds exposure to [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract). This allows us to set a minimum such value.                                                                                                                      |
| max\_channel\_reserve\_sats             | boolean | Optional, defaults to `18446744073709551615`. The remote node will require us to keep a certain amount in direct payment to ourselves at all time, ensuring that we are able to be punished if we broadcast an old state. This allows us to limit the amount which we will have to keep to ourselves (and cannot use for [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract)). |
| min\_max\_accepted\_htlcs               | boolean | Optional, defaults to `0`. The remote node sets a limit on the maximum number of pending HTLCs to them at any given time. This allows us to set a minimum such value.                                                                                                                                                                                                                                |

### LightningActivationParams

| Parameter        | Type    | Description                                                                                                                                                                                                                                   |
| ---------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| name             | string  | The name of the node that will be used in [lightning explorers](https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164/r/n)                                                          |
| listening port   | integer | Optional, defaults to `9735`. The port that this node listens for incoming connections on.                                                                                                                                                    |
| color            | string  | Optional, defaults to `2b6680`. A hexidecimal color string which will be used in network graphs on [lightning explorers](https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164/r/n) |
| payment\_retries | integer | Optional, defaults to `5`. Number of times a payment will be retried if it fails.                                                                                                                                                             |
| backup\_path     | string  | Optional. The backup path for channel backups, preferably on an external drive.                                                                                                                                                               |

### LightningChannelAmount

| Parameter | Type   | Description                                                                            |
| --------- | ------ | -------------------------------------------------------------------------------------- |
| type      | string | `Exact` for a specific amount or `Max` for whole balance.                              |
| value     | object | Only required if type is `Exact`. The amount in BTC you want to open the channel with. |

### LightningChannelConfig

The values in this object are only used if the channel is being opened by the user. If the channel is being opened by the counterparty, the values in this object are ignored.
If not specified when using the [open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel) or [update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel) methods, the values in this object will default to the values set in the `coins` configuration file.

| Parameter                               | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| --------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| inbound\_channels\_confirmations        | string  | Optional, defaults to `6`. Should be set in coins file, and applies to all channels. Confirmations we will wait for before considering an inbound channel locked in.                                                                                                                                                                                                                                                                                                                                   |
| max\_inbound\_in\_flight\_htlc\_percent | integer | Optional, defaults to `10`. Should be set in coins file, and applies to all channels. Sets the percentage of the channel value we will cap the total value of outstanding inbound HTLCs to.                                                                                                                                                                                                                                                                                                            |
| our\_htlc\_minimum\_msat                | integer | Optional, defaults to `1`. The smallest value HTLC we will accept to process. The channel gets closed any time our counterparty misbehaves by sending us an HTLC with a value smaller than this.                                                                                                                                                                                                                                                                                                       |
| announced\_channel                      | boolean | Optional, defaults to `false`. Set to announce the channel publicly and notify all nodes that they can route via this channel. GUIs and wallet apps should be set to `false`.                                                                                                                                                                                                                                                                                                                          |
| commit\_upfront\_shutdown\_pubkey       | boolean | Optional, defaults to `true`. When `true` (and the counterparty agrees), the user must use the same key for cooperative closing. This prevents a user from changing the destination address in a cooperative close, which slightly increases security (however, this option is not required if the counterparty does not support it and a channel can be accepted regardless). **Note that the key for forced closing is always fixed when opening a channel and is different from shutdown\_pubkey.** |
| counterparty\_locktime                  | integer | Optional, defaults to `144`. The number of blocks we require our counterparty to wait to claim their money on chainif they broadcast a revoked transaction. We have to be online at least once during this time to punish our counterparty for broadcasting a revoked transaction. We have to account also for the time to broadcast and confirm our transaction, possibly with time in between to [RBF (Replace-By-Fee)](https://bitcoinops.org/en/topics/replace-by-fee/) the spending transaction.  |
| negotiate\_scid\_privacy                | integer | Optional, defaults to `false`. If `true`, we attempt to negotiate the `scid_privacy` (referred to as `scid_alias` in the [BOLTs](https://github.com/lightning/bolts)) option for outbound private channels. This provides better privacy by not including our real on-chain channel UTXO in each invoice and requiring that our counterparty only relay HTLCs to us using the channel's SCID alias.                                                                                                    |
| their\_channel\_reserve\_sats           | boolean | Optional, defaults to `10000` or 1% of channel value. The minimum balance that the other node has to maintain on their side, at all times. This ensures that if our counterparty broadcasts a revoked state, we can punish them by claiming at least this value on chain.                                                                                                                                                                                                                              |

For GUIs and wallet apps, it is recommended to set `announced_channel` to `false` (the default value), as the node is not expected to be reliably online.

### LightningChannelOptions

| Parameter                               | Type    | Description                                                                                                                                                                                                        |
| --------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| proportional\_fee\_in\_millionths\_sats | integer | Optional, defaults to `0`. Amount (in milli-satoshi) charged for payments forwarded outbound over the channel, in excess of proportional\_fee\_in\_millionths\_sats.                                               |
| base\_fee\_msat                         | integer | Optional, defaults to `1000`. Amount (in milli-satoshi) charged for payments forwarded outbound over the channel, in excess of proportional\_fee\_in\_millionths\_sats.                                            |
| cltv\_expiry\_delta                     | integer | Optional, defaults to `72`. Blocks until [CheckLockTimeVerify (CLTV)](https://academy.bit2me.com/en/que-es-cltv-bitcoin/) expiry.                                                                                  |
| max\_dust\_htlc\_exposure\_msat         | integer | Optional, defaults to `5000000`. Limit our total exposure to in-flight [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract) which are burned to fees as they are too small to claim on-chain. |
| force\_close\_avoidance\_max\_fee\_sats | integer | Optional, defaults to `1000`. The additional fee we're willing to pay to avoid waiting for the counterparty's locktime to reclaim funds.                                                                           |

### LightningClosedChannelsFilter

| Parameter              | Type    | Description                                                                                                                         |
| ---------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| channel\_id            | string  | Optional. Unique string identifying a channel by its ID.                                                                            |
| counterparty\_node\_id | string  | Optional. A hexidecimal string identifying a counterparty node.                                                                     |
| funding\_tx            | string  | Optional. A transaction ID which added funds.                                                                                       |
| from\_funding\_value   | integer | Optional. The minimum value of channel funding in satoshis.                                                                         |
| to\_funding\_value     | integer | Optional. The maximum value of channel funding in satoshis.                                                                         |
| channel\_type          | string  | Optional. `Inbound` or `Outbound`.                                                                                                  |
| closing\_tx            | integer | Optional. A transaction ID which closed the channel.                                                                                |
| closure\_reason        | integer | Optional. The reason a channel was closed.                                                                                          |
| claiming\_tx           | integer | Optional. The ID of the transaction that returned the remaining outbound funds when the channel was closed to our on-chain address. |
| from\_claimed\_balance | integer | Optional. The minimum balance of channel funds claimed in satoshis.                                                                 |
| to\_claimed\_balance   | integer | Optional. The maximum balance of channel funds claimed in satoshis.                                                                 |
| channel\_visibility    | integer | Optional. `Public` or `Private`.                                                                                                    |

Response may change to be more consistent in future.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206446309](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206446309)

### LightningOpenChannelsFilter

| Parameter                      | Type    | Description                                                                                                                                                          |
| ------------------------------ | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| channel\_id                    | string  | Optional. Unique string identifying a channel by its ID.                                                                                                             |
| counterparty\_node\_id         | string  | Optional. A hexidecimal string identifying a counterparty node.                                                                                                      |
| funding\_tx                    | string  | Optional. A transaction ID which added funds.                                                                                                                        |
| from\_funding\_value\_sats     | integer | Optional. The minimum value of channel funding in satoshis.                                                                                                          |
| to\_funding\_value\_sats       | integer | Optional. The maximum value of channel funding in satoshis.                                                                                                          |
| is\_outbound                   | boolean | Optional. If `true`, limits the response to outbound channels only.                                                                                                  |
| from\_balance\_msat            | integer | Optional. The minimum channel balance in millisatoshis.                                                                                                              |
| to\_balance\_msat              | integer | Optional. The maximum channel balance in millisatoshis.                                                                                                              |
| from\_outbound\_capacity\_msat | integer | Optional. The minimum outbound capacity of the channel balance in millisatoshis.                                                                                     |
| to\_outbound\_capacity\_msat   | integer | Optional. The maximum outbound capacity of the channel balance in millisatoshis.                                                                                     |
| from\_inbound\_capacity\_msat  | integer | Optional. The minimum inbound capacity of the channel balance in millisatoshis.                                                                                      |
| to\_inbound\_capacity\_msat    | integer | Optional. The maximum inbound capacity of the channel balance in millisatoshis.                                                                                      |
| confirmed                      | boolean | Optional. If `true`, only channels with channel opening transactions that passed the number of confirmations required for the channel to be usable will be returned. |
| is\_usable                     | boolean | Optional. If `true`, only channels that are confirmed and the counterparty is online, meaning that these channels can be used for payments will be returned.         |
| is\_public                     | boolean | Optional. If `true`, only channels that our node announces to the lightning network, these channels are visible on lightning explorers will be returned.             |

### LightningPayment

| Parameter        | Type   | Description                                                                                                                                                                                  |
| ---------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| type             | string | The payment type. Accepted values are `invoice` or [`keysend`](https://cdecker-lightning.readthedocs.io/lightning-keysend.7.html).                                                           |
| invoice          | string | Only used if `type` is `invoice`. An identifying string which represents the invoice.                                                                                                        |
| destination      | string | Only used if `type` is `keysend`. A `node_pubkey` (which is also the node address in lightning context). Not to be confused with an onchain address.                                         |
| amount\_in\_msat | string | Only used if `type` is `keysend`. Amount to be paid, in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter) (A thousandth of a satoshi; the same as 0.00000000001 bitcoin). |
| expiry           | string | Only used if `type` is `keysend`. Optional, defaults to `3600`. Seconds until the payment expires.                                                                                           |

### LightningPaymentFilter

| Parameter             | Type    | Description                                                                                                       |
| --------------------- | ------- | ----------------------------------------------------------------------------------------------------------------- |
| payment\_type         | object  | A standard `LightningPaymentType` object.                                                                         |
| description           | string  | Optional. A note to indicate the purpose of the invoice.                                                          |
| status                | string  | Optional. Accepted values: `pending`, `succeeded`, `failed`.                                                      |
| from\_amount\_msat    | integer | Optional. Minimum amount sent in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter)             |
| to\_amount\_msat      | integer | Optional. Maximum amount sent in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter)             |
| from\_fee\_paid\_msat | integer | Optional. Minimum transaction fee paid in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter)    |
| to\_fee\_paid\_msat   | integer | Optional. Maximum transaction fee paid in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter)    |
| from\_timestamp       | string  | Optional. Minimum timestamp in [unix epoch format](https://www.epochconverter.com/) of payment results to return. |
| to\_timestamp         | string  | Optional. Maximum timestamp in [unix epoch format](https://www.epochconverter.com/) of payment results to return. |

### LightningPaymentType

| Parameter   | Type   | Description                                                                         |
| ----------- | ------ | ----------------------------------------------------------------------------------- |
| type        | object | Accepted values are `Outbound Payment` or `Inbound Payment`.                        |
| destination | string | Only used if `type` is `Outbound Payment`. A pubkey which will receive the payment. |

Response may change in future.
See [https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206176530](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206176530)
export const title = "Komodo DeFi SDK Common Structures: Non-Fungible Tokens";
export const description = "Starting with version beta-2.1.3434, the Komodo DeFi SDK supports the standardized protocol format called mmrpc 2.0.";

# Non-Fungible Token Structures

The following structures are used in the Komodo DeFi SDK for non-fungible tokens (NFTs).

### NftInfo

The `NftInfo` object includes the following items for a given token:

| Parameter              | Type    | Description                                                                                                                                                           |
| ---------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount                 | string  | The amount of this NFT the user owns (used by `ERC1155`).                                                                                                             |
| block\_number\_minted  | integer | The block height when the NFT was minted. May be `null`.                                                                                                              |
| block\_number          | integer | The block height when the amount or owner changed.                                                                                                                    |
| chain                  | string  | Chain name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| name                   | string  | May be `null`. An NFT collection name.                                                                                                                                |
| contract\_type         | string  | The type of NFT contract standard. One of `ERC721` or `ERC1155`.                                                                                                      |
| last\_token\_uri\_sync | string  | When the token\_uri was last updated.                                                                                                                                 |
| last\_metadata\_sync   | string  | When the metadata was last updated.                                                                                                                                   |
| metadata               | string  | The metadata of the token. May be `null`.                                                                                                                             |
| minter\_address        | string  | Minter address. May be `null`.                                                                                                                                        |
| owner\_of              | string  | The wallet address of the owner of the NFT.                                                                                                                           |
| possible\_spam         | boolean | If `true`, the contract address has [been identified](https://docs.moralis.io/web3-data-api/evm/nft-spam-detection) as associated with spam or suspicious activities. |
| possible\_phishing     | boolean | If `true`, the token has been identified as associated with phishing, as at least one of domain fields is found in database with phishing domains.                    |
| symbol                 | string  | May be `null`. The symbol of the NFT contract.                                                                                                                        |
| token\_address         | string  | The address of the NFT contract.                                                                                                                                      |
| token\_id              | string  | The token ID of the NFT.                                                                                                                                              |
| token\_hash            | string  | The token hash. May be `null`.                                                                                                                                        |
| token\_uri             | string  | The URI to the metadata of the token. May be `null`.                                                                                                                  |
| token\_domain          | string  | Token domain. May be `null`.                                                                                                                                          |
| uri\_meta              | object  | A standard [NftMetadata](/komodo-defi-framework/api/common_structures/nfts/#nft-metadata) object.                                                                     |

### NftFilter

The `NftFilter` object includes the following items for a given coin or token:

| Parameter         | Type    | Description                                                                                                                    |
| ----------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------ |
| exclude\_spam     | boolean | Optional, defaults to `false`. If `true`, only tokens which have param `possible_spam:false` are included in the response.     |
| exclude\_phishing | boolean | Optional, defaults to `false`. If `true`, only tokens which have param `possible_phishing:false` are included in the response. |

### NftTransfer

The `NftTransfer` object includes the following items for each token transaction:

| Parameter          | Type    | Description                                                                                                                                                           |
| ------------------ | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount             | string  | Amount of tokens transferred.                                                                                                                                         |
| block\_hash        | string  | May be `null`. Hash of block in which transfer occurred.                                                                                                              |
| block\_number      | integer | Height of block in which transfer occurred.                                                                                                                           |
| block\_timestamp   | integer | Block time in [unix epoch format](https://www.epochconverter.com/).                                                                                                   |
| chain              | string  | Chain name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| token\_uri         | string  | May be `null`. The URI to the metadata of the token.                                                                                                                  |
| token\_domain      | string  | May be `null`. Extracted domain from the `token_uri`, if valid.                                                                                                       |
| collection\_name   | string  | May be `null`. Name of collection which token belongs to.                                                                                                             |
| image\_url         | string  | May be `null`. The URI to the token image.                                                                                                                            |
| image\_domain      | string  | May be `null`. Extracted domain from the `image_url`, if valid.                                                                                                       |
| token\_name        | string  | May be `null`. Name of the token.                                                                                                                                     |
| contract\_type     | string  | Contract type. `ERC721` or `ERC1155`.                                                                                                                                 |
| token\_address     | string  | Address of token transferred.                                                                                                                                         |
| token\_id          | string  | Token ID.                                                                                                                                                             |
| possible\_spam     | boolean | If `true`, the contract address has [been identified](https://docs.moralis.io/web3-data-api/evm/nft-spam-detection) as associated with spam or suspicious activities. |
| possible\_phishing | boolean | If `true`, the token has been identified as associated with phishing, as at least one of domain fields is found in database with phishing domains.                    |
| transaction\_hash  | string  | Transaction ID of the transfer.                                                                                                                                       |
| transaction\_index | string  | May be `null`. Transaction index of the transfer.                                                                                                                     |
| log\_index         | string  | Log index of the transfer.                                                                                                                                            |
| value              | string  | May be `null`. Tranfer value.                                                                                                                                         |
| transaction\_type  | string  | May be `null`. Transaction type. Possible values are `Single`.                                                                                                        |
| from\_address      | string  | Address of previous owner which sent the token(s).                                                                                                                    |
| to\_address        | string  | Address of new owner which received the token(s).                                                                                                                     |
| status             | string  | Transfer status. Will be either `Send` or `Receive`. When the `from_address` and `to_address` are the same (i.e. sending to yourself), this value will be `Receive`.  |
| verified           | integer | May be `null`. A deprecated field which will be removed in future.                                                                                                    |
| operator           | string  | May be `null`.                                                                                                                                                        |
| fee\_details       | object  | Optional. A standard [FeeInfo](/komodo-defi-framework/api/common_structures/#fee-info) object.                                                                        |
| confirmations      | integer | The count of blocks produced since this transaction was confirmed.                                                                                                    |

`verified` has no description. Related to [https://cointelegraph.com/news/nft-whale-pranksy-pranked-by-fake-banksy-for-97-7-eth](https://cointelegraph.com/news/nft-whale-pranksy-pranked-by-fake-banksy-for-97-7-eth)? Who verifies it? I can see there are ways to verify on opensea etc, I assume Moralis incormoprates this.
What are the other possible values for `transaction_type`?
What is `operator`?
What does `verified` mean?

### NftTransferFilter

The `NftTransferFilter` object includes the following items for a transfer of given coin or token:

| Parameter         | Type    | Description                                                                                                                                             |
| ----------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| receive           | boolean | Optional, defaults to `false`. If `true`, only transfers where user received NFTs are included in the response.                                         |
| send              | boolean | Optional, defaults to `false`. If `true`, only transfers where user sent NFTs are included in the response.                                             |
| from\_date        | integer | Optional. A timestamp in [unix epoch format](https://www.epochconverter.com/). If `true`, filter includes transfers from this date onwards (inclusive). |
| to\_date          | integer | Optional. A timestamp in [unix epoch format](https://www.epochconverter.com/). If `true`, filter includes transfers up to this date (inclusive).        |
| exclude\_spam     | boolean | Optional, defaults to `false`. If `true`, only transfers which have param `possible_spam:false` are included in the response.                           |
| exclude\_phishing | boolean | Optional, defaults to `false`. If `true`, only transfers which have param `possible_phishing:false` are included in the response.                       |

```json
{
    "ticker": "MINDS-ERC20",
    "required_confirmations": 4
}
```

### NftMetadata

The `NftMetadata` object includes the following items for a given coin or token:

| Parameter         | Type                       | Description                                                                                                                                                      |
| ----------------- | -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| image             | string                     | Optional. Direct URL to the NFT's image.                                                                                                                         |
| image\_url        | string                     | Optional. Optional. Url to the NFT's image. Derived from the `image` or `image_url` fields to prioritize the non-null value. Can be null if neither is provided. |
| image\_domain     | string                     | Optional. Extracted domain from the 'image\_url', if valid.                                                                                                      |
| name              | string                     | Optional. Name of the token.                                                                                                                                     |
| description       | string                     | Optional. Description of the token.                                                                                                                              |
| attributes        | object or array of objects | Optional. The values within this parameter will vary, and are set by the creator. Often used to store traits.                                                    |
| animation\_url    | string                     | Optional. Url to an animation to be displayed instead of a static image.                                                                                         |
| animation\_domain | string                     | Optional. Extracted domain from the `animation_url`, if valid.                                                                                                   |
| external\_url     | string                     | Optional. URL to the external source related to the token.                                                                                                       |
| external\_domain  | string                     | Optional. Extracted domain from the `external_url`, if valid.                                                                                                    |
| image\_details    | object                     | Optional. JSON containing additional details or attributes of the image.                                                                                         |

```json
[
    {
        "trait_type": "Specialization",
        "value": "Thief"
    },
    {
        "trait_type": "Skin Tone",
        "value": "#0013b0"
    },
    {
        "trait_type": "Weapon",
        "value": "Crossbow"
    },
    {
        "trait_type": "Species",
        "value": "Dark Elf"
    },
    {
        "trait_type": "Gender",
        "value": "Female"
    },
    {
        "trait_type": "Strength",
        "value": "8"
    },
    {
        "trait_type": "Dexterity",
        "value": "12"
    },
    {
        "trait_type": "Intelligence",
        "value": "10"
    },
    {
        "trait_type": "Perks",
        "value": ["Steath", "Eagle Eye", "Lockpicking", "Pickpocketing", "Fire resistance"]
    },
    {
        "trait_type": "Weakness",
        "value": ["Slow healing", "Elfbark Addict", "Lockpicking", "Fear of cats", "Unconvincing liar"]
    },
    {
        "trait_type": "Personality",
        "value": "Aggressive"
    }
]
```

### WithdrawNftData

The `WithdrawNftData` object is used for withdrawals of NFTs on ERC721 and ERC1155 contracts. It includes the following items for a given coin or token:

| Parameter      | Type    | Description                                                                                                                              |
| -------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| chain          | string  | The token chain. Chain must be [activated](/komodo-defi-framework/api/legacy/coin_activation/) first.                                    |
| to             | string  | Destination address to withdraw the token to.                                                                                            |
| token\_address | string  | Token address.                                                                                                                           |
| token\_id      | string  | Token ID.                                                                                                                                |
| fee            | object  | A standard [WithdrawFee](/komodo-defi-framework/api/common_structures/#withdraw-fee) object. May be missing for older transfers.         |
| amount         | string  | Optional, ERC1155 only. Defaults to `1`. Amount of NFTs to withdraw. Ignored if `max` is true.                                           |
| max            | boolean | Optional, ERC1155 only. Defaults to `false`. If `true`, amount parameter will be ignored and all NFTs with this `token_id` will be sent. |

When the `type` parameter in a [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/) request is `withdraw_erc721`, it means the NFT is absolutely unique,
and it has only 1 owner and the owner can own only 1 NFT with this `token_id`
in its `token_address` (also referred to as contract address).
When the `type` parameter in a [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/) request is `withdraw_erc1155`, it means that it is possible for more
than 1 user to own one or more of the same NFT (with an identical `token_id`).
Due to this difference, the `amount` and `max` fields are only used the when
the `type` value is `withdraw_erc1155`.
export const title = "Komodo DeFi SDK Common Structures: Orders";
export const description = "Each order on the Komodo Defi oderbook can be queried to view full details of each order for a pair, or the best orders for a ticker.";

# Order Structures

### CancelBy

| Structure   | Type   | Description                                                                                                                      |
| ----------- | ------ | -------------------------------------------------------------------------------------------------------------------------------- |
| Type        | string | `All` to cancel all orders; `Pair` to cancel all orders for specific coin pairs; `Coin` to cancel all orders for a specific coin |
| data        | object | additional data the cancel condition; present with `Pair` and `Coin` types                                                       |
| data.base   | string | base coin of the pair; `Pair` type only                                                                                          |
| data.rel    | string | rel coin of the pair; `Pair` type only                                                                                           |
| data.ticker | string | order is cancelled if it uses `ticker` as base or rel; `Coin` type only                                                          |

To cancel all orders for a specific coin:

```json
{
  "type": "Coin",
  "data": {
    "ticker": "DOC"
  }
}
```

To cancel all orders for a specific pair:

```json
{
  "type": "Pair",
  "data": {
      "base": "DOC",
      "rel": "MARTY"
  }
}
```

### ConfSettings

| Structure   | Type   | Description                                                                                                                                                                     |
| ----------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base\_confs | number | Number of required confirmations on the base coin's blockchain for a transaction to complete an atomic swap event.                                                              |
| base\_nota  | bool   | Whether [dPoW notarization](https://komodoplatform.com/en/blog/dpow-demystified/) is required on the base coin's blockchain for a transaction to complete an atomic swap event. |
| rel\_confs  | number | Number of required confirmations on the rel coin's blockchain for a transaction to complete an atomic swap event.                                                               |
| rel\_nota   | bool   | Whether [dPoW notarization](https://komodoplatform.com/en/blog/dpow-demystified/) is required on the rel coin's blockchain for a transaction to complete an atomic swap event.  |

```json
{
  "conf_settings": {
    "base_confs": 2,
    "base_nota": true,
    "rel_confs": 5,
    "rel_nota": false
  }
}
```

### RequestBy

| Structure | Type    | Description                                            |                                                                                                                                                                                  |
| --------- | ------- | ------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| type      | integer | Defines whether requesting by `volume` or by `number`. |                                                                                                                                                                                  |
| value     | numeric | string                                                 | If `type` is `volume`, the amount of `coin` (defined in the parent object) the user is willing to buy or sell. If `type` is `number`, the number of best price trades to return. |

Filter response to return the best trades for up to 20 of the coin defined in the parent object:

```json
{
  "request_by": {
    "type": "volume",
    "value": 20
  }
}
```

Filter response to return the 10 best priced trades:

```json
{
  "type": "number",
  "value": 10
}
```

## OrderAddress

| Structure     | Type   | Description                                                          |
| ------------- | ------ | -------------------------------------------------------------------- |
| address\_type | string | Generally `Transparent`, but may be `Shielded` for supporting coins. |
| address\_data | string | The actual address text for sending and receiving funds.             |

```json
{
  "address_type": "Transparent",
  "address_data": "DEsCggcN3WNmaTkF2WpqoMQqx4JGQrLbPS"
}
```

### OrderType

| Structure | Type   | Description                                                                                                                                                                                                                                                                                                                                                                                                           |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Type      | string | There are two types from which to choose: `GoodTillCancelled` and `FillOrKill`. The `GoodTillCancelled` order is automatically converted to a `maker` order if the order is not matched in 30 seconds, and this `maker` order stays in the orderbook until explicitly cancelled. On the other hand, a `FillOrKill` order is cancelled if it is not matched within 30 seconds. The default type is `GoodTillCancelled` |

`GoodTillCancelled` orders will remain on the orderbook until they are exhausted or explicitly cancelled.

```json
  {
    "order_type": {
      "type": "GoodTillCancelled"
    }
  }
```

`FillOrKill` orders will be automatically cancelled if they are not matched within 60 seconds.

```json
  {
    "order_type": {
      "type": "FillOrKill"
    }
  }
```

### OrderStatusData

| Structure               | Type            | Description                                                                                                                                                                                 |
| ----------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base                    | string          | base currency                                                                                                                                                                               |
| rel                     | string          | rel currency                                                                                                                                                                                |
| price                   | number          | order price as decimal number                                                                                                                                                               |
| price\_rat              | rational number | order price as rational number                                                                                                                                                              |
| max\_base\_vol          | number          | Maximum trade volume                                                                                                                                                                        |
| max\_base\_vol\_rat     | rational number | Maximum trade volume as rational number                                                                                                                                                     |
| min\_base\_vol          | number          | Minimum trade volume                                                                                                                                                                        |
| min\_base\_vol\_rat     | rational number | Minimum trade volume as rational number                                                                                                                                                     |
| created\_at             | number          | Timestamp of order creation                                                                                                                                                                 |
| updated\_at             | number          | Timestamp of last order update                                                                                                                                                              |
| matches                 | list            | UUIDS of matching orders                                                                                                                                                                    |
| started\_swaps          | list            | UUIDS of swaps started                                                                                                                                                                      |
| uuid                    | string          | UUID of this order                                                                                                                                                                          |
| conf\_settings          | object          | Confirmation / Notarisation settings for order                                                                                                                                              |
| base\_orderbook\_ticker | string          | The ticker of the base currency if `orderbook_ticker` is configured for the base currency in `coins` file. If not defined, will return a null value.                                        |
| rel\_orderbook\_ticker  | string          | The ticker of the rel currency if `orderbook_ticker` is configured for the rel currency in `coins` file. If not defined, will return a null value.                                          |
| cancellable             | boolean         | `true` if order is in a state which it can be cancelled. `false` if not (e.g. swap is in progress)                                                                                          |
| cancellation\_reason    | string          | `Cancelled` indicates order was withdrawn by user. `Fulfilled` indicates order was swapped successfully. `TimedOut` indicates a taker order with type `FillOrKill` expired before matching. |
| available\_amount       | string          | Funds available for order to be matched against, taking into account current spendable balance and `max_volume`                                                                             |

```json
{
  "available_amount": "1",
  "base": "BEER",
  "cancellable": true,
  "created_at": 1568808684710,
  "matches": {
    "60aaacca-ed31-4633-9326-c9757ea4cf78": {
      "connect": {
        "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
        "method": "connect",
        "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
        "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
      },
      "connected": {
        "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
        "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
        "method": "connected",
        "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
      },
      "last_updated": 1560529572571,
      "request": {
        "action": "Buy",
        "base": "BEER",
        "base_amount": "1",
        "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
        "method": "request",
        "rel": "PIZZA",
        "rel_amount": "1",
        "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
        "uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
      },
      "reserved": {
        "base": "BEER",
        "base_amount": "1",
        "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
        "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
        "method": "reserved",
        "rel": "PIZZA",
        "rel_amount": "1",
        "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
      }
    }
  },
  "max_base_vol": "1",
  "max_base_vol_rat": [
    [1, [1]],
    [1, [1]]
  ],
  "min_base_vol": "0",
  "min_base_vol_rat": [
    [0, []],
    [1, [1]]
  ],
  "price": "1",
  "price_rat": [
    [1, [1]],
    [1, [1]]
  ],
  "rel": "ETOMIC",
  "started_swaps": ["60aaacca-ed31-4633-9326-c9757ea4cf78"],
  "uuid": "ea77dcc3-a711-4c3d-ac36-d45fc5e1ee0c"
}
```

### OrderDataV1

Compare and confirm the differences between this object in v1 and v2 methods.

| Structure                   | Type             | Description                                                                                                                                         |
| --------------------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                        | string           | The ticker of the coin                                                                                                                              |
| address                     | string           | The address offering the trade                                                                                                                      |
| price                       | string (decimal) | The price the user is willing to buy or sell per one unit of the coin from request                                                                  |
| price\_rat                  | rational         | The price represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                           |
| price\_fraction             | object           | The price represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.                       |
| maxvolume                   | string (decimal) | The maximum amount of `base` the offer provider is willing to sell                                                                                  |
| max\_volume\_rat            | rational         | The max volume represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                      |
| max\_volume\_fraction       | object           | The max volume represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.                  |
| min\_volume                 | string (decimal) | The minimum amount of `base` coin the offer provider is willing to sell                                                                             |
| min\_volume\_rat            | rational         | The min volume represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                      |
| min\_volume\_fraction       | object           | The min volume represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.                  |
| pubkey                      | string           | The pubkey of the offer provider                                                                                                                    |
| age                         | number           | The age of the offer (in seconds)                                                                                                                   |
| zcredits                    | number           | The zeroconf deposit amount (deprecated)                                                                                                            |
| netid                       | number           | The id of the network on which the request is made (default is `0`)                                                                                 |
| uuid                        | string           | The uuid of order                                                                                                                                   |
| is\_mine                    | bool             | Whether the order is placed by me                                                                                                                   |
| base\_max\_volume           | string (decimal) | The maximum amount of `base` coin the offer provider is willing to buy or sell                                                                      |
| base\_max\_volume\_rat      | rational         | The `base_max_volume` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.               |
| base\_max\_volume\_fraction | object           | The `base_max_volume` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.           |
| base\_min\_volume           | string (decimal) | The minimum amount of `base` coin the offer provider is willing to buy or sell                                                                      |
| base\_min\_volume\_rat      | rational         | The `base_min_volume` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.               |
| base\_min\_volume\_fraction | object           | The `base_min_volume` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.           |
| base\_confs                 | number           | The confirmations settings of `base` coin set by the offer provider                                                                                 |
| base\_nota                  | bool             | The notarisation settings of `base` coin set by the offer provider                                                                                  |
| rel\_max\_volume            | string (decimal) | The maximum amount of `rel` coin the offer provider is willing to buy or sell                                                                       |
| rel\_max\_volume\_rat       | rational         | The `rel_max_volume` max volume represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.     |
| rel\_max\_volume\_fraction  | object           | The `rel_max_volume` max volume represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object. |
| rel\_min\_volume            | string (decimal) | The minimum amount of `rel` coin the offer provider is willing to buy or sell                                                                       |
| rel\_min\_volume\_rat       | rational         | The `rel_min_volume` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                |
| rel\_min\_volume\_fraction  | object           | The `rel_min_volume` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.            |
| rel\_confs                  | number           | The confirmations settings of `rel` coin set by the offer provider                                                                                  |
| rel\_nota                   | bool             | The notarisation settings of `rel` coin set by the offer provider                                                                                   |
| original\_tickers           | list (string)    | Tickers included in response when `orderbook_ticker` is configured for the queried coin in `coins` file                                             |

### OrderDataV2

Compare and confirm the differences between this object in v1 and v2 methods.

| Structure               | Type   | Description                                                                                                                                                                                                                                                                                   |
| ----------------------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                    | string | The ticker of the coin                                                                                                                                                                                                                                                                        |
| address                 | object | A standard [OrderAddress](/komodo-defi-framework/api/common_structures/orders/#order-address) object.                                                                                                                                                                                         |
| price                   | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the coin price.                                                                                                                                                     |
| base\_min\_volume       | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the minimum base volume.                                                                                                                                            |
| base\_max\_volume       | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the maximum base volume.                                                                                                                                            |
| base\_max\_volume\_aggr | object | Orderbook (v2) only. A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the maximum aggregated base amount at the specified price. The sum of max base volumes of the current order and all orders with a worse price. |
| rel\_min\_volume        | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the minimum rel volume.                                                                                                                                             |
| rel\_max\_volume        | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the maximum rel volume.                                                                                                                                             |
| rel\_max\_volume\_aggr  | object | Orderbook (v2) only. A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the maximum aggregated rel amount at the specified price. The sum of max rel volumes of the current order and all orders with a worse price.   |
| pubkey                  | string | The pubkey of the offer provider                                                                                                                                                                                                                                                              |
| uuid                    | string | The uuid of order                                                                                                                                                                                                                                                                             |
| is\_mine                | bool   | Whether the order is placed by me                                                                                                                                                                                                                                                             |
| conf\_settings          | object | A standard [ConfSettings](/komodo-defi-framework/api/common_structures/orders/#conf-settings) object.                                                                                                                                                                                         |

## OrderSummaryData

| Structure     | Type             | Description                                                                       |
| ------------- | ---------------- | --------------------------------------------------------------------------------- |
| uuid          | string           | uuid of the order                                                                 |
| order\_type   | string           | Type of the order; "Maker" or "Taker"                                             |
| base          | string           | base coin of the order                                                            |
| rel           | string           | rel coin of the order                                                             |
| price         | number (decimal) | price of the order                                                                |
| volume        | number (decimal) | volume of the order                                                               |
| created\_at   | number           | unix timestamp in milliseconds, indicating the order creation time                |
| last\_updated | number           | unix timestamp in milliseconds, indicating the time the order was last updated    |
| Was\_taker    | number           | `1` if the order was a "Taker" order that got converted to "Maker", `0` otherwise |
| status        | string           | status of the Order                                                               |

## MatchBy

| Structure | Type             | Description                                                                                                                  |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| Type      | string           | `Any` to match with any other order; `Orders` to select specific uuids; `Pubkeys` to select specific nodes; default is `Any` |
| data      | array of strings | A list of order uuids (to match for `Orders` type) or pubkeys of nodes (to match for `Pubkeys` type)                         |

```json
    "match_by": {
      "type": "Pubkeys",
      "data": [
        "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
        "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c"        
      ]
    }
```

Match by order uuids:

```json
    "match_by": {
      "type": "Orders",
      "data": [
        "6f65968f-e3c6-4978-98c5-5cec2bb5aa5b",
        "07ce08bf-3db9-4dd8-a671-854affc1b7a3"
      ]
    }
```
export const title = "Komodo DeFi SDK Common Structures: Swaps";
export const description = "Each active or completed trade from the Komodo DeFi SDK includes an unique identifier (UUID), a summary of the trade and detailed information relating to each swap event.";

# Swap Structures

### SwapEvent

There are a variety if swap events which may occur during a trade. See [Maker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) and [Taker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) for more info.

| Parameter | Type   | Description                                                                                                                                                                              |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| type      | string | See [Maker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) and [Taker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) for more info. |
| data      | varies | The data field may contain contextual information (e.g. txids) releated to a swap event. In some cases, it will be `null`.                                                               |

#### Example

```json
{
  "type": "TakerFeeSent",
  "data": {
    "tx_hex": "0400008085202f89014b9e44ba75ed80361776ac385feee7bba13b6c2d3147a3d9b5d71362a4624219000000006b483045022100a45de07b5d211c62e8ecf90cd5bee5076f6b6f20715f5618d7d0d93a6209ad870220596ca01682d2dbd4efeba3a0e90a373fd61b619471747df26afc2e2bb167de4c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88acf4979600000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acaf73d363000000000000000000000000000000",
    "tx_hash": "b2ee0e692523c5ca081f62e36325d09a629004850be8b86df149fc979e9e3e87"
  }
}
```

### SwapEvents

For each step of a trade, a `SwapEvent` will be created, alongside the timestamp of the event. See [Maker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) and [Taker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) for more info.

| Parameter | Type    | Description                                                                                    |
| --------- | ------- | ---------------------------------------------------------------------------------------------- |
| timestamp | integer | Timestamp for the `SwapEvent` in UNIX format.                                                  |
| event     | object  | A standard [SwapEvent](/komodo-defi-framework/api/common_structures/swaps/#swap-event) object. |

#### Example

```json
{
  "event": {
    "type": "MakerPaymentWaitConfirmStarted"
  },
  "timestamp": 1564050588178
}
```

### SwapStatus

Each swap status will be nested under its associated UUID.

We should add a "maker" resonse example also. Unsure if `uuid` on maker side is swap or order uuid in response.

| Parameter       | Type           | Description                                                                                                                                                                                                                                                                 |
| --------------- | -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| type            | string         | `Maker` or `Taker`. Indicates if the user created the order (maker), or matched with an existing order (taker).                                                                                                                                                             |
| uuid            | string         | A unique identifier for the swap.                                                                                                                                                                                                                                           |
| events          | list           | A list of swap events. The structure of each event varies depending on its type, as detailed in the [SwapEvents](/komodo-defi-framework/api/common_structures/swaps/) section.                                                                                              |
| maker\_coin     | string         | The coin being sent by the maker and received by the taker.                                                                                                                                                                                                                 |
| taker\_coin     | string         | The coin being sent by the taker and received by the maker.                                                                                                                                                                                                                 |
| maker\_amount   | numeric string | The amount of `maker_coin` being traded.                                                                                                                                                                                                                                    |
| taker\_amount   | numeric string | The amount of `taker_coin` being traded.                                                                                                                                                                                                                                    |
| gui             | string         | An identifier for the GUI used to initiate the swap, as defined in a user's MM2.json file. May be `null` if not defined.                                                                                                                                                    |
| mm\_version     | string         | The release version and/or commit hash of the Komodo DeFi SDK used to initiate the swap.                                                                                                                                                                                    |
| success\_events | list           | A list of possible swap event types for a successful swap, for [makers](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-success-events) and [takers](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-success-events).         |
| error\_events   | list           | A list of possible swap event types which may appear in a failed swap, for [makers](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-error-events) and [takers](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-error-events). |

#### Example

```json
 {
    "type": "Taker",
    "uuid": "5d02843e-d1b4-488d-aad0-114d82020453",
    "events": [
      ...
    ],
    "maker_amount": "1",
    "maker_coin": "DOC",
    "taker_amount": "1",
    "taker_coin": "MARTY",
    "gui": null,
    "mm_version": "23c89ced5",
    "success_events": [
      ...
    ],
    "error_events": [
      ...
    ]
  }
```

```json
{
    "FromId": 4
}
```
export const title = "Komodo Defi SDK Swaps: Maker Events";
export const description = "A description of events and outcomes for each step of an atomic swap from the maker's perspective.";

# Maker Swap Events

Needs update for watchtower events

## Maker Success Events

Click on the Events below to view thier structure:

*   [Started](/komodo-defi-framework/api/common_structures/swaps/maker_events/#started)
*   [Negotiated](/komodo-defi-framework/api/common_structures/swaps/maker_events/#negotiated)
*   [TakerFeeValidated](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-fee-validated)
*   [MakerPaymentSent](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-sent)
*   [TakerPaymentReceived](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-received)
*   [TakerPaymentWaitConfirmStarted](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-wait-confirm-started)
*   [TakerPaymentValidatedAndConfirmed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-validated-and-confirmed)
*   [TakerPaymentSpent](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-spent)
*   [TakerPaymentSpendConfirmStarted](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-spend-confirm-started)
*   [TakerPaymentSpendConfirmed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-spend-confirmed)
*   [Finished](/komodo-defi-framework/api/common_structures/swaps/maker_events/#finished)

## Maker Error Events

Click on the Events below to view thier structure:

*   [StartFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#start-failed)
*   [NegotiateFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#negotiate-failed)
*   [TakerFeeValidateFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-fee-validate-failed)
*   [MakerPaymentTransactionFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-transaction-failed)
*   [MakerPaymentDataSendFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-data-send-failed)
*   [MakerPaymentWaitConfirmFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-wait-confirm-failed)
*   [TakerPaymentValidateFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-validate-failed)
*   [TakerPaymentWaitConfirmFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-wait-confirm-failed)
*   [TakerPaymentSpendFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-spend-failed)
*   [TakerPaymentSpendConfirmFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#taker-payment-spend-confirm-failed)
*   [MakerPaymentWaitRefundStarted](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-wait-refund-started)
*   [MakerPaymentRefunded](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-refunded)
*   [MakerPaymentRefundFailed](/komodo-defi-framework/api/common_structures/swaps/maker_events/#maker-payment-refund-failed)

#### Started

The `Started` event indicates that mandatory pre-checks passed, such as "available balance," and that the swap started successfully.

The swap goes to the negotiation stage after this event occurs.

| Structure                      | Type                              | Description                                                                                                                                                                                                                  |
| ------------------------------ | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| taker\_coin                    | string                            | the ticker of the taker coin                                                                                                                                                                                                 |
| maker\_coin                    | string                            | the ticker of the maker coin                                                                                                                                                                                                 |
| taker                          | string (hexadecimal)              | the p2p ID of taker node                                                                                                                                                                                                     |
| secret                         | string (hexadecimal)              | a random secret, the hash of which is used to lock atomic-swap payments                                                                                                                                                      |
| secret\_hash                   | string (hexadecimal)              | the hash of the swap secret                                                                                                                                                                                                  |
| my\_persistent\_pub            | string (hexadecimal)              | a persistent secp256k1 public key of maker node                                                                                                                                                                              |
| lock\_duration                 | number (integer)                  | the lock duration of swap payments in seconds. The sender can refund the transaction when the lock duration is passed. The taker payment is locked for the lock duration. The maker payment is locked for lock duration \* 2 |
| maker\_amount                  | string (numeric)                  | the amount of coins to be swapped by maker                                                                                                                                                                                   |
| taker\_amount                  | string (numeric)                  | the amount of coins to be swapped by taker                                                                                                                                                                                   |
| maker\_payment\_confirmations  | number (integer)                  | the required number of blockchain confirmations for maker payment                                                                                                                                                            |
| maker\_payment\_requires\_nota | bool                              | whether dPoW notarization is required for maker payment; can be null; available since `beta-2.0.1738`                                                                                                                        |
| taker\_payment\_confirmations  | number (integer)                  | the required number of blockchain confirmations for taker payment                                                                                                                                                            |
| taker\_payment\_requires\_nota | bool                              | whether dPoW notarization is required for taker payment; can be null; available since `beta-2.0.1738`                                                                                                                        |
| maker\_payment\_lock           | number (UTC timestamp in seconds) | the maker payment is locked until this timestamp                                                                                                                                                                             |
| uuid                           | string                            | the swap uuid                                                                                                                                                                                                                |
| started\_at                    | number (UTC timestamp in seconds) | the timestamp at the start of the swap                                                                                                                                                                                       |
| maker\_coin\_start\_block      | number (integer)                  | the maker coin block number at the start of the swap                                                                                                                                                                         |
| taker\_coin\_start\_block      | number (integer)                  | the taker coin block number at the start of the swap                                                                                                                                                                         |

```json
TODO: Example TBA
```

#### StartFailed

The `StartFailed` event indicates that some of the pre-checks did not pass, and therefore the swap did not start.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### Negotiated

The `Negotiated` event indicates that maker has received and validated swap negotiation data from taker.

Maker starts waiting for taker to send the dex fee after this event occurs.

| Structure                | Type                              | Description                                      |
| ------------------------ | --------------------------------- | ------------------------------------------------ |
| taker\_payment\_locktime | number (UTC timestamp in seconds) | the taker payment is locked until this timestamp |
| taker\_pubkey            | string (hexadecimal)              | a persistent secp256k1 public key of taker node  |

```json
{
  "data": {
    "lock_duration": 7800,
    "maker_amount": "1",
    "maker_coin": "BEER",
    "maker_coin_start_block": 154221,
    "maker_payment_confirmations": 1,
    "maker_payment_lock": 1561545442,
    "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
    "secret": "ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6",
    "started_at": 1561529842,
    "taker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
    "taker_amount": "1",
    "taker_coin": "PIZZA",
    "taker_coin_start_block": 141363,
    "taker_payment_confirmations": 1,
    "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
  },
  "type": "Started"
}
```

#### NegotiateFailed

The `NegotiateFailed` event indicates that taker negotiation data was not received or did not pass validation.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "data": {
    "error": "taker_swap:547] \"taker_swap:543] timeout (180.0 > 180.0)\""
  },
  "type": "NegotiateFailed"
}
```

#### TakerFeeValidated

The `TakerFeeValidated` event indicates that maker received and validated dex fee data from taker.

Maker sends their payment after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "data": {
    "tx_hash": "a59203eb2328827de00bed699a29389792906e4f39fdea145eb40dc6b3821bd6",
    "tx_hex": "f8690284ee6b280082520894d8997941dd1346e9231118d5685d866294f59e5b865af3107a4000801ca0743d2b7c9fad65805d882179062012261be328d7628ae12ee08eff8d7657d993a07eecbd051f49d35279416778faa4664962726d516ce65e18755c9b9406a9c2fd"
  },
  "type": "TakerFeeValidated"
}
```

#### TakerFeeValidateFailed

The `TakerFeeValidateFailed` event indicates that taker dex fee data was not received or did not pass validation.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### MakerPaymentTransactionFailed

The `MakerPaymentTransactionFailed` event indicates that maker was not able to broadcast his payment transaction to maker coin blockchain.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "data": {
    "error": "lp_swap:1888] eth:654] RPC error: Error { code: ServerError(-32010), message: \"Transaction with the same hash was already imported.\", data: None }"
  },
  "type": "MakerPaymentTransactionFailed"
}
```

#### MakerPaymentSent

The `MakerPaymentSent` event indicates that maker has broadcast the maker payment transaction.

Maker starts waiting for taker to send his payment after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "data": {
    "tx_hash": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
    "tx_hex": "0400008085202f890cdcd071edda0d5f489b0be9c8b521ad608bb6d7f43f6e7a491843e7a4d0078f85000000006b483045022100fbc3bd09f8e1821ed671d1b1d2ed355833fb42c0bc435fef2da5c5b0a980b9a002204ef92b35576069d640ca0ac08f46645e5ade36afd5f19fb6aad19cfc9fb221fb012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffe6ae2a3ce221a6612d9e640bdbe10a2e477b3bc68a1aeee4a6784cb18648a785010000006a47304402202000a7e60ae2ce1529247875623ef2c5b42448dcaeac8de0f8f0e2f8e5bd8a6b0220426321a004b793172014f522efbca77a3dc92e86ce0a75330d8ceb83072ad4e7012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff9335553edcbac9559cae517a3e25b880a48fabf661c4ac338394972eef4572da000000006b4830450221008ded7230f2fb37a42b94f96174ec192baf4cd9e9e68fb9b6cf0463a36a6093e00220538de51ceda1617f3964a2350802377940fdfa018cc1043d77c66081b1cab0c4012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3fffffffff91b5d3733877f84108de77fec46bee156766e1a6837fa7b580ccbc3905acb14000000006b483045022100d07cf1fd20e07aafdc942ba56f6b45baee61b93145a2bdba391e2cdb8024bf15022056ea8183990703ef05018df2fe8bd5ec678ec0f9207b0283292b2cdafc5e1e0c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff147870387ca938b2b6e7daa96ba2496014f125c0e4e576273ef36ee8186c415a000000006a47304402204c5b15b641d7e34444456d2ea6663bdc8bd8216e309a7220814474f346b8425e0220634d1dd943b416b7a807704d7f7a3d46a60d88ef4e20734588a0b302c55fa82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd2b954ae9b4a61fad9f7bc956d24e38d7b6fe313da824bd3bd91287d5a6b49d9000000006b483045022100a7387d9ab7b2c92d3cbce525e96ffac5ae3ef14f848661741ada0db17715c4a002202c1417d5e3e04b1a2d1774a83bb8d5aa1c0536c100138123089fa69921b5d976012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff28792a2e26d9d7be0467fac52b12ece67410b23eea845008257979bd87d083e3000000006a473044022027c40517c33cd3202d4310cfd2c75f38e6d7804b255fc3838a32ea26e5a3cb0002202b4399e1d7e655b64f699318f2bfbdced49f064ee54e9d6a678668fce51caf96012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffa8bf797bacd213b74a9977ae1b956afe3af33a1ee94324e010a16db891a07441000000006a473044022004cbb1d970b9f02c578b5c1d7de33361581eebc19c3cd8d2e50b0211ca4ef13702200c93b9fe5428055b6274dc8e52073c3e87f5b5e4206134d745928ccfc9393919012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff2b6fd82c9a68111b67ad85a614a6ecb50f7b6eac3d21d8ebefd9a6065cdf5729000000006b483045022100fdff16c595c7b4a9b4fc1e445b565f7b29fe5b7a08f79291b0ff585c7b72ac2902200c694aa124013bd419ce2349f15d10435827868d35db939b9d3c344d16e78420012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff6a5468dd8c83553dc51022f2a2fb772cf91c8607dc2ca1b8f203ac534612ab29000000006b483045022100ba7cc79e7ae3720238bfc5caa225dc8017d6a0d1cb1ec66abaf724fd20b3b7ab02206e8c942756604af0f63b74af495a9b3b7f4a44c489267f69a14cf2b1b953f46e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff5f9f48a91d343fd5aef1d85f00850070931459ab256697afb728d1c81c1fa1d2000000006a47304402200ec85fc66f963e7504eb27361a4b4bb17de60e459da414fdc3962476de636134022056b62c15cf7f9b4e7d4e11c03e4e541dd348919b8c55efa4f1927e2fdd5ae8ea012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffee1f455924d3167e7f7abf452c1856e9abdcfe27dc889942dd249cb376169d38000000006b48304502210089274eed807c5d23d819f6dfa8a358a9748e56f2080be4396ef77bb19d91b17402207fc7b22c879534fffe0eeaaec8fc284e22c2756f380c05ea57b881a96b09f3af012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f5050000000017a9144eb3a361d8a15d7f6a8ef9d1cf44962a90c44d548702912b00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac490e135d000000000000000000000000000000"
  },
  "type": "MakerPaymentSent"
}
```

#### MakerPaymentDataSendFailed

The `MakerPaymentDataSendFailed` event indicates that maker was not able to send his payment data to taker due to a network error.
When this event occurs, maker starts waiting for **maker payment lock time expiration** to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### MakerPaymentWaitConfirmFailed

The `MakerPaymentWaitConfirmFailed` event indicates that maker payment transaction did not reach the required number of confirmations before the internal timeout expiration.

When this event occurs maker starts waiting for **maker payment lock time expiration** to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "type": "MakerPaymentWaitConfirmFailed",
  "data": {
    "error": "An error"
  }
}
```

#### TakerPaymentReceived

The `TakerPaymentReceived` event indicates that maker received the taker payment transaction data.

Maker starts waiting for taker payment confirmation after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "data": {
    "tx_hash": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
    "tx_hex": ""
  },
  "type": "TakerPaymentReceived"
}
```

#### TakerPaymentWaitConfirmStarted

The `TakerPaymentReceived` event indicates that maker started waiting for taker payment confirmation.

This event does not have additional data.

#### TakerPaymentValidateFailed

The `TakerPaymentValidateFailed` event indicates that taker payment did not pass validation. For example, taker payment may have an invalid amount or the payment might be locked with a non-matching hash or timestamp.

When this event occurs maker starts waiting for **maker payment lock time expiration** to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "type": "TakerPaymentValidateFailed",
  "data": {
    "error": "Origin Taker error event: MakerPaymentWaitConfirmFailed(SwapError { error: \"An error\" })"
  }
}
```

#### TakerPaymentWaitConfirmFailed

The `MakerPaymentWaitConfirmFailed` event indicates that the taker payment transaction did not reach the required number of confirmations before the internal timeout expiration.

When this event occurs maker starts waiting for **maker payment lock time expiration** to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentValidatedAndConfirmed

The `TakerPaymentValidatedAndConfirmed` event indicates that maker validated taker payment and payment was confirmed the required number of times.

Maker attempts to spend the taker payment after this event occurs.

This event does not have additional data.

#### TakerPaymentSpendFailed

The `TakerPaymentSpendFailed` event indicates that maker payment was not able to spend taker payment.

When this event occurs maker starts waiting for **maker payment lock time expiration** to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "type": "TakerPaymentValidatedAndConfirmed"
}
```

#### TakerPaymentSpent

The `TakerPaymentSpent` event indicates that maker has broadcast the **taker payment spend** transaction.

Maker starts waiting for **taker payment spend** confirmation after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "data": {
    "secret": "fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96",
    "transaction": {
      "tx_hash": "68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827",
      "tx_hex": "0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000"
    }
  },
  "type": "TakerPaymentSpent"
}
```

#### TakerPaymentSpendConfirmStarted

The `TakerPaymentSpendConfirmStarted` event indicates that maker started waiting for **taker payment spend** transaction confirmation.

This event does not have additional data.

#### TakerPaymentSpendConfirmFailed

The `TakerPaymentSpendConfirmFailed` event indicates that the **taker payment spend** transaction did not reach the required number of confirmations before the **maker payment lock time expiration** or the **taker payment spend** transaction rejected for some reason.

Maker attempts to refund the maker payment.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentSpendConfirmed

The `TakerPaymentSpendConfirmed` event indicates that the taker payment spend transaction was confirmed the required number of times.

The swap finishes immediately when this event occurs.

This event does not have additional data.

#### MakerPaymentWaitRefundStarted

The `MakerPaymentWaitRefundStarted` event indicates that maker started waiting for lock time expiration to refund the payment.

| Structure   | Type                   | Description                                |
| ----------- | ---------------------- | ------------------------------------------ |
| wait\_until | number (UTC timestamp) | the timestamp at which a refund will occur |

```json
{
  "type": "TakerPaymentSpendConfirmed"
}
```

#### MakerPaymentRefundFailed

The `MakerPaymentRefundFailed` event indicates that maker was not able to broadcast a refund transaction to the maker coin blockchain.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### MakerPaymentRefunded

The `MakerPaymentRefunded` event indicates that maker has broadcast the maker payment refund transaction.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
TODO: Example TBA
```

#### Finished

The `Finished` event indicates that the swap finished.

This event does not have additional data.
export const title = "Komodo Defi SDK Swaps: Taker Events";
export const description = "A description of events and outcomes for each step of an atomic swap from the taker's perspective.";

# Taker Swap Events

Needs update for watchtower events

## Taker Success Events

Click on an Event below to view its structure:

*   [Started](/komodo-defi-framework/api/common_structures/swaps/taker_events/#started)
*   [Negotiated](/komodo-defi-framework/api/common_structures/swaps/taker_events/#negotiated)
*   [TakerFeeSent](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-fee-sent)
*   [TakerPaymentInstructionsReceived](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-instructions-received)
*   [MakerPaymentReceived](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-received)
*   [MakerPaymentWaitConfirmStarted](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-wait-confirm-started)
*   [MakerPaymentValidatedAndConfirmed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-validated-and-confirmed)
*   [TakerPaymentSent](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-sent)
*   [TakerPaymentSpent](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-spent)
*   [MakerPaymentSpent](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-spent)
*   [Finished](/komodo-defi-framework/api/common_structures/swaps/taker_events/#finished)

## Taker Error Events

Click on an Event below to view its structure:

*   [StartFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#start-failed)
*   [NegotiateFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#negotiate-failed)
*   [TakerFeeSendFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-fee-send-failed)
*   [MakerPaymentValidateFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-validate-failed)
*   [MakerPaymentWaitConfirmFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-wait-confirm-failed)
*   [TakerPaymentTransactionFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-transaction-failed)
*   [TakerPaymentWaitConfirmFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-wait-confirm-failed)
*   [TakerPaymentDataSendFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-data-send-failed)
*   [TakerPaymentWaitForSpendFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-wait-for-spend-failed)
*   [MakerPaymentSpendFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#maker-payment-spend-failed)
*   [TakerPaymentWaitRefundStarted](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-wait-refund-started)
*   [TakerPaymentRefundStarted](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-refund-started)
*   [TakerPaymentRefunded](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-refunded)
*   [TakerPaymentRefundFailed](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-refund-failed)
*   [TakerPaymentRefundFinished](/komodo-defi-framework/api/common_structures/swaps/taker_events/#taker-payment-refund-finished)

    #### Started

    The `Started` event indicates that mandatory pre-checks, such as "available balance," passed and the swap started successfully.

    The swap goes to negotiation stage after this event occurs.

    | Structure                      | Type                              | Description                                                                                                                                                                                                                  |
    | ------------------------------ | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | taker\_coin                    | string                            | the ticker of taker coin                                                                                                                                                                                                     |
    | maker\_coin                    | string                            | the ticker of maker coin                                                                                                                                                                                                     |
    | maker                          | string (hexadecimal)              | the p2p ID of maker node                                                                                                                                                                                                     |
    | my\_persistent\_pub            | string (hexadecimal)              | a persistent secp256k1 public key of taker node                                                                                                                                                                              |
    | lock\_duration                 | number (integer)                  | the lock duration of swap payments in seconds. The sender can refund the transaction when the lock duration is passed. The taker payment is locked for the lock duration. The maker payment is locked for lock duration \* 2 |
    | maker\_amount                  | string (numeric)                  | the amount of coins to be swapped by maker                                                                                                                                                                                   |
    | taker\_amount                  | string (numeric)                  | the amount of coins to be swapped by taker                                                                                                                                                                                   |
    | maker\_payment\_confirmations  | number (integer)                  | the required number of blockchain confirmations for maker payment                                                                                                                                                            |
    | maker\_payment\_requires\_nota | bool                              | whether dPoW notarization is required for maker payment; can be null; available since `beta-2.0.1738`                                                                                                                        |
    | taker\_payment\_confirmations  | number (integer)                  | the required number of blockchain confirmations for taker payment                                                                                                                                                            |
    | taker\_payment\_requires\_nota | bool                              | whether dPoW notarization is required for taker payment; can be null; available since `beta-2.0.1738`                                                                                                                        |
    | taker\_payment\_lock           | number (UTC timestamp in seconds) | the taker payment is locked until this timestamp                                                                                                                                                                             |
    | uuid                           | string                            | the swap uuid                                                                                                                                                                                                                |
    | started\_at                    | number (UTC timestamp in seconds) | the timestamp at the start of the swap                                                                                                                                                                                       |
    | maker\_payment\_wait           | number (UTC timestamp in seconds) | taker will wait for maker payment confirmation until this timestamp                                                                                                                                                          |
    | maker\_coin\_start\_block      | number (integer)                  | the maker coin block number at the start of the swap                                                                                                                                                                         |
    | taker\_coin\_start\_block      | number (integer)                  | the taker coin block number at the start of the swap                                                                                                                                                                         |

```json
{
  "type": "Started",
  "data": {
    "taker_coin": "MARTY",
    "maker_coin": "DOC",
    "maker": "7310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
    "my_persistent_pub": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
    "lock_duration": 7800,
    "maker_amount": "1",
    "taker_amount": "1",
    "maker_payment_confirmations": 1,
    "maker_payment_requires_nota": false,
    "taker_payment_confirmations": 0,
    "taker_payment_requires_nota": false,
    "taker_payment_lock": 1674809878,
    "uuid": "0d72c435-821e-4278-b2a7-e36ab1ba8cb7",
    "started_at": 1674802078,
    "maker_payment_wait": 1674805198,
    "maker_coin_start_block": 1800637,
    "taker_coin_start_block": 1813161,
    "fee_to_send_taker_fee": {
      "coin": "MARTY",
      "amount": "0.00001",
      "paid_from_trading_vol": false
    },
    "taker_payment_trade_fee": {
      "coin": "MARTY",
      "amount": "0.00002",
      "paid_from_trading_vol": false
    },
    "maker_payment_spend_trade_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "paid_from_trading_vol": true
    },
    "maker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
    "taker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
    "p2p_privkey": null
  }
}
```

#### StartFailed

The `StartFailed` event indicates that some of the pre-checks did not pass, and therefore the swap did not start.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### Negotiated

The `Negotiated` event indicates that taker has received and validated swap negotiation data from maker.

Taker sends dex fee after this event occurs.

| Structure                | Type                              | Description                                                       |
| ------------------------ | --------------------------------- | ----------------------------------------------------------------- |
| maker\_payment\_locktime | number (UTC timestamp in seconds) | the maker payment is locked until this timestamp                  |
| maker\_pubkey            | string (hexadecimal)              | a persistent secp256k1 public key of maker node                   |
| secret\_hash             | string (hexadecimal)              | the swap payments are expected to be locked with this secret hash |

```json
{
  "type": "Negotiated",
  "data": {
    "maker_payment_locktime": 1639000040,
    "maker_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
    "secret_hash": "4da9e7080175e8e10842e0e161b33cd298cab30b",
    "maker_coin_swap_contract_addr": null,
    "taker_coin_swap_contract_addr": null
  }
}
```

#### NegotiateFailed

The `NegotiateFailed` event indicates that maker negotiation data was not received or did not pass validation.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "data": {
    "error": "taker_swap:547] \"taker_swap:543] timeout (180.0 > 180.0)\""
  },
  "type": "NegotiateFailed"
}
```

#### TakerFeeSent

The `TakerFeeSent` event indicates that taker broadcast the dex fee transaction.

Taker starts waiting for maker payment after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "type": "TakerFeeSent",
  "data": {
    "tx_hex": "0400008085202f8901f425fbefe21f33ccb7b487df251191b27dfa7b639b04f60e5493c7ea41dbf149000000006b483045022100d5ec3e542175479bd4bd011e19b76a75e99f19cc49867e5bca9541950322c33a02207a4d1ffd674fb9760de79bb4929af44d66344b5e182de3c377186deebf6bf376012103ad6f89abc2e5beaa8a3ac28e22170659b3209fe2ddf439681b4b8f31508c36faffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac5ce6f305000000001976a914d55f0df6cb82630ad21a4e6049522a6f2b6c9d4588ac7c152160000000000000000000000000000000",
    "tx_hash": "75323ab7acd64bd35242611fabaec560d9acf2e1f9ca28d3a4aba47a79fb49c4"
  }
}
```

#### TakerFeeSendFailed

The `TakerFeeSendFailed` event indicates that the taker dex fee transaction failed to broadcast to the taker coin blockchain, or that the taker failed to send the transaction data to maker.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentInstructionsReceived

The `TakerPaymentInstructionsReceived` event indicates that the taker has received payment instructions.

This event does not have additional data.

```json
{
  "type": "TakerPaymentInstructionsReceived",
  "data": null
}
```

#### MakerPaymentValidateFailed

The `MakerPaymentValidateFailed` event indicates that taker was not able to receive or validate the maker payment transaction.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### MakerPaymentReceived

The `MakerPaymentReceived` event indicates that taker received the maker payment transaction data.

Taker starts waiting for transaction confirmation after this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "type": "MakerPaymentReceived",
  "data": {
    "tx_hex": "0400008085202f89028bef955e42107c562e4e02421f25c455723a701573f86c17b4d82e35a7d8f9f7020000006b483045022100b12fc9d95acca76bf5fd8d5c6acc288b454032ba4561b1c2b1f5f33b2cf2926d022017e561bc2cd93308848674b47b2e8ebd8f074ea78e32454d5fea6f08c0b1f1e40121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff5dfd0b24c0f7c3cf235868cf9a26ec49574764d135796fc4e7d20e95d55a8653000000006a47304402207c752d14601d1c99892f9d6c88c8ff2f93211640a65b2ee69172a16b908b21e402206f0b66684158445888271a849ab46258ad722496ee64fde055a6f44e36ed2ccc0121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff0300e1f5050000000017a9141b85c1a277f44f7d77d52b78e2ba70a0becc2ff9870000000000000000166a14026bebc2e19c243d0940dd583c9573bf10377afda7d26301000000001976a91486f747b28c60ad1130bdd3f84f48eeaf1801ca9888ac87152160000000000000000000000000000000",
    "tx_hash": "27dafe553246553d54f909fbbded80e6d490fdb95ca7b6807d73eca45f0d7a22"
  }
}
```

#### MakerPaymentWaitConfirmStarted

The `MakerPaymentWaitConfirmStarted` event indicates that taker started waiting for maker payment confirmation.

This event does not have additional data.

#### MakerPaymentWaitConfirmFailed

The `MakerPaymentWaitConfirmFailed` event indicates that the maker payment transaction did not reach the required number of confirmations before the internal timeout expiration.

Taker swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "type": "MakerPaymentWaitConfirmStarted"
}
```

#### MakerPaymentValidatedAndConfirmed

The `MakerPaymentValidatedAndConfirmed` event indicates that taker validated maker payment and the payment was confirmed the required number of times.

Taker sends his payment after this event occurs.

This event does not have additional data.

```json
{
  "type": "MakerPaymentValidatedAndConfirmed"
}
```

#### TakerPaymentSent

The `TakerPaymentSent` event indicates that taker broadcast taker payment transaction to taker coin blockchain.

Taker starts waiting for maker to spend this transaction.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "data": {
    "tx_hash": "95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961",
    "tx_hex": "0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000"
  },
  "type": "TakerPaymentSent"
}
```

#### TakerPaymentTransactionFailed

The `TakerPaymentTransactionFailed` event indicates that taker failed to broadcast transaction to taker coin blockchain.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentWaitConfirmFailed

The `TakerPaymentWaitConfirmFailed` event indicates that the taker payment transaction did not reach the required number of confirmations before the internal timeout expiration.

When this event occurs taker starts waiting for taker payment lock time expiration to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentDataSendFailed

The `TakerPaymentDataSendFailed` event indicates that taker was not able to send his payment data to maker due to a network error.

When this event occurs taker starts waiting for taker payment lock time expiration to issue a refund.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentSpent

The `TakerPaymentSpent` event indicates that maker spent taker payment and taker discovered the transaction.

When this event occurs taker extracts the secret from the transaction and attempts to spend maker payment.

| Structure            | Type   | Description                                                |
| -------------------- | ------ | ---------------------------------------------------------- |
| secret               | string | the atomic swap secret extracted from spending transaction |
| transaction          | object | transaction object                                         |
| transaction.tx\_hash | string | the hash of the transaction                                |
| transaction.tx\_hex  | string | transaction bytes in hexadecimal format                    |

```json
{
  "data": {
    "secret": "fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96",
    "transaction": {
      "tx_hash": "68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827",
      "tx_hex": "0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000"
    }
  },
  "type": "TakerPaymentSpent"
}
```

#### TakerPaymentWaitForSpendFailed

The `TakerPaymentWaitForSpendFailed` event indicates that maker did not spend taker payment before lock time expiration.

When this event occurs taker attempts to refund the payment.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### MakerPaymentSpendFailed

The `MakerPaymentSpendFailed` event indicates that taker failed to broadcast **maker payment spend** transaction to the maker coin blockchain.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
{
  "data": {
    "error": "taker_swap:798] utxo:950] utxo:950] error"
  },
  "type": "MakerPaymentSpendFailed"
}
```

#### MakerPaymentSpent

The `MakerPaymentSpent` event indicates that taker spent maker payment.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

```json
{
  "type": "MakerPaymentSpent",
  "data": {
    "tx_hex": "0400008085202f890180cf0d2057acf781f5854b576080842641ff56d6f0457258f2a15710fa35958700000000d74730440220159ac3c574bed4473bd6da6eb4b37a3c073dbe5311a4648795f2b0c02b68ef8d022034bc743cbe656b3d335a138f21093fcc9039f50bff40cf56e2654eb9eb225ca901201e2e0289634d42865e0f82ff0546ce2a384ae3548fb3f927c4aa1faefb0aa5d4004c6b63048cb0d363b17521037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ac6782012088a9149af6a305578518d693fca3f1e4c529224a81f654882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118ddf505000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac8cb0d363000000000000000000000000000000",
    "tx_hash": "02c6bc927712478b866c3303cfdfacb868545a6730513605d4d7b5b2dbe97b09"
  }
}
```

#### TakerPaymentWaitRefundStarted

`TakerPaymentWaitRefundStarted` event indicates that taker started waiting for lock time expiration to refund the payment.

| Structure   | Type                   | Description                                |
| ----------- | ---------------------- | ------------------------------------------ |
| wait\_until | number (UTC timestamp) | the timestamp at which a refund will occur |

```json
```

#### TakerPaymentRefundStarted

`TakerPaymentRefundStarted` event indicates that taker was has initiated the refund process.

```json
TODO: Table and Example TBA
```

#### TakerPaymentRefundFailed

`TakerPaymentRefundFailed` event indicates that taker was not able to broadcast a refund transaction to taker coin blockchain.
The swap finishes immediately when this event occurs.

| Structure | Type   | Description                        |
| --------- | ------ | ---------------------------------- |
| error     | string | error description with stack trace |

```json
TODO: Example TBA
```

#### TakerPaymentRefunded

The `TakerPaymentRefunded` event indicates that taker broadcast the taker payment refund transaction.

The swap finishes immediately when this event occurs.

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| tx\_hash  | string | the hash of the transaction             |
| tx\_hex   | string | transaction bytes in hexadecimal format |

#### TakerPaymentRefundFinished

The `TakerPaymentRefundFinished` event indicates that taker refund process is complete.

The swap finishes immediately when this event occurs. This event does not have additional data.

```json
TODO: Example TBA
```

#### Finished

The `Finished` event indicates that the swap finished.

This event does not have additional data.
export const title = "Komodo DeFi SDK Common Structures: Wallet Operations";
export const description = "Starting with version beta-2.1.3434, the Komodo DeFi SDK supports the standardized protocol format called mmrpc 2.0.";

# Wallet Operations Structures

### RawTxInfo

The `RawTxInfo` object includes the following items:

| Parameter  | Type   | Description                                                                                                                                                                                                                  |
| ---------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| tx\_hex    | string | UTXO only. The raw unsigned hex of a proposed transaction.                                                                                                                                                                   |
| prev\_txns | list   | UTXO only. A list of standard [InputTxns objects](/komodo-defi-framework/api/common_structures/wallet/#input-txns).                                                                                                          |
| to         | string | ETH/EVM only. A destination address to send the funds to.                                                                                                                                                                    |
| value      | string | ETH/EVM only. The amount of funds to be sent as a string with a `0x` prefix, in [wei](https://ethereum.stackexchange.com/questions/253/the-ether-denominations-are-called-finney-szabo-and-wei-what-who-are-these-na) units. |
| gas\_limit | string | ETH/EVM only. The maximum gas to be used for sending the transaction, in [gwei](https://eth-converter.com/) units.                                                                                                           |

TODO: Confirm units used in ETH/EVM transactions.

```json
  {
      "tx_hex": "02000000010d23d763f12d77a337cc16df2696ac3f48552dda373c9977fa1f5dd8d5025cb20100000000fdffffff01f40100000000000016001488accd2145b7232b958db5cdf09336ad619541e200000000",
      "prev_txns": [
          ...
      ]
  }
```

```json
  {
      "to": "0x927DaFDDa16F1742BeFcBEAE6798090354B294A9",
      "value": "0.85",
      "gas_limit": "21000"
  }
```

### InputTxns

The `InputTxns` object includes the following items:

| Parameter        | Type    | Description                                                                                                                                                                                                                                         |
| ---------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| tx\_hash         | string  | The transaction id of an unspent transaction from the same wallet output.                                                                                                                                                                           |
| index            | integer | The \[output index([https://bitcoin.stackexchange.com/questions/100765/what-does-the-index-of-an-utxo-stand-for](https://bitcoin.stackexchange.com/questions/100765/what-does-the-index-of-an-utxo-stand-for))] of this unspent transaction output. |
| script\_pub\_key | string  | The [scriptpubkey](https://learnmeabitcoin.com/technical/scriptPubKey) of this unspent transaction output.                                                                                                                                          |
| amount           | float   | The value of this unspent transaction output.                                                                                                                                                                                                       |
| amount           |         |                                                                                                                                                                                                                                                     |

```json
  {
      "tx_hash": "0d23d763f12d77a337cc16df2696ac3f48552dda373c9977fa1f5dd8d5025cb2",
      "index": 1,
      "script_pub_key": "001449e3b6b4684c4d4a914b29411af51843c59bfff0",
      "amount": 0.00001000
  }
```
export const title = "Komodo DeFi Framework RPC Methods";
export const description = "This document lists all available RPC methods of the Komodo DeFi Framework.";

# Komodo DeFi Framework RPC Methods

Legacy methods are in the process of a migration to Komodo DeFi Framework API v2.0 (and will also remain backwards compatible).
During development, some newer Komodo DeFi Framework API methods are not available in the latest release.

To test the methods in v2.0 (Dev), you will need to [build the Komodo DeFi Framework API](/komodo-defi-framework/setup/) from the `dev` branch.

Below is a table of the currently available legacy, v2.0 and v2.0 (Dev) methods:

| Legacy                                                                                                                        | v2.0 (release)                                                                                                                     | v2.0 (dev)                                                                                                                        |
| ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| [active\_swaps](/komodo-defi-framework/api/legacy/active_swaps/#active-swaps)                                                 |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [add\_delegation](/komodo-defi-framework/api/v20/add_delegation/#add-delegation)                                                   |                                                                                                                                   |
|                                                                                                                               | [add\_node\_to\_version\_stat](/komodo-defi-framework/api/v20/add_node_to_version_stat/#add-node-to-version-stat)                  |                                                                                                                                   |
| [all\_swaps\_uuids\_by\_filter](/komodo-defi-framework/api/legacy/all_swaps_uuids_by_filter/#all-swaps-uuids-by-filter)       |                                                                                                                                    |                                                                                                                                   |
| [ban\_pubkey](/komodo-defi-framework/api/legacy/ban_pubkey/#ban-pubkey)                                                       |                                                                                                                                    |                                                                                                                                   |
| [best\_orders](/komodo-defi-framework/api/legacy/best_orders/#best-orders)                                                    | [best\_orders](/komodo-defi-framework/api/v20/best_orders/#best-orders)                                                            |                                                                                                                                   |
| [buy](/komodo-defi-framework/api/legacy/buy/#buy)                                                                             |                                                                                                                                    |                                                                                                                                   |
| [cancel\_all\_orders](/komodo-defi-framework/api/legacy/cancel_all_orders/#cancel-all-orders)                                 |                                                                                                                                    |                                                                                                                                   |
| [cancel\_order](/komodo-defi-framework/api/legacy/cancel_order/#cancel-order)                                                 |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [clear\_nft\_db](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/clear_nft_db/#clear-nft-database)                         |
|                                                                                                                               |                                                                                                                                    | [close\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#close-channel)                                            |
| [coins\_needed\_for\_kick\_start](/komodo-defi-framework/api/legacy/coins_needed_for_kick_start/#coins-needed-for-kick-start) |                                                                                                                                    |                                                                                                                                   |
| [convert\_utxo\_address](/komodo-defi-framework/api/legacy/convert_utxo_address/#convert-utxo-address)                        |                                                                                                                                    |                                                                                                                                   |
| [convertaddress](/komodo-defi-framework/api/legacy/convertaddress/#convertaddress)                                            |                                                                                                                                    |                                                                                                                                   |
| [disable\_coin](/komodo-defi-framework/api/legacy/disable_coin/#disable-coin)                                                 |                                                                                                                                    |                                                                                                                                   |
| [electrum](/komodo-defi-framework/api/legacy/coin_activation/#electrum-method)                                                |                                                                                                                                    |                                                                                                                                   |
| [enable](/komodo-defi-framework/api/legacy/coin_activation/#enable-method)                                                    |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [enable\_bch\_with\_tokens](/komodo-defi-framework/api/v20/enable_bch_with_tokens/#enable-bch-with-tokens)                         |                                                                                                                                   |
|                                                                                                                               | [enable\_erc20](/komodo-defi-framework/api/v20/enable_erc20/#enable-erc20)                                                         |                                                                                                                                   |
|                                                                                                                               | [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/enable_eth_with_tokens/#enable-eth-with-tokens)                         |                                                                                                                                   |
|                                                                                                                               | [enable\_slp](/komodo-defi-framework/api/v20/enable_slp/#enable-slp)                                                               |                                                                                                                                   |
|                                                                                                                               | [enable\_tendermint\_token](/komodo-defi-framework/api/v20/enable_tendermint_token/#enable-tendermint-token)                       |                                                                                                                                   |
|                                                                                                                               | [enable\_tendermint\_with\_assets](/komodo-defi-framework/api/v20/enable_tendermint_with_assets/#enable-tendermint-with-assets)    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details)                               |
|                                                                                                                               |                                                                                                                                    | [get\_claimable\_balances](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-claimable-balances)                         |
|                                                                                                                               |                                                                                                                                    | [get\_current\_mtp](/komodo-defi-framework/api/v20-dev/get_current_mtp/#get-current-mtp)                                          |
| [get\_enabled\_coins](/komodo-defi-framework/api/legacy/get_enabled_coins/#get-enabled-coins)                                 |                                                                                                                                    |                                                                                                                                   |
| [get\_gossip\_mesh](/komodo-defi-framework/api/legacy/get_gossip_mesh/#get-gossip-mesh)                                       |                                                                                                                                    |                                                                                                                                   |
| [get\_gossip\_peer\_topics](/komodo-defi-framework/api/legacy/get_gossip_peer_topics/#get-gossip-peer-topics)                 |                                                                                                                                    |                                                                                                                                   |
| [get\_gossip\_topic\_peers](/komodo-defi-framework/api/legacy/get_gossip_topic_peers/#get-gossip-topic-peers)                 |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [get\_locked\_amount](/komodo-defi-framework/api/v20-dev/get_locked_amount/#get-locked-amount)                                    |
| [get\_my\_peer\_id](/komodo-defi-framework/api/legacy/get_my_peer_id/#get-my-peer-id)                                         |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [get\_new\_address](/komodo-defi-framework/api/v20-dev/hd_address_management/#get-new-address)                                    |
|                                                                                                                               |                                                                                                                                    | [get\_nft\_list](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_list/#get-a-list-of-nfts)                         |
|                                                                                                                               |                                                                                                                                    | [get\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_metadata/#get-nft-metadata)                   |
|                                                                                                                               |                                                                                                                                    | [get\_nft\_transfers](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_transfers/#get-a-list-of-nft-transfers)      |
| [get\_peers\_info](/komodo-defi-framework/api/legacy/get_peers_info/#get-peers-info)                                          |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [get\_public\_key](/komodo-defi-framework/api/v20/get_public_key/#get-public-key)                                                  |                                                                                                                                   |
|                                                                                                                               | [get\_public\_key\_hash](/komodo-defi-framework/api/v20/get_public_key_hash/#get-public-key-hash)                                  |                                                                                                                                   |
|                                                                                                                               | [get\_raw\_transaction](/komodo-defi-framework/api/v20/get_raw_transaction/#get-raw-transaction)                                   |                                                                                                                                   |
| [get\_relay\_mesh](/komodo-defi-framework/api/legacy/get_relay_mesh/#get-relay-mesh)                                          |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [get\_staking\_infos](/komodo-defi-framework/api/v20/get_staking_infos/#get-staking-infos)                                         |                                                                                                                                   |
| [get\_trade\_fee](/komodo-defi-framework/api/legacy/get_trade_fee/#get-trade-fee)                                             |                                                                                                                                    |                                                                                                                                   |
| [import\_swaps](/komodo-defi-framework/api/legacy/import_swaps/#import-swaps)                                                 |                                                                                                                                    |                                                                                                                                   |
| [kmd\_rewards\_info](/komodo-defi-framework/api/legacy/kmd_rewards_info/#kmd-rewards-info)                                    |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [lightning::nodes::add\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#add-trusted-node)                      |
|                                                                                                                               |                                                                                                                                    | [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#connect-to-node)                        |
|                                                                                                                               |                                                                                                                                    | [lightning::nodes::list\_trusted\_nodes](/komodo-defi-framework/api/v20-dev/lightning/nodes/#list-trusted-nodes)                  |
|                                                                                                                               |                                                                                                                                    | [lightning::nodes::remove\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#remove-trusted-node)                |
|                                                                                                                               |                                                                                                                                    | [lightning::payments::generate\_invoice](/komodo-defi-framework/api/v20-dev/lightning/payments/#generate-invoice)                 |
|                                                                                                                               |                                                                                                                                    | [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20-dev/lightning/payments/#get-payment-details)          |
|                                                                                                                               |                                                                                                                                    | [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/payments/#list-payments-by-filter) |
|                                                                                                                               |                                                                                                                                    | [lightning::payments::send\_payment](/komodo-defi-framework/api/v20-dev/lightning/payments/#send-payment)                         |
| [list\_banned\_pubkeys](/komodo-defi-framework/api/legacy/list_banned_pubkeys/#list-banned-pubkeys)                           |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [list\_closed\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-closed-channels-by-filter)       |
|                                                                                                                               |                                                                                                                                    | [list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-open-channels-by-filter)           |
|                                                                                                                               |                                                                                                                                    | [max\_maker\_vol](/komodo-defi-framework/api/v20-dev/max_maker_vol/#max-maker-vol)                                                |
| [max\_taker\_vol](/komodo-defi-framework/api/legacy/max_taker_vol/#max-taker-vol)                                             |                                                                                                                                    |                                                                                                                                   |
| [metrics](/komodo-defi-framework/api/legacy/metrics/#metrics)                                                                 |                                                                                                                                    |                                                                                                                                   |
| [min\_trading\_vol](/komodo-defi-framework/api/legacy/min_trading_vol/#min-trading-vol)                                       |                                                                                                                                    |                                                                                                                                   |
| [my\_balance](/komodo-defi-framework/api/legacy/my_balance/#my-balance)                                                       |                                                                                                                                    |                                                                                                                                   |
| [my\_orders](/komodo-defi-framework/api/legacy/my_orders/#my-orders)                                                          |                                                                                                                                    |                                                                                                                                   |
| [my\_recent\_swaps](/komodo-defi-framework/api/legacy/my_recent_swaps/#my-recent-swaps)                                       | [my\_recent\_swaps](/komodo-defi-framework/api/v20/my_recent_swaps/#my-recent-swaps)                                               |                                                                                                                                   |
| [my\_swap\_status](/komodo-defi-framework/api/legacy/my_swap_status/#my-swap-status)                                          |                                                                                                                                    |                                                                                                                                   |
| [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history)                                             | [my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/#my-tx-history)                                                     |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel)                                              |
| [order\_status](/komodo-defi-framework/api/legacy/order_status/#order-status)                                                 |                                                                                                                                    |                                                                                                                                   |
| [orderbook](/komodo-defi-framework/api/legacy/orderbook/#orderbook)                                                           | [orderbook](/komodo-defi-framework/api/v20/orderbook/#orderbook)                                                                   |                                                                                                                                   |
| [orderbook\_depth](/komodo-defi-framework/api/legacy/orderbook_depth/#orderbook-depth)                                        |                                                                                                                                    |                                                                                                                                   |
| [orders\_history\_by\_filter](/komodo-defi-framework/api/legacy/orders_history_by_filter/#orders-history-by-filter)           |                                                                                                                                    |                                                                                                                                   |
| [recover\_funds\_of\_swap](/komodo-defi-framework/api/legacy/recover_funds_of_swap/#recover-funds-of-swap)                    |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [recreate\_swap\_data](/komodo-defi-framework/api/v20/recreate_swap_data/#recreate-swap-data)                                      |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [refresh\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/refresh_nft_metadata/#refresh-nft-metadata)       |
|                                                                                                                               | [remove\_delegation](/komodo-defi-framework/api/v20/remove_delegation/#remove-delegation)                                          |                                                                                                                                   |
|                                                                                                                               | [remove\_node\_from\_version\_stat](/komodo-defi-framework/api/v20/remove_node_from_version_stat/#remove-node-from-version-stat)   |                                                                                                                                   |
| [sell](/komodo-defi-framework/api/legacy/sell/#sell)                                                                          |                                                                                                                                    |                                                                                                                                   |
| [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)                        |                                                                                                                                    |                                                                                                                                   |
| [set\_required\_confirmations](/komodo-defi-framework/api/legacy/set_required_confirmations/#set-required-confirmations)      |                                                                                                                                    |                                                                                                                                   |
| [set\_requires\_notarization](/komodo-defi-framework/api/legacy/set_requires_notarization/#set-requires-notarization)         |                                                                                                                                    |                                                                                                                                   |
| [setprice](/komodo-defi-framework/api/legacy/setprice/#setprice)                                                              |                                                                                                                                    |                                                                                                                                   |
| [show\_priv\_key](/komodo-defi-framework/api/legacy/show_priv_key/#show-priv-key)                                             |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [sign\_message](/komodo-defi-framework/api/v20/message_signing/#sign-message)                                                      |                                                                                                                                   |
|                                                                                                                               | [sign\_raw\_transaction](/komodo-defi-framework/api/v20/sign_raw_transaction/#sign-raw-transaction)                                |                                                                                                                                   |
|                                                                                                                               | [start\_simple\_market\_maker\_bot](/komodo-defi-framework/api/v20/start_simple_market_maker_bot/#start-simple-market-maker-bot)   |                                                                                                                                   |
|                                                                                                                               | [start\_version\_stat\_collection](/komodo-defi-framework/api/v20/start_version_stat_collection/#start-version-stat-collection)    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [status](/komodo-defi-framework/api/v20-dev/task_create_new_account/#status)                                                      |
|                                                                                                                               | [stop\_simple\_market\_maker\_bot](/komodo-defi-framework/api/v20/stop_simple_market_maker_bot/#stop-simple-market-maker-bot)      |                                                                                                                                   |
|                                                                                                                               | [stop\_version\_stat\_collection](/komodo-defi-framework/api/v20/stop_version_stat_collection/#stop-version-stat-collection)       |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [task::account\_balance::cancel](/komodo-defi-framework/api/v20-dev/task_account_balance/#cancel)                                 |
|                                                                                                                               |                                                                                                                                    | [task::account\_balance::init](/komodo-defi-framework/api/v20-dev/task_account_balance/#init)                                     |
|                                                                                                                               |                                                                                                                                    | [task::account\_balance::status](/komodo-defi-framework/api/v20-dev/task_account_balance/#status)                                 |
|                                                                                                                               |                                                                                                                                    | [task::create\_new\_account::init](/komodo-defi-framework/api/v20-dev/task_create_new_account/#init)                              |
|                                                                                                                               |                                                                                                                                    | [task::enable\_lightning::cancel](/komodo-defi-framework/api/v20-dev/lightning/activation/#cancel-initialization)                 |
|                                                                                                                               |                                                                                                                                    | [task::enable\_lightning::init](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialize-lightning)                    |
|                                                                                                                               |                                                                                                                                    | [task::enable\_lightning::status](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialization-status)                 |
|                                                                                                                               |                                                                                                                                    | [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init)                                             |
|                                                                                                                               |                                                                                                                                    | [task::enable\_qtum::status](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#status)                                         |
|                                                                                                                               |                                                                                                                                    | [task::enable\_qtum::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#user-action)                              |
|                                                                                                                               |                                                                                                                                    | [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init)                                             |
|                                                                                                                               |                                                                                                                                    | [task::enable\_utxo::status](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#status)                                         |
|                                                                                                                               |                                                                                                                                    | [task::enable\_utxo::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#user-action)                              |
|                                                                                                                               |                                                                                                                                    | [task::enable\_z\_coin::cancel](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#cancel-activation)                     |
|                                                                                                                               |                                                                                                                                    | [task::enable\_z\_coin::init](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#initialize-zhtlc-coin-activation)        |
|                                                                                                                               |                                                                                                                                    | [task::enable\_z\_coin::status](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#activation-status)                     |
|                                                                                                                               |                                                                                                                                    | [task::init\_trezor::cancel](/komodo-defi-framework/api/v20-dev/task_init_trezor/#cancel)                                         |
|                                                                                                                               |                                                                                                                                    | [task::init\_trezor::init](/komodo-defi-framework/api/v20-dev/task_init_trezor/#init)                                             |
|                                                                                                                               |                                                                                                                                    | [task::init\_trezor::status](/komodo-defi-framework/api/v20-dev/task_init_trezor/#status)                                         |
|                                                                                                                               |                                                                                                                                    | [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action)                              |
|                                                                                                                               |                                                                                                                                    | [task::withdraw::cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel)                                                |
|                                                                                                                               |                                                                                                                                    | [task::withdraw::init](/komodo-defi-framework/api/v20-dev/task_withdraw/#init)                                                    |
|                                                                                                                               |                                                                                                                                    | [task::withdraw::status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status)                                                |
| [trade\_preimage](/komodo-defi-framework/api/legacy/trade_preimage/#trade-preimage)                                           | [trade\_preimage](/komodo-defi-framework/api/v20/trade_preimage/#trade-preimage)                                                   |                                                                                                                                   |
| [unban\_pubkeys](/komodo-defi-framework/api/legacy/unban_pubkeys/#unban-pubkeys)                                              |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel)                                          |
| [update\_maker\_order](/komodo-defi-framework/api/legacy/update_maker_order/#update-maker-order)                              |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/#update-nft)                                      |
|                                                                                                                               | [update\_version\_stat\_collection](/komodo-defi-framework/api/v20/update_version_stat_collection/#update-version-stat-collection) |                                                                                                                                   |
| [validateaddress](/komodo-defi-framework/api/legacy/validateaddress/#validateaddress)                                         |                                                                                                                                    |                                                                                                                                   |
|                                                                                                                               | [verify\_message](/komodo-defi-framework/api/v20/message_signing/#verify-message)                                                  |                                                                                                                                   |
| [version](/komodo-defi-framework/api/legacy/version/#version)                                                                 |                                                                                                                                    |                                                                                                                                   |
| [withdraw](/komodo-defi-framework/api/legacy/withdraw/#withdraw)                                                              | [withdraw](/komodo-defi-framework/api/v20/withdraw/#withdraw)                                                                      |                                                                                                                                   |
|                                                                                                                               |                                                                                                                                    | [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/#withdraw-nfts)                               |
|                                                                                                                               |                                                                                                                                    | [z\_coin\_tx\_history](/komodo-defi-framework/api/v20-dev/zhtlc_coins/transaction_history/#zhtlc-coin-transaction-history)        |
export const title = "Komodo DeFi Framework Method: Active Swaps";
export const description =
  "The active_swaps method returns all the swaps that are currently running on the Komodo DeFi Framework API node.";

# active\_swaps

**active\_swaps (include\_status)**

The `active_swaps` method returns all the swaps that are currently running on the Komodo DeFi Framework API node.

## Arguments

| Structure       | Type | Description                                                                  |
| --------------- | ---- | ---------------------------------------------------------------------------- |
| include\_status | bool | Optional, defaults to `false`. Whether to include swap statuses in response; |

## Response

| Structure | Type             | Description                                                                                                                                                                                            |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| uuids     | array of strings | A list of currently active swap UUIDs.                                                                                                                                                                 |
| statuses  | object (map)     | Only visible if `include_status` request parameter is `true`. A map of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects, delineated by the related UUID. |

#### 📌 Examples

#### Command (without include\_status)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "active_swaps"
}
```

#### Response (uuids only)

```json
{
  "result": {
    "uuids": [
      "015c13bc-da79-43e1-a6d4-4ac8b3099b34",
      "7592a07a-2805-4050-8ab8-984480e812f0",
      "82cbad96-ea9f-40fb-9225-07496323e35d",
      "177f7fa5-c9f3-4673-a2fa-28451a123e61"
    ]
  }
}
```

#### Command (include\_status = true)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "active_swaps",
  "include_status": true
}
```

#### Response (statuses included)

```json
{
  "uuids": ["5d02843e-d1b4-488d-aad0-114d82020453"],
  "statuses": {
    "5d02843e-d1b4-488d-aad0-114d82020453": {
      "type": "Taker",
      "uuid": "5d02843e-d1b4-488d-aad0-114d82020453",
      "events": [
        {
          "timestamp": 1612780908698,
          "event": {
            "type": "Started",
            "data": {
              "taker_coin": "MARTY",
              "maker_coin": "DOC",
              "maker": "7310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
              "my_persistent_pub": "03ad6f89abc2e5beaa8a3ac28e22170659b3209fe2ddf439681b4b8f31508c36fa",
              "lock_duration": 7800,
              "maker_amount": "1",
              "taker_amount": "1",
              "maker_payment_confirmations": 1,
              "maker_payment_requires_nota": false,
              "taker_payment_confirmations": 1,
              "taker_payment_requires_nota": false,
              "taker_payment_lock": 1612788708,
              "uuid": "5d02843e-d1b4-488d-aad0-114d82020453",
              "started_at": 1612780908,
              "maker_payment_wait": 1612784028,
              "maker_coin_start_block": 793472,
              "taker_coin_start_block": 797356,
              "fee_to_send_taker_fee": {
                "coin": "MARTY",
                "amount": "0.00001"
              },
              "taker_payment_trade_fee": {
                "coin": "MARTY",
                "amount": "0.00001"
              },
              "maker_payment_spend_trade_fee": {
                "coin": "DOC",
                "amount": "0"
              }
            }
          }
        },
        {
          "timestamp": 1612780924704,
          "event": {
            "type": "Negotiated",
            "data": {
              "maker_payment_locktime": 1612796508,
              "maker_pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
              "secret_hash": "026bebc2e19c243d0940dd583c9573bf10377afd"
            }
          }
        },
        {
          "timestamp": 1612780924962,
          "event": {
            "type": "TakerFeeSent",
            "data": {
              "tx_hex": "0400008085202f8901f425fbefe21f33ccb7b487df251191b27dfa7b639b04f60e5493c7ea41dbf149000000006b483045022100d5ec3e542175479bd4bd011e19b76a75e99f19cc49867e5bca9541950322c33a02207a4d1ffd674fb9760de79bb4929af44d66344b5e182de3c377186deebf6bf376012103ad6f89abc2e5beaa8a3ac28e22170659b3209fe2ddf439681b4b8f31508c36faffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac5ce6f305000000001976a914d55f0df6cb82630ad21a4e6049522a6f2b6c9d4588ac7c152160000000000000000000000000000000",
              "tx_hash": "75323ab7acd64bd35242611fabaec560d9acf2e1f9ca28d3a4aba47a79fb49c4"
            }
          }
        },
        {
          "timestamp": 1612780935966,
          "event": {
            "type": "MakerPaymentReceived",
            "data": {
              "tx_hex": "0400008085202f89028bef955e42107c562e4e02421f25c455723a701573f86c17b4d82e35a7d8f9f7020000006b483045022100b12fc9d95acca76bf5fd8d5c6acc288b454032ba4561b1c2b1f5f33b2cf2926d022017e561bc2cd93308848674b47b2e8ebd8f074ea78e32454d5fea6f08c0b1f1e40121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff5dfd0b24c0f7c3cf235868cf9a26ec49574764d135796fc4e7d20e95d55a8653000000006a47304402207c752d14601d1c99892f9d6c88c8ff2f93211640a65b2ee69172a16b908b21e402206f0b66684158445888271a849ab46258ad722496ee64fde055a6f44e36ed2ccc0121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff0300e1f5050000000017a9141b85c1a277f44f7d77d52b78e2ba70a0becc2ff9870000000000000000166a14026bebc2e19c243d0940dd583c9573bf10377afda7d26301000000001976a91486f747b28c60ad1130bdd3f84f48eeaf1801ca9888ac87152160000000000000000000000000000000",
              "tx_hash": "27dafe553246553d54f909fbbded80e6d490fdb95ca7b6807d73eca45f0d7a22"
            }
          }
        },
        {
          "timestamp": 1612780935967,
          "event": {
            "type": "MakerPaymentWaitConfirmStarted"
          }
        }
      ],
      "maker_amount": "1",
      "maker_coin": "DOC",
      "taker_amount": "1",
      "taker_coin": "MARTY",
      "gui": null,
      "mm_version": "23c89ced5",
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeSent",
        "MakerPaymentReceived",
        "MakerPaymentWaitConfirmStarted",
        "MakerPaymentValidatedAndConfirmed",
        "TakerPaymentSent",
        "TakerPaymentSpent",
        "MakerPaymentSpent",
        "Finished"
      ],
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeSendFailed",
        "MakerPaymentValidateFailed",
        "MakerPaymentWaitConfirmFailed",
        "TakerPaymentTransactionFailed",
        "TakerPaymentWaitConfirmFailed",
        "TakerPaymentDataSendFailed",
        "TakerPaymentWaitForSpendFailed",
        "MakerPaymentSpendFailed",
        "TakerPaymentWaitRefundStarted",
        "TakerPaymentRefunded",
        "TakerPaymentRefundFailed"
      ]
    }
  }
}
```
export const title = "Komodo DeFi Framework Method: All Swaps UUIDs by Filter";
export const description = "The all_swaps_uuids_by_filter method returns all uuids of swaps that match the selected filters.";

# all\_swaps\_uuids\_by\_filter

**all\_swaps\_uuids\_by\_filter (my\_coin other\_coin from\_timestamp to\_timestamp)**

The `all_swaps_uuids_by_filter` method returns all uuids of swaps that match the selected filters. Please note that all filters (my\_coin, from\_timestamp, etc.) are combined using logical AND.

## Arguments

| Structure       | Type                          | Description                                                                            |
| --------------- | ----------------------------- | -------------------------------------------------------------------------------------- |
| my\_coin        | string                        | return only swaps that match the `swap.my_coin = request.my_coin` condition            |
| other\_coin     | string                        | return only swaps that match the `swap.other_coin = request.other_coin` condition      |
| from\_timestamp | number (timestamp in seconds) | return only swaps that match the `swap.started_at >= request.from_timestamp` condition |
| to\_timestamp   | number (timestamp in seconds) | return only swaps that match the `swap.started_at < request.to_timestamp` condition    |

## Response

| Structure       | Type             | Description                                    |
| --------------- | ---------------- | ---------------------------------------------- |
| uuids           | array of strings | uuids of swaps that match the selected filters |
| my\_coin        | string           | my\_coin that was set in request               |
| other\_coin     | string           | other\_coin that was set in request            |
| from\_timestamp | number           | from\_timestamp that was set in request        |
| to\_timestamp   | number           | to\_timestamp that was set in request          |
| records\_found  | number           | the number of found uuids                      |

#### 📌 Examples

#### Command (select swaps uuids that have my\_coin = DOC and other\_coin = MARTY)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "all_swaps_uuids_by_filter",
  "my_coin": "DOC",
  "other_coin": "MARTY"
}
```

#### Command (select swaps uuids that have my\_coin = DOC and started\_at >= 1611705600 (January 27, 2021 0:00:00 GMT))

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "all_swaps_uuids_by_filter",
  "my_coin": "DOC",
  "from_timestamp": 1611705600
}
```

#### Command (select swaps uuids that have started\_at >= 1611705600 (January 27, 2021 0:00:00 GMT) and started\_at \< 1611792001 (January 28, 2021 0:00:01 GMT))

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "all_swaps_uuids_by_filter",
  "my_coin": "DOC",
  "from_timestamp": 1611705600,
  "to_timestamp": 1611792001
}
```

#### Response (success)

```json
{
  "result": {
    "uuids": [
      "015c13bc-da79-43e1-a6d4-4ac8b3099b34",
      "7592a07a-2805-4050-8ab8-984480e812f0",
      "82cbad96-ea9f-40fb-9225-07496323e35d",
      "177f7fa5-c9f3-4673-a2fa-28451a123e61"
    ],
    "my_coin": "MARTY",
    "other_coin": null,
    "from_timestamp": null,
    "to_timestamp": null,
    "found_records": 4
  }
}
```
export const title = "Komodo DeFi Framework Method: Ban Pubkey";
export const description = "The ban_pubkey method bans the selected pubkey ignoring its order matching messages and preventing its orders from displaying in the orderbook.";

# ban\_pubkey

**ban\_pubkey pubkey reason**

The `ban_pubkey` method bans the selected pubkey ignoring its order matching messages and preventing its orders from displaying in the orderbook.

Use the secp256k1 pubkey without prefix for this method input. E.g. if pubkey is `022cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420` you should submit `2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420`.

## Arguments

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| pubkey    | string | the pubkey to ban     |
| reason    | string | the reason of banning |

## Response

| Structure | Type   | Description                    |
| --------- | ------ | ------------------------------ |
| result    | string | whether the ban was successful |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "ban_pubkey",
  "pubkey": "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420",
  "reason": "test"
}
```

#### Response (success)

```json
{
  "result": "success"
}
```

#### Response (error)

```json
{
  "error": "rpc:208] dispatcher_legacy:160] pubkey_banning:58] Pubkey is banned already"
}
```
export const title = "Komodo DeFi Framework Method: Batch Requests";
export const description = "A batch request is a method for sending several unique requests to the network all at once.";

# batch requests

A batch request is a method for sending several unique requests to the network all at once.

The requests are sent as an array filled with request objects. Results are returned in the order of received requests.

Avoid sending requests that depend on each other. For example, do not send a coin activation and a balance request to that coin in the same batch.

Such requests result in non-deterministic behavior, as the Komodo DeFi Framework API may or may not execute the requests in the desired order.

## Arguments

| Structure | Type             | Description                                |
| --------- | ---------------- | ------------------------------------------ |
| (none)    | array of objects | request objects to be executed in parallel |

#### Response

| Structure | Type             | Description                                                                             |
| --------- | ---------------- | --------------------------------------------------------------------------------------- |
| (none)    | array of objects | the results, provided in the order of received requests; this may contain null elements |

#### 📌 Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "[
{\"method\":\"electrum\",\"coin\":\"DOC\",\"servers\":[{\"url\":\"electrum1.cipig.net:10020\"},{\"url\":\"electrum2.cipig.net:10020\"},{\"url\":\"electrum3.cipig.net:10020\"}],\"userpass\":\"RPC_UserP@SSW0RD\",\"mm2\":1},
{\"method\":\"electrum\",\"coin\":\"MARTY\",\"servers\":[{\"url\":\"electrum1.cipig.net:10021\"},{\"url\":\"electrum2.cipig.net:10021\"},{\"url\":\"electrum3.cipig.net:10021\"}],\"userpass\":\"RPC_UserP@SSW0RD\",\"mm2\":1},
{\"method\":\"electrum\",\"coin\":\"DOC\",\"servers\":[{\"url\":\"electrum1.cipig.net:10020\"},{\"url\":\"electrum2.cipig.net:10020\"},{\"url\":\"electrum3.cipig.net:10020\"}],\"userpass\":\"invalid userpass\",\"mm2\":1}
]"
```

#### Response

```json
[
  {
    "address": "RR5ecgYgykX8NCjR5zjiHMLy7F62LZUecQ",
    "balance": "9.8688213",
    "coin": "DOC",
    "locked_by_swaps": "0",
    "required_confirmations": 1,
    "requires_notarization": false,
    "result": "success"
  },
  {
    "address": "RR5ecgYgykX8NCjR5zjiHMLy7F62LZUecQ",
    "balance": "4.40662368",
    "coin": "MARTY",
    "locked_by_swaps": "0",
    "required_confirmations": 1,
    "requires_notarization": false,
    "result": "success"
  },
  {
    "error": "rpc:295] Userpass is invalid!"
  }
]
```
export const title = "Komodo DeFi Framework Method: Best Orders";
export const description = "The best_orders method returns the best price orders that can fill the volume for all existing pairs with selected coin.";

# best\_orders

**best\_orders coin action volume**

The `best_orders` method returns the best price orders that can fill the volume for all existing pairs with selected coin.

The response of this method can contain coins that are not activated on the Komodo DeFi Framework API instance.
Activation will be required to proceed with the trade.

## Arguments

| Structure | Type   | Description                                         |
| --------- | ------ | --------------------------------------------------- |
| coin      | string | the ticker of the coin to get best orders           |
| action    | string | whether to `buy` or `sell` the selected coin        |
| volume    | string | the amount of `coin` user is willing to buy or sell |

## Response

| Structure | Type         | Description                                                                                                             |
| --------- | ------------ | ----------------------------------------------------------------------------------------------------------------------- |
| result    | object (map) | A map of standard [OrderDataV1](/komodo-defi-framework/api/common_structures/orders/#order-data-v1) objects (by ticker) |

where order entry has the following structure

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "coin": "BTC",
  "action": "buy",
  "volume": "1"
}
```

#### Response (success)

```json
{
  "result": {
    "MARTY": [
      {
        "coin": "MARTY",
        "address": "RMaprYNUp8ErJ9ZAKcxMfpC4ioVycYCCCc",
        "price": "1",
        "price_rat": [
          [1, [1]],
          [1, [1]]
        ],
        "price_fraction": {
          "numer": "1",
          "denom": "1"
        },
        "maxvolume": "2",
        "max_volume_rat": [
          [1, [2]],
          [1, [1]]
        ],
        "max_volume_fraction": {
          "numer": "2",
          "denom": "1"
        },
        "min_volume": "0.00777",
        "min_volume_rat": [
          [1, [777]],
          [1, [100000]]
        ],
        "min_volume_fraction": {
          "numer": "777",
          "denom": "100000"
        },
        "pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
        "age": 1618306280,
        "zcredits": 0,
        "uuid": "09a61d61-9352-42f3-ae64-03e832aca07f",
        "is_mine": false,
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false,
        "base_max_volume": "2",
        "base_max_volume_fraction": {
          "numer": "2",
          "denom": "1"
        },
        "base_max_volume_rat": [
          [1, [2]],
          [1, [1]]
        ],
        "base_min_volume": "0.00777",
        "base_min_volume_fraction": {
          "numer": "777",
          "denom": "100000"
        },
        "base_min_volume_rat": [
          [1, [777]],
          [1, [100000]]
        ],
        "rel_max_volume": "2",
        "rel_max_volume_fraction": {
          "numer": "2",
          "denom": "1"
        },
        "rel_max_volume_rat": [
          [1, [2]],
          [1, [1]]
        ],
        "rel_min_volume": "0.00777",
        "rel_min_volume_fraction": {
          "numer": "777",
          "denom": "100000"
        },
        "rel_min_volume_rat": [
          [1, [777]],
          [1, [100000]]
        ]
      },
      {
        "coin": "MARTY",
        "address": "RB8yufv3YTfdzYnwz5paNnnDynGJG6WsqD",
        "price": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
        "price_rat": [
          [1, [10]],
          [1, [11]]
        ],
        "price_fraction": {
          "numer": "10",
          "denom": "11"
        },
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false,
        "maxvolume": "56210.95940853",
        "max_volume_rat": [
          [1, [3278717685, 1308]],
          [1, [100000000]]
        ],
        "max_volume_fraction": {
          "numer": "5621095940853",
          "denom": "100000000"
        },
        "min_volume": "0.0001",
        "min_volume_rat": [
          [1, [1]],
          [1, [10000]]
        ],
        "min_volume_fraction": {
          "numer": "1",
          "denom": "10000"
        },
        "pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
        "age": 1618306280,
        "zcredits": 0,
        "uuid": "7b5fc790-cbe1-4714-812c-2e307818f258",
        "is_mine": false,
        "base_max_volume": "61832.055349383",
        "base_max_volume_fraction": {
          "numer": "61832055349383",
          "denom": "1000000000"
        },
        "base_max_volume_rat": [
          [1, [1706156167, 14396]],
          [1, [1000000000]]
        ],
        "base_min_volume": "0.00011",
        "base_min_volume_fraction": {
          "numer": "11",
          "denom": "100000"
        },
        "base_min_volume_rat": [
          [1, [11]],
          [1, [100000]]
        ],
        "rel_max_volume": "56210.95940853",
        "rel_max_volume_fraction": {
          "numer": "5621095940853",
          "denom": "100000000"
        },
        "rel_max_volume_rat": [
          [1, [3278717685, 1308]],
          [1, [100000000]]
        ],
        "rel_min_volume": "0.0001",
        "rel_min_volume_fraction": {
          "numer": "1",
          "denom": "10000"
        },
        "rel_min_volume_rat": [
          [1, [1]],
          [1, [10000]]
        ]
      }
    ],
    "OOT": [
      {
        "coin": "OOT",
        "address": "RMaprYNUp8ErJ9ZAKcxMfpC4ioVycYCCCc",
        "price": "0.01",
        "price_rat": [
          [1, [1]],
          [1, [100]]
        ],
        "price_fraction": {
          "numer": "1",
          "denom": "100"
        },
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false,
        "maxvolume": "1140445.56120275",
        "max_volume_rat": [
          [1, [526976459, 1062]],
          [1, [4000000]]
        ],
        "max_volume_fraction": {
          "numer": "4561782244811",
          "denom": "4000000"
        },
        "min_volume": "0.00777",
        "min_volume_rat": [
          [1, [777]],
          [1, [100000]]
        ],
        "min_volume_fraction": {
          "numer": "777",
          "denom": "100000"
        },
        "pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
        "age": 1618306280,
        "zcredits": 0,
        "uuid": "8ea62e1d-0df5-4807-9ee6-c6367ac4e8ce",
        "is_mine": false,
        "base_max_volume": "114044556.120275",
        "base_max_volume_fraction": {
          "numer": "4561782244811",
          "denom": "40000"
        },
        "base_max_volume_rat": [
          [1, [526976459, 1062]],
          [1, [40000]]
        ],
        "base_min_volume": "0.777",
        "base_min_volume_fraction": {
          "numer": "777",
          "denom": "1000"
        },
        "base_min_volume_rat": [
          [1, [777]],
          [1, [1000]]
        ],
        "rel_max_volume": "1140445.56120275",
        "rel_max_volume_fraction": {
          "numer": "4561782244811",
          "denom": "4000000"
        },
        "rel_max_volume_rat": [
          [1, [526976459, 1062]],
          [1, [4000000]]
        ],
        "rel_min_volume": "0.00777",
        "rel_min_volume_fraction": {
          "numer": "777",
          "denom": "100000"
        },
        "rel_min_volume_rat": [
          [1, [777]],
          [1, [100000]]
        ]
      }
    ]
  },
  "original_tickers": {
    "BTC": ["BTC-segwit"]
  }
}
```
export const title = "Komodo DeFi Framework Method: Buy";
export const description = "The buy method issues a buy request and attempts to match an order from the orderbook based on the provided arguments.";

# buy

**buy base rel price volume (match\_by order\_type base\_confs base\_nota rel\_confs rel\_nota min\_volume)**

The `buy` method issues a buy request and attempts to match an order from the orderbook based on the provided arguments.

*   Buy and sell methods always create the `taker` order first. A `taker` order must pay a `dexfee` during the swap as it is taking liquidity from the market. The `dexfee` is calculated as "the greater of either `Minimum transaction amount (dust) TAKER COIN` or `0.0001 TAKER COIN` or `1/777th` the size of the desired order". If your `GoodTillCancelled` order is not matched in 30 seconds, the order is automatically converted to a `maker` request and stays on the orderbook until the request is matched or cancelled. To always act as a maker, please use the [setprice](/komodo-defi-framework/api/legacy/setprice/) method.
*   To prevent a user from making trades in which the transaction fees may end up costing a significant portion of the value of the trade, we have set a lower limit to the value of a trade. See the description of the `volume` and `min_volume` arguments for more info.

## Arguments

| Structure         | Type              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| ----------------- | ----------------- ||
| base              | string            | The name of the coin the user desires to receive                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| rel               | string            | The name of the coin the user desires to sell                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| price             | varies            | The price in `rel` the user is willing to pay per one unit of the `base` coin. Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects.                                                                                                                                                                                                                               |
| volume            | varies            | The amount of coins the user is willing to receive of the `base` coin; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `volume`the product of the arguments `volume` and `price`. . Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects.                                                      |
| min\_volume       | varies (optional) | The amount of `base` coin that will be used as `min_volume` of `GoodTillCancelled` order after conversion to maker; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `min_volume`the product of the arguments `min_volume` and `price`. . Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects. |
| match\_by         | object            | Optional. A standard [MatchBy](/komodo-defi-framework/api/common_structures/orders/#match-by) object, to filter to include only matches by pubkey or uuid. *Important:* This condition is not applied after a `GoodTillCancelled` order is converted to a `maker` request.                                                                                                                                                                                                                                                                 |
| order\_type       | object            | Optional. A standard [OrderType](/komodo-defi-framework/api/common_structures/orders/#order-type) object.                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| base\_confs       | number            | Number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                           |
| base\_nota        | boolean           | Whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                                 |
| rel\_confs        | number            | Number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                             |
| rel\_nota         | boolean           | Whether dPoW notarization is required for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                                   |
| save\_in\_history | boolean           | Defaults to `true`. If set to `false` no order history will be saved (though order status will be temporarily stored while in progress). If `true`, each order's short record history is stored in a local SQLite database table, and when the order is cancelled or fully matched, it's history will be saved as a json file                                                                                                                                                                                                              |

## Response

| Structure               | Type     | Description                                                                                                                                                                                                              |
| ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| action                  | string   | The action of the request (`Buy`)                                                                                                                                                                                        |
| base                    | string   | The base currency of request                                                                                                                                                                                             |
| base\_amount            | string   | The resulting amount of base currency that is received if the order matches (in decimal representation)                                                                                                                  |
| base\_amount\_rat       | rational | The resulting amount of base currency that is received if the order matches, represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                             |
| rel                     | string   | The rel currency of the request                                                                                                                                                                                          |
| rel\_amount             | string   | The maximum amount of `rel` coin that is spent in order to buy the `base_amount` (according to `price`, in decimal representation)                                                                                       |
| rel\_amount\_rat        | rational | The maximum amount of `rel` coin that is spent in order to buy the `base_amount` (according to `price`, represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object). |
| method                  | string   | This field is used for internal P2P interactions; the value is always equal to "request                                                                                                                                  |
| dest\_pub\_key          | string   | Reserved for future use. `dest_pub_key` allows the user to choose the P2P node that is eligible to match with the request. This value defaults to a "zero pubkey", which means `anyone` can be a match                   |
| sender\_pubkey          | string   | The public key of this node                                                                                                                                                                                              |
| uuid                    | string   | The request uuid                                                                                                                                                                                                         |
| match\_by               | object   | A standard [MatchBy](/komodo-defi-framework/api/common_structures/orders/#match-by) object, to filter to include only matches by pubkey or uuid.                                                                         |
| conf\_settings          | object   | A standard [ConfSettings](/komodo-defi-framework/api/common_structures/orders/#conf-settings) object.                                                                                                                    |
| base\_orderbook\_ticker | string   | The ticker of the base currency if `orderbook_ticker` is configured for the base currency in `coins` file. If not defined, will return a null value.                                                                     |
| rel\_orderbook\_ticker  | string   | The ticker of the rel currency if `orderbook_ticker` is configured for the rel currency in `coins` file. If not defined, will return a null value.                                                                       |

#### 📌 Examples

#### Command (decimal representation)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": "1",
  "price": "1"
}
```

#### Command (rational representation in num-rational crate format)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ]
}
```

#### Command (rational representation as fraction object)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  }
}
```

#### Command (with confirmations and notarization settings)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  },
  "base_confs": 2,
  "base_nota": true,
  "rel_confs": 5,
  "rel_nota": false
}
```

#### Command (set to not save order history)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  },
  "save_in_history": false
}
```

#### Command (GoodTillCancelled type)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "order_type": {
    "type": "GoodTillCancelled"
  }
}
```

#### Command (FillOrKill type)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "order_type": {
    "type": "FillOrKill"
  }
}
```

#### Command (match by Any)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Any"
  }
}
```

#### Command (match by Pubkeys)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Pubkeys",
    "data": [
      "1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a"
    ]
  }
}
```

#### Command (match by Orders)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Orders",
    "data": [
      "d14452bb-e82d-44a0-86b0-10d4cdcb8b24"
    ]
  }
}
```

#### Response (success)

```json
{
  "result": {
    "action": "Buy",
    "base": "HELLO",
    "base_amount": "1",
    "base_amount_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
    "method": "request",
    "rel": "WORLD",
    "rel_amount": "1",
    "rel_amount_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
    "uuid": "288743e2-92a5-471e-92d5-bb828a2303c3",
    "match_by": {
      "data": [
        "1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a"
      ],
      "type": "Pubkeys"
    },
    "conf_settings": {
      "base_confs": 2,
      "base_nota": true,
      "rel_confs": 5,
      "rel_nota": false
    },
    "base_orderbook_ticker": null,
    "rel_orderbook_ticker": null
  }
}
```

#### Response (error)

```json
{
  "error": "rpc:278] utxo:884] REL balance 12.88892991 is too low, required 21.15"
}
```

#### Response (error)

```json
{
  "error": "rpc:275] lp_ordermatch:665] The WORLD amount 40000/3 is larger than available 47.60450107, balance: 47.60450107, locked by swaps: 0.00000000"
}
```
export const title = "Komodo DeFi Framework Method: Cancel all Orders";
export const description = "The cancel_all_orders cancels the active orders created by the Komodo DeFi Framework API node by specified condition.";

# cancel\_all\_orders

**cancel\_all\_orders cancel\_by**

The `cancel_all_orders` cancels the active orders created by the Komodo DeFi Framework API node by specified condition.

## Arguments

| Structure  | Type   | Description                                                                                                                              |
| ---------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------- |
| cancel\_by | object | A standard [CancelBy](/komodo-defi-framework/api/common_structures/orders/#cancel-by) object. Orders matching this filter are cancelled. |

## Response

| Structure           | Type                     | Description                                                                                                    |
| ------------------- | ------------------------ | -------------------------------------------------------------------------------------------------------------- |
| cancelled           | array of strings (uuids) | uuids of cancelled orders                                                                                      |
| currently\_matching | array of strings (uuids) | uuids of the orders being matched with other orders; these are not cancelled even if they fit cancel condition |

#### 📌 Examples

#### Command (All orders)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "cancel_all_orders",
  "cancel_by": {
    "type": "All"
  }
}
```

#### Command (Cancel by pair)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "cancel_all_orders",
  "cancel_by": {
    "type": "Pair",
    "data": {
      "base": "DOC",
      "rel": "MARTY"
    }
  }
}
```

#### Command (Cancel by coin)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "cancel_all_orders",
  "cancel_by": {
    "type": "Coin",
    "data": {
      "ticker": "DOC"
    }
  }
}
```

#### Response (1 order cancelled)

```json
{
  "result": {
    "cancelled": ["2aae69d1-0167-493e-ad15-c6a8b43546d6"],
    "currently_matching": []
  }
}
```

#### Response (1 order cancelled and 1 is currently matching)

```json
{
  "result": {
    "cancelled": ["2aae69d1-0167-493e-ad15-c6a8b43546d6"],
    "currently_matching": ["e9a6f422-e378-437f-bb74-ba4307a90e68"]
  }
}
```
export const title = "Komodo DeFi Framework Method: Cancel Order";
export const description = "The cancel_order cancels the active order created by the Komodo DeFi Framework API node.";

# cancel\_order

**cancel\_order uuid**

The `cancel_order` cancels the active order created by the Komodo DeFi Framework API node.

## Arguments

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| uuid      | string | the uuid of the order the user desires to cancel |

## Response

| Structure | Type   | Description                       |
| --------- | ------ | --------------------------------- |
| result    | string | indicates the status of operation |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "cancel_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41"
}
```

#### Response (success)

```json
{ "result": "success" }
```

#### Response (error)

```json
{ "error": "Order with uuid 6a242691-6c05-474a-85c1-5b3f42278f42 is not found" }
```
export const title = "Komodo DeFi Framework: Coin Activation";
export const description =
  "Learn about the two methods of coin activation, enable and electrum.";

# Coin Activation

There are two methods of coin activation:

*   `enable` - Connects to a native daemon, or a url which handles RPCs for Platform coins (e.g. ETH, MATIC, FTM, BNB, ONE)
*   `electrum` - Connects to an [electrum server](https://github.com/kyuupichan/electrumx) for UTXO based coins and QTUM/QRC20 tokens.

A coin can only be activated once per session, and must be activated before it can be used in trading or wallet functions.

The Komodo DeFi Framework API requires an `mm2` parameter to be set for each `coin`. This can be added to the enable/electrum command, or defined in your [coins file](/komodo-defi-framework/tutorials/api-walkthrough/#setting-up-the-coin-list).

The value of the `mm2` parameter informs the software as to whether the `coin` is expected to be compatible for atomic swaps.

*   `0` = `non-compatible`
*   `1` = `compatible`

Many examples of activation commands are available at [kmd.stats.io](https://stats.kmd.io/atomicdex/activation_commands/)

## Native mode activation

If you are running a UTXO based coin daemon locally and the blockchain is synchronised, you can connect the local daemon to the Komodo DeFi Framework API by using the `enable` method, though some additional configuration is required. The Komodo DeFi Framework API requires the following options to be added to the native chain's [.conf file](https://bitcoincoredocs.com/bitcoin-conf.html).

```ini
logevents=1
txindex=1
addressindex=1
```

The Komodo DeFi Framework API node's coin address needs to be imported manually into the coin daemon using the [importaddress](/smart-chains/api/wallet/#importaddress) method.

## Lite mode activation

Activating coins in 'lite mode' means you don't need to have a native coin daemon installed, or keep a local blockchain synchronised. In this mode, the Komodo DeFi Framework API communicates with an external node to perform transactions and query the blockchain. UTXO based coins and QTUM/QRC20 tokens communicate via electrum servers, while other platform coins communicate via JSON RPC urls.

Komodo DeFi Framework is a true cross chain, cross protocol Decentralized Exchange (DEX), allowing for trades between coins and tokens across many platforms and ecosystems, such as:

*   UTXO based coins (e.g. DOGE, BTC, ZEC, LTC, DASH, DGB)
*   [Ethereum (ETH)](https://ethereum.org/) & [ERC20 tokens](https://etherscan.io/tokens)
*   [Binance Coin (BNB)](https://coinmarketcap.com/currencies/bnb/) & [BEP20](https://www.coingecko.com/en?asset_platform_id=binance-coin) tokens
*   [QTUM](https://qtum.org) & [QRC20 tokens](https://qtum.info/qrc20)
*   [Polygon (MATIC)](https://polygon.technology/) & [PLG20 tokens](https://polygonscan.com/tokens)
*   [Harmony (ONE)](https://www.harmony.one/) & [HRC20 tokens](https://www.coingecko.com/en/categories/harmony-ecosystem)
*   [Fantom (FTM)](https://fantom.foundation/) & [FTM20 tokens](https://ftmscan.com/tokens)
*   [Avalanche (AVAX)](https://www.avax.network/) & [AVX20 tokens](https://avascan.info/)
*   [Moonriver (MOVR)](https://moonbeam.network/networks/moonriver/) & [MVR20 tokens](https://moonriver.moonscan.io/tokens)
*   And more!

## Electrum Method

Electrum mode is only available for UTXO based coins and QTUM/QRC20 tokens.

#### Arguments

| Structure                                | Type                                    | Description                                                                                                                                                                                                                                |
| ---------------------------------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin                                     | string                                  | Ticker of coin to activate                                                                                                                                                                                                                 |
| servers                                  | array of objects                        | List of \[Electrum servers] ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                                               |
| servers.url                              | string                                  | Electrum server URL                                                                                                                                                                                                                        |
| servers.protocol                         | string (optional, defaults to `TCP`)    | Transport protocol used by Komodo DeFi Framework API to connect to the electrum server (`TCP` or `SSL`)                                                                                                                                    |
| servers.disable\_cert\_verification      | bool (optional, defaults to `false`.)   | If `true`, this disables server SSL/TLS certificate verification (e.g. to use self-signed certificate). Use at your own risk                                                                                                               |
| mm2                                      | integer                                 | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                 |
| tx\_history                              | bool                                    | If `true` the Komodo DeFi Framework API will preload trasaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                 |
| required\_confirmations                  | integer (optional, defaults to `3`)     | Number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap.                                                                                                                          |
| requires\_notarization                   | boolean (optional, defaults to `false`) | If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step. |
| swap\_contract\_address                  | string (required for QRC20 only)        | address of etomic swap smart contract                                                                                                                                                                                                      |
| fallback\_swap\_contract                 | string (required for QRC20 only)        | address of backup etomic swap smart contract                                                                                                                                                                                               |
| utxo\_merge\_params                      | object (optional)                       | If set, will consolidate excessive UTXOs (e.g. from mining)                                                                                                                                                                                |
| utxo\_merge\_params.merge\_at            | integer                                 | Number of UTXOs in wallet required before merging                                                                                                                                                                                          |
| utxo\_merge\_params.check\_every         | integer                                 | How often to check the UTXO count, in seconds. Ideally should be at least 3x the coins block time.                                                                                                                                         |
| utxo\_merge\_params.max\_merge\_at\_once | integer                                 | Maximum number of UTXOs to merge in each consolidation transaction. Should be less that `merge_at` value, but will fail if so high the transaction becomes too large. Suggested maximum is 250.                                            |

#### Response

| Structure               | Type              | Description                                                                                                                                                     |
| ----------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| address                 | string            | the address of the user's `coin` wallet, based on the user's passphrase                                                                                         |
| balance                 | string (numeric)  | the amount of `coin` the user holds in their wallet; does not include `unspendable_balance`                                                                     |
| unspendable\_balance    | string (numeric)  | the `coin` balance that is unspendable at the moment (e.g. if the address has immature UTXOs)                                                                   |
| coin                    | string            | the ticker of the enabled coin                                                                                                                                  |
| required\_confirmations | number            | the number of transaction confirmations for which the Komodo DeFi Framework API must wait during the atomic swap process                                        |
| mature\_confirmations   | number (optional) | the number of coinbase transaction confirmations required to become mature; UTXO coins only                                                                     |
| requires\_notarization  | bool              | whether the node must wait for a notarization of the selected coin that is performing the atomic swap transactions; applicable only for coins using Komodo dPoW |
| result                  | string            | the result of the request; this value either indicates `success`, or an error, or another type of failure                                                       |

#### 📌 Examples

#### UTXO coin activation {{label : 'electrum', tag : 'legacy'}}

```json
{
  "coin": "LTC",
  "method": "electrum",
  "servers": [
    {
      "url": "electrum1.cipig.net:10063"
    },
    {
      "url": "electrum2.cipig.net:10063"
    },
    {
      "url": "electrum3.cipig.net:10063"
    }
  ],
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (Success)

```json
{
  "coin": "LTC",
  "address": "Lh2zFS66gP5qF1bRxoCXT6bMw8YShjoRry",
  "balance": "7.62",
  "unspendable_balance": "0",
  "mature_confirmations": 100,
  "required_confirmations": 3,
  "requires_notarization": false,
  "result": "success"
}
```

#### UTXO coin activation with `required_confirmations`, `requires_notarization` and `mm2` arguments {{label : 'electrum', tag : 'legacy'}}

```json
{
  "coin": "KMD",
  "method": "electrum",
  "servers": [
    {
      "url": "electrum1.cipig.net:10001"
    },
    {
      "url": "electrum2.cipig.net:10001"
    },
    {
      "url": "electrum3.cipig.net:10001"
    }
  ],
  "required_confirmations": 10,
  "requires_notarization": true,
  "mm2": 1,
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (Success)

```json
{
  "coin": "KMD",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "762",
  "unspendable_balance": "0",
  "mature_confirmations": 100,
  "required_confirmations": 10,
  "requires_notarization": true,
  "result": "success"
}
```

#### QTUM/QRC20 coin activation {{label : 'electrum', tag : 'legacy'}}

```json
{
  "coin": "QTUM",
  "method": "electrum",
  "servers": [
    {
      "url": "electrum1.cipig.net:10050"
    },
    {
      "url": "electrum2.cipig.net:10050"
    },
    {
      "url": "electrum3.cipig.net:10050"
    }
  ],
  "swap_contract_address": "0x2f754733acd6d753731c00fee32cb484551cc15d",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (Success)

```json
{
  "coin": "QTUM",
  "address": "QjXkGgoiycYRm2NbiMpkEHuQt7SB9BKHjz",
  "balance": "7.77",
  "required_confirmations": 3,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "mature_confirmations": 100,
  "result": "success"
}
```

#### Response (Error, `mm2` is not set)

If mm2 is not set in either the command or your `coins` file, you will see the following error:

```json
{
  "error": "lp_coins:943] lp_coins:693] mm2 param is not set neither in coins config nor enable request, assuming that coin is not supported"
}
```

## Enable Method

#### Arguments

| Structure                   | Type                                                                 | Description                                                                                                                                                                                                                                                                             |
| --------------------------- | -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                        | string                                                               | the name of the coin the user desires to enable                                                                                                                                                                                                                                         |
| urls                        | array of strings (required for ETH/ERC20 and other gas model chains) | urls of Ethereum RPC nodes to which the user desires to connect                                                                                                                                                                                                                         |
| swap\_contract\_address     | string (required for QRC20 only)                                     | address of etomic swap smart contract                                                                                                                                                                                                                                                   |
| fallback\_swap\_contract    | string (required for QRC20 only)                                     | address of backup etomic swap smart contract                                                                                                                                                                                                                                            |
| gas\_station\_decimals      | integer (optional for ETH/ERC20 and other gas model chains)          | Defines the decimals used to denominate the gas station response to gwei units. For example, the ETH gas station uses 8 decimals, which means that "average": 860 is equal to 86 gwei. While the Matic gas station uses 9 decimals, so 860 would mean 860 gwei exactly. Defaults to `8` |
| gas\_station\_policy.policy | string (optional for ETH/ERC20 and other gas model chains)           | Defines the method of gas price calculation from the station response. `"MeanAverageFast"` will use the mean between average and fast fields. `"Average"` will return a simple average value. Defaults to `"MeanAverageFast"`.                                                          |
| mm2                         | integer                                                              | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                                                              |
| tx\_history                 | bool                                                                 | If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                                                             |
| required\_confirmations     | integer (optional, defaults to `3`)                                  | Number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap.                                                                                                                                                                       |
| requires\_notarization      | boolean (optional, defaults to `false`)                              | If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step.                                              |

#### Response

| Structure               | Type              | Description                                                                                                        |
| ----------------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------ |
| address                 | string            | the address of the user's `coin` wallet, based on the user's passphrase                                            |
| balance                 | string (numeric)  | the amount of `coin` the user holds in their wallet; does not include `unspendable_balance`                        |
| unspendable\_balance    | string (numeric)  | the `coin` balance that is unspendable at the moment (e.g. if the address has immature UTXOs)                      |
| coin                    | string            | the ticker of enabled coin                                                                                         |
| required\_confirmations | number            | Komodo DeFi Framework API will wait for the this number of coin's transaction confirmations during the swap        |
| requires\_notarization  | bool              | whether the node must wait for a notarization of the selected coin that is performing the atomic swap transactions |
| mature\_confirmations   | number (optional) | the number of coinbase transaction confirmations required to become mature; UTXO coins only                        |
| result                  | string            | the result of the request; this value either indicates `success`, or an error or other type of failure             |

#### 📌 Examples

#### Native UTXO coin activation {{label : 'enable', tag : 'legacy'}}

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable",
  "coin": "TKL"
}
```

#### Response

```json
{
  "coin": "TKL",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "333",
  "required_confirmations": 1,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "mature_confirmations": 100,
  "result": "success"
}
```

#### Command (With `required_confirmations`, `requires_notarization` and `mm2` arguments)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable",
  "coin": "TKL",
  "mm2": 1,
  "required_confirmations": 10,
  "requires_notarization": true
}
```

#### Response

```json
{
  "coin": "TKL",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "777",
  "required_confirmations": 10,
  "requires_notarization": true,
  "unspendable_balance": "0",
  "mature_confirmations": 100,
  "result": "success"
}
```

#### Command (for Ethereum and ERC20-based blockchains)

```json
{
  "coin": "ETH",
  "method": "enable",
  "urls": [
    "http://eth1.cipig.net:18555",
    "http://eth2.cipig.net:18555",
    "http://eth3.cipig.net:18555"
  ],
  "swap_contract_address": "0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80",
  "fallback_swap_contract": "0x8500AFc0bc5214728082163326C2FF0C73f4a871",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
  "coin": "ETH",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "50",
  "required_confirmations": 1,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "result": "success"
}
```

#### EVM coin activation with gas\_station\_url and policy {{label : 'enable', tag : 'legacy'}}

```json
{
  "coin": "ETH",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable",
  "urls": [
    "http://eth1.cipig.net:18555",
    "http://eth2.cipig.net:18555",
    "http://eth3.cipig.net:18555"
  ],
  "swap_contract_address": "0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80",
  "fallback_swap_contract": "0x8500AFc0bc5214728082163326C2FF0C73f4a871",
  "gas_station_url": "https://ethgasstation.info/json/ethgasAPI.json",
  "gas_station_decimals": 8,
  "gas_station_policy": {
    "policy": "MeanAverageFast"
  }
}
```

#### Response

```json
{
  "coin": "ETH",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "50",
  "required_confirmations": 1,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "result": "success"
}
```

#### Polygon (MATIC) and PLG20 activation {{label : 'enable', tag : 'legacy'}}

```json
{
  "coin": "NZDS-PLG20",
  "method": "enable",
  "swap_contract_address": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
  "fallback_swap_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
  "urls": [
    "https://polygon-rpc.com"
  ],
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
  "coin": "NZDS-PLG20",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "350",
  "required_confirmations": 1,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "result": "success"
}
```

#### Binance Coin (BNB) and BEP20 activation {{label : 'enable', tag : 'legacy'}}

```json
{
  "coin": "BUSD-BEP20",
  "method": "enable",
  "swap_contract_address": "0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31",
  "fallback_swap_contract": "0xeDc5b89Fe1f0382F9E4316069971D90a0951DB31",
  "urls": [
    "http://bsc1.cipig.net:8655",
    "http://bsc2.cipig.net:8655",
    "http://bsc3.cipig.net:8655"
  ],
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
  "coin": "BUSD-BEP20",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "45",
  "required_confirmations": 1,
  "requires_notarization": false,
  "unspendable_balance": "0",
  "result": "success"
}
```

For enabling Z coins, refer to the [ZHTLC activation tasks](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/) in the v2.0 Dev API.

To see more examples for other platforms like Fantom, Avalanche & Harmony, you can search the [Komodo DeFi Framework API Coin Activation Commands List
](https://stats.kmd.io/atomicdex/activation_commands/) or build a single `batch` command to enable a set of selected coins via the
[Batch Coin Activation Form](https://stats.kmd.io/atomicdex/batch_activation_form/)

We welcome volunteers to test new coins for Komodo DeFi Framework API compatibility! Follow the [Submitting Coin Test Results guide](https://github.com/KomodoPlatform/coins#about-this-repository) for more information, or drop into the [Komodo Platform Discord Server](https://komodoplatform.com/discord) for a chat if you need some help.
export const title = "Komodo DeFi Framework Method: Coins needed for kick Start";
export const description = "Learn how to kick-start interrupted swaps on the Komodo DeFi Framework API by activating the necessary coins using the coins_needed_for_kick_start method.";

# coins\_needed\_for\_kick\_start

**coins\_needed\_for\_kick\_start()**

If the Komodo DeFi Framework API is stopped while making a swap/having the active order it will attempt to kick-start them on next launch and continue from the point where it's stopped. `coins_needed_for_kick_start` returns the tickers of coins that should be activated ASAP after the Komodo DeFi Framework API is started to continue the interrupted swaps. Consider calling this method on Komodo DeFi Framework API startup and activate the returned coins using `enable` or `electrum` methods.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type             | Description                                                              |
| --------- | ---------------- | ------------------------------------------------------------------------ |
| result    | array of strings | tickers of coins that should be activated to kick-start swaps and orders |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "coins_needed_for_kick_start"
}
```

#### Response (BTC and KMD should be activated ASAP in this case)

```json
{ "result": ["BTC", "KMD"] }
```

#### Response (no swaps and orders waiting to be started)

```json
{ "result": [] }
```
export const title = "Komodo DeFi Framework Method: Convert utxo Address";
export const description = "The convert_utxo_address method takes a UTXO address as input, and returns the equivalent address for another UTXO coin.";

# convert\_utxo\_address

**convert\_utxo\_address address to\_coin**

The `convert_utxo_address` method takes a UTXO address as input, and returns the equivalent address for another UTXO coin (e.g. from BTC address to RVN address)

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| address   | string | Input UTXO address            |
| to\_coin  | string | Input address to convert from |

## Response

| Structure | Type   | Description       |
| --------- | ------ | ----------------- |
| result    | string | Converted address |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convert_utxo_address",
  "coin": "BTC",
  "address": "1DmFp16U73RrVZtYUbo2Ectt8mAnYScpqM",
  "to_coin": "RVN"
}
```

#### Response (success)

```json
{
  "result": "RN3StWykhsERZaFjwmn9L9E5u2dPAt3YTS"
}
```

#### Response (error - coin not enabled)

```json
{
  "error": "rpc:174] dispatcher_legacy:155] lp_coins:1668] Coin RVN is not activated"
}
```

#### Response (error - input address checksum failed)

```json
{
  "error": "rpc:174] dispatcher_legacy:155] lp_coins:1665] Invalid Checksum"
}
```
export const title = "Komodo DeFi Framework Method: Convert Address";
export const description = "The convertaddress method converts an input address to a specified address format.";

# convertaddress

**convertaddress coin from to\_address\_format**

The `convertaddress` method converts an input address to a specified address format.

For example, this method can be used to convert a BCH address from legacy to cash address format and vice versa.

Or this can be used to convert an ETH address from single to mixed case checksum format.

## Arguments

| Structure           | Type   | Description                                                                                     |
| ------------------- | ------ | ----------------------------------------------------------------------------------------------- |
| coin                | string | the name of the coin address context                                                            |
| from                | string | input address                                                                                   |
| to\_address\_format | object | A standard [AddressFormat](/komodo-defi-framework/api/common_structures/#address-format) object |

## Response

| Structure | Type   | Description                      |
| --------- | ------ | -------------------------------- |
| address   | string | the result of address conversion |

#### 📌 Examples

#### Command (ETH single case address to mixed checksum)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convertaddress",
  "coin": "ETH",
  "from": "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359",
  "to_address_format": {
    "format": "mixedcase"
  }
}
```

#### Response

```json
{
  "result": {
    "address": "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"
  }
}
```

#### Command (BCH legacy to cash address)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convertaddress",
  "coin": "BCH",
  "from": "1DmFp16U73RrVZtYUbo2Ectt8mAnYScpqM",
  "to_address_format": {
    "format": "cashaddress",
    "network": "bitcoincash"
  }
}
```

#### Response

```json
{
  "result": {
    "address": "bitcoincash:qzxqqt9lh4feptf0mplnk58gnajfepzwcq9f2rxk55"
  }
}
```

#### Command (BCH cash address to legacy)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convertaddress",
  "coin": "BCH",
  "from": "bitcoincash:qzxqqt9lh4feptf0mplnk58gnajfepzwcq9f2rxk55",
  "to_address_format": {
    "format": "standard"
  }
}
```

#### Response:

```json
{
  "result": {
    "address": "1DmFp16U73RrVZtYUbo2Ectt8mAnYScpqM"
  }
}
```

#### Command (Qtum wallet address to QRC20 contract address)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convertaddress",
  "coin": "QRC20",
  "from": "qKVvtDqpnFGDxsDzck5jmLwdnD2jRH6aM8",
  "to_address_format": {
    "format": "contract"
  }
}
```

#### Response

```json
{
  "result": {
    "address": "0x1549128bbfb33b997949b4105b6a6371c998e212"
  }
}
```

#### Command (QRC20 contract address to Qtum wallet address)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "convertaddress",
  "coin": "QRC20",
  "from": "0x1549128bbfb33b997949b4105b6a6371c998e212",
  "to_address_format": {
    "format": "wallet"
  }
}
```

#### Response

```json
{
  "result": {
    "address": "qKVvtDqpnFGDxsDzck5jmLwdnD2jRH6aM8"
  }
}
```
export const title = "Komodo DeFi Framework Method: Convert Address";
export const description = "The disable_coin method deactivates the previously enabled coin, and also cancels all active orders that use the selected coin.";

# disable\_coin

**disable\_coin coin**

The `disable_coin` method deactivates the previously enabled coin, and also cancels all active orders that use the selected coin. The method will return an error in the following cases:

*   The coin is not enabled
*   The coin is used by active swaps
*   The coin is used by a currently matching order. In this case, other orders might still be cancelled

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| coin      | string | the ticker of coin to disable |

#### Response

| Structure         | Type             | Description                                                                      |
| ----------------- | ---------------- | -------------------------------------------------------------------------------- |
| coin              | string           | the ticker of deactivated coin                                                   |
| cancelled\_orders | array of strings | uuids of cancelled orders                                                        |
| swaps             | array of strings | uuids of active swaps that use the selected coin; present only in error cases    |
| orders.matching   | array of strings | uuids of matching orders that use the selected coin; present only in error cases |
| orders.cancelled  | array of strings | uuids of orders that were successfully cancelled despite the error               |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "disable_coin",
  "coin": "DOC"
}
```

#### Response (success)

```json
{
  "result": {
    "cancelled_orders": ["e5fc7c81-7574-4d3f-b64a-47227455d62a"],
    "coin": "DOC"
  }
}
```

#### Response (error - coin is not enabled)

```json
{
  "error": "No such coin: DOC"
}
```

#### Response (error - active swap is using the coin)

```json
{
  "error": "There're active swaps using DOC",
  "swaps": ["d88d0a0e-f8bd-40ab-8edd-fe20801ef349"]
}
```

#### Response (error - the order is matched at the moment, but another order is cancelled)

```json
{
  "error": "There're currently matching orders using DOC",
  "orders": {
    "matching": ["d88d0a0e-f8bd-40ab-8edd-fe20801ef349"],
    "cancelled": ["c88d0a0e-f8bd-40ab-8edd-fe20801ef349"]
  }
}
```
export const title = "Komodo DeFi Framework Method: Get Enabled Coins";
export const description = "The get_enabled_coins method returns data of coins that are currently enabled on the user's Komodo DeFi Framework API node.";

# get\_enabled\_coins

**get\_enabled\_coins**

The `get_enabled_coins` method returns data of coins that are currently enabled on the user's Komodo DeFi Framework API node.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure      | Type             | Description                            |
| -------------- | ---------------- | -------------------------------------- |
| result         | array of objects | tickers and addresses of enabled coins |
| result.address | string           | the user's address for this coin       |
| result.ticker  | string           | the ticker name of this coin           |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_enabled_coins"
}
```

#### Response

```json
{
  "result": [
    {
      "address": "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji",
      "ticker": "BTC"
    },
    {
      "address": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
      "ticker": "PIZZA"
    },
    {
      "address": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
      "ticker": "BEER"
    },
    {
      "address": "0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
      "ticker": "ETH"
    },
    {
      "address": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
      "ticker": "ETOMIC"
    },
    {
      "address": "0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
      "ticker": "DEC8"
    },
    {
      "address": "0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
      "ticker": "BAT"
    }
  ]
}
```
export const title = "Komodo DeFi Framework Method: Get Gossip Mesh";
export const description = "The get_gossip_mesh method returns an array of peerIDs added to a topics' mesh for each known gossipsub topic.";

# get\_gossip\_mesh

**get\_gossip\_mesh**

The `get_gossip_mesh` method returns an array of peerIDs added to a topics' mesh for each known gossipsub topic.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure        | Type  | Description                                                      |
| ---------------- | ----- | ---------------------------------------------------------------- |
| Topic-PeerID map | Array | PeerIDs added to a topics' mesh (for each known gossipsub topic) |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_gossip_mesh"
}
```

#### Response (success)

```json
{
  "result": {}
}
```
export const title = "Komodo DeFi Framework Method: Get Gossip Peer Topics";
export const description = "The get_gossip_peer_topics method returns a map of peerIDs to an array of the topics to which they are subscribed.";

# get\_gossip\_peer\_topics

**get\_gossip\_peer\_topics**

The `get_gossip_peer_topics` method returns a map of peerIDs to an array of the topics to which they are subscribed.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure        | Type  | Description                     |
| ---------------- | ----- | ------------------------------- |
| PeerID-Topic map | Array | Topics subscribed to by PeerIDs |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_gossip_peer_topics"
}
```

#### Response (success)

```json
{
  "result": {
    "12D3KooWJDoV9vJdy6PnzwVETZ3fWGMhV41VhSbocR1h2geFqq9Y": [],
    "12D3KooWM8BrDBXc1TVw2vswoqYcQVn7fFvpAvcCfaV2Uqg2L9jU": [],
    "12D3KooWPR2RoPi19vQtLugjCdvVmCcGLP2iXAzbDfP3tp81ZL4d": [],
    "12D3KooWDbBdifGp3viDR4dCECEFKepjhwhd2YwAqgNVdXpEeewu": []
  }
}
```
export const title = "Komodo DeFi Framework Method: Get Gossip Topic Peers";
export const description = "The get_gossip_topic_peers method returns a map of topics to an array of the PeerIDs which are subscribers.";

# get\_gossip\_topic\_peers

**get\_gossip\_topic\_peers**

The `get_gossip_topic_peers` method returns a map of topics to an array of the PeerIDs which are subscribers.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure        | Type  | Description                   |
| ---------------- | ----- | ----------------------------- |
| Topic-PeerID map | Array | PeerIDs subscribed to a topic |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_gossip_topic_peers"
}
```

#### Response (success)

```json
{
  "result": "12D3KooWS9MeuFZhJCfQTntwbTVnXMAJpz9Tvd1XYFuURrGqnJVR"
}
```
export const title = "Komodo DeFi Framework Method: Get My Peer ID";
export const description = "The get_my_peer_id method returns your unique identifying Peer ID on the network.";

# get\_my\_peer\_id

**get\_my\_peer\_id**

The `get_my_peer_id` method returns your unique identifying Peer ID on the network

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type   | Description                            |
| --------- | ------ | -------------------------------------- |
| PeerID    | string | The PeerID of your node on the network |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_my_peer_id"
}
```

#### Response (success)

```json
{
  "result": "12D3KooWS9MeuFZhJCfQTntwbTVnXMAJpz9Tvd1XYFuURrGqnJVR"
}
```
export const title = "Komodo DeFi Framework Method: Get Peers Info";
export const description = "The get_peers_info method all connected peers with their multiaddresses.";

# get\_peers\_info

**get\_peers\_info**

The `get_peers_info` method all connected peers with their multiaddresses. See [https://docs.libp2p.io/concepts/addressing/](https://docs.libp2p.io/concepts/addressing/) for more information.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure             | Type  | Description                                    |
| --------------------- | ----- | ---------------------------------------------- |
| PeerID-Multiaddresses | Array | All connected peers with their multiaddresses. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_peers_info"
}
```

#### Response (success)

```json
{
  "result": {
    "12D3KooWM8BrDBXc1TVw2vswoqYcQVn7fFvpAvcCfaV2Uqg2L9jU": [
      "/ip4/89.248.168.39/tcp/42845"
    ],
    "12D3KooWJ3dEWK7ym1uwc5SmwbmfFSRmELrA9aPJYxFRrQCCNdwF": [
      "/ip4/188.124.46.112/tcp/42845/p2p/12D3KooWJ3dEWK7ym1uwc5SmwbmfFSRmELrA9aPJYxFRrQCCNdwF"
    ],
    "12D3KooWL6yrrNACb7t7RPyTEPxKmq8jtrcbkcNd6H5G2hK7bXaL": [
      "/ip4/168.119.236.233/tcp/42845/p2p/12D3KooWL6yrrNACb7t7RPyTEPxKmq8jtrcbkcNd6H5G2hK7bXaL"
    ],
    "12D3KooWPR2RoPi19vQtLugjCdvVmCcGLP2iXAzbDfP3tp81ZL4d": [
      "/ip4/168.119.237.13/tcp/42845/p2p/12D3KooWPR2RoPi19vQtLugjCdvVmCcGLP2iXAzbDfP3tp81ZL4d"
    ],
    "12D3KooWKxavLCJVrQ5Gk1kd9m6cohctGQBmiKPS9XQFoXEoyGmS": [
      "/ip4/168.119.236.249/tcp/42845/p2p/12D3KooWKxavLCJVrQ5Gk1kd9m6cohctGQBmiKPS9XQFoXEoyGmS"
    ],
    "12D3KooWDbBdifGp3viDR4dCECEFKepjhwhd2YwAqgNVdXpEeewu": [
      "/ip4/80.82.76.214/tcp/42845"
    ],
    "12D3KooWJDoV9vJdy6PnzwVETZ3fWGMhV41VhSbocR1h2geFqq9Y": [
      "/ip4/89.248.173.231/tcp/42845"
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: Get Relay Mesh";
export const description = "The get_relay_mesh method returns a list of peerIDs included in our local relay mesh.";

# get\_relay\_mesh

**get\_relay\_mesh**

The `get_relay_mesh` method returns a list of peerIDs included in our local relay mesh.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type | Description                          |
| --------- | ---- | ------------------------------------ |
| PeerIDs   | List | PeerIDs within your local relay mesh |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_relay_mesh"
}
```

#### Response (success)

```json
{
  "result": [
    "12D3KooWM8BrDBXc1TVw2vswoqYcQVn7fFvpAvcCfaV2Uqg2L9jU",
    "12D3KooWJDoV9vJdy6PnzwVETZ3fWGMhV41VhSbocR1h2geFqq9Y"
  ]
}
```
export const title = "Komodo DeFi Framework Method: Get Trade Fee";
export const description =
  "The get_trade_fee method returns the approximate amount of the miner fee that is paid per swap transaction.";

# get\_trade\_fee {{label : 'get_trade_fee', tag : 'deprecated'}}

**get\_trade\_fee coin (deprecated)**

The `get_trade_fee` method returns the approximate amount of the miner fee that is paid per swap transaction.

This amount should be multiplied by 2 and deducted from the volume on `buy/sell` calls when the user is about to trade the entire balance of the selected coin. This aspect is currently under development.

This function is deprecated. Please consider using [trade\_preimage v2.0](/komodo-defi-framework/api/v20/trade_preimage/) instead.

To send QRC20 Maker/Taker payment, you may need to allow the [Etomic Swap](https://github.com/artemii235/etomic-swap/) smart contract to withdraw amounts from your account using the [approve](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#IERC20-approve-address-uint256-) call.
In the worst case, you should call the `approve` twice (reduce allowance to 0 and set it to a required value) before the [erc20Payment](https://github.com/artemii235/etomic-swap/blob/1.0/contracts/EtomicSwap.sol#L51) is called.

Gas Limit `100000` and Gas Price `40` are sufficient for one smart contract call.

As a result, the value returned by the `get_trade_fee` for a QRC20 token includes gas fee `3 * 100000 * 40 = 12000000` that can be used in the worst case.

## Arguments

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| coin      | string | the name of the coin for the requested trade fee |

#### Response

| Structure        | Type             | Description                                                                                                                                                                    |
| ---------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin             | string           | the fee is paid from the user's balance of this coin. This coin name may differ from the requested coin. For example, ERC20 fees are paid by ETH (gas)                         |
| amount           | string (numeric) | the approximate fee amount to be paid per swap transaction in decimal representation                                                                                           |
| amount\_rat      | rational         | the approximate fee amount to be paid per swap transaction, represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object     |
| amount\_fraction | fraction         | the approximate fee amount to be paid per swap transaction, represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object |

#### 📌 Examples

#### Command (BTC)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_trade_fee",
  "coin": "BTC"
}
```

#### Response

```json
{
  "result": {
    "amount": "0.00042049",
    "amount_fraction": {
      "denom": "100000000",
      "numer": "42049"
    },
    "amount_rat": [
      [1, [42049]],
      [1, [100000000]]
    ],
    "coin": "BTC"
  }
}
```

#### Command (ETH)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_trade_fee",
  "coin": "ETH"
}
```

#### Response

```json
{
  "result": {
    "amount": "0.00594",
    "amount_fraction": {
      "denom": "50000",
      "numer": "297"
    },
    "amount_rat": [
      [1, [297]],
      [1, [50000]]
    ],
    "coin": "ETH"
  }
}
```

#### Command (ERC20)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_trade_fee",
  "coin": "BAT"
}
```

#### Response

```json
{
  "result": {
    "amount": "0.00594",
    "amount_fraction": {
      "denom": "50000",
      "numer": "297"
    },
    "amount_rat": [
      [1, [297]],
      [1, [50000]]
    ],
    "coin": "ETH"
  }
}
```
export const title = "Komodo DeFi Framework Method: Help";
export const description = "The help method returns the full API documentation in the terminal.";

# help

**help()**

The `help` method returns the full API documentation in the terminal.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure                               | Type | Description |
| --------------------------------------- | ---- | ----------- |
| (returns the documentation in terminal) |      |             |
export const title = "Komodo DeFi Framework Method: Import Swaps";
export const description = "The import_swaps method imports to the local database the swaps data that was exported from another Komodo DeFi Framework API instance.";

# import\_swaps

**import\_swaps swaps**

The `import_swaps` method imports to the local database the `swaps` data that was exported from another Komodo DeFi Framework API instance.

Use this method in combination with `my_swap_status` or `my_recent_swaps` to copy the swap history between different devices.

## Arguments

| Structure | Type             | Description                                                                                              |
| --------- | ---------------- | -------------------------------------------------------------------------------------------------------- |
| swaps     | array of objects | A map of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects. |

#### Response

| Structure       | Type             | Description                                                  |
| --------------- | ---------------- | ------------------------------------------------------------ |
| result.imported | array of strings | uuids of swaps that were successfully imported               |
| result.imported | map              | uuids of swaps that failed to import; includes error message |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "import_swaps",
  "swaps": [
    {
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeSendFailed",
        "MakerPaymentValidateFailed",
        "TakerPaymentTransactionFailed",
        "TakerPaymentDataSendFailed",
        "TakerPaymentWaitForSpendFailed",
        "MakerPaymentSpendFailed",
        "TakerPaymentRefunded",
        "TakerPaymentRefundFailed"
      ],
      "events": [
        {
          "event": {
            "data": {
              "lock_duration": 7800,
              "maker": "631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640",
              "maker_amount": "3",
              "maker_coin": "BEER",
              "maker_coin_start_block": 156186,
              "maker_payment_confirmations": 0,
              "maker_payment_wait": 1568883784,
              "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
              "started_at": 1568881184,
              "taker_amount": "4",
              "taker_coin": "ETOMIC",
              "taker_coin_start_block": 175041,
              "taker_payment_confirmations": 1,
              "taker_payment_lock": 1568888984,
              "uuid": "07ce08bf-3db9-4dd8-a671-854affc1b7a3"
            },
            "type": "Started"
          },
          "timestamp": 1568881185316
        },
        {
          "event": {
            "data": {
              "maker_payment_locktime": 1568896784,
              "maker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640",
              "secret_hash": "eba736c5cc9bb33dee15b4a9c855a7831a484d84"
            },
            "type": "Negotiated"
          },
          "timestamp": 1568881246025
        },
        {
          "event": {
            "data": {
              "tx_hash": "0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87",
              "tx_hex": "0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000"
            },
            "type": "TakerFeeSent"
          },
          "timestamp": 1568881250689
        },
        {
          "event": {
            "data": {
              "tx_hash": "31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06",
              "tx_hex": "0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000"
            },
            "type": "MakerPaymentReceived"
          },
          "timestamp": 1568881291571
        },
        {
          "event": {
            "type": "MakerPaymentWaitConfirmStarted"
          },
          "timestamp": 1568881291571
        },
        {
          "event": {
            "type": "MakerPaymentValidatedAndConfirmed"
          },
          "timestamp": 1568881291985
        },
        {
          "event": {
            "data": {
              "tx_hash": "95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961",
              "tx_hex": "0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000"
            },
            "type": "TakerPaymentSent"
          },
          "timestamp": 1568881296904
        },
        {
          "event": {
            "data": {
              "secret": "fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96",
              "transaction": {
                "tx_hash": "68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827",
                "tx_hex": "0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000"
              }
            },
            "type": "TakerPaymentSpent"
          },
          "timestamp": 1568881328643
        },
        {
          "event": {
            "data": {
              "error": "taker_swap:798] utxo:950] utxo:950] error"
            },
            "type": "MakerPaymentSpendFailed"
          },
          "timestamp": 1568881328645
        },
        {
          "event": {
            "type": "Finished"
          },
          "timestamp": 1568881328648
        }
      ],
      "my_info": {
        "my_amount": "4",
        "my_coin": "ETOMIC",
        "other_amount": "3",
        "other_coin": "BEER",
        "started_at": 1568881184
      },
      "recoverable": true,
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeSent",
        "MakerPaymentReceived",
        "MakerPaymentWaitConfirmStarted",
        "MakerPaymentValidatedAndConfirmed",
        "TakerPaymentSent",
        "TakerPaymentSpent",
        "MakerPaymentSpent",
        "Finished"
      ],
      "type": "Taker",
      "uuid": "07ce08bf-3db9-4dd8-a671-854affc1b7a3"
    }
  ]
}
```

#### Response

```json
{
  "result": {
    "imported": ["07ce08bf-3db9-4dd8-a671-854affc1b7a3"],
    "skipped": {
      "1af6bb5e-e131-4b06-b235-36fae8daab0a": "lp_swap:424] File already exists"
    }
  }
}
```
export const title = "Komodo DeFi Framework API (Legacy Methods)";
export const description = "This section contains the Legacy Komodo DeFi Framework methods that are currently being ported to the 2.0 version";

# Komodo DeFi Framework API RPC (Legacy)

This section of the documentation contains the Legacy Komodo DeFi Framework methods that are currently being ported to the 2.0 version
export const title = "Komodo DeFi Framework Method: KMD Rewards Info";
export const description = "The kmd_rewards_info method returns information about the active user rewards that can be claimed by an address's unspent outputs.";

# kmd\_rewards\_info

**kmd\_rewards\_info**

The `kmd_rewards_info` method returns information about the active user rewards that can be claimed by an address's unspent outputs.

This method only works when the KMD coin is activated.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure         | Type                       | Description                                                                                                                                         |
| ----------------- | -------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| result            | array of objects           | the rewards info; each element corresponds to an unspent output and contains detailed information about the active user rewards corresponding to it |
| tx\_hash          | string                     | the hash of the transaction                                                                                                                         |
| height            | number (integer, optional) | the height of the block in which the transaction was included (empty if the tx is not mined yet)                                                    |
| output\_index     | number (integer)           | the zero-based index of the output in the transaction’s list of outputs                                                                             |
| amount            | string (numeric)           | the transaction output’s value                                                                                                                      |
| locktime          | number (integer)           | the transaction output's locktime                                                                                                                   |
| accrued\_rewards  | object                     | the amount of accrued rewards if they exist or the reason for their non existence                                                                   |
| accrue\_start\_at | number (integer, optional) | the rewards start to accrue at this time for the given transaction (empty if the rewards will never accrue to it)                                   |
| accrue\_stop\_at  | number (integer, optional) | the rewards stop to accrue at this time for the given transaction (empty if the tx is not mined yet or if rewards will never accrue to it)          |

Where the `accrued_rewards` has either

| Structure | Type             | Description                   |
| --------- | ---------------- | ----------------------------- |
| Accrued   | string (numeric) | the amount of accrued rewards |

or

| Structure        | Type   | Description                            |
| ---------------- | ------ | -------------------------------------- |
| NotAccruedReason | string | the reason why rewards are not accrued |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "kmd_rewards_info"
}
```

#### Response

```json
{
  "result": [
    {
      "accrue_stop_at": 1596144028,
      "accrued_rewards": {
        "Accrued": "0.00450984"
      },
      "amount": "47.99897112",
      "height": 1986467,
      "input_index": 1,
      "locktime": 1596099388,
      "tx_hash": "016bfb8fcf8704a30b5daf6b4bcce9d7e848141b53df44a5eae3db4279227401"
    },
    {
      "accrue_stop_at": 1596142801,
      "accrued_rewards": {
        "NotAccruedReason": "UtxoAmountLessThanTen"
      },
      "amount": "0.5",
      "height": 1986481,
      "input_index": 0,
      "locktime": 1596098161,
      "tx_hash": "762d02d9d52faf365b55375da5e61ce34bb0ea391fbcb23e74b2adf8165f1bbb"
    }
  ]
}
```
export const title = "Komodo DeFi Framework Method: List Banned Pubkeys";
export const description = "The list_banned_pubkeys method returns a list of public keys of nodes that are banned from interacting with the node executing the method.";

# list\_banned\_pubkeys

**list\_banned\_pubkeys**

The `list_banned_pubkeys` method returns a list of public keys of nodes that are banned from interacting with the node executing the method.

Banned nodes cannot complete orders and order matching requests with the node executing the method.

Some cases of swap failures give cause for banning a node. For example, a market taker may not follow the atomic-swap protocol by not sending the dex fee. The list\_banned\_pubkeys method is useful in these circumstances.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure                   | Type                                                        | Description                                                                         |
| --------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| result                      | map of objects (key - pubkey in hexadecimal representation) | the list of pubkeys banned by current node                                          |
| result.\*.type              | string                                                      | the type of the ban; possible values: `Manual` or `FailedSwap`                      |
| result.\*.caused\_by\_swap  | string (optional)                                           | the uuid of the swap that triggered the ban; present only for the `FailedSwap` type |
| result.\*.caused\_by\_event | object (optional)                                           | the swap event that triggered the ban; present only for the `FailedSwap` type       |
| result.\*.reason            | string (optional)                                           | the reason for the `Manual` ban                                                     |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "list_banned_pubkeys"
}
```

#### Response

```json
{
  "result": {
    "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732": {
      "type": "FailedSwap",
      "caused_by_event": {
        "event": {
          "data": {
            "error": "taker_swap:547] \"taker_swap:543] timeout (180.0 > 180.0)\""
          },
          "type": "NegotiateFailed"
        },
        "type": "Taker"
      },
      "caused_by_swap": "e8400870-e85a-42af-bb4f-9658ac86ffdf"
    },
    "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044730": {
      "type": "Manual",
      "reason": "test"
    }
  }
}
```
export const title = "Komodo DeFi Framework Method: Max Taker Vol";
export const description = "The max_taker_vol method returns the maximum available volume for buy/sell methods for selected coin.";

# max\_taker\_vol

**max\_taker\_vol coin**

The `max_taker_vol` method returns the maximum available volume for buy/sell methods for selected `coin`.
This takes the dex fee and blockchain miner fees into account. The result should be used as is for `sell` method or divided by price for `buy` method.

## Arguments

| Structure | Type   | Description                                                     |
| --------- | ------ | --------------------------------------------------------------- |
| coin      | string | the name of the coin to retrieve the max available taker volume |

#### Response

| Structure | Type     | Description                                                                                                                                         |
| --------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| result    | fraction | the max available taker volume, represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object. |

#### 📌 Examples

#### Command

```json
{
  "method": "max_taker_vol",
  "coin": "DOC",
  "userpass": "RPC_UserP@SSW0RD",
  "mm2": 1
}
```

#### Response

```json
{
  "result": {
    "denom": "38900000000",
    "numer": "309786160299"
  }
}
```
export const title = "Komodo DeFi Framework Method: Metrics";
export const description =
  "The metrics method returns a snapshot of the current Komodo DeFi Framework API metrics used in Prometheus and Grafana.";

# metrics

The `metrics` method returns a snapshot of the current Komodo DeFi Framework API metrics used in [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/).
For more information check out the [Komodo DeFi Framework metrics guide](/komodo-defi-framework/tutorials/api-metrics/)

### Request Parameters

The `metrics` method does not take any additional parameters, and does not require authentication with your `rpc_password`.

### Response Parameters

| Parameter | Type            | Description                                                                                                                              |
| --------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| metrics   | list of objects | There are a variety of metrics returned, with each metrics object havine a `type`, `key`, `label`, and some values which vary by `type`. |

### Metrics object

| Parameter | Type   | Description                                                                                                |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------- |
| type      | string | A metric type which indicates how it should be displayed in visualisation.                                 |
| key       | string | A descriptive name assigned to the metric.                                                                 |
| labels    | object | Labels can be used to group similar metrics together or provide additional context.                        |
| value     | float  | Returned if `type` is `gauge`. A numeric value which indicates the magnitude of the metric being measured. |
| count     | float  | Returned if `type` is `histogram`. How many values were measured.                                          |
| min       | float  | Returned if `type` is `histogram`. The smallest value measured.                                            |
| max       | float  | Returned if `type` is `histogram`. The highest value measured.                                             |

#### 📌 Example(s)

#### Command

```json
{
  "method": "metrics",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
  "metrics": [
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "coin": "MARTY",
        "method": "tx_detail_by_hash"
      },
      "value": 25
    },
    {
      "type": "counter",
      "key": "rpc_client.request.count",
      "labels": {
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 1224
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "method": "tx_detail_by_hash",
        "coin": "DOC"
      },
      "value": 27
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "DOC",
        "method": "tx_detail_by_hash"
      },
      "value": 27
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.in",
      "labels": {
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 823841
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.out",
      "labels": {
        "coin": "MARTY",
        "client": "electrum"
      },
      "value": 139396
    },
    {
      "type": "counter",
      "key": "tx.history.response.total_length",
      "labels": {
        "client": "electrum",
        "coin": "MARTY",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 1041
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 11
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "method": "blockchain.scripthash.get_history",
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 6
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "MARTY",
        "method": "tx_detail_by_hash"
      },
      "value": 25
    },
    {
      "type": "counter",
      "key": "rpc_client.response.count",
      "labels": {
        "coin": "DOC",
        "client": "electrum"
      },
      "value": 1351
    },
    {
      "type": "counter",
      "key": "rpc_client.request.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 1237
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.in",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 772964
    },
    {
      "type": "counter",
      "key": "tx.history.response.total_length",
      "labels": {
        "coin": "DOC",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 767
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "DOC",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 6
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.out",
      "labels": {
        "coin": "DOC",
        "client": "electrum"
      },
      "value": 136368
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "MARTY",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 11
    },
    {
      "type": "counter",
      "key": "rpc_client.response.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 1361
    },
    {
      "type": "gauge",
      "key": "p2p.connected_peers.count",
      "labels": {},
      "value": 8.0
    },
    {
      "type": "gauge",
      "key": "p2p.received_messages.count",
      "labels": {},
      "value": 24.0
    },
    {
      "type": "gauge",
      "key": "p2p.connected_relays.len",
      "labels": {},
      "value": 8.0
    },
    {
      "type": "gauge",
      "key": "p2p.relay_mesh.len",
      "labels": {},
      "value": 2.0
    },
    {
      "type": "gauge",
      "key": "orderbook.memory_db",
      "labels": {},
      "value": 297800390224.0
    },
    {
      "type": "gauge",
      "key": "orderbook.len",
      "labels": {},
      "value": 15.0
    },
    {
      "type": "gauge",
      "key": "p2p.received_messages.period_in_secs",
      "labels": {},
      "value": 60.0
    },
    {
      "type": "histogram",
      "key": "peer.outgoing_request.timing",
      "labels": {
        "peer": "12D3KooWJDoV9vJdy6PnzwVETZ3fWGMhV41VhSbocR1h2geFqq9Y"
      },
      "count": 2.0,
      "max": 0.801318629,
      "min": 0.699428848
    }
  ]
}
```
export const title = "Komodo DeFi Framework Method: Min Trading Vol";
export const description = "The min_trading_vol method returns the minimum required volume for buy/sell/setprice methods for the selected coin.";

# min\_trading\_vol

**min\_trading\_vol coin**

The `min_trading_vol` method returns the minimum required volume for buy/sell/setprice methods for the selected `coin`.

## Arguments

| Structure | Type   | Description                                                 |
| --------- | ------ | ----------------------------------------------------------- |
| coin      | string | the name of the coin to retrieve the minimum trading volume |

#### Response

| Structure                   | Type             | Description                                                                                                                                             |
| --------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                      | object           | result object                                                                                                                                           |
| coin                        | string           | the coin ticker from the request                                                                                                                        |
| min\_trading\_vol           | string (decimal) | the minimum trading volume threshold in decimal representation                                                                                          |
| min\_trading\_vol\_rat      | rational         | the minimum trading volume threshold represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object     |
| min\_trading\_vol\_fraction | fraction         | the minimum trading volume threshold represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "min_trading_vol",
  "coin": "DOC"
}
```

#### Response

```json
{
  "result": {
    "coin": "DOC",
    "min_trading_vol": "0.0001",
    "min_trading_vol_fraction": {
      "numer": "1",
      "denom": "10000"
    },
    "min_trading_vol_rat": [
      [1, [1]],
      [1, [10000]]
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: My Balance";
export const description = "The my_balance method returns the current balance of the specified coin.";

# my\_balance

**my\_balance coin**

The `my_balance` method returns the current balance of the specified `coin`.

## Arguments

| Structure | Type   | Description                                  |
| --------- | ------ | -------------------------------------------- |
| coin      | string | the name of the coin to retrieve the balance |

#### Response

| Structure            | Type             | Description                                                                                   |
| -------------------- | ---------------- | --------------------------------------------------------------------------------------------- |
| address              | string           | the address that holds the coins                                                              |
| balance              | string (numeric) | the number of coins in the address; does not include `unspendable_balance`                    |
| unspendable\_balance | string (numeric) | the `coin` balance that is unspendable at the moment (e.g. if the address has immature UTXOs) |
| coin                 | string           | the name of the coin                                                                          |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_balance",
  "coin": "HELLOWORLD"
}
```

#### Response

```json
{
  "address": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
  "balance": "60.00253836",
  "unspendable_balance": "0.1",
  "coin": "HELLOWORLD"
}
```
export const title = "Komodo DeFi Framework Method: My Orders";
export const description = "The my_orders method returns the data of all active orders created by the Komodo DeFi Framework API node.";

# my\_orders

**my\_orders()**

The `my_orders` method returns the data of all active orders created by the Komodo DeFi Framework API node.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure     | Type           | Description                                           |
| ------------- | -------------- | ----------------------------------------------------- |
| maker\_orders | map of objects | orders that are currently active in market-maker mode |
| taker\_orders | map of objects | orders that are currently active in market-taker mode |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_orders"
}
```

#### Response

```json
{
  "result": {
    "maker_orders": {
      "ea77dcc3-a711-4c3d-ac36-d45fc5e1ee0c": {
        "available_amount": "1",
        "base": "BEER",
        "cancellable": true,
        "created_at": 1568808684710,
        "matches": {
          "60aaacca-ed31-4633-9326-c9757ea4cf78": {
            "connect": {
              "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
              "method": "connect",
              "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
            },
            "connected": {
              "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
              "method": "connected",
              "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
            },
            "last_updated": 1560529572571,
            "request": {
              "action": "Buy",
              "base": "BEER",
              "base_amount": "1",
              "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
              "method": "request",
              "rel": "PIZZA",
              "rel_amount": "1",
              "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
            },
            "reserved": {
              "base": "BEER",
              "base_amount": "1",
              "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
              "method": "reserved",
              "rel": "PIZZA",
              "rel_amount": "1",
              "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
            }
          }
        },
        "max_base_vol": "1",
        "max_base_vol_rat": [
          [1, [1]],
          [1, [1]]
        ],
        "min_base_vol": "0",
        "min_base_vol_rat": [
          [0, []],
          [1, [1]]
        ],
        "price": "1",
        "price_rat": [
          [1, [1]],
          [1, [1]]
        ],
        "rel": "ETOMIC",
        "started_swaps": ["60aaacca-ed31-4633-9326-c9757ea4cf78"],
        "uuid": "ea77dcc3-a711-4c3d-ac36-d45fc5e1ee0c"
      }
    },
    "taker_orders": {
      "ea199ac4-b216-4a04-9f08-ac73aa06ae37": {
        "cancellable": true,
        "created_at": 1568811351456,
        "matches": {
          "15922925-cc46-4219-8cbd-613802e17797": {
            "connect": {
              "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
              "method": "connect",
              "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
            },
            "connected": {
              "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
              "method": "connected",
              "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
            },
            "last_updated": 1560529049477,
            "reserved": {
              "base": "BEER",
              "base_amount": "1",
              "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
              "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
              "method": "reserved",
              "rel": "ETOMIC",
              "rel_amount": "1",
              "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
              "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
            }
          }
        },
        "request": {
          "action": "Buy",
          "base": "BEER",
          "base_amount": "1",
          "base_amount_rat": [
            [1, [1]],
            [1, [1]]
          ],
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
          "method": "request",
          "rel": "ETOMIC",
          "rel_amount": "1",
          "rel_amount_rat": [
            [1, [1]],
            [1, [1]]
          ],
          "sender_pubkey": "031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
          "uuid": "ea199ac4-b216-4a04-9f08-ac73aa06ae37",
          "match_by": {
            "type": "Any"
          }
        },
        "order_type": {
          "type": "GoodTillCancelled"
        },
        "base_orderbook_ticker": null,
        "rel_orderbook_ticker": null
      }
    }
  }
}
```
export const title = "Komodo DeFi Framework Method: My Recent Swaps";
export const description = "The my_recent_swaps method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node.";

# my\_recent\_swaps

**my\_recent\_swaps (from\_uuid page\_number=1 limit=10 my\_coin other\_coin from\_timestamp to\_timestamp)**

The `my_recent_swaps` method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node. Please note that all filters (my\_coin, from\_timestamp, etc.) are combined using logical AND.

## Arguments

| Structure       | Type                          | Description                                                                                                                                                                 |
| --------------- | ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| limit           | number                        | limits the number of returned swaps. The default is `10`.                                                                                                                   |
| from\_uuid      | string                        | Komodo DeFi Framework API will skip records until this uuid, skipping the `from_uuid` as well; The `from_uuid` approach is convenient for infinite scrolling implementation |
| page\_number    | number                        | Komodo DeFi Framework API will return `limit` swaps from the selected page; This param will be ignored if `from_uuid` is set.                                               |
| my\_coin        | string                        | return only swaps that match the `swap.my_coin = request.my_coin` condition                                                                                                 |
| other\_coin     | string                        | return only swaps that match the `swap.other_coin = request.other_coin` condition                                                                                           |
| from\_timestamp | number (timestamp in seconds) | return only swaps that match the `swap.started_at >= request.from_timestamp` condition                                                                                      |
| to\_timestamp   | number (timestamp in seconds) | return only swaps that match the `swap.started_at < request.to_timestamp` condition                                                                                         |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                            |
| -------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| swaps          | array of objects | A list of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects                                                                                               |
| from\_uuid     | string           | the from\_uuid that was set in the request; this value is null if nothing was set                                                                                                                      |
| skipped        | number           | the number of skipped records (i.e. the position of `from_uuid` in the list + 1 or `(page_number - 1) * limit`; the value is 0 if `from_uuid` or `page_number` were not set or `page_number` is 1)     |
| limit          | number           | the limit that was set in the request; note that the actual number of swaps can differ from the specified limit (e.g. on the last page)                                                                |
| total          | number           | total number of swaps available with the selected filters                                                                                                                                              |
| page\_number   | number           | the page\_number that was set in the request; if both `page_number` and `from_uuid` are not set in request it will default to `1`; if `from_uuid` is present in request this value will be always null |
| total\_pages   | number           | total pages available with the selected filters and limit                                                                                                                                              |
| found\_records | number           | the number of returned swaps                                                                                                                                                                           |

#### 📌 Examples

#### Command (limit + from\_uuid)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "from_uuid": "e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e4c",
  "limit": 2
}
```

#### Command (limit + page\_number)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "page_number": 3,
  "limit": 2
}
```

#### Command (select swaps that have my\_coin = DOC and other\_coin = MARTY)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "limit": 2,
  "my_coin": "DOC",
  "other_coin": "MARTY"
}
```

#### Command (select swaps that have my\_coin = DOC and started\_at >= 1611705600 (January 27, 2021 0:00:00 GMT))

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "limit": 2,
  "my_coin": "DOC",
  "from_timestamp": 1611705600
}
```

#### Command (select swaps that have started\_at >= 1611705600 (January 27, 2021 0:00:00 GMT) and started\_at \< 1611792001 (January 28, 2021 0:00:01 GMT))

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "limit": 2,
  "my_coin": "DOC",
  "from_timestamp": 1611705600,
  "to_timestamp": 1611792001
}
```

#### Response (success)

```json
{
  "result": {
    "from_uuid": "e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e4c",
    "limit": 2,
    "skipped": 1,
    "total": 49,
    "found_records": 2,
    "page_number": null,
    "total_pages": 25,
    "swaps": [
      {
        "error_events": [
          "StartFailed",
          "NegotiateFailed",
          "TakerFeeValidateFailed",
          "MakerPaymentTransactionFailed",
          "MakerPaymentDataSendFailed",
          "MakerPaymentWaitConfirmFailed",
          "TakerPaymentValidateFailed",
          "TakerPaymentWaitConfirmFailed",
          "TakerPaymentSpendFailed",
          "TakerPaymentSpendConfirmFailed",
          "MakerPaymentWaitRefundStarted",
          "MakerPaymentRefunded",
          "MakerPaymentRefundFailed"
        ],
        "events": [
          {
            "event": {
              "data": {
                "lock_duration": 7800,
                "maker_amount": "1",
                "maker_coin": "BEER",
                "maker_coin_start_block": 154221,
                "maker_payment_confirmations": 1,
                "maker_payment_requires_nota": false,
                "maker_payment_lock": 1561545442,
                "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                "secret": "ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6",
                "started_at": 1561529842,
                "taker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                "taker_amount": "1",
                "taker_coin": "PIZZA",
                "taker_coin_start_block": 141363,
                "taker_payment_confirmations": 1,
                "taker_payment_requires_nota": true,
                "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
              },
              "type": "Started"
            },
            "timestamp": 1561529842866
          },
          {
            "event": {
              "data": {
                "taker_payment_locktime": 1561537641,
                "taker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640"
              },
              "type": "Negotiated"
            },
            "timestamp": 1561529883208
          },
          {
            "event": {
              "data": {
                "tx_hash": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
                "tx_hex": "0400008085202f89021c7eeec33f8eb5ff2ed6c3d09e40e04b05a9674ea2feefcc12de3f9dcc16aff8000000006b483045022100e18e3d1afa8a24ecec82c92bfc05c119bfacdbb71b5f5663a4b96cc2a41ab269022017a79a1a1f6e0220d8fa1d2cf3b1c9788272f1ad18e4987b8f1cd4418acaa5b0012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff6a0d321eb52c3c7165adf80f83b15b7a5caa3a0dfa87746239021600d47fb43e000000006b483045022100937ed900e084d57d5e3341499fc66c5574884ca71cd4331fa696c8b7a517591b02201f5f851f94c3ca0ffb4789f1af22cb95dc83564e127ed7d23f1129eb2b981a2f012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac9c120100000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac2f0e135d000000000000000000000000000000"
              },
              "type": "TakerFeeValidated"
            },
            "timestamp": 1561529927879
          },
          {
            "event": {
              "data": {
                "tx_hash": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
                "tx_hex": "0400008085202f890cdcd071edda0d5f489b0be9c8b521ad608bb6d7f43f6e7a491843e7a4d0078f85000000006b483045022100fbc3bd09f8e1821ed671d1b1d2ed355833fb42c0bc435fef2da5c5b0a980b9a002204ef92b35576069d640ca0ac08f46645e5ade36afd5f19fb6aad19cfc9fb221fb012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffe6ae2a3ce221a6612d9e640bdbe10a2e477b3bc68a1aeee4a6784cb18648a785010000006a47304402202000a7e60ae2ce1529247875623ef2c5b42448dcaeac8de0f8f0e2f8e5bd8a6b0220426321a004b793172014f522efbca77a3dc92e86ce0a75330d8ceb83072ad4e7012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff9335553edcbac9559cae517a3e25b880a48fabf661c4ac338394972eef4572da000000006b4830450221008ded7230f2fb37a42b94f96174ec192baf4cd9e9e68fb9b6cf0463a36a6093e00220538de51ceda1617f3964a2350802377940fdfa018cc1043d77c66081b1cab0c4012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3fffffffff91b5d3733877f84108de77fec46bee156766e1a6837fa7b580ccbc3905acb14000000006b483045022100d07cf1fd20e07aafdc942ba56f6b45baee61b93145a2bdba391e2cdb8024bf15022056ea8183990703ef05018df2fe8bd5ec678ec0f9207b0283292b2cdafc5e1e0c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff147870387ca938b2b6e7daa96ba2496014f125c0e4e576273ef36ee8186c415a000000006a47304402204c5b15b641d7e34444456d2ea6663bdc8bd8216e309a7220814474f346b8425e0220634d1dd943b416b7a807704d7f7a3d46a60d88ef4e20734588a0b302c55fa82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd2b954ae9b4a61fad9f7bc956d24e38d7b6fe313da824bd3bd91287d5a6b49d9000000006b483045022100a7387d9ab7b2c92d3cbce525e96ffac5ae3ef14f848661741ada0db17715c4a002202c1417d5e3e04b1a2d1774a83bb8d5aa1c0536c100138123089fa69921b5d976012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff28792a2e26d9d7be0467fac52b12ece67410b23eea845008257979bd87d083e3000000006a473044022027c40517c33cd3202d4310cfd2c75f38e6d7804b255fc3838a32ea26e5a3cb0002202b4399e1d7e655b64f699318f2bfbdced49f064ee54e9d6a678668fce51caf96012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffa8bf797bacd213b74a9977ae1b956afe3af33a1ee94324e010a16db891a07441000000006a473044022004cbb1d970b9f02c578b5c1d7de33361581eebc19c3cd8d2e50b0211ca4ef13702200c93b9fe5428055b6274dc8e52073c3e87f5b5e4206134d745928ccfc9393919012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff2b6fd82c9a68111b67ad85a614a6ecb50f7b6eac3d21d8ebefd9a6065cdf5729000000006b483045022100fdff16c595c7b4a9b4fc1e445b565f7b29fe5b7a08f79291b0ff585c7b72ac2902200c694aa124013bd419ce2349f15d10435827868d35db939b9d3c344d16e78420012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff6a5468dd8c83553dc51022f2a2fb772cf91c8607dc2ca1b8f203ac534612ab29000000006b483045022100ba7cc79e7ae3720238bfc5caa225dc8017d6a0d1cb1ec66abaf724fd20b3b7ab02206e8c942756604af0f63b74af495a9b3b7f4a44c489267f69a14cf2b1b953f46e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff5f9f48a91d343fd5aef1d85f00850070931459ab256697afb728d1c81c1fa1d2000000006a47304402200ec85fc66f963e7504eb27361a4b4bb17de60e459da414fdc3962476de636134022056b62c15cf7f9b4e7d4e11c03e4e541dd348919b8c55efa4f1927e2fdd5ae8ea012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffee1f455924d3167e7f7abf452c1856e9abdcfe27dc889942dd249cb376169d38000000006b48304502210089274eed807c5d23d819f6dfa8a358a9748e56f2080be4396ef77bb19d91b17402207fc7b22c879534fffe0eeaaec8fc284e22c2756f380c05ea57b881a96b09f3af012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f5050000000017a9144eb3a361d8a15d7f6a8ef9d1cf44962a90c44d548702912b00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac490e135d000000000000000000000000000000"
              },
              "type": "MakerPaymentSent"
            },
            "timestamp": 1561529938879
          },
          {
            "event": {
              "data": {
                "tx_hash": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
                "tx_hex": ""
              },
              "type": "TakerPaymentReceived"
            },
            "timestamp": 1561529998938
          },
          {
            "event": {
              "type": "TakerPaymentWaitConfirmStarted"
            },
            "timestamp": 1561529998941
          },
          {
            "event": {
              "type": "TakerPaymentValidatedAndConfirmed"
            },
            "timestamp": 1561530000859
          },
          {
            "event": {
              "data": {
                "tx_hash": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
                "tx_hex": "0400008085202f8901a5464048246f791dca2f8cef2774125992cba7c0b820f32e7980be1de3380e7e00000000d8483045022100beca668a946fcad98da64cc56fa04edd58b4c239aa1362b4453857cc2e0042c90220606afb6272ef0773185ade247775103e715e85797816fbc204ec5128ac10a4b90120ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6004c6b6304692c135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914eb78e2f0cf001ed7dc69276afd37b25c4d6bb491882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0118ddf505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8000135d000000000000000000000000000000"
              },
              "type": "TakerPaymentSpent"
            },
            "timestamp": 1561530003429
          },
          {
            "event": {
              "type": "TakerPaymentSpendConfirmStarted"
            },
            "timestamp": 1561530003430
          },
          {
            "event": {
              "type": "TakerPaymentSpendConfirmed"
            },
            "timestamp": 1561530003522
          },
          {
            "event": {
              "type": "Finished"
            },
            "timestamp": 1561530003525
          }
        ],
        "my_info": {
          "my_amount": "1",
          "my_coin": "BEER",
          "other_amount": "1",
          "other_coin": "PIZZA",
          "started_at": 1561529842
        },
        "maker_coin": "BEER",
        "maker_amount": "1",
        "taker_coin": "PIZZA",
        "taker_amount": "1",
        "gui": null,
        "mm_version": "unknown",
        "success_events": [
          "Started",
          "Negotiated",
          "TakerFeeValidated",
          "MakerPaymentSent",
          "TakerPaymentReceived",
          "TakerPaymentWaitConfirmStarted",
          "TakerPaymentValidatedAndConfirmed",
          "TakerPaymentSpent",
          "TakerPaymentSpendConfirmStarted",
          "TakerPaymentSpendConfirmed",
          "Finished"
        ],
        "type": "Maker",
        "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa",
        "my_order_uuid": "3447b727-fe93-4357-8e5a-8cf2699b7e86"
      },
      {
        "error_events": [
          "StartFailed",
          "NegotiateFailed",
          "TakerFeeSendFailed",
          "MakerPaymentValidateFailed",
          "MakerPaymentWaitConfirmFailed",
          "TakerPaymentTransactionFailed",
          "TakerPaymentWaitConfirmFailed",
          "TakerPaymentDataSendFailed",
          "TakerPaymentWaitForSpendFailed",
          "MakerPaymentSpendFailed",
          "TakerPaymentWaitRefundStarted",
          "TakerPaymentRefunded",
          "TakerPaymentRefundFailed"
        ],
        "events": [
          {
            "event": {
              "data": {
                "lock_duration": 31200,
                "maker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                "maker_amount": "0.01",
                "maker_coin": "BEER",
                "maker_coin_start_block": 154187,
                "maker_payment_confirmations": 1,
                "maker_payment_wait": 1561492367,
                "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                "started_at": 1561481967,
                "taker_amount": "0.01",
                "taker_coin": "BCH",
                "taker_coin_start_block": 588576,
                "taker_payment_confirmations": 1,
                "taker_payment_lock": 1561513167,
                "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
              },
              "type": "Started"
            },
            "timestamp": 1561481968393
          },
          {
            "event": {
              "data": {
                "maker_payment_locktime": 1561544367,
                "maker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640",
                "secret_hash": "ba5128bcca5a2f7d2310054fb8ec51b80f352ef3"
              },
              "type": "Negotiated"
            },
            "timestamp": 1561482029079
          },
          {
            "event": {
              "data": {
                "tx_hash": "9dd7c0c8124315d7884fb0c7bf8dbfd3f3bd185c62a2ee42dfbc1e3b74f21a0e",
                "tx_hex": "0100000001f1beda7feba9fa5c52aa38027587db50b6428bbbcc053cd4ab17461fb00b89d1000000006a473044022004ad0330210e20dea416c3ff442e50dc59970c5d1a8b4d0a7d5cc61a2edc701602204459e1ee6774f1ba8258322fff72e1e1acddeb7aed2f75657458aa3deecc9465412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0207050000000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac64b61700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac2d53125d"
              },
              "type": "TakerFeeSent"
            },
            "timestamp": 1561482032294
          },
          {
            "event": {
              "data": {
                "tx_hash": "ba36c890785e3e9d4b853310ad4d79ce8175e7c4184a398128b37339321672f4",
                "tx_hex": "0400008085202f890197f703d245127e5b88471791f2820d29152046f4be133907afa8ac5542911190000000006b48304502210090e1c52aa2eba12b7c71fceab83b77f1456830a3dee1b956a831ecee5b5b353602205353a48c0129eae44b7c06a1f1651b9ceb8642374a1d5224a1e907240a978ad2012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0240420f000000000017a914192f34528c6c8cd11eefebec27f195f3894eb11187f096e605000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac4353125d000000000000000000000000000000"
              },
              "type": "MakerPaymentReceived"
            },
            "timestamp": 1561482073479
          },
          {
            "event": {
              "type": "MakerPaymentWaitConfirmStarted"
            },
            "timestamp": 1561482073482
          },
          {
            "event": {
              "type": "MakerPaymentValidatedAndConfirmed"
            },
            "timestamp": 1561482074296
          },
          {
            "event": {
              "data": {
                "tx_hash": "bc98def88d93c270ae3cdb8a098d1b939ca499bf98f7a22b97be36bca13cdbc7",
                "tx_hex": "01000000010e1af2743b1ebcdf42eea2625c18bdf3d3bf8dbfc7b04f88d7154312c8c0d79d010000006a4730440220030266d6d6435a4772cce2cebd91b6d4afffb920e23e9bc761434f105349cda002202335a050e2f28e4ca28862868141d3d7b553f3d30bceb83724ad70a32d04b0bd412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0240420f000000000017a9140094798ed4100852f10a9ad85990f19b364f4c2d873c700800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5a53125d"
              },
              "type": "TakerPaymentSent"
            },
            "timestamp": 1561482078908
          },
          {
            "event": {
              "data": {
                "secret": "66ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3",
                "transaction": {
                  "tx_hash": "eec643315d4495aa5feb5062344fe2474223dc0f231b610afd336f908ae99ebc",
                  "tx_hex": "0100000001c7db3ca1bc36be972ba2f798bf99a49c931b8d098adb3cae70c2938df8de98bc00000000d747304402202e344f8c61f2f49f4d620d687d02448cfba631a8ce8c0f8ee774da177230a75902201f4a175e7fa40f26896f522b5c51c7c0485e0ad18d3221c885e8b96b52ed1cab412066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304cfcc125db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff01583e0f00000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acfd49125d"
                }
              },
              "type": "TakerPaymentSpent"
            },
            "timestamp": 1561483355081
          },
          {
            "event": {
              "data": {
                "tx_hash": "858f07d0a4e74318497a6e3ff4d7b68b60ad21b5c8e90b9b485f0ddaed71d0dc",
                "tx_hex": "0400008085202f8901f47216323973b32881394a18c4e77581ce794dad1033854b9d3e5e7890c836ba00000000d8483045022100847a65faed4bea33c5cbccff2bee7c1292871a3b130bd2f23e696bd80c07365f02202039ea02b4463afd4f1e2b20b348d64b40aaea165f8dfb483293e2b368d536fe012066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304af46135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff01583e0f00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac4b4a125d000000000000000000000000000000"
              },
              "type": "MakerPaymentSpent"
            },
            "timestamp": 1561483358319
          },
          {
            "event": {
              "type": "Finished"
            },
            "timestamp": 1561483358321
          }
        ],
        "my_info": {
          "my_amount": "0.01",
          "my_coin": "BCH",
          "other_amount": "0.01",
          "other_coin": "BEER",
          "started_at": 1561481967
        },
        "maker_coin": "BEER",
        "maker_amount": "0.01",
        "taker_coin": "BCH",
        "taker_amount": "0.01",
        "gui": null,
        "mm_version": "unknown",
        "success_events": [
          "Started",
          "Negotiated",
          "TakerFeeSent",
          "MakerPaymentReceived",
          "MakerPaymentWaitConfirmStarted",
          "MakerPaymentValidatedAndConfirmed",
          "TakerPaymentSent",
          "TakerPaymentSpent",
          "MakerPaymentSpent",
          "Finished"
        ],
        "type": "Taker",
        "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
      }
    ]
  }
}
```

Response (error)

```json
{
  "error": "lp_swap:1454] from_uuid e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e41 swap is not found"
}
```
export const title = "Komodo DeFi Framework Method: My Swap Status";
export const description = "The my_swap_status method returns the data of an atomic swap executed on an Komodo DeFi Framework API node.";

# my\_swap\_status

**uuid**

The `my_swap_status` method returns the data of an atomic swap executed on an Komodo DeFi Framework API node.

## Arguments

| Structure   | Type   | Description                                                 |
| ----------- | ------ | ----------------------------------------------------------- |
| params uuid | string | the uuid of swap, typically received from the buy/sell call |

## Response

| Structure       | Type                       | Description                                                                                                                                                                                                                                                                                                                        |
| --------------- | -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| events          | array of objects           | A standard [SwapEvent](/komodo-defi-framework/api/common_structures/swaps/#swap-event) object. Events which occurred for a swap. See [Maker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) and [Taker Events](/komodo-defi-framework/api/common_structures/swaps/maker_events/) for more info.          |
| success\_events | array of strings           | a list of events that gained a `success` swap state; the contents are listed in the order in which they should occur in the `events` array                                                                                                                                                                                         |
| error\_events   | array of strings           | a list of events that fell into an `error` swap state; if at least 1 of the events happens, the swap is considered a failure                                                                                                                                                                                                       |
| type            | string                     | whether the node acted as a market `Maker` or `Taker`                                                                                                                                                                                                                                                                              |
| uuid            | string                     | swap uuid                                                                                                                                                                                                                                                                                                                          |
| gui             | string (optional)          | information about gui; copied from Komodo DeFi Framework API configuration (MM2.json)                                                                                                                                                                                                                                              |
| mm\_version     | string (optional)          | Komodo DeFi Framework API version                                                                                                                                                                                                                                                                                                  |
| maker\_coin     | string (optional)          | ticker of maker coin                                                                                                                                                                                                                                                                                                               |
| taker\_coin     | string (optional)          | ticker of taker coin                                                                                                                                                                                                                                                                                                               |
| maker\_amount   | string (numeric, optional) | the amount of coins to be swapped by maker                                                                                                                                                                                                                                                                                         |
| taker\_amount   | string (numeric, optional) | the amount of coins to be swapped by taker                                                                                                                                                                                                                                                                                         |
| my\_info        | object (optional)          | this object maps event data to make displaying swap data in a GUI simpler (`my_coin`, `my_amount`, etc.)                                                                                                                                                                                                                           |
| recoverable     | bool                       | whether the swap can be recovered using the `recover_funds_of_swap` API command. Important note: The Komodo DeFi Framework API does not record the state regarding whether the swap was recovered or not. The Komodo DeFi Framework API allows as many calls to the `recover_funds_of_swap` method as necessary, in case of errors |
| my\_order\_uuid | string (uuid, optional)    | the uuid of order that matched to start the swap                                                                                                                                                                                                                                                                                   |

#### 📌 Examples

#### Command

```json
{
  "method": "my_swap_status",
  "params": {
    "uuid": "d14452bb-e82d-44a0-86b0-10d4cdcb8b24"
  },
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Successful Taker Swap

```json
{
  "result": {
    "type": "Taker",
    "uuid": "0d72c435-821e-4278-b2a7-e36ab1ba8cb7",
    "my_order_uuid": "0d72c435-821e-4278-b2a7-e36ab1ba8cb7",
    "events": [
      {
        "timestamp": 1674802079095,
        "event": {
          "type": "Started",
          "data": {
            "taker_coin": "MARTY",
            "maker_coin": "DOC",
            "maker": "7310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
            "my_persistent_pub": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
            "lock_duration": 7800,
            "maker_amount": "1",
            "taker_amount": "1",
            "maker_payment_confirmations": 1,
            "maker_payment_requires_nota": false,
            "taker_payment_confirmations": 0,
            "taker_payment_requires_nota": false,
            "taker_payment_lock": 1674809878,
            "uuid": "0d72c435-821e-4278-b2a7-e36ab1ba8cb7",
            "started_at": 1674802078,
            "maker_payment_wait": 1674805198,
            "maker_coin_start_block": 1800637,
            "taker_coin_start_block": 1813161,
            "fee_to_send_taker_fee": {
              "coin": "MARTY",
              "amount": "0.00001",
              "paid_from_trading_vol": false
            },
            "taker_payment_trade_fee": {
              "coin": "MARTY",
              "amount": "0.00002",
              "paid_from_trading_vol": false
            },
            "maker_payment_spend_trade_fee": {
              "coin": "DOC",
              "amount": "0.00001",
              "paid_from_trading_vol": true
            },
            "maker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
            "taker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
            "p2p_privkey": null
          }
        }
      },
      {
        "timestamp": 1674802095105,
        "event": {
          "type": "Negotiated",
          "data": {
            "maker_payment_locktime": 1674817676,
            "maker_pubkey": "000000000000000000000000000000000000000000000000000000000000000000",
            "secret_hash": "9af6a305578518d693fca3f1e4c529224a81f654",
            "maker_coin_swap_contract_addr": null,
            "taker_coin_swap_contract_addr": null,
            "maker_coin_htlc_pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
            "taker_coin_htlc_pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5"
          }
        }
      },
      {
        "timestamp": 1674802095885,
        "event": {
          "type": "TakerFeeSent",
          "data": {
            "tx_hex": "0400008085202f89014b9e44ba75ed80361776ac385feee7bba13b6c2d3147a3d9b5d71362a4624219000000006b483045022100a45de07b5d211c62e8ecf90cd5bee5076f6b6f20715f5618d7d0d93a6209ad870220596ca01682d2dbd4efeba3a0e90a373fd61b619471747df26afc2e2bb167de4c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88acf4979600000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acaf73d363000000000000000000000000000000",
            "tx_hash": "b2ee0e692523c5ca081f62e36325d09a629004850be8b86df149fc979e9e3e87"
          }
        }
      },
      {
        "timestamp": 1674802097888,
        "event": {
          "type": "TakerPaymentInstructionsReceived",
          "data": null
        }
      },
      {
        "timestamp": 1674802097890,
        "event": {
          "type": "MakerPaymentReceived",
          "data": {
            "tx_hex": "0400008085202f89036aefd7ae1e6933ef997ad44adf5d0c19bc2bbede499a3421eb2022d06fa772f7000000006b4830450221009ad555b27ee9d0e2044bfc14aec47c160819d79dfaacc36e0426b4c35b5626aa02207624ef91881e42b210f16ce96bca00ce3d7cde46e7aaca76bd39f3aa64489e940121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff66f0d84da9abf07914969af7479934a518a5363353e0968efebc78eac561f07e020000006a4730440220597126d39bb86ce6f6e478eeae7714daa08d05d57df69e641293d70cfe78f510022037bdff2a77ead08b8a60cafff9524beacf28513499e57a15615e66955e51636e0121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffffffe65f8d99d56844f9f5c94a590bf4d6cca116b170fee21e6c04c1a4ab39f4a7000000006a47304402202f2ab19d0f70bfbbc649e78eeda8c14afc72e41a80c9f81c25466307cef619440220466ed647fe07cc75dba20176c05aef671c04cb929e30ce4988014e1c553fe84b0121037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ffffffff0300e1f5050000000017a914252fe9c1a8b61a9ca1da6bcbc017e4677e89c480870000000000000000166a149af6a305578518d693fca3f1e4c529224a81f654798b0306000000001976a91486f747b28c60ad1130bdd3f84f48eeaf1801ca9888acb173d363000000000000000000000000000000",
            "tx_hash": "879535fa1057a1f2587245f0d656ff4126848060574b85f581f7ac57200dcf80"
          }
        }
      },
      {
        "timestamp": 1674802097894,
        "event": {
          "type": "MakerPaymentWaitConfirmStarted"
        }
      },
      {
        "timestamp": 1674802191003,
        "event": {
          "type": "MakerPaymentValidatedAndConfirmed"
        }
      },
      {
        "timestamp": 1674802192167,
        "event": {
          "type": "TakerPaymentSent",
          "data": {
            "tx_hex": "0400008085202f8908873e9e9e97fc49f16db8e80b850490629ad02563e3621f08cac52325690eeeb2010000006a47304402204208734d38019ab1940348bd5091b392cab57565591f26447cdb5396e006dba50220365770af3714083901571635407d43dc87e9abfc05b382c8fde598f624eae2d1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffc895dd30ec91dafeb8023af40625a367aaf2a835141c537a4c746fe27e8160b8000000006a4730440220432cb8c44befb2fb076979f275aa205ddd9853a296f7b6df0bfb15dcd7e659fd0220741262c04a3697e474474cdb1e18c908511a7edfec9a7d350403bd8c90039a93012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffaad904fafd259e9d5960866964c2e2752853b36dcd7bf205196e443f1f611453000000006b483045022100982d3ffb1a0bab130fc51071c0e60de08354161f8ba29593cbb849de31152da502200d74a8edbadf816b2076b14c74b5236b6d98ced09f6700b7411f008726b7d570012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff354c776ffd2c883236d9135ea72e5991adf27f10f5fdc39e42be9be0d748539b000000006a4730440220742fa6411298f2c02edb690327860729d6a90c74b35f529065f6c15d29e609c20220008b68bd92a7f3c8ac8f00d161658a315103c3e2783c62e57172202c3db6016c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2fffffffff191e32dca5ace0ca52c8d4dfa59a1e12e5c32968e08c7289fb7e4823fd119c2000000006b483045022100d1ba0bf5aadc658f61d6a348cfd3edaf2341ebafb12209d1da375130d8d17a8602201b09147377c70fead7f8dba9d9d0f2335c85b960e76affeb05cc7bff6cbb7aff012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffd3cfdb64be12f201fa3ae27871f200f395c014864f87b9744e51540a769ab58c000000006a473044022030214231517e3787c9bf6f85695401d5923ec3d69a5eead708986bc0490bcab302201073be01e5298baaa65f80d6e35dfde54ff81469439e27d741719c31779065f6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffa945e0db62d26072c2b20b1e7a959e9cdf09ad840584ae1467264e2658b1f1ca010000006b483045022100aa0f00f2f60dac8ab5944183804a6a92c8b4f6a8cd29a027cac20e6a494a6c3d0220457ff0d4ca023e1f311485c42088043fa5f9a0c37c583ffb510f9caa2fe6b210012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff1a95c4f75da608bc81f39bed78dc6658da2042ecf1d2cd4da1980a0cc404e2f1010000006b483045022100e933ef22abfb3c6832ecda2b7465a8e218fb2ce7fb4cef2733e7424e6cc5e41f022001e8a9635b5377fe211fb4821557afb7eabe45b04028526e017c8e615a5d4320012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0300e1f5050000000017a9144a8ff1f3c9a654f6ef8b4b12773c8d242ef3cfaa870000000000000000166a149af6a305578518d693fca3f1e4c529224a81f6546761eb02000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac0f74d363000000000000000000000000000000",
            "tx_hash": "c6536056800b211635c4f64dbe941a967361fbe92c0c4d4c575f157f922a080a"
          }
        }
      },
      {
        "timestamp": 1674802203724,
        "event": {
          "type": "TakerPaymentSpent",
          "data": {
            "transaction": {
              "tx_hex": "0400008085202f89010a082a927f155f574c4d0c2ce9fb6173961a94be4df6c43516210b80566053c600000000d747304402202ad8f7c2319e6097f5d28953bf45b02ec4501cf82b849d3f2286c8e98aa1ab6d02205e631875f0ff327c24665213195d29f86ba015a0d7c3e134e14b9109331375fc01201e2e0289634d42865e0f82ff0546ce2a384ae3548fb3f927c4aa1faefb0aa5d4004c6b63041692d363b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a9149af6a305578518d693fca3f1e4c529224a81f6548821037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ac68ffffffff0118ddf505000000001976a91486f747b28c60ad1130bdd3f84f48eeaf1801ca9888ac1692d363000000000000000000000000000000",
              "tx_hash": "9a72b62bb99bee92f9e3a047c65fcf7cdd3fc8443286c97647550df42f0f81d4"
            },
            "secret": "1e2e0289634d42865e0f82ff0546ce2a384ae3548fb3f927c4aa1faefb0aa5d4"
          }
        }
      },
      {
        "timestamp": 1674802205274,
        "event": {
          "type": "MakerPaymentSpent",
          "data": {
            "tx_hex": "0400008085202f890180cf0d2057acf781f5854b576080842641ff56d6f0457258f2a15710fa35958700000000d74730440220159ac3c574bed4473bd6da6eb4b37a3c073dbe5311a4648795f2b0c02b68ef8d022034bc743cbe656b3d335a138f21093fcc9039f50bff40cf56e2654eb9eb225ca901201e2e0289634d42865e0f82ff0546ce2a384ae3548fb3f927c4aa1faefb0aa5d4004c6b63048cb0d363b17521037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5ac6782012088a9149af6a305578518d693fca3f1e4c529224a81f654882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118ddf505000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac8cb0d363000000000000000000000000000000",
            "tx_hash": "02c6bc927712478b866c3303cfdfacb868545a6730513605d4d7b5b2dbe97b09"
          }
        }
      },
      {
        "timestamp": 1674802205278,
        "event": {
          "type": "Finished"
        }
      }
    ],
    "maker_amount": "1",
    "maker_coin": "DOC",
    "maker_coin_usd_price": null,
    "taker_amount": "1",
    "taker_coin": "MARTY",
    "taker_coin_usd_price": null,
    "gui": "MM2CLI",
    "mm_version": "2.1.9780_dev_89f720751_Linux_CI",
    "success_events": [
      "Started",
      "Negotiated",
      "TakerFeeSent",
      "TakerPaymentInstructionsReceived",
      "MakerPaymentReceived",
      "MakerPaymentWaitConfirmStarted",
      "MakerPaymentValidatedAndConfirmed",
      "TakerPaymentSent",
      "TakerPaymentSpent",
      "MakerPaymentSpent",
      "Finished"
    ],
    "error_events": [
      "StartFailed",
      "NegotiateFailed",
      "TakerFeeSendFailed",
      "MakerPaymentValidateFailed",
      "MakerPaymentWaitConfirmFailed",
      "TakerPaymentTransactionFailed",
      "TakerPaymentWaitConfirmFailed",
      "TakerPaymentDataSendFailed",
      "TakerPaymentWaitForSpendFailed",
      "MakerPaymentSpendFailed",
      "TakerPaymentWaitRefundStarted",
      "TakerPaymentRefundStarted",
      "TakerPaymentRefunded",
      "TakerPaymentRefundFailed",
      "TakerPaymentRefundFinished"
    ],
    "my_info": {
      "my_coin": "MARTY",
      "other_coin": "DOC",
      "my_amount": "1",
      "other_amount": "1",
      "started_at": 1674802078
    },
    "recoverable": false
  }
}
```

#### Taker Swap Failed with MakerPaymentSpendFailed Event

```json
{
  "error_events": [
    "StartFailed",
    "NegotiateFailed",
    "TakerFeeSendFailed",
    "MakerPaymentValidateFailed",
    "MakerPaymentWaitConfirmFailed",
    "TakerPaymentTransactionFailed",
    "TakerPaymentWaitConfirmFailed",
    "TakerPaymentDataSendFailed",
    "TakerPaymentWaitForSpendFailed",
    "MakerPaymentSpendFailed",
    "TakerPaymentWaitRefundStarted",
    "TakerPaymentRefunded",
    "TakerPaymentRefundFailed"
  ],
  "events": [
    {
      "event": {
        "data": {
          "lock_duration": 7800,
          "maker": "1bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
          "maker_amount": "0.12596566232185483",
          "maker_coin": "KMD",
          "maker_coin_start_block": 1458035,
          "maker_payment_confirmations": 1,
          "maker_payment_wait": 1564053079,
          "my_persistent_pub": "0326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0a",
          "started_at": 1564050479,
          "taker_amount": "50.000000000000001504212457800000",
          "taker_coin": "DOGE",
          "taker_coin_start_block": 2823448,
          "taker_payment_confirmations": 1,
          "taker_payment_lock": 1564058279,
          "uuid": "41383f43-46a5-478c-9386-3b2cce0aca20"
        },
        "type": "Started"
      },
      "timestamp": 1564050480269
    },
    {
      "event": {
        "data": {
          "maker_payment_locktime": 1564066080,
          "maker_pubkey": "031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
          "secret_hash": "3669eb83a007a3c507448d79f45a9f06ec2f36a8"
        },
        "type": "Negotiated"
      },
      "timestamp": 1564050540991
    },
    {
      "event": {
        "data": {
          "tx_hash": "bdde828b492d6d1cc25cd2322fd592dafd722fcc7d8b0fedce4d3bb4a1a8c8ff",
          "tx_hex": "0100000002c7efa995c8b7be0a8b6c2d526c6c444c1634d65584e9ee89904e9d8675eac88c010000006a473044022051f34d5e3b7d0b9098d5e35333f3550f9cb9e57df83d5e4635b7a8d2986d6d5602200288c98da05de6950e01229a637110a1800ba643e75cfec59d4eb1021ad9b40801210326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0affffffffae6c233989efa7c7d2aa6534adc96078917ff395b7f09f734a147b2f44ade164000000006a4730440220393a784c2da74d0e2a28ec4f7df6c8f9d8b2af6ae6957f1e68346d744223a8fd02201b7a96954ac06815a43a6c7668d829ae9cbb5de76fa77189ddfd9e3038df662c01210326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0affffffff02115f5800000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac41a84641020000001976a914444f0e1099709ba4d742454a7d98a5c9c162ceab88ac6d84395d"
        },
        "type": "TakerFeeSent"
      },
      "timestamp": 1564050545296
    },
    {
      "event": {
        "data": {
          "tx_hash": "0a0f11fa82802c2c30862c50ab2162185dae8de7f7235f32c506f814c142b382",
          "tx_hex": "0400008085202f8902ace337db2dd4c56b0697f58fb8cfb6bd1cd6f469d925fc0376d1dcfb7581bf82000000006b483045022100d1f95be235c5c8880f5d703ace287e2768548792c58c5dbd27f5578881b30ea70220030596106e21c7e0057ee0dab283f9a1fe273f15208cba80870c447bd559ef0d0121031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8ffffffff9f339752567c404427fd77f2b35cecdb4c21489edc64e25e729fdb281785e423000000006a47304402203179e95877dbc107123a417f1e648e3ff13d384890f1e4a67b6dd5087235152e0220102a8ab799fadb26b5d89ceb9c7bc721a7e0c2a0d0d7e46bbe0cf3d130010d430121031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8ffffffff025635c0000000000017a91480a95d366d65e34a465ab17b0c9eb1d5a33bae08876cbfce05000000001976a914c3f710deb7320b0efa6edb14e3ebeeb9155fa90d88ac8d7c395d000000000000000000000000000000"
        },
        "type": "MakerPaymentReceived"
      },
      "timestamp": 1564050588176
    },
    {
      "event": {
        "type": "MakerPaymentWaitConfirmStarted"
      },
      "timestamp": 1564050588178
    },
    {
      "event": {
        "type": "MakerPaymentValidatedAndConfirmed"
      },
      "timestamp": 1564050693585
    },
    {
      "event": {
        "data": {
          "tx_hash": "539cb6dbdc25465bbccc575554f05d1bb04c70efce4316e41194e747375c3659",
          "tx_hex": "0100000001ffc8a8a1b43b4dceed0f8b7dcc2f72fdda92d52f32d25cc21c6d2d498b82debd010000006a47304402203967b7f9f5532fa47116585c7d1bcba51861ea2059cca00409f34660db18e33a0220640991911852533a12fdfeb039fb9c8ca2c45482c6993bd84636af3670d49c1501210326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0affffffff0200f2052a0100000017a914f2fa08ae416b576779ae5da975e5442663215fce87415173f9000000001976a914444f0e1099709ba4d742454a7d98a5c9c162ceab88ac0585395d"
        },
        "type": "TakerPaymentSent"
      },
      "timestamp": 1564050695611
    },
    {
      "event": {
        "data": {
          "secret": "1b8886b8a2cdb62505699400b694ac20f04d7bd4abd80e1ab154aa8d861fc093",
          "transaction": {
            "tx_hash": "cc5af1cf68d246419fee49c3d74c0cd173599d115b86efe274368a614951bc47",
            "tx_hex": "010000000159365c3747e79411e41643ceef704cb01b5df0545557ccbc5b4625dcdbb69c5300000000d747304402200e78e27d2f1c18676f98ca3dfa4e4a9eeaa8209b55f57b4dd5d9e1abdf034cfa0220623b5c22b62234cec230342aa306c497e43494b44ec2425b84e236b1bf01257001201b8886b8a2cdb62505699400b694ac20f04d7bd4abd80e1ab154aa8d861fc093004c6b6304a7a2395db175210326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0aac6782012088a9143669eb83a007a3c507448d79f45a9f06ec2f36a88821031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8ac68ffffffff01008d380c010000001976a914c3f710deb7320b0efa6edb14e3ebeeb9155fa90d88ac8c77395d"
          }
        },
        "type": "TakerPaymentSpent"
      },
      "timestamp": 1564051092890
    },
    {
      "event": {
        "data": {
          "error": "lp_swap:1981] utxo:891] rpc_clients:738] JsonRpcError { request: JsonRpcRequest { jsonrpc: \"2.0\", id: \"67\", method: \"blockchain.transaction.broadcast\", params: [String(\"0400008085202f890182b342c114f806c5325f23f7e78dae5d186221ab502c86302c2c8082fa110f0a00000000d7473044022035791ea5548f87484065c9e1f0bdca9ebc699f2c7f51182c84f360102e32dc3d02200612ed53bca52d9c2568437f087598531534badf26229fe0f652ea72ddf03ca501201b8886b8a2cdb62505699400b694ac20f04d7bd4abd80e1ab154aa8d861fc093004c6b630420c1395db17521031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8ac6782012088a9143669eb83a007a3c507448d79f45a9f06ec2f36a888210326846707a52a233cfc49a61ef51b1698bbe6aa78fa8b8d411c02743c09688f0aac68ffffffff01460ec000000000001976a914444f0e1099709ba4d742454a7d98a5c9c162ceab88ac967e395d000000000000000000000000000000\")] }, error: Transport(\"rpc_clients:668] All electrums are currently disconnected\") }"
        },
        "type": "MakerPaymentSpendFailed"
      },
      "timestamp": 1564051092897
    },
    {
      "event": {
        "type": "Finished"
      },
      "timestamp": 1564051092900
    }
  ],
  "success_events": [
    "Started",
    "Negotiated",
    "TakerFeeSent",
    "MakerPaymentReceived",
    "MakerPaymentWaitConfirmStarted",
    "MakerPaymentValidatedAndConfirmed",
    "TakerPaymentSent",
    "TakerPaymentSpent",
    "MakerPaymentSpent",
    "Finished"
  ],
  "uuid": "41383f43-46a5-478c-9386-3b2cce0aca20"
}
```

#### Successful Maker Swap

```json
{
  "result": {
    "error_events": [
      "StartFailed",
      "NegotiateFailed",
      "TakerFeeValidateFailed",
      "MakerPaymentTransactionFailed",
      "MakerPaymentDataSendFailed",
      "MakerPaymentWaitConfirmFailed",
      "TakerPaymentValidateFailed",
      "TakerPaymentWaitConfirmFailed",
      "TakerPaymentSpendFailed",
      "TakerPaymentSpendConfirmFailed",
      "MakerPaymentWaitRefundStarted",
      "MakerPaymentRefunded",
      "MakerPaymentRefundFailed"
    ],
    "events": [
      {
        "event": {
          "data": {
            "lock_duration": 7800,
            "maker_amount": "1",
            "maker_coin": "BEER",
            "maker_coin_start_block": 154221,
            "maker_payment_confirmations": 1,
            "maker_payment_lock": 1561545442,
            "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
            "secret": "ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6",
            "started_at": 1561529842,
            "taker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
            "taker_amount": "1",
            "taker_coin": "PIZZA",
            "taker_coin_start_block": 141363,
            "taker_payment_confirmations": 1,
            "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
          },
          "type": "Started"
        },
        "timestamp": 1561529842866
      },
      {
        "event": {
          "data": {
            "taker_payment_locktime": 1561537641,
            "taker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640"
          },
          "type": "Negotiated"
        },
        "timestamp": 1561529883208
      },
      {
        "event": {
          "data": {
            "tx_hash": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
            "tx_hex": "0400008085202f89021c7eeec33f8eb5ff2ed6c3d09e40e04b05a9674ea2feefcc12de3f9dcc16aff8000000006b483045022100e18e3d1afa8a24ecec82c92bfc05c119bfacdbb71b5f5663a4b96cc2a41ab269022017a79a1a1f6e0220d8fa1d2cf3b1c9788272f1ad18e4987b8f1cd4418acaa5b0012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff6a0d321eb52c3c7165adf80f83b15b7a5caa3a0dfa87746239021600d47fb43e000000006b483045022100937ed900e084d57d5e3341499fc66c5574884ca71cd4331fa696c8b7a517591b02201f5f851f94c3ca0ffb4789f1af22cb95dc83564e127ed7d23f1129eb2b981a2f012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac9c120100000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac2f0e135d000000000000000000000000000000"
          },
          "type": "TakerFeeValidated"
        },
        "timestamp": 1561529927879
      },
      {
        "event": {
          "data": {
            "tx_hash": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
            "tx_hex": "0400008085202f890cdcd071edda0d5f489b0be9c8b521ad608bb6d7f43f6e7a491843e7a4d0078f85000000006b483045022100fbc3bd09f8e1821ed671d1b1d2ed355833fb42c0bc435fef2da5c5b0a980b9a002204ef92b35576069d640ca0ac08f46645e5ade36afd5f19fb6aad19cfc9fb221fb012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffe6ae2a3ce221a6612d9e640bdbe10a2e477b3bc68a1aeee4a6784cb18648a785010000006a47304402202000a7e60ae2ce1529247875623ef2c5b42448dcaeac8de0f8f0e2f8e5bd8a6b0220426321a004b793172014f522efbca77a3dc92e86ce0a75330d8ceb83072ad4e7012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff9335553edcbac9559cae517a3e25b880a48fabf661c4ac338394972eef4572da000000006b4830450221008ded7230f2fb37a42b94f96174ec192baf4cd9e9e68fb9b6cf0463a36a6093e00220538de51ceda1617f3964a2350802377940fdfa018cc1043d77c66081b1cab0c4012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3fffffffff91b5d3733877f84108de77fec46bee156766e1a6837fa7b580ccbc3905acb14000000006b483045022100d07cf1fd20e07aafdc942ba56f6b45baee61b93145a2bdba391e2cdb8024bf15022056ea8183990703ef05018df2fe8bd5ec678ec0f9207b0283292b2cdafc5e1e0c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff147870387ca938b2b6e7daa96ba2496014f125c0e4e576273ef36ee8186c415a000000006a47304402204c5b15b641d7e34444456d2ea6663bdc8bd8216e309a7220814474f346b8425e0220634d1dd943b416b7a807704d7f7a3d46a60d88ef4e20734588a0b302c55fa82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd2b954ae9b4a61fad9f7bc956d24e38d7b6fe313da824bd3bd91287d5a6b49d9000000006b483045022100a7387d9ab7b2c92d3cbce525e96ffac5ae3ef14f848661741ada0db17715c4a002202c1417d5e3e04b1a2d1774a83bb8d5aa1c0536c100138123089fa69921b5d976012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff28792a2e26d9d7be0467fac52b12ece67410b23eea845008257979bd87d083e3000000006a473044022027c40517c33cd3202d4310cfd2c75f38e6d7804b255fc3838a32ea26e5a3cb0002202b4399e1d7e655b64f699318f2bfbdced49f064ee54e9d6a678668fce51caf96012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffa8bf797bacd213b74a9977ae1b956afe3af33a1ee94324e010a16db891a07441000000006a473044022004cbb1d970b9f02c578b5c1d7de33361581eebc19c3cd8d2e50b0211ca4ef13702200c93b9fe5428055b6274dc8e52073c3e87f5b5e4206134d745928ccfc9393919012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff2b6fd82c9a68111b67ad85a614a6ecb50f7b6eac3d21d8ebefd9a6065cdf5729000000006b483045022100fdff16c595c7b4a9b4fc1e445b565f7b29fe5b7a08f79291b0ff585c7b72ac2902200c694aa124013bd419ce2349f15d10435827868d35db939b9d3c344d16e78420012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff6a5468dd8c83553dc51022f2a2fb772cf91c8607dc2ca1b8f203ac534612ab29000000006b483045022100ba7cc79e7ae3720238bfc5caa225dc8017d6a0d1cb1ec66abaf724fd20b3b7ab02206e8c942756604af0f63b74af495a9b3b7f4a44c489267f69a14cf2b1b953f46e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff5f9f48a91d343fd5aef1d85f00850070931459ab256697afb728d1c81c1fa1d2000000006a47304402200ec85fc66f963e7504eb27361a4b4bb17de60e459da414fdc3962476de636134022056b62c15cf7f9b4e7d4e11c03e4e541dd348919b8c55efa4f1927e2fdd5ae8ea012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffee1f455924d3167e7f7abf452c1856e9abdcfe27dc889942dd249cb376169d38000000006b48304502210089274eed807c5d23d819f6dfa8a358a9748e56f2080be4396ef77bb19d91b17402207fc7b22c879534fffe0eeaaec8fc284e22c2756f380c05ea57b881a96b09f3af012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f5050000000017a9144eb3a361d8a15d7f6a8ef9d1cf44962a90c44d548702912b00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac490e135d000000000000000000000000000000"
          },
          "type": "MakerPaymentSent"
        },
        "timestamp": 1561529938879
      },
      {
        "event": {
          "data": {
            "tx_hash": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
            "tx_hex": ""
          },
          "type": "TakerPaymentReceived"
        },
        "timestamp": 1561529998938
      },
      {
        "event": {
          "type": "TakerPaymentWaitConfirmStarted"
        },
        "timestamp": 1561529998941
      },
      {
        "event": {
          "type": "TakerPaymentValidatedAndConfirmed"
        },
        "timestamp": 1561530000859
      },
      {
        "event": {
          "data": {
            "tx_hash": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
            "tx_hex": "0400008085202f8901a5464048246f791dca2f8cef2774125992cba7c0b820f32e7980be1de3380e7e00000000d8483045022100beca668a946fcad98da64cc56fa04edd58b4c239aa1362b4453857cc2e0042c90220606afb6272ef0773185ade247775103e715e85797816fbc204ec5128ac10a4b90120ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6004c6b6304692c135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914eb78e2f0cf001ed7dc69276afd37b25c4d6bb491882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0118ddf505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8000135d000000000000000000000000000000"
          },
          "type": "TakerPaymentSpent"
        },
        "timestamp": 1561530003429
      },
      {
        "event": {
          "type": "TakerPaymentSpendConfirmStarted"
        },
        "timestamp": 1561530003430
      },
      {
        "event": {
          "type": "TakerPaymentSpendConfirmed"
        },
        "timestamp": 1561530003522
      },
      {
        "event": {
          "type": "Finished"
        },
        "timestamp": 1561530003525
      }
    ],
    "my_info": {
      "my_amount": "1",
      "my_coin": "BEER",
      "other_amount": "1",
      "other_coin": "PIZZA",
      "started_at": 1561529842
    },
    "maker_coin": "BEER",
    "maker_amount": "1",
    "taker_coin": "PIZZA",
    "taker_amount": "1",
    "gui": "KomodoWallet 1.0",
    "mm_version": "unknown",
    "recoverable": false,
    "success_events": [
      "Started",
      "Negotiated",
      "TakerFeeValidated",
      "MakerPaymentSent",
      "TakerPaymentReceived",
      "TakerPaymentWaitConfirmStarted",
      "TakerPaymentValidatedAndConfirmed",
      "TakerPaymentSpent",
      "TakerPaymentSpendConfirmStarted",
      "TakerPaymentSpendConfirmed",
      "Finished"
    ],
    "type": "Maker",
    "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa",
    "my_order_uuid": "3447b727-fe93-4357-8e5a-8cf2699b7e86"
  }
}
```

#### Maker Swap Failed with MakerPaymentTransactionFailed Event

```json
{
  "error_events": [
    "StartFailed",
    "NegotiateFailed",
    "TakerFeeValidateFailed",
    "MakerPaymentTransactionFailed",
    "MakerPaymentDataSendFailed",
    "MakerPaymentWaitConfirmFailed",
    "TakerPaymentValidateFailed",
    "TakerPaymentWaitConfirmFailed",
    "TakerPaymentSpendFailed",
    "TakerPaymentSpendConfirmFailed",
    "MakerPaymentWaitRefundStarted",
    "MakerPaymentRefunded",
    "MakerPaymentRefundFailed"
  ],
  "events": [
    {
      "event": {
        "data": {
          "lock_duration": 7800,
          "maker_amount": "3.54932734",
          "maker_coin": "KMD",
          "maker_coin_start_block": 1452970,
          "maker_payment_confirmations": 1,
          "maker_payment_lock": 1563759539,
          "my_persistent_pub": "031bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
          "secret": "0000000000000000000000000000000000000000000000000000000000000000",
          "started_at": 1563743939,
          "taker": "101ace6b08605b9424b0582b5cce044b70a3c8d8d10cb2965e039b0967ae92b9",
          "taker_amount": "0.02004833998671660000000000",
          "taker_coin": "ETH",
          "taker_coin_start_block": 8196380,
          "taker_payment_confirmations": 1,
          "uuid": "3447b727-fe93-4357-8e5a-8cf2699b7e86"
        },
        "type": "Started"
      },
      "timestamp": 1563743939211
    },
    {
      "event": {
        "data": {
          "taker_payment_locktime": 1563751737,
          "taker_pubkey": "03101ace6b08605b9424b0582b5cce044b70a3c8d8d10cb2965e039b0967ae92b9"
        },
        "type": "Negotiated"
      },
      "timestamp": 1563743979835
    },
    {
      "event": {
        "data": {
          "tx_hash": "a59203eb2328827de00bed699a29389792906e4f39fdea145eb40dc6b3821bd6",
          "tx_hex": "f8690284ee6b280082520894d8997941dd1346e9231118d5685d866294f59e5b865af3107a4000801ca0743d2b7c9fad65805d882179062012261be328d7628ae12ee08eff8d7657d993a07eecbd051f49d35279416778faa4664962726d516ce65e18755c9b9406a9c2fd"
        },
        "type": "TakerFeeValidated"
      },
      "timestamp": 1563744052878
    },
    {
      "event": {
        "data": {
          "error": "lp_swap:1888] eth:654] RPC error: Error { code: ServerError(-32010), message: \"Transaction with the same hash was already imported.\", data: None }"
        },
        "type": "MakerPaymentTransactionFailed"
      },
      "timestamp": 1563744118577
    },
    {
      "event": {
        "type": "Finished"
      },
      "timestamp": 1563763243350
    }
  ],
  "success_events": [
    "Started",
    "Negotiated",
    "TakerFeeValidated",
    "MakerPaymentSent",
    "TakerPaymentReceived",
    "TakerPaymentWaitConfirmStarted",
    "TakerPaymentValidatedAndConfirmed",
    "TakerPaymentSpent",
    "TakerPaymentSpendConfirmStarted",
    "TakerPaymentSpendConfirmed",
    "Finished"
  ],
  "uuid": "3447b727-fe93-4357-8e5a-8cf2699b7e86"
}
```

#### Response (error)

```json
{
  "error": "swap data is not found"
}
```
export const title = "Komodo DeFi Framework Method: My TX History";
export const description =
  "The my_tx_history method returns the blockchain transactions involving the Komodo DeFi Framework API node's coin address.";

# my\_tx\_history

**my\_tx\_history (from\_id limit=10 max=false page\_number)**

The `my_tx_history` method returns the blockchain transactions involving the Komodo DeFi Framework API node's coin address.

The coin that is used must have `tx_history` set to true in its [enable](/komodo-defi-framework/api/legacy/coin_activation/#enable-method) or [electrum](/komodo-defi-framework/api/legacy/coin_activation/#electrum-method) call.

## Arguments

| Structure    | Type   | Description                                                                                                                                                                                                       |
| ------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin         | string | the name of the coin for the history request                                                                                                                                                                      |
| limit        | number | limits the number of returned transactions; ignored if `max = true`                                                                                                                                               |
| max          | bool   | whether to return all available records; defaults to `false`                                                                                                                                                      |
| from\_id     | string | Komodo DeFi Framework API will skip records until it reaches this ID, skipping the `from_id` as well; track the `internal_id` of the last displayed transaction to find the value of this field for the next page |
| page\_number | number | Komodo DeFi Framework API will return limit swaps from the selected page; This param will be ignored if from\_uuid is set.                                                                                        |

## Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "coin": "DOC",
  "limit": 1,
  "from_id": "1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1"
}
```

#### Command (max = true)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "coin": "DOC",
  "max": true,
  "from_id": "1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1"
}
```

#### Response (success)

```json
{
  "result": {
    "current_block": 172418,
    "from_id": null,
    "limit": 1,
    "skipped": 0,
    "sync_status": {
      "additional_info": {
        "transactions_left": 126
      },
      "state": "InProgress"
    },
    "total": 5915,
    "total_pages": 5915,
    "page_number": null,
    "transactions": [
      {
        "block_height": 172409,
        "coin": "ETOMIC",
        "confirmations": 10,
        "fee_details": {
          "type": "Utxo",
          "amount": "0.00001"
        },
        "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
        "internal_id": "903e5d71b8717205314a71055fe8bbb868e7b76d001fbe813a34bd71ff131e93",
        "my_balance_change": "-0.10001",
        "received_by_me": "0.8998513",
        "spent_by_me": "0.9998613",
        "timestamp": 1566539526,
        "to": [
          "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
          "bJrMTiiRiLHJHc6RKQgesKTg1o9VVuKwT5"
        ],
        "total_amount": "0.9998613",
        "tx_hash": "903e5d71b8717205314a71055fe8bbb868e7b76d001fbe813a34bd71ff131e93",
        "tx_hex": "0400008085202f8901a242dc691de64c732e823ed0a4d8cfa6a230f8e31bc9bd21499009f1a90b855a010000006b483045022100d83113119004ac0504f812a853a831039dfc4b0bc1cb863d2c7a94c0670f07e902206af87b846b18c0d5e38bd874d43918e0400e4b6b838ab0793f5976843daa20cd012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02809698000000000017a9144327a5516b28f66249576c18d15debf6dfbd1124876a105d05000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac047f5f5d000000000000000000000000000000"
      }
    ]
  }
}
```

#### Response (error)

```json
{
  "error": "lp_coins:1011] from_id 1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e2 is not found"
}
```

#### Response (History too large in electrum mode)

```json
{
  "result": {
    "current_block": 144753,
    "from_id": null,
    "limit": 0,
    "skipped": 0,
    "sync_status": {
      "additional_info": {
        "code": -1,
        "message": "Got `history too large` error from Electrum server. History is not available"
      },
      "state": "Error"
    },
    "total": 0,
    "transactions": []
  }
}
```

#### Response (Sync in progress for UTXO coins)

```json
{
  "result": {
    "current_block": 148300,
    "from_id": null,
    "limit": 0,
    "skipped": 0,
    "sync_status": {
      "additional_info": {
        "transactions_left": 1656
      },
      "state": "InProgress"
    },
    "total": 3956,
    "transactions": []
  }
}
```

#### Response (Sync in progress for ETH/ERC20 coins)

```json
{
  "result": {
    "current_block": 8039935,
    "from_id": null,
    "limit": 0,
    "skipped": 0,
    "sync_status": {
      "additional_info": {
        "blocks_left": 2158991
      },
      "state": "InProgress"
    },
    "total": 0,
    "transactions": []
  }
}
```

#### Response (Successful result in case of ETH/ERC20 coins)

```json
{
  "result": {
    "current_block": 9071551,
    "from_id": null,
    "limit": 3,
    "skipped": 0,
    "total_pages": 14,
    "page_number": 1,
    "sync_status": {
      "state": "Finished"
    },
    "total": 41,
    "transactions": [
      {
        "block_height": 8980257,
        "coin": "ETH",
        "confirmations": 91295,
        "fee_details": {
          "type": "Eth",
          "coin": "ETH",
          "gas": 57196,
          "gas_price": "0.000000027",
          "total_fee": "0.001544292"
        },
        "from": ["0xE4406Af4CA1dcB05AFE384eBfF3c1F233dCA176A"],
        "internal_id": "3978545ce08ca4c7f4b92e10b6c61efc6ce436f35f8a23f4e6a2e74f309cfd0a",
        "my_balance_change": "-0.010193732",
        "received_by_me": "0",
        "spent_by_me": "0.010193732",
        "timestamp": 1574423598,
        "to": ["0x8500AFc0bc5214728082163326C2FF0C73f4a871"],
        "total_amount": "0.00864944",
        "tx_hash": "e578a719896ec5f1475c273e02fbdd3cf283d9808c20db336f110e4b4faef10c",
        "tx_hex": "f8f11b850649534e00830249f0948500afc0bc5214728082163326c2ff0c73f4a871871eba9eaeb4c000b884152cf3af1b065716fc0c8254828abed3061c181f73a3c698cf1bc0fc8620e158448988050000000000000000000000007296a0cbae6ccfa5cddff9130569731a3b7da419d068b8936743ace66f192407debdcfc38445674e000000000000000000000000000000000000000000000000000000000000000000000000000000005dd808491ba0c78ad466381e0db9fb01f103d9e5c9d9c0c9cb28ee02bf990dc6371313c71bc3a0624e653559cfb19141a67e567e2e1fd4ca1ccd73f40d8b3672d14bd37072dad1"
      },
      {
        "block_height": 8953592,
        "coin": "ETH",
        "confirmations": 117960,
        "fee_details": {
          "type": "Eth",
          "coin": "ETH",
          "gas": 57196,
          "gas_price": "0.00000001",
          "total_fee": "0.00057196"
        },
        "from": ["0xE4406Af4CA1dcB05AFE384eBfF3c1F233dCA176A"],
        "internal_id": "15a3891932876cae74933b66bbfc2bba95b3e09c025152dd8b8d8023ad9a5fbd",
        "my_balance_change": "-0.31519846",
        "received_by_me": "0",
        "spent_by_me": "0.31519846",
        "timestamp": 1574038246,
        "to": ["0x8500AFc0bc5214728082163326C2FF0C73f4a871"],
        "total_amount": "0.3146265",
        "tx_hash": "235be0e6ac3860a637ec0c1d0ec2c364e85ab5cd54659c6987c37b2ba3378ffb",
        "tx_hex": "f8f21a8502540be400830249f0948500afc0bc5214728082163326c2ff0c73f4a87188045dc722816ca800b884152cf3af84519291dc1e8ea4efe055a1c27e6d33a74137164f5799352c1e10798e7a403c000000000000000000000000ee4398a7ab0a610daab82fef97affae44a5ce1464fd4d66db1e00256442acacc546a8a67433217de000000000000000000000000000000000000000000000000000000000000000000000000000000005dd226fb1ca030a665aeb07080e959e8027663d8f6af4069477c1ec8c712566108a9525b9629a052123cb075c404ff14d5281bd48232185590464de034bc6c86a818e699e4e288"
      },
      {
        "block_height": 8952273,
        "coin": "ETH",
        "confirmations": 119279,
        "fee_details": {
          "type": "Eth",
          "coin": "ETH",
          "gas": 49472,
          "gas_price": "0.00000001",
          "total_fee": "0.00049472"
        },
        "from": ["0x8500AFc0bc5214728082163326C2FF0C73f4a871"],
        "internal_id": "8796cee96c32121cd2ca9fef9d23affb4c173cf719a08e03436cf92e6ae90668",
        "my_balance_change": "0.29278494869327806",
        "received_by_me": "0.29278494869327806",
        "spent_by_me": "0",
        "timestamp": 1574019481,
        "to": ["0xE4406Af4CA1dcB05AFE384eBfF3c1F233dCA176A"],
        "total_amount": "0.29278494869327806",
        "tx_hash": "4d02298575e9abf0d18ea2abb4d7f02ddba9266019fe4952eb6fa90f90775850",
        "tx_hex": "f9010a198502540be400830249f0948500afc0bc5214728082163326c2ff0c73f4a87180b8a402ed292b0b6ed2b0bbdc333949f4847ffe567064a2a9c2239bcef95abd7f8408321dba3d00000000000000000000000000000000000000000000000004102e5c0e719d6cad1841132d7f23ffedb0e036ae85a80a337dface71b2d494893c16603686073500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f2b27558e45a3f44853e78b3c4bd05217723f841ba007650709e390395e659776b2ec390d951e2ab82ebcd7c540ce73dc6d352bc399a00d727f58ab77970c62bd92a356d057738b88f36fa4948c57b9b50de0815a951f"
      }
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: Order Status";
export const description = "The order_status method returns the data of the order with the selected uuid created by the Komodo DeFi Framework API node.";

# order\_status

**order\_status uuid**

The `order_status` method returns the data of the order with the selected `uuid` created by the Komodo DeFi Framework API node. The response is different for `maker` and `taker` orders.

## Argument

| Structure | Type   | Description              |
| --------- | ------ | ------------------------ |
| uuid      | string | uuid of order to display |

## Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "order_status",
  "uuid": "c3b3105c-e914-4ed7-9f1c-604783b054a1"
}
```

#### Response (No order found)

```json
{ "error": "Order with uuid c3b3105c-e914-4ed7-9f1c-604783b054a1 is not found" }
```

#### Maker Order Response

| Structure               | Type   | Description                                                                                                   |
| ----------------------- | ------ | ------------------------------------------------------------------------------------------------------------- |
| type                    | string | type of the order ("Maker" or "Taker")                                                                        |
| order                   | object | A standard [OrderStatusData](/komodo-defi-framework/api/common_structures/orders/#order-status-data) object.  |
| base\_orderbook\_ticker | string | The orderbook ticker for base coin. This field is used to group segwit and non-segwit versions of UTXO coins. |
| rel\_orderbook\_ticker  | string | The orderbook ticker for rel coin. This field is used to group segwit and non-segwit versions of UTXO coins.  |

#### 📌 Maker Order Examples

```json
{
  "order": {
    "available_amount": "1",
    "base": "BEER",
    "cancellable": true,
    "created_at": 1568808684710,
    "matches": {
      "60aaacca-ed31-4633-9326-c9757ea4cf78": {
        "connect": {
          "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
          "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
          "method": "connect",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
        },
        "connected": {
          "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
          "method": "connected",
          "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
          "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
        },
        "last_updated": 1560529572571,
        "request": {
          "action": "Buy",
          "base": "BEER",
          "base_amount": "1",
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
          "method": "request",
          "rel": "PIZZA",
          "rel_amount": "1",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
        },
        "reserved": {
          "base": "BEER",
          "base_amount": "1",
          "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
          "method": "reserved",
          "rel": "PIZZA",
          "rel_amount": "1",
          "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
          "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
        }
      }
    },
    "max_base_vol": "1",
    "max_base_vol_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "min_base_vol": "0",
    "min_base_vol_rat": [
      [0, []],
      [1, [1]]
    ],
    "price": "1",
    "price_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "rel": "ETOMIC",
    "started_swaps": ["60aaacca-ed31-4633-9326-c9757ea4cf78"],
    "uuid": "ea77dcc3-a711-4c3d-ac36-d45fc5e1ee0c"
  },
  "type": "Maker",
  "base_orderbook_ticker": null,
  "rel_orderbook_ticker": null
}
```

#### Maker Order Response (Cancelled order from history)

```json
{
  "type": "Maker",
  "order": {
    "base": "DGB",
    "rel": "KMD",
    "price": "0.05009337477044780336205678768187597118237039129820596129396807458680604605170221782737674812826670434",
    "price_rat": [
      [1, [354611]],
      [1, [7079000]]
    ],
    "max_base_vol": "2509.982886480319452367370222475755847119224187107815173987450085567598402738163148887621220764403879",
    "max_base_vol_rat": [
      [1, [4400000]],
      [1, [1753]]
    ],
    "min_base_vol": "227.8553118769581315864426089433209911706066647678724010253489034463115921389917402449444602677299915",
    "min_base_vol_rat": [
      [1, [800000]],
      [1, [3511]]
    ],
    "created_at": 1640147130806,
    "updated_at": 1640148500481,
    "matches": {
      "ca791f47-3a84-414b-b7c1-942a0f2fb4ca": {
        "request": {
          "base": "KMD",
          "rel": "DGB",
          "base_amount": "12",
          "base_amount_rat": [
            [1, [12]],
            [1, [1]]
          ],
          "rel_amount": "241.1820189434802008438151288032397078840799082760529333024574562419162623621175580193501380942429668",
          "rel_amount_rat": [
            [1, [42702000]],
            [1, [177053]]
          ],
          "action": "Sell",
          "uuid": "ca791f47-3a84-414b-b7c1-942a0f2fb4ca",
          "method": "request",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
          "match_by": {
            "type": "Any"
          },
          "conf_settings": {
            "base_confs": 2,
            "base_nota": true,
            "rel_confs": 7,
            "rel_nota": false
          }
        },
        "reserved": {
          "base": "DGB",
          "rel": "KMD",
          "base_amount": "241.1820189434802008438151288032397078840799082760529333024574562419162623621175580193501380942429668",
          "base_amount_rat": [
            [1, [42702000]],
            [1, [177053]]
          ],
          "rel_amount": "12",
          "rel_amount_rat": [
            [1, [12]],
            [1, [1]]
          ],
          "taker_order_uuid": "ca791f47-3a84-414b-b7c1-942a0f2fb4ca",
          "maker_order_uuid": "9c034d5f-18d6-494d-8460-7974be2d5beb",
          "sender_pubkey": "caecf84197b88739079e55c92f26fe4bc329220a74d7f9d2094dc16e5a0d765e",
          "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
          "conf_settings": {
            "base_confs": 3,
            "base_nota": true,
            "rel_confs": 3,
            "rel_nota": true
          },
          "method": "reserved"
        },
        "connect": {
          "taker_order_uuid": "ca791f47-3a84-414b-b7c1-942a0f2fb4ca",
          "maker_order_uuid": "9c034d5f-18d6-494d-8460-7974be2d5beb",
          "method": "connect",
          "sender_pubkey": "0000000000000000000000000000000000000000000000000000000000000000",
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        "connected": {
          "taker_order_uuid": "ca791f47-3a84-414b-b7c1-942a0f2fb4ca",
          "maker_order_uuid": "9c034d5f-18d6-494d-8460-7974be2d5beb",
          "method": "connected",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        "last_updated": 1640147223000
      }
    },
    "started_swaps": ["ca791f47-3a84-414b-b7c1-942a0f2fb4ca"],
    "uuid": "9c034d5f-18d6-494d-8460-7974be2d5beb",
    "conf_settings": {
      "base_confs": 3,
      "base_nota": true,
      "rel_confs": 3,
      "rel_nota": true
    },
    "base_orderbook_ticker": null,
    "rel_orderbook_ticker": null
  },
  "cancellation_reason": "Cancelled"
}
```

#### Response: Taker Orders

| Structure               | Type   | Description                                                                                                   |
| ----------------------- | ------ | ------------------------------------------------------------------------------------------------------------- |
| type                    | string | type of the order ("Maker" or "Taker")                                                                        |
| order                   | object | A standard [OrderStatusData](/komodo-defi-framework/api/common_structures/orders/#order-status-data) object.  |
| base\_orderbook\_ticker | string | The orderbook ticker for base coin. This field is used to group segwit and non-segwit versions of UTXO coins. |
| rel\_orderbook\_ticker  | string | The orderbook ticker for rel coin. This field is used to group segwit and non-segwit versions of UTXO coins.  |

#### 📌 Taker Order Examples

#### Response: Taker Order Fullfilled

```json
{
  "type": "Taker",
  "order": {
    "created_at": 1640159838631,
    "request": {
      "base": "DOC",
      "rel": "MARTY",
      "base_amount": "1",
      "base_amount_rat": [
        [1, [1]],
        [1, [1]]
      ],
      "rel_amount": "33",
      "rel_amount_rat": [
        [1, [33]],
        [1, [1]]
      ],
      "action": "Buy",
      "uuid": "d1a43d2a-f7c1-4a83-ba32-1ae640cc3b32",
      "method": "request",
      "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
      "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
      "match_by": {
        "type": "Any"
      },
      "conf_settings": {
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false
      }
    },
    "matches": {
      "cc9efdb5-e0f1-4196-b3b2-e4930623c976": {
        "reserved": {
          "base": "DOC",
          "rel": "MARTY",
          "base_amount": "1",
          "base_amount_rat": [
            [1, [1]],
            [1, [1]]
          ],
          "rel_amount": "1",
          "rel_amount_rat": [
            [1, [1]],
            [1, [1]]
          ],
          "taker_order_uuid": "d1a43d2a-f7c1-4a83-ba32-1ae640cc3b32",
          "maker_order_uuid": "cc9efdb5-e0f1-4196-b3b2-e4930623c976",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
          "conf_settings": {
            "base_confs": 1,
            "base_nota": false,
            "rel_confs": 1,
            "rel_nota": false
          },
          "method": "reserved"
        },
        "connect": {
          "taker_order_uuid": "d1a43d2a-f7c1-4a83-ba32-1ae640cc3b32",
          "maker_order_uuid": "cc9efdb5-e0f1-4196-b3b2-e4930623c976",
          "method": "connect",
          "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
          "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920"
        },
        "connected": null,
        "last_updated": 0
      }
    },
    "order_type": {
      "type": "FillOrKill"
    },
    "cancellable": false,
    "base_orderbook_ticker": null,
    "rel_orderbook_ticker": null
  },
  "cancellation_reason": "Fulfilled"
}
```

#### Response: 'FillOrKill' Taker order after timeout with no match

```json
{
  "type": "Taker",
  "order": {
    "created_at": 1640159991278,
    "request": {
      "base": "DOC",
      "rel": "MARTY",
      "base_amount": "1",
      "base_amount_rat": [
        [1, [1]],
        [1, [1]]
      ],
      "rel_amount": "0.03",
      "rel_amount_rat": [
        [1, [3]],
        [1, [100]]
      ],
      "action": "Buy",
      "uuid": "6053016b-e1ba-490f-9501-eafb69b4d3a7",
      "method": "request",
      "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
      "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
      "match_by": {
        "type": "Any"
      },
      "conf_settings": {
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false
      }
    },
    "matches": {},
    "order_type": {
      "type": "FillOrKill"
    },
    "cancellable": true,
    "base_orderbook_ticker": null,
    "rel_orderbook_ticker": null
  },
  "cancellation_reason": "TimedOut"
}
```
export const title = "Komodo DeFi Framework Method: Orderbook";
export const description = "The orderbook method requests from the network the currently available orders for the specified trading pair.";

# orderbook

**orderbook base rel**

The `orderbook` method requests from the network the currently available orders for the specified trading pair.

## Arguments

| Structure | Type   | Description                                          |
| --------- | ------ | ---------------------------------------------------- |
| base      | string | Base currency of a pair                              |
| rel       | string | Related currency, also known as the "quote currency" |

## Response

| Structure                        | Type             | Description                                                                                                                                   |
| -------------------------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| asks                             | array of objects | An array of standard [OrderDataV1](/komodo-defi-framework/api/common_structures/orders/#order-data-v1) objects containing outstanding asks    |
| bids                             | array of objects | An array of standard [OrderDataV1](/komodo-defi-framework/api/common_structures/orders/#order-data-v1) objects containing outstanding bids    |
| numasks                          | number           | the number of outstanding asks                                                                                                                |
| numbids                          | number           | the number of outstanding bids                                                                                                                |
| base                             | string           | the name of the coin the user desires to receive                                                                                              |
| rel                              | string           | the name of the coin the user will trade                                                                                                      |
| timestamp                        | number           | the timestamp of the orderbook request                                                                                                        |
| netid                            | number           | the id of the network on which the request is made (default is `0`)                                                                           |
| total\_asks\_base\_vol           | string (decimal) | the base volumes sum of all asks                                                                                                              |
| total\_asks\_base\_vol\_rat      | rational         | the `total_asks_base_vol` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.     |
| total\_asks\_base\_vol\_fraction | fraction         | the `total_asks_base_vol` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object. |
| total\_asks\_rel\_vol            | string (decimal) | the rel volumes sum of all asks                                                                                                               |
| total\_asks\_rel\_vol\_rat       | rational         | the `total_asks_rel_vol` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.      |
| total\_asks\_rel\_vol\_fraction  | fraction         | the `total_asks_rel_vol` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.  |
| total\_bids\_base\_vol           | string (decimal) | the base volumes sum of all bids                                                                                                              |
| total\_bids\_base\_vol\_rat      | rational         | the `total_bids_base_vol` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.     |
| total\_bids\_base\_vol\_fraction | fraction         | the `total_bids_base_vol` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object. |
| total\_bids\_rel\_vol            | string (decimal) | the rel volumes sum of all bids                                                                                                               |
| total\_bids\_rel\_vol\_rat       | rational         | the `total_bids_rel_vol` represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.      |
| total\_bids\_rel\_vol\_fraction  | fraction         | the `total_bids_rel_vol` represented as a standard [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.  |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook",
  "base": "HELLO",
  "rel": "WORLD"
}
```

#### Response

```json
{
  "askdepth": 0,
  "asks": [
    {
      "coin": "DOC",
      "address": "RB8yufv3YTfdzYnwz5paNnnDynGJG6WsqD",
      "price": "1.1",
      "price_rat": [
        [1, [11]],
        [1, [10]]
      ],
      "price_fraction": {
        "numer": "11",
        "denom": "10"
      },
      "maxvolume": "69709.32528304",
      "max_volume_rat": [
        [1, [1891586123, 101]],
        [1, [6250000]]
      ],
      "max_volume_fraction": {
        "numer": "435683283019",
        "denom": "6250000"
      },
      "min_volume": "0.0001",
      "min_volume_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "min_volume_fraction": {
        "numer": "1",
        "denom": "10000"
      },
      "pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "bf66f122-aabd-4836-baa9-e08d7b4c3a4d",
      "is_mine": false,
      "base_max_volume": "69709.32528304",
      "base_max_volume_fraction": {
        "numer": "435683283019",
        "denom": "6250000"
      },
      "base_max_volume_rat": [
        [1, [1891586123, 101]],
        [1, [6250000]]
      ],
      "base_min_volume": "0.0001",
      "base_min_volume_fraction": {
        "numer": "1",
        "denom": "10000"
      },
      "base_min_volume_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "rel_max_volume": "76680.257811344",
      "rel_max_volume_fraction": {
        "numer": "4792516113209",
        "denom": "62500000"
      },
      "rel_max_volume_rat": [
        [1, [3627578169, 1115]],
        [1, [62500000]]
      ],
      "rel_min_volume": "0.00011",
      "rel_min_volume_fraction": {
        "numer": "11",
        "denom": "100000"
      },
      "rel_min_volume_rat": [
        [1, [11]],
        [1, [100000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "69711.32528304",
      "base_max_volume_aggr_fraction": {
        "numer": "435695783019",
        "denom": "6250000"
      },
      "base_max_volume_aggr_rat": [
        [1, [1904086123, 101]],
        [1, [6250000]]
      ],
      "rel_max_volume_aggr": "76682.257811344",
      "rel_max_volume_aggr_fraction": {
        "numer": "4792641113209",
        "denom": "62500000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [3752578169, 1115]],
        [1, [62500000]]
      ]
    },
    {
      "coin": "DOC",
      "address": "RMaprYNUp8ErJ9ZAKcxMfpC4ioVycYCCCc",
      "price": "1",
      "price_rat": [
        [1, [1]],
        [1, [1]]
      ],
      "price_fraction": {
        "numer": "1",
        "denom": "1"
      },
      "maxvolume": "2",
      "max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "min_volume": "0.00777",
      "min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "f99a1ca7-0202-49b4-80da-23d95361c704",
      "is_mine": false,
      "base_max_volume": "2",
      "base_max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "base_max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "base_min_volume": "0.00777",
      "base_min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "base_min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "rel_max_volume": "2",
      "rel_max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "rel_max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "rel_min_volume": "0.00777",
      "rel_min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "rel_min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "2",
      "base_max_volume_aggr_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "base_max_volume_aggr_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "rel_max_volume_aggr": "2",
      "rel_max_volume_aggr_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2]],
        [1, [1]]
      ]
    }
  ],
  "base": "DOC",
  "biddepth": 0,
  "bids": [
    {
      "coin": "MARTY",
      "address": "RMaprYNUp8ErJ9ZAKcxMfpC4ioVycYCCCc",
      "price": "1",
      "price_rat": [
        [1, [1]],
        [1, [1]]
      ],
      "price_fraction": {
        "numer": "1",
        "denom": "1"
      },
      "maxvolume": "2",
      "max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "min_volume": "0.00777",
      "min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "pubkey": "037310a8fb9fd8f198a1a21db830252ad681fccda580ed4101f3f6bfb98b34fab5",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "ebc8e982-a1fb-46dd-ac5d-9773e094d699",
      "is_mine": false,
      "base_max_volume": "2",
      "base_max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "base_max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "base_min_volume": "0.00777",
      "base_min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "base_min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "rel_max_volume": "2",
      "rel_max_volume_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "rel_max_volume_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "rel_min_volume": "0.00777",
      "rel_min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "rel_min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "2",
      "base_max_volume_aggr_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "base_max_volume_aggr_rat": [
        [1, [2]],
        [1, [1]]
      ],
      "rel_max_volume_aggr": "2",
      "rel_max_volume_aggr_fraction": {
        "numer": "2",
        "denom": "1"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2]],
        [1, [1]]
      ]
    },
    {
      "coin": "MARTY",
      "address": "RJ64uWA7fhoaSnoZga9mDhE6FSuNyrts5y",
      "price": "0.9847283211370791847221527988755820581396993104499014936871233734208355041669172800243960533191784546",
      "price_rat": [
        [1, [25000000]],
        [1, [25387713]]
      ],
      "price_fraction": {
        "numer": "25000000",
        "denom": "25387713"
      },
      "maxvolume": "380.86547541",
      "max_volume_rat": [
        [1, [3726809173, 8]],
        [1, [100000000]]
      ],
      "max_volume_fraction": {
        "numer": "38086547541",
        "denom": "100000000"
      },
      "min_volume": "0.00777",
      "min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "pubkey": "0251ecfa90e8b04dfd034b7a3cf36e7b35b7c76c11238f3ae3493b11cd535eca00",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "5a483a02-ac7a-4c82-aac7-5ec4d94131de",
      "is_mine": false,
      "base_max_volume": "386.7721352527054932",
      "base_max_volume_fraction": {
        "numer": "966930338131763733",
        "denom": "2500000000000000"
      },
      "base_max_volume_rat": [
        [1, [4276380181, 225131012]],
        [1, [2616213504, 582076]]
      ],
      "base_min_volume": "0.0078905012004",
      "base_min_volume_fraction": {
        "numer": "19726253001",
        "denom": "2500000000000"
      },
      "base_min_volume_rat": [
        [1, [2546383817, 4]],
        [1, [329033728, 582]]
      ],
      "rel_max_volume": "380.86547541",
      "rel_max_volume_fraction": {
        "numer": "38086547541",
        "denom": "100000000"
      },
      "rel_max_volume_rat": [
        [1, [3726809173, 8]],
        [1, [100000000]]
      ],
      "rel_min_volume": "0.00777",
      "rel_min_volume_fraction": {
        "numer": "777",
        "denom": "100000"
      },
      "rel_min_volume_rat": [
        [1, [777]],
        [1, [100000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "388.7721352527054932",
      "base_max_volume_aggr_fraction": {
        "numer": "971930338131763733",
        "denom": "2500000000000000"
      },
      "base_max_volume_aggr_rat": [
        [1, [918872597, 226295166]],
        [1, [2616213504, 582076]]
      ],
      "rel_max_volume_aggr": "382.86547541",
      "rel_max_volume_aggr_fraction": {
        "numer": "38286547541",
        "denom": "100000000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [3926809173, 8]],
        [1, [100000000]]
      ]
    },
    {
      "coin": "MARTY",
      "address": "RB8yufv3YTfdzYnwz5paNnnDynGJG6WsqD",
      "price": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
      "price_rat": [
        [1, [10]],
        [1, [11]]
      ],
      "price_fraction": {
        "numer": "10",
        "denom": "11"
      },
      "maxvolume": "56120.59538087909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "max_volume_rat": [
        [1, [1089973559, 14373]],
        [1, [1100000000]]
      ],
      "max_volume_fraction": {
        "numer": "61732654918967",
        "denom": "1100000000"
      },
      "min_volume": "0.0001",
      "min_volume_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "min_volume_fraction": {
        "numer": "1",
        "denom": "10000"
      },
      "pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "7b5fc790-cbe1-4714-812c-2e307818f258",
      "is_mine": false,
      "base_max_volume": "61732.654918967",
      "base_max_volume_fraction": {
        "numer": "61732654918967",
        "denom": "1000000000"
      },
      "base_max_volume_rat": [
        [1, [1089973559, 14373]],
        [1, [1000000000]]
      ],
      "base_min_volume": "0.00011",
      "base_min_volume_fraction": {
        "numer": "11",
        "denom": "100000"
      },
      "base_min_volume_rat": [
        [1, [11]],
        [1, [100000]]
      ],
      "rel_max_volume": "56120.59538087909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "rel_max_volume_fraction": {
        "numer": "61732654918967",
        "denom": "1100000000"
      },
      "rel_max_volume_rat": [
        [1, [1089973559, 14373]],
        [1, [1100000000]]
      ],
      "rel_min_volume": "0.0001",
      "rel_min_volume_fraction": {
        "numer": "1",
        "denom": "10000"
      },
      "rel_min_volume_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "62121.4270542197054932",
      "base_max_volume_aggr_fraction": {
        "numer": "155303567635549263733",
        "denom": "2500000000000000"
      },
      "base_max_volume_aggr_rat": [
        [1, [1405359989, 1799691246, 8]],
        [1, [2616213504, 582076]]
      ],
      "rel_max_volume_aggr": "56503.46085628909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "rel_max_volume_aggr_fraction": {
        "numer": "31076903470959",
        "denom": "550000000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2815084399, 7235]],
        [1, [550000000]]
      ]
    },
    {
      "coin": "MARTY",
      "address": "RD9Jv1onKkFSey1km2AdcvhsRPvRxv8saX",
      "price": "0.17",
      "price_rat": [
        [1, [17]],
        [1, [100]]
      ],
      "price_fraction": {
        "numer": "17",
        "denom": "100"
      },
      "maxvolume": "0.01921",
      "max_volume_rat": [
        [1, [1921]],
        [1, [100000]]
      ],
      "max_volume_fraction": {
        "numer": "1921",
        "denom": "100000"
      },
      "min_volume": "0.0001000008",
      "min_volume_rat": [
        [1, [125001]],
        [1, [1250000000]]
      ],
      "min_volume_fraction": {
        "numer": "125001",
        "denom": "1250000000"
      },
      "pubkey": "039ef1b42c635c32440099910bbe1c5e8b0c9373274c3f21cf1003750fc88d3499",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "41559ddd-8cba-4322-a74b-69ea1027a7c4",
      "is_mine": false,
      "base_max_volume": "0.113",
      "base_max_volume_fraction": {
        "numer": "113",
        "denom": "1000"
      },
      "base_max_volume_rat": [
        [1, [113]],
        [1, [1000]]
      ],
      "base_min_volume": "0.00058824",
      "base_min_volume_fraction": {
        "numer": "7353",
        "denom": "12500000"
      },
      "base_min_volume_rat": [
        [1, [7353]],
        [1, [12500000]]
      ],
      "rel_max_volume": "0.01921",
      "rel_max_volume_fraction": {
        "numer": "1921",
        "denom": "100000"
      },
      "rel_max_volume_rat": [
        [1, [1921]],
        [1, [100000]]
      ],
      "rel_min_volume": "0.0001000008",
      "rel_min_volume_fraction": {
        "numer": "125001",
        "denom": "1250000000"
      },
      "rel_min_volume_rat": [
        [1, [125001]],
        [1, [1250000000]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "62121.5400542197054932",
      "base_max_volume_aggr_fraction": {
        "numer": "155303850135549263733",
        "denom": "2500000000000000"
      },
      "base_max_volume_aggr_rat": [
        [1, [4226432885, 1799757020, 8]],
        [1, [2616213504, 582076]]
      ],
      "rel_max_volume_aggr": "56503.48006628909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "rel_max_volume_aggr_fraction": {
        "numer": "31076914036459",
        "denom": "550000000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2825649899, 7235]],
        [1, [550000000]]
      ]
    },
    {
      "coin": "MARTY",
      "address": "RD9Jv1onKkFSey1km2AdcvhsRPvRxv8saX",
      "price": "0.113",
      "price_rat": [
        [1, [113]],
        [1, [1000]]
      ],
      "price_fraction": {
        "numer": "113",
        "denom": "1000"
      },
      "maxvolume": "0.014351",
      "max_volume_rat": [
        [1, [14351]],
        [1, [1000000]]
      ],
      "max_volume_fraction": {
        "numer": "14351",
        "denom": "1000000"
      },
      "min_volume": "0.00010000048",
      "min_volume_rat": [
        [1, [625003]],
        [1, [1955032704, 1]]
      ],
      "min_volume_fraction": {
        "numer": "625003",
        "denom": "6250000000"
      },
      "pubkey": "039ef1b42c635c32440099910bbe1c5e8b0c9373274c3f21cf1003750fc88d3499",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "6949a7c0-0c8b-4a01-bf6a-ee80e7c05a09",
      "is_mine": false,
      "base_max_volume": "0.127",
      "base_max_volume_fraction": {
        "numer": "127",
        "denom": "1000"
      },
      "base_max_volume_rat": [
        [1, [127]],
        [1, [1000]]
      ],
      "base_min_volume": "0.00088496",
      "base_min_volume_fraction": {
        "numer": "5531",
        "denom": "6250000"
      },
      "base_min_volume_rat": [
        [1, [5531]],
        [1, [6250000]]
      ],
      "rel_max_volume": "0.014351",
      "rel_max_volume_fraction": {
        "numer": "14351",
        "denom": "1000000"
      },
      "rel_max_volume_rat": [
        [1, [14351]],
        [1, [1000000]]
      ],
      "rel_min_volume": "0.00010000048",
      "rel_min_volume_fraction": {
        "numer": "625003",
        "denom": "6250000000"
      },
      "rel_min_volume_rat": [
        [1, [625003]],
        [1, [1955032704, 1]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "62121.6670542197054932",
      "base_max_volume_aggr_fraction": {
        "numer": "155304167635549263733",
        "denom": "2500000000000000"
      },
      "base_max_volume_aggr_rat": [
        [1, [3064043381, 1799830944, 8]],
        [1, [2616213504, 582076]]
      ],
      "rel_max_volume_aggr": "56503.49441728909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "rel_max_volume_aggr_fraction": {
        "numer": "31076921929509",
        "denom": "550000000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2833542949, 7235]],
        [1, [550000000]]
      ]
    },
    {
      "coin": "MARTY",
      "address": "RD9Jv1onKkFSey1km2AdcvhsRPvRxv8saX",
      "price": "0.111",
      "price_rat": [
        [1, [111]],
        [1, [1000]]
      ],
      "price_fraction": {
        "numer": "111",
        "denom": "1000"
      },
      "maxvolume": "0.012321",
      "max_volume_rat": [
        [1, [12321]],
        [1, [1000000]]
      ],
      "max_volume_fraction": {
        "numer": "12321",
        "denom": "1000000"
      },
      "min_volume": "0.00010000101",
      "min_volume_rat": [
        [1, [10000101]],
        [1, [1215752192, 23]]
      ],
      "min_volume_fraction": {
        "numer": "10000101",
        "denom": "100000000000"
      },
      "pubkey": "039ef1b42c635c32440099910bbe1c5e8b0c9373274c3f21cf1003750fc88d3499",
      "age": 1618381531,
      "zcredits": 0,
      "uuid": "8cc74b4d-3b16-4f2b-8658-66b1195934f0",
      "is_mine": false,
      "base_max_volume": "0.111",
      "base_max_volume_fraction": {
        "numer": "111",
        "denom": "1000"
      },
      "base_max_volume_rat": [
        [1, [111]],
        [1, [1000]]
      ],
      "base_min_volume": "0.00090091",
      "base_min_volume_fraction": {
        "numer": "90091",
        "denom": "100000000"
      },
      "base_min_volume_rat": [
        [1, [90091]],
        [1, [100000000]]
      ],
      "rel_max_volume": "0.012321",
      "rel_max_volume_fraction": {
        "numer": "12321",
        "denom": "1000000"
      },
      "rel_max_volume_rat": [
        [1, [12321]],
        [1, [1000000]]
      ],
      "rel_min_volume": "0.00010000101",
      "rel_min_volume_fraction": {
        "numer": "10000101",
        "denom": "100000000000"
      },
      "rel_min_volume_rat": [
        [1, [10000101]],
        [1, [1215752192, 23]]
      ],
      "base_confs": 1,
      "base_nota": false,
      "rel_confs": 2,
      "rel_nota": false,
      "base_max_volume_aggr": "62121.7780542197054932",
      "base_max_volume_aggr_fraction": {
        "numer": "155304445135549263733",
        "denom": "2500000000000000"
      },
      "base_max_volume_aggr_rat": [
        [1, [932081525, 1799895555, 8]],
        [1, [2616213504, 582076]]
      ],
      "rel_max_volume_aggr": "56503.50673828909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
      "rel_max_volume_aggr_fraction": {
        "numer": "31076928706059",
        "denom": "550000000"
      },
      "rel_max_volume_aggr_rat": [
        [1, [2840319499, 7235]],
        [1, [550000000]]
      ]
    }
  ],
  "netid": 8762,
  "numasks": 2,
  "numbids": 6,
  "rel": "MARTY",
  "timestamp": 1618381531,
  "total_asks_base_vol": "69711.32528304",
  "total_asks_base_vol_fraction": {
    "numer": "435695783019",
    "denom": "6250000"
  },
  "total_asks_base_vol_rat": [
    [1, [1904086123, 101]],
    [1, [6250000]]
  ],
  "total_asks_rel_vol": "76682.257811344",
  "total_asks_rel_vol_fraction": {
    "numer": "4792641113209",
    "denom": "62500000"
  },
  "total_asks_rel_vol_rat": [
    [1, [3752578169, 1115]],
    [1, [62500000]]
  ],
  "total_bids_base_vol": "62121.7780542197054932",
  "total_bids_base_vol_fraction": {
    "numer": "155304445135549263733",
    "denom": "2500000000000000"
  },
  "total_bids_base_vol_rat": [
    [1, [932081525, 1799895555, 8]],
    [1, [2616213504, 582076]]
  ],
  "total_bids_rel_vol": "56503.50673828909090909090909090909090909090909090909090909090909090909090909090909090909090909090909",
  "total_bids_rel_vol_fraction": {
    "numer": "31076928706059",
    "denom": "550000000"
  },
  "total_bids_rel_vol_rat": [
    [1, [2840319499, 7235]],
    [1, [550000000]]
  ]
}
```
export const title = "Komodo DeFi Framework Method: Orderbook Depth";
export const description = "The orderbook_depth method returns the number of asks and bids for the specified trading pairs.";

# orderbook\_depth

**orderbook\_depth pairs**

The `orderbook_depth` method returns the number of asks and bids for the specified trading pairs.

## Arguments

| Structure | Type  | Description               |
| --------- | ----- | ------------------------- |
| pairs     | array | an array of trading pairs |

## Response

The pairs in the response are not guaranteed to be in the order of pairs in the request.

| Structure | Type                 | Description                    |
| --------- | -------------------- | ------------------------------ |
| result    | array of `PairDepth` | an array of pair depth objects |

Where `PairDepth` object structure is as follows

| Structure  | Type               | Description        |
| ---------- | ------------------ | ------------------ |
| pair       | array of 2 strings | the orderbook pair |
| depth.asks | number             | the number of asks |
| depth.bids | number             | the number of bids |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook_depth",
  "pairs": [
    [
      "DOC",
      "MARTY"
    ],
    [
      "BTC",
      "KMD"
    ],
    [
      "DOGE",
      "KMD"
    ]
  ]
}
```

#### Response

```json
{
  "result": [
    {
      "pair": ["DOC", "MARTY"],
      "depth": {
        "asks": 2,
        "bids": 6
      }
    },
    {
      "pair": ["DOGE", "KMD"],
      "depth": {
        "asks": 3,
        "bids": 3
      }
    },
    {
      "pair": ["BTC", "KMD"],
      "depth": {
        "asks": 5,
        "bids": 9
      }
    }
  ]
}
```
export const title = "Komodo DeFi Framework Method: Orders History by Filter";
export const description = "The orders_history_by_filter method returns all orders whether active or inactive that match the selected filters.";

# orders\_history\_by\_filter

**orders\_history\_by\_filter (order\_type initial\_action base rel from\_price to\_price from\_volume to\_volume from\_timestamp to\_timestamp was\_taker status include\_details)**

The `orders_history_by_filter` method returns all orders whether active or inactive that match the selected filters. Please note that all filters (order\_type initial\_action, etc.) are combined using logical AND.

## Arguments

| Structure        | Type    | Description                                                                                                                                                                                                                                                                     |
| ---------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| order\_type      | string  | return only orders that match the `order_type`; `order_type` can be "Maker" or "Taker"                                                                                                                                                                                          |
| initial\_action  | string  | return only orders that match the `initial_action`; `initial_action` can be "Sell" or "Buy". Note that maker order `initial_action` is considered "Sell"                                                                                                                        |
| base             | string  | return only orders that match the `order.base = base` condition                                                                                                                                                                                                                 |
| rel              | string  | return only orders that match the `order.rel = rel` condition                                                                                                                                                                                                                   |
| from\_price      | varies  | return only orders that match the `order.price >= from_price` condition                                                                                                                                                                                                         |
| to\_price        | varies  | return only orders that match the `order.price <= to_price` condition                                                                                                                                                                                                           |
| from\_volume     | varies  | return only orders that match the `order.volume >= from_volume` condition                                                                                                                                                                                                       |
| to\_volume       | varies  | return only orders that match the `order.volume <= to_volume` condition                                                                                                                                                                                                         |
| from\_timestamp  | integer | Timestamp in UNIX format. Return only orders that match the `order.created_at >= from_timestamp` condition                                                                                                                                                                      |
| to\_timestamp    | number  | Timestamp in UNIX format. return only orders that match the `order.created_at <= to_timestamp` condition                                                                                                                                                                        |
| was\_taker       | bool    | return only `GoodTillCancelled` orders that got converted from `taker` to `maker`                                                                                                                                                                                               |
| status           | string  | return only orders that match the `status`; `status` can be: For active maker order `Created`, `Updated`For active taker order `Created`For inactive maker order `Fulfilled`, `Insufficient Balance`, `Cancelled`For inactive taker order `Fulfilled`, `Timed Out`, `Cancelled` |
| include\_details | bool    | whether to include complete order details in response; defaults to false                                                                                                                                                                                                        |

## Response

| Structure        | Type                   | Description                                                                                                                                          |
| ---------------- | ---------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| orders           | array of order objects | Array of [OrderSummaryData](/komodo-defi-framework/api/common_structures/orders/#order-summary-data) that match the selected filters.                |
| details          | array                  | array of complete order details for every order that matches the selected filters; returns `[]` if `include_details` is false or not included in the |
| details.type     | string                 | type of the order; "Maker" or "Taker"                                                                                                                |
| details.order    | object                 | A standard [OrderDataV1](/komodo-defi-framework/api/common_structures/orders/#order-data-v1) objects containing outstanding asks                     |
| found\_records   | number                 | the number of returned orders                                                                                                                        |
| warnings         | array                  | array containing warnings objects                                                                                                                    |
| warnings.uuid    | string                 | uuid of the order that produced this warning                                                                                                         |
| warnings.warning | string                 | warning message                                                                                                                                      |

#### 📌 Examples

#### Command (select orders from history that have order\_type = Taker and initial\_action = Buy)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orders_history_by_filter",
  "order_type": "Taker",
  "initial_action": "Buy"
}
```

#### Command (select orders from history that have base = DOC and rel = MARTY)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orders_history_by_filter",
  "base": "DOC",
  "rel": "MARTY"
}
```

#### Command (select orders from history that have base = DOC and price >= 1 and volume {"<="} 1)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orders_history_by_filter",
  "base": "DOC",
  "from_price": 1,
  "to_volume": 1
}
```

#### Command (select orders from history that was\_taker and created\_at >= 1611705600 (January 27, 2021 0:00:00 GMT))

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orders_history_by_filter",
  "was_taker": true,
  "from_timestamp": 1611705600
}
```

#### Command (select orders with details from history that was cancelled because it timed-out)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orders_history_by_filter",
  "status": "Timed Out",
  "include_details": true
}
```

#### Response (orders only)

```json
{
  "result": {
    "orders": [
      {
        "uuid": "e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e",
        "order_type": "Maker",
        "initial_action": "Sell",
        "base": "DOC",
        "rel": "MARTY",
        "price": 2,
        "volume": 3,
        "created_at": 1620727954406,
        "last_updated": 1620727954406,
        "was_taker": 0,
        "status": "Created"
      }
    ],
    "details": [],
    "found_records": 1,
    "warnings": []
  }
}
```

#### Response (details included)

```json
{
  "result": {
    "orders": [
      {
        "uuid": "e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e",
        "order_type": "Maker",
        "initial_action": "Sell",
        "base": "DOC",
        "rel": "MARTY",
        "price": 2,
        "volume": 3,
        "created_at": 1620727954406,
        "last_updated": 1620727954406,
        "was_taker": 0,
        "status": "Created"
      }
    ],
    "details": [
      {
        "type": "Maker",
        "order": {
          "base": "DOC",
          "rel": "MARTY",
          "price": "2",
          "price_rat": [
            [1, [2]],
            [1, [1]]
          ],
          "max_base_vol": "3",
          "max_base_vol_rat": [
            [1, [3]],
            [1, [1]]
          ],
          "min_base_vol": "0.0001",
          "min_base_vol_rat": [
            [1, [1]],
            [1, [10000]]
          ],
          "created_at": 1620727954406,
          "updated_at": 1620727954406,
          "matches": {},
          "started_swaps": [],
          "uuid": "e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e",
          "conf_settings": {
            "base_confs": 1,
            "base_nota": false,
            "rel_confs": 1,
            "rel_nota": false
          }
        }
      }
    ],
    "found_records": 1,
    "warnings": []
  }
}
```

#### Response (warning - uuid could not be parsed)

```json
{
  "result": {
    "orders": [
      {
        "uuid": "e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e",
        "order_type": "Maker",
        "initial_action": "Sell",
        "base": "DOC",
        "rel": "MARTY",
        "price": 2,
        "volume": 3,
        "created_at": 1620727954406,
        "last_updated": 1620727954406,
        "was_taker": 0,
        "status": "Created"
      }
    ],
    "details": [],
    "found_records": 1,
    "warnings": [
      {
        "uuid": "e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e",
        "warning": "Order details for Uuid e5f453e2-b414-4df2-9fc3-eeedb5cc1f1e were skipped because uuid could not be parsed"
      }
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: Rational Number Type";
export const description = "The Komodo DeFi Framework API now offers the num-rational crate feature. This is used to represent order volumes and prices.";

# Note About Rational Number Type

The Komodo DeFi Framework API now offers the [num-rational crate](https://crates.io/crates/num-rational) feature. This is used to represent order volumes and prices.

Komodo highly recommends that the developer use the rational number type when calculating an order's price and volume. This avoids rounding and precision errors when calculating numbers, such as `1/3`, as these cannot be represented as a finite decimal.

The Komodo DeFi Framework API typically will return both the rational number type as well as the decimal representation, but the decimal representation should be considered only a convenience feature for readability.

The number can be represented in the following two JSON formats:

1.  As a fraction object that contains a numerator and a denominator as numeric strings, as follows:

```json
{
  "numer": "10000",
  "denom": "3000"
}
```

2.  As a unique format supplied by the `num-rational` crate:

```json
[
  [1, [0, 1]],
  [1, [1]]
]
```

In the above unique format, the first item `[1,[0,1]]` is the `numerator` and the second item `[1,[1]]` is the `denominator`.

The `numerator` and `denominator` are BigInteger numbers represented as a sign and a uint32 array (where numbers are 32-bit parts of big integer in little-endian order).

`[1,[0,1]]` represents `+0000000000000000000000000000000010000000000000000000000000000000` = `4294967296`

`[-1,[1,1]]` represents `-1000000000000000000000000000000010000000000000000000000000000000` = `-4294967297`
export const title = "Komodo DeFi Framework Method: Recover Funds of Swap UUID";
export const description = "Learn how to recover funds from a swap-payment address in case of an error using the recover_funds_of_swap method in the Komodo DeFi Framework API.";

# recover\_funds\_of\_swap

**recover\_funds\_of\_swap uuid**

In certain cases, a swap can finish with an error wherein the user's funds are stuck on the swap-payment address. (This address is the P2SH address when executing on a utxo-based blockchain, or an etomic-swap smart contract when executing on an ETH/ERC20 blockchain.)

This error can occur when one side of the trade does not follow the protocol (for any reason). The error persists as attempts to refund the payment fail due to network connection issues between the Komodo DeFi Framework API node and the coin's RPC server.

In this scenario, the `recover_funds_of_swap` method instructs the Komodo DeFi Framework API software to attempt to reclaim the user funds from the swap-payment address, if possible.

## Arguments

| Structure | Type   | Description                           |
| --------- | ------ | ------------------------------------- |
| uuid      | string | uuid of the swap to recover the funds |

## Response

| Structure | Type   | Description                                                                                       |
| --------- | ------ | ------------------------------------------------------------------------------------------------- |
| action    | string | the action executed to unlock the funds. Can be either `SpentOtherPayment` or `RefundedMyPayment` |
| coin      | string | the balance of this coin will be unstuck by the recovering transaction                            |
| tx\_hash  | string | the hash of the recovering transaction                                                            |
| tx\_hex   | string | raw bytes of the recovering transaction in hexadecimal representation                             |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "recover_funds_of_swap",
  "params": {
    "uuid": "6343b2b1-c896-47d4-b0f2-a11798f654ed"
  }
}
```

#### Response (success - SpentOtherPayment)

```json
{
  "result": {
    "action": "SpentOtherPayment",
    "coin": "HELLO",
    "tx_hash": "696571d032976876df94d4b9994ee98faa870b44fbbb4941847e25fb7c49b85d",
    "tx_hex": "0400008085202f890113591b1feb52878f8aea53b658cf9948ba89b0cb27ad0cf30b59b5d3ef6d8ef700000000d8483045022100eda93472c1f6aa18aacb085e456bc47b75ce88527ed01c279ee1a955e85691b702201adf552cfc85cecf588536d5b8257d4969044dde86897f2780e8c122e3a705e40120576fa34d308f39b7a704616656cc124232143565ca7cf1c8c60d95859af8f22d004c6b63042555555db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a9146e602d4affeb86e4ee208802901b8fd43be2e2a4882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0198929800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac0238555d000000000000000000000000000000"
  }
}
```

#### Response (success - RefundedMyPayment)

```json
{
  "result": {
    "action": "RefundedMyPayment",
    "coin": "HELLO",
    "tx_hash": "696571d032976876df94d4b9994ee98faa870b44fbbb4941847e25fb7c49b85d",
    "tx_hex": "0400008085202f890113591b1feb52878f8aea53b658cf9948ba89b0cb27ad0cf30b59b5d3ef6d8ef700000000d8483045022100eda93472c1f6aa18aacb085e456bc47b75ce88527ed01c279ee1a955e85691b702201adf552cfc85cecf588536d5b8257d4969044dde86897f2780e8c122e3a705e40120576fa34d308f39b7a704616656cc124232143565ca7cf1c8c60d95859af8f22d004c6b63042555555db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a9146e602d4affeb86e4ee208802901b8fd43be2e2a4882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0198929800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac0238555d000000000000000000000000000000"
  }
}
```

#### Response (error - maker payment was already spent)

```json
{
  "error": "lp_swap:702] lp_swap:412] taker_swap:890] Maker payment is spent, swap is not recoverable"
}
```

#### Response (error - swap is not finished yet)

```json
{
  "error": "lp_swap:702] lp_swap:412] taker_swap:886] Swap must be finished before recover funds attempt"
}
```
export const title = "Komodo DeFi Framework Method: Sell";
export const description = "The sell method issues a sell request and attempts to match an order from the orderbook based on the provided arguments.";

# sell

**sell base rel price volume (match\_by order\_type base\_confs base\_nota rel\_confs rel\_nota)**

The `sell` method issues a sell request and attempts to match an order from the orderbook based on the provided arguments.

*   Buy and sell methods always create the `taker` order first. A `taker` order must pay a `dexfee` during the swap as it is taking liquidity from the market. The `dexfee` is calculated as "the greater of either `Minimum transaction amount (dust) TAKER COIN` or `0.0001 TAKER COIN` or `1/777th` the size of the desired order". If your `GoodTillCancelled` order is not matched in 30 seconds, the order is automatically converted to a `maker` request and stays on the orderbook until the request is matched or cancelled. To always act as a maker, please use the [setprice](/komodo-defi-framework/api/legacy/setprice/) method.
*   To prevent a user from making trades in which the transaction fees may end up costing a significant portion of the value of the trade, we have set a lower limit to the value of a trade. See the description of the `volume` argument for more info.

## Arguments

| Structure         | Type              | Description|
| ----------------- | ----------------- ||
| base              | string            | the name of the coin the user desires to sell                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| rel               | string            | the name of the coin the user desires to receive                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| price             | varies            | The price in `rel` the user is willing to pay per one unit of the `base` coin. Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects.                                                                                                                                                                                                                               |
| volume            | varies            | The amount of coins the user is willing to receive of the `base` coin; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `volume`the product of the arguments `volume` and `price`. . Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects.                                                      |
| min\_volume       | varies (optional) | The amount of `base` coin that will be used as `min_volume` of `GoodTillCancelled` order after conversion to maker; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `min_volume`the product of the arguments `min_volume` and `price`. . Can be a numeric string, expressed using standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) or [FractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) objects. |
| match\_by         | object            | Optional. A standard [MatchBy](/komodo-defi-framework/api/common_structures/orders/#match-by) object, to filter to include only matches by pubkey or uuid. *Important:* This condition is not applied after a `GoodTillCancelled` order is converted to a `maker` request.                                                                                                                                                                                                                                                                 |
| order\_type       | object            | Optional. A standard [OrderType](/komodo-defi-framework/api/common_structures/orders/#order-type) object.                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| base\_confs       | number            | number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                           |
| base\_nota        | bool              | whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                                 |
| rel\_confs        | number            | number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                             |
| rel\_nota         | bool              | whether dPoW notarization is required for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                                                                                                   |
| save\_in\_history | boolean           | Defaults to `true`. If set to `false` no order history will be saved (though order status will be temporarily stored while in progress). If `true`, each order's short record history is stored in a local SQLite database table, and when the order is cancelled or fully matched, it's history will be saved as a json file                                                                                                                                                                                                              |

## Response

| Structure               | Type           | Description                                                                                                                                                                                                                                                      |
| ----------------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action                  | string         | the action of the request (`Sell`)                                                                                                                                                                                                                               |
| base                    | string         | the base currency of the request                                                                                                                                                                                                                                 |
| base\_amount            | numeric string | the resulting amount of base currency that is sold if the order matches, represented as a decimal value.                                                                                                                                                         |
| base\_amount\_rat       | rational       | the resulting amount of base currency that is sold if the order matches, represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.                                                                         |
| rel                     | string         | the rel currency of the request                                                                                                                                                                                                                                  |
| rel\_amount             | string         | the minimum amount of `rel` coin that must be received in order to sell the `base_amount` of `base` (according to `price`, in decimal representation)                                                                                                            |
| rel\_amount\_rat        | rational       | the minimum amount of `rel` coin that must be received in order to sell the `base_amount` of `base` (according to `price`, represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object).                      |
| method                  | string         | this field is used for internal P2P interactions; the value is always equal to "request                                                                                                                                                                          |
| dest\_pub\_key          | string         | reserved for future use. The `dest_pub_key` allows the user to choose the P2P node that is eligible to match with the request. This value defaults to "zero pubkey", meaning that `anyone` can match                                                             |
| sender\_pubkey          | string         | the public key of our node                                                                                                                                                                                                                                       |
| uuid                    | string         | the request uuid                                                                                                                                                                                                                                                 |
| match\_by               | object         | A standard [MatchBy](/komodo-defi-framework/api/common_structures/orders/#match-by) object, to filter to include only matches by pubkey or uuid. *Important:* This condition is not applied after a `GoodTillCancelled` order is converted to a `maker` request. |
| conf\_settings          | object         | A standard [ConfSettings](/komodo-defi-framework/api/common_structures/orders/#conf-settings) object.                                                                                                                                                            |
| base\_orderbook\_ticker | string         | the ticker of the base currency if `orderbook_ticker` is configured for the base currency in `coins` file. If not defined, will return a null value.                                                                                                             |
| rel\_orderbook\_ticker  | string         | the ticker of the rel currency if `orderbook_ticker` is configured for the rel currency in `coins` file. If not defined, will return a null value.                                                                                                               |

#### 📌 Examples

#### Command (decimal representation)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": "1",
  "price": "1"
}
```

#### Command (rational representation in num-rational crate format)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ]
}
```

#### Command (rational representation as a fraction object)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  }
}
```

#### Command (with confirmations and notarization settings)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  },
  "base_confs": 2,
  "base_nota": true,
  "rel_confs": 5,
  "rel_nota": false
}
```

#### Command (set to not save order history)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "TKL",
  "rel": "DUST",
  "volume": {
    "numer": "5",
    "denom": "2"
  },
  "price": {
    "numer": "9",
    "denom": "4"
  },
  "save_in_history": false
}
```

#### Command (GoodTillCancelled type)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "order_type": {
    "type": "GoodTillCancelled"
  }
}
```

#### Command (FillOrKill type)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "order_type": {
    "type": "FillOrKill"
  }
}
```

#### Command (match by Any)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Any"
  }
}
```

#### Command (match by Pubkeys)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Pubkeys",
    "data": [
      "1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a"
    ]
  }
}
```

#### Command (match by Orders)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sell",
  "base": "BASE",
  "rel": "REL",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "match_by": {
    "type": "Orders",
    "data": [
      "d14452bb-e82d-44a0-86b0-10d4cdcb8b24"
    ]
  }
}
```

#### Response (success)

```json
{
  "result": {
    "action": "Sell",
    "base": "BASE",
    "base_amount": "1",
    "base_amount_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
    "method": "request",
    "rel": "REL",
    "rel_amount": "1",
    "rel_amount_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
    "uuid": "d14452bb-e82d-44a0-86b0-10d4cdcb8b24",
    "match_by": {
      "data": [
        "1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a"
      ],
      "type": "Pubkeys"
    },
    "conf_settings": {
      "base_confs": 2,
      "base_nota": true,
      "rel_confs": 5,
      "rel_nota": false
    },
    "base_orderbook_ticker": null,
    "rel_orderbook_ticker": null
  }
}
```

#### Response (error)

```json
{
  "error": "rpc:278] utxo:884] BASE balance 12.88892991 is too low, required 21.15"
}
```
export const title = "Komodo DeFi Framework Method: Send Raw Transaction";
export const description = "The send_raw_transaction method broadcasts the transaction to the network of selected coin.";

# send\_raw\_transaction

**send\_raw\_transaction coin tx\_hex**

The `send_raw_transaction` method broadcasts the transaction to the network of selected coin.

## Arguments

| Structure | Type   | Description                                                                                       |
| --------- | ------ | ------------------------------------------------------------------------------------------------- |
| coin      | string | the name of the coin network on which to broadcast the transaction                                |
| tx\_hex   | string | the transaction bytes in hexadecimal format; this is typically generated by the `withdraw` method |

## Response

| Structure | Type   | Description                           |
| --------- | ------ | ------------------------------------- |
| tx\_hash  | string | the hash of the broadcast transaction |

#### 📌 Examples

#### Command

```json
{
  "method": "send_raw_transaction",
  "coin": "KMD",
  "tx_hex": "0400008085202f8902d6a5b976db5e5c9e8f9ead50713b25f22cd061edc8ff0ff1049fd2cd775ba087000000006b483045022100bf2073c1ecfef3fc78f272045f46a722591401f61c2d2fac87fc474a17df7c3102200ca1bd0664ba75f3383e5cbbe96127ad534a86238dbea256e000b0fe2067ab8c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd04d4e07ac5dacd08fb76e08d2a435fc4fe2b16eb0158695c820b44f42f044cb010000006a47304402200a0c21e8c0ae4a740f3663fe08aeff02cea6495157d531045b58d2dd79fb802702202f80dddd264db33f55e49799363997a175d39a91242a95f268c40f7ced97030b012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acc3b3ca27000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "tx_hash": "0b024ea6997e16387c0931de9f203d534c6b2b8500e4bda2df51a36b52a3ef33"
}
```
export const title = "Komodo DeFi Framework Method: Set Required Confirmations";
export const description = "The set_required_confirmations method sets the number of confirmations for which Komodo DeFi Framework API must wait for the selected coin.";

# set\_required\_confirmations

**set\_required\_confirmations coin confirmations**

The `set_required_confirmations` method sets the number of confirmations for which Komodo DeFi Framework API must wait for the selected coin.

This setting is ***not*** persistent. The value must be reset in the coins file on restart.

## Arguments

| Structure     | Type   | Description                            |
| ------------- | ------ | -------------------------------------- |
| coin          | string | the ticker of the selected coin        |
| confirmations | number | the number of confirmations to require |

#### Response

| Structure     | Type   | Description                                |
| ------------- | ------ | ------------------------------------------ |
| coin          | string | the coin selected in the request           |
| confirmations | number | the number of confirmations in the request |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "set_required_confirmations",
  "coin": "DOC",
  "confirmations": 3
}
```

#### Response (success)

```json
{
  "result": {
    "coin": "ETOMIC",
    "confirmations": 3
  }
}
```
export const title = "Komodo DeFi Framework Method: Set Requires Notarization";
export const description = "The set_requires_notarization method indicates whether Komodo DeFi Framework API must wait for a dPoW notarization of the given atomic swap transactions.";

# set\_requires\_notarization

**set\_requires\_notarization coin requires\_notarization**

The `set_requires_notarization` method indicates whether Komodo DeFi Framework API must wait for a dPoW notarization of the given atomic swap transactions.

This setting is ***not*** persistent. The value must be reset in the coins file on restart.

## Arguments

| Structure              | Type   | Description                                                                    |
| ---------------------- | ------ | ------------------------------------------------------------------------------ |
| coin                   | string | the ticker of the selected coin                                                |
| requires\_notarization | bool   | whether the node should wait for dPoW notarization of atomic swap transactions |

#### Response

| Structure              | Type   | Description                                                                        |
| ---------------------- | ------ | ---------------------------------------------------------------------------------- |
| coin                   | string | the coin selected in the request                                                   |
| requires\_notarization | bool   | whether the node must wait for a dPoW notarization of the atomic swap transactions |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "set_requires_notarization",
  "coin": "DOC",
  "requires_notarization": true
}
```

#### Response (success)

```json
{
  "result": {
    "coin": "ETOMIC",
    "requires_notarization": true
  }
}
```
export const title = "Komodo DeFi Framework Method: Setprice";
export const description = "The setprice method places an order on the orderbook, and it relies on this node acting as a maker, also called a Bob node.";

# setprice

**setprice base rel price (volume max cancel\_previous=true base\_confs base\_nota rel\_confs rel\_nota min\_volume)**

The `setprice` method places an order on the orderbook, and it relies on this node acting as a `maker`, also called a `Bob` node.

The `setprice` order is always considered a `sell`, for internal implementation convenience.

To prevent a user from making trades in which the transaction fees may end up costing a significant portion of the value of the trade, we have set a lower limit to the value of a trade. See the description of the `volume` and `min_volume` arguments for more info.

## Arguments

| Structure         | Type                       | Description                                                                                                                                                                                                                                                                                                                   |
| ----------------- | -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base              | string                     | the name of the coin the user desires to sell                                                                                                                                                                                                                                                                                 |
| rel               | string                     | the name of the coin the user desires to receive                                                                                                                                                                                                                                                                              |
| price             | numeric string or rational | the price in `rel` the user is willing to receive per one unit of the `base` coin                                                                                                                                                                                                                                             |
| volume            | numeric string or rational | the maximum amount of `base` coin available for the order, ignored if max is `true`; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `volume`the product of the arguments `volume` and `price`                                                            |
| min\_volume       | numeric string or rational | the minimum amount of `base` coin available for the order; it must be less or equal than `volume` param; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `min_volume`the product of the arguments `min_volume` and `price`                                |
| max               | bool                       | Komodo DeFi Framework API will use the entire coin balance for the order, taking `0.001` coins into reserve to account for fees                                                                                                                                                                                               |
| cancel\_previous  | bool                       | Komodo DeFi Framework API will cancel all existing orders for the selected pair by default; set this value to `false` to prevent this behavior                                                                                                                                                                                |
| base\_confs       | number                     | number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                              |
| base\_nota        | bool                       | whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                    |
| rel\_confs        | number                     | number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                |
| rel\_nota         | bool                       | whether dPoW notarization is required for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                      |
| save\_in\_history | boolean                    | Defaults to `true`. If set to `false` no order history will be saved (though order status will be temporarily stored while in progress). If `true`, each order's short record history is stored in a local SQLite database table, and when the order is cancelled or fully matched, it's history will be saved as a json file |

#### Response

| Structure               | Type             | Description                                                                                                                                          |
| ----------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                  | object           | the resulting order object                                                                                                                           |
| base                    | string           | the base coin of the order                                                                                                                           |
| rel                     | string           | the rel coin of the order                                                                                                                            |
| price                   | string (numeric) | the expected amount of `rel` coin to be received per 1 unit of `base` coin; decimal representation                                                   |
| price\_rat              | rational         | the expected amount of `rel` coin to be received per 1 unit of `base` coin; rational representation                                                  |
| max\_base\_vol          | string (numeric) | the maximum volume of base coin available to trade; decimal representation                                                                           |
| max\_base\_vol\_rat     | rational         | the maximum volume of base coin available to trade; rational representation                                                                          |
| min\_base\_vol          | string (numeric) | Komodo DeFi Framework API won't match with other orders that attempt to trade less than `min_base_vol`; decimal representation                       |
| min\_base\_vol\_rat     | rational         | Komodo DeFi Framework API won't match with other orders that attempt to trade less than `min_base_vol`; rational representation                      |
| created\_at             | number           | unix timestamp in milliseconds, indicating the order creation time                                                                                   |
| updated\_at             | number           | unix timestamp in milliseconds, indicating the order update time                                                                                     |
| matches                 | object           | contains the map of ongoing matches with other orders, empty as the order was recently created                                                       |
| started\_swaps          | array of strings | uuids of swaps that were initiated by the order                                                                                                      |
| uuid                    | string           | uuid of the created order                                                                                                                            |
| conf\_settings          | object           | A standard [ConfSettings](/komodo-defi-framework/api/common_structures/orders/#conf-settings) object.                                                |
| base\_orderbook\_ticker | string           | the ticker of the base currency if `orderbook_ticker` is configured for the base currency in `coins` file. If not defined, will return a null value. |
| rel\_orderbook\_ticker  | string           | the ticker of the rel currency if `orderbook_ticker` is configured for the rel currency in `coins` file. If not defined, will return a null value.   |

#### 📌 Examples

#### Command (with volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "BASE",
  "rel": "REL",
  "price": "0.9",
  "volume": "1"
}
```

#### Command (max = true)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "BASE",
  "rel": "REL",
  "price": "0.9",
  "max": true
}
```

#### Command (rational representation in num-rational crate format)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ]
}
```

#### Command (rational representation as fraction object)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  }
}
```

#### Command (with min\_volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  },
  "min_volume": "1"
}
```

#### Command (with confirmations and notarization settings)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "HELLO",
  "rel": "WORLD",
  "volume": {
    "numer": "3",
    "denom": "2"
  },
  "price": {
    "numer": "2",
    "denom": "1"
  },
  "base_confs": 2,
  "base_nota": true,
  "rel_confs": 5,
  "rel_nota": false
}
```

#### Command (set to not save order history)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "setprice",
  "base": "KMD",
  "rel": "TKL",
  "volume": {
    "numer": "4",
    "denom": "3"
  },
  "price": {
    "numer": "7",
    "denom": "12"
  },
  "save_in_history": false
}
```

#### Response (success)

```json
{
  "result": {
    "base": "BASE",
    "rel": "REL",
    "max_base_vol": "1",
    "max_base_vol_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "min_base_vol": "0",
    "min_base_vol": [
      [0, []],
      [1, [1]]
    ],
    "created_at": 1559052299258,
    "matches": {},
    "price": "1",
    "price_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "started_swaps": [],
    "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
    "conf_settings": {
      "base_confs": 2,
      "base_nota": true,
      "rel_confs": 5,
      "rel_nota": false
    }
  },
  "base_orderbook_ticker": null,
  "rel_orderbook_ticker": null
}
```

#### Response (error)

```json
{ "error": "Rel coin REL is not found" }
```
export const title = "Komodo DeFi Framework Method: Setprice";
export const description = "The show_priv_key method returns the private key of the specified coin in a format compatible with coin wallets.";

# show\_priv\_key

**show\_priv\_key coin**

The `show_priv_key` method returns the private key of the specified `coin` in a format compatible with `coin` wallets.
The output can be used for the `importprivkey` method (UTXO coins) or as a private key for MyEtherWallet (ETH/ERC20).

## Arguments

| Structure | Type   | Description                                     |
| --------- | ------ | ----------------------------------------------- |
| coin      | string | the name of the coin of the private key to show |

## Response

| Structure | Type   | Description                 |
| --------- | ------ | --------------------------- |
| coin      | string | the name of the coin        |
| priv\_key | string | the private key of the coin |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "show_priv_key",
  "coin": "HELLOWORLD"
}
```

#### Response (UTXO WIF)

```json
{
  "coin": "HELLOWORLD",
  "priv_key": "UvCjJf4dKSs2vFGVtCnUTAhR5FTZGdg43DDRa9s7s5DV1sSDX14g"
}
```

#### Response (0x-prefixed ETH private key)

```json
{
  "coin": "ETH",
  "priv_key": "0xb8c774f071de08c7fd8f62b97f1a5726f6ce9f1bcf141b70b86689254ed6714e"
}
```
export const title = "Komodo DeFi Framework Method: Stop";
export const description = "The stop method stops the Komodo DeFi Framework API software.";

# stop

**stop()**

The `stop` method stops the Komodo DeFi Framework API software.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

## Response

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |
export const title = "Komodo DeFi Framework Method: Trade Preimage";
export const description = "The trade_preimage method returns the approximate fee amounts that are paid per the whole swap.";

# trade\_preimage {{label : 'trade_preimage', tag : 'deprecated'}}

\*\*trade\_preimage (deprecated) \*\*

The `trade_preimage` method returns the approximate fee amounts that are paid per the whole swap.
Depending on the parameters, the function returns different results:

*   If the `swap_method` is `buy` or `sell`, then the result will include the `taker_fee` and the `fee_to_send_taker_fee`.
    The `taker_fee` amount is paid from the `base` coin balance if the `swap_method` is `sell`, else it is paid from the `rel` coin balance;
*   If the `max` field is true, then the result will include the `volume`.

This method can be used instead of **max\_taker\_vol**, if the `max` field is true and the `swap_method` is `buy` or `sell`.
Use the resulting `volume` as an argument of the `buy` or `sell` requests.

Use the `trade_preimage` request with `max = true` and `swap_method = "setprice"` arguments to approximate the fee amounts **only**. Do not use the resulting `volume` as an argument of the `setprice`.

This function is deprecated. Please consider using [trade\_preimage v2.0](/komodo-defi-framework/api/v20/trade_preimage/) instead.

#### Arguments

| Structure    | Type                                  | Description                                                                                                                          |
| ------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| base         | string                                | the base currency of the request                                                                                                     |
| rel          | string                                | the rel currency of the request                                                                                                      |
| swap\_method | string                                | the name of the method whose preimage is requested. Possible values: `buy`, `sell`, `setprice`                                       |
| price        | numeric string or rational            | the price in `rel` the user is willing to pay per one unit of the `base` coin                                                        |
| volume       | numeric string or rational (optional) | the amount the user is willing to trade; ignored if `max = true` **and** `swap_method = setprice`, otherwise, it must be set         |
| max          | bool (optional)                       | whether to return the maximum available volume for `setprice` method; must not be set or `false` if `swap_method` is `buy` or `sell` |

#### Response

| Structure                 | Type             | Description                                                                                                                                                                                                                                    |
| ------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                    | object           | an object containing the relevant information                                                                                                                                                                                                  |
| base\_coin\_fee           | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `base` coin                                                          |
| rel\_coin\_fee            | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `rel` coin                                                           |
| volume                    | string (numeric) | Optional. The max available volume that can be traded (in decimal representation); empty if the `max` argument is missing or false                                                                                                             |
| volume\_rat               | rational         | Optional. The max available volume that can be traded represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.; empty if the `max` argument is missing or false                         |
| volume\_fraction          | fraction         | Optional. The max available volume that can be traded represented as a standard [fractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.; empty if the `max` argument is missing or false                     |
| taker\_fee                | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The dex fee to be paid by Taker; empty if `swap_method` is `setprice`                                                                    |
| fee\_to\_send\_taker\_fee | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid to send the dex fee; empty if `swap_method` is `setprice`                                              |
| total\_fees               | array of objects | A standard [TotalFeeInfo](/komodo-defi-framework/api/common_structures/#total-fee-info) object. Each element is a sum of fees required to be paid from user's balance of corresponding `ExtendedFeeInfo.coin`; the elements are unique by coin |

#### 📌 Examples

#### Command (setprice)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "base": "DOC",
  "rel": "BTC",
  "price": "1",
  "volume": "0.1",
  "swap_method": "setprice"
}
```

#### Response

```json
{
  "result": {
    "base_coin_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "coin": "BTC",
      "amount": "0.00029211",
      "amount_fraction": {
        "numer": "29211",
        "denom": "100000000"
      },
      "amount_rat": [
        [1, [29211]],
        [1, [100000000]]
      ],
      "paid_from_trading_vol": true
    },
    "total_fees": [
      {
        "coin": "DOC",
        "amount": "0.00001",
        "amount_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "amount_rat": [
          [1, [1]],
          [1, [100000]]
        ],
        "required_balance": "0.00001",
        "required_balance_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "required_balance_rat": [
          [1, [1]],
          [1, [100000]]
        ]
      },
      {
        "coin": "BTC",
        "amount": "0.00029211",
        "amount_fraction": {
          "numer": "29211",
          "denom": "100000000"
        },
        "amount_rat": [
          [1, [29211]],
          [1, [100000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      }
    ]
  }
}
```

#### Command (buy)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "base": "BTC",
  "rel": "DOC",
  "price": "1",
  "volume": "0.1",
  "swap_method": "buy"
}
```

#### Response

```json
{
  "result": {
    "base_coin_fee": {
      "coin": "BTC",
      "amount": "0.00029211",
      "amount_fraction": {
        "numer": "29211",
        "denom": "100000000"
      },
      "amount_rat": [
        [1, [29211]],
        [1, [100000000]]
      ],
      "paid_from_trading_vol": true
    },
    "rel_coin_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": false
    },
    "taker_fee": {
      "coin": "DOC",
      "amount": "0.0001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
      "amount_fraction": {
        "numer": "1",
        "denom": "7770"
      },
      "amount_rat": [
        [1, [1]],
        [1, [7770]]
      ],
      "paid_from_trading_vol": false
    },
    "fee_to_send_taker_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "coin": "BTC",
        "amount": "0.00029211",
        "amount_fraction": {
          "numer": "29211",
          "denom": "100000000"
        },
        "amount_rat": [
          [1, [29211]],
          [1, [100000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      },
      {
        "coin": "DOC",
        "amount": "0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "amount_fraction": {
          "numer": "5777",
          "denom": "38850000"
        },
        "amount_rat": [
          [1, [5777]],
          [1, [38850000]]
        ],
        "required_balance": "0.0001487001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "required_balance_fraction": {
          "numer": "5777",
          "denom": "38850000"
        },
        "required_balance_rat": [
          [1, [5777]],
          [1, [38850000]]
        ]
      }
    ]
  }
}
```

#### Command (ERC20 and QRC20)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "base": "BAT",
  "rel": "QC",
  "price": "1",
  "volume": "2.21363478",
  "swap_method": "setprice"
}
```

#### Response

```json
{
  "result": {
    "base_coin_fee": {
      "amount": "0.0045",
      "amount_fraction": {
        "denom": "2000",
        "numer": "9"
      },
      "amount_rat": [
        [1, [9]],
        [1, [2000]]
      ],
      "coin": "ETH",
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "amount": "0.00325",
      "amount_fraction": {
        "denom": "4000",
        "numer": "13"
      },
      "amount_rat": [
        [0, [13]],
        [1, [4000]]
      ],
      "coin": "QTUM",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "amount": "0.003",
        "amount_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "amount_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "required_balance": "0.003",
        "required_balance_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "required_balance_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "coin": "ETH"
      },
      {
        "amount": "0.00325",
        "amount_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "amount_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "required_balance": "0.00325",
        "required_balance_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "required_balance_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "coin": "QTUM"
      }
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: Unban Pubkeys";
export const description = "The unban_pubkeys method will remove all currently banned pubkeys from your ban list, or specific pubkeys from a user defined list.";

# unban\_pubkeys

**unban\_pubkeys type data**

The `unban_pubkeys` method will remove all currently banned pubkeys from your ban list, or specific pubkeys from a user defined list.

Use the secp256k1 pubkey without prefix for this method input. E.g. if pubkey is `022cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420` you should submit `2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420`.

## Arguments

| Structure      | Type   | Description                                                                |
| -------------- | ------ | -------------------------------------------------------------------------- |
| pubkey         | string | the pubkey to ban                                                          |
| unban\_by.type | string | `All` to unban all pubkeys, or `Few` to provide a list of pubkeys to unban |
| unban\_by.data | list   | A list of pubkeys to unbanned. Only required when `type` is `Few`.         |

## Response

| Structure         | Type | Description                                                                                                                                             |
| ----------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| still\_banned     | list | List of pubkeys which remain banned. For each `pubkey`, the reason it was banned `pubkey.reason` and the type of of ban `pubkey.type` is also returned. |
| unbanned          | list | List of pubkeys which were unbanned. For each `pubkey`, the reason it was banned `pubkey.reason` and the type of of ban `pubkey.type` is also returned. |
| were\_not\_banned | list | If using `unban_by.type: Few` this will return a list of pubkeys which were not banned, but had been requested to be unbanned.                          |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "unban_pubkeys",
  "unban_by": {
    "type": "All"
  }
}
```

#### Response (success)

```json
{
  "result": {
    "still_banned": {},
    "unbanned": {
      "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420": {
        "type": "Manual",
        "reason": "testing"
      }
    },
    "were_not_banned": []
  }
}
```

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "unban_pubkeys",
  "unban_by": {
    "type": "Few"
  },
  "data": [
    "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420",
    "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520422"
  ]
}
```

#### Response (success)

```json
{
  "result": {
    "still_banned": {
      "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520421": {
        "type": "Manual",
        "reason": "testing"
      }
    },
    "unbanned": {
      "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420": {
        "type": "Manual",
        "reason": "testing"
      }
    },
    "were_not_banned": [
      "2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520422"
    ]
  }
}
```
export const title = "Komodo DeFi Framework Method: Update Maker Order";
export const description =
  "The update_maker_order method modifies an active order on the orderbook created by the current node as a maker (or Bob).";

# update\_maker\_order

**update\_maker\_order uuid (new\_price volume\_delta max base\_confs base\_nota rel\_confs rel\_nota min\_volume)**

The `update_maker_order` method updates an active order on the orderbook created before by `setprice`, and it relies on this node acting as a `maker`, also called a `Bob` node.

To prevent a user from making trades in which the transaction fees may end up costing a significant portion of the value of the trade, we have set a lower limit to the value of a trade. See the description of the `volume_delta` and `min_volume` arguments for more info.

## Arguments

| Structure     | Type                                  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| ------------- | ------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| uuid          | string                                | the uuid of the order the user desires to update                                                                                                                                                                                                                                                                                                                                                                                                                       |
| new\_price    | numeric string or rational (optional) | the price in `rel` the user is willing to receive per one unit of the `base` coin                                                                                                                                                                                                                                                                                                                                                                                      |
| volume\_delta | numeric string or rational (optional) | volume added to or subtracted from the `max_base_vol` of the order to be updated, resulting in the new volume which is the maximum amount of `base` coin available for the order, ignored if max is `true`; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the new volume which is the `max_base_vol` of the order to be updated plus `volume_delta`the product of the new volume and the argument `new_price` |
| min\_volume   | numeric string or rational (optional) | the minimum amount of `base` coin available for the order; it must be less or equal than the new volume; the following values must be greater than or equal to the `min_trading_vol` of the corresponding coin: the argument `min_volume`the product of the arguments `min_volume` and `new_price`                                                                                                                                                                     |
| max           | bool (optional)                       | Komodo DeFi Framework API will use the entire coin balance for the order, taking `0.001` coins into reserve to account for fees                                                                                                                                                                                                                                                                                                                                        |
| base\_confs   | number (optional)                     | number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                       |
| base\_nota    | bool (optional)                       | whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                                                                                                                                                                                             |
| rel\_confs    | number (optional)                     | number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                         |
| rel\_nota     | bool (optional)                       | whether dPoW notarization is required for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                                                                                                                                                                                               |

## Response

| Structure           | Type             | Description                                                                                                                     |
| ------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| base                | string           | the base coin of the order                                                                                                      |
| rel                 | string           | the rel coin of the order                                                                                                       |
| price               | string (numeric) | the expected amount of `rel` coin to be received per 1 unit of `base` coin; decimal representation                              |
| price\_rat          | rational         | the expected amount of `rel` coin to be received per 1 unit of `base` coin; rational representation                             |
| max\_base\_vol      | string (numeric) | the maximum volume of base coin available to trade; decimal representation                                                      |
| max\_base\_vol\_rat | rational         | the maximum volume of base coin available to trade; rational representation                                                     |
| min\_base\_vol      | string (numeric) | Komodo DeFi Framework API won't match with other orders that attempt to trade less than `min_base_vol`; decimal representation  |
| min\_base\_vol\_rat | rational         | Komodo DeFi Framework API won't match with other orders that attempt to trade less than `min_base_vol`; rational representation |
| created\_at         | number           | unix timestamp in milliseconds, indicating the order creation time                                                              |
| updated\_at         | number           | unix timestamp in milliseconds, indicating the order update time                                                                |
| matches             | object           | contains the map of ongoing matches with other orders, empty as the order was recently created                                  |
| started\_swaps      | array of strings | uuids of swaps that were initiated by the order                                                                                 |
| uuid                | string           | uuid of the updated order                                                                                                       |
| conf\_settings      | object           | A standard [ConfSettings](/komodo-defi-framework/api/common_structures/orders/#conf-settings) object.                           |

#### 📌 Examples

#### Command (with volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "new_price": "0.9",
  "volume_delta": "1"
}
```

#### Command (max = true)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "new_price": "0.9",
  "max": true
}
```

#### Command (rational representation in num-rational crate format)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "volume_delta": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ],
  "new_price": [
    [
      1,
      [
        1
      ]
    ],
    [
      1,
      [
        1
      ]
    ]
  ]
}
```

#### Command (rational representation as fraction object)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "volume_delta": {
    "numer": "3",
    "denom": "2"
  },
  "new_price": {
    "numer": "2",
    "denom": "1"
  }
}
```

#### Command (with min\_volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "volume_delta": {
    "numer": "3",
    "denom": "2"
  },
  "new_price": {
    "numer": "2",
    "denom": "1"
  },
  "min_volume": "1"
}
```

#### Command (with confirmations and notarization settings)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_maker_order",
  "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
  "volume_delta": {
    "numer": "3",
    "denom": "2"
  },
  "new_price": {
    "numer": "2",
    "denom": "1"
  },
  "base_confs": 2,
  "base_nota": true,
  "rel_confs": 5,
  "rel_nota": false
}
```

#### Response (success)

```json
{
  "result": {
    "base": "BASE",
    "rel": "REL",
    "max_base_vol": "1",
    "max_base_vol_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "min_base_vol": "0",
    "min_base_vol": [
      [0, []],
      [1, [1]]
    ],
    "created_at": 1559052299258,
    "updated_at": 1619736650000,
    "matches": {},
    "price": "1",
    "price_rat": [
      [1, [1]],
      [1, [1]]
    ],
    "started_swaps": [],
    "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41",
    "conf_settings": {
      "base_confs": 2,
      "base_nota": true,
      "rel_confs": 5,
      "rel_nota": false
    }
  }
}
```

#### Response (error)

```json
{ "error": "There is no order with UUID  6a242691-6c05-474a-85c1-5b3f42278f41" }
```
export const title = "Komodo DeFi Framework Method: Validate Address";
export const description = "The validateaddress method checks if an input string is a valid address of the specified coin.";

# validateaddress

**validateaddress coin address**

The `validateaddress` method checks if an input string is a valid address of the specified coin.

## Arguments

| Structure | Type   | Description                      |
| --------- | ------ | -------------------------------- |
| coin      | string | the coin to validate address for |
| address   | string | the input string to validate     |

## Response

| Structure | Type              | Description                                                                    |
| --------- | ----------------- | ------------------------------------------------------------------------------ |
| is\_valid | bool              | Whether input string is a valid coin address.                                  |
| reason    | string (optional) | Only present if not valid. The reason why input string is not a valid address. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "validateaddress",
  "coin": "DOC",
  "address": "RRnMcSeKiLrNdbp91qNVQwwXx5azD4S4CD"
}
```

#### Response (valid address)

```json
{
  "result": {
    "is_valid": true
  }
}
```

#### Response (invalid cash address)

```json
{
  "result": {
    "is_valid": false,
    "reason": "utxo:415] Checksum verification failed"
  }
}
```

#### Response (invalid ETH address)

```json
{
  "result": {
    "is_valid": false,
    "reason": "eth:360] eth:2522] Invalid address checksum"
  }
}
```
export const title = "Komodo DeFi Framework Method: Version";
export const description = "The version method returns the Komodo DeFi Framework API version.";

# version

**version()**

The `version` method returns the Komodo DeFi Framework API version.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

## Response

| Structure | Type   | Description                           |
| --------- | ------ | ------------------------------------- |
| result    | string | the Komodo DeFi Framework API version |

#### 📌 Examples

#### Command

```json
{
  "method": "version",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
  "result": "2.0.996_mm2_3bb412578_Linux"
}
```
export const title = "Komodo DeFi Framework Method: Withdraw";
export const description = "The withdraw method generates, signs, and returns a transaction that transfers the amount of coin to the address indicated in the to argument.";

# withdraw

**withdraw coin to (amount max)**

The `withdraw` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument.

This method generates a raw transaction which should then be broadcast using [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/).

## Arguments

| Structure | Type             | Description                                                                                    |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------- |
| coin      | string           | the name of the coin the user desires to withdraw                                              |
| to        | string           | coins are withdrawn to this address                                                            |
| amount    | string (numeric) | the amount the user desires to withdraw, ignored when `max=true`                               |
| max       | bool             | withdraw the maximum available amount                                                          |
| fee       | object           | Optional. A standard [FeeInfo](/komodo-defi-framework/api/common_structures/#fee-info) object. |

## Response

| Structure                    | Type                       | Description                                                                                                                                                                                             |
| ---------------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| from                         | array of strings           | coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| to                           | array of strings           | coins are withdrawn to this address; this may contain the `my_address` address, where change from UTXO coins is sent                                                                                    |
| my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| fee\_details                 | object                     | the fee dsetails of the generated transaction; this value differs for utxo and ETH/ERC20 coins, check the examples for more details                                                                     |
| tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the `send_raw_transaction` method                                                                                                  |
| coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| kmd\_rewards                 | object (optional)          | an object containing information about accrued rewards; always exists if the coin is `KMD`                                                                                                              |
| kmd\_rewards.amount          | string (numeric, optional) | the amount of accrued rewards                                                                                                                                                                           |
| kmd\_rewards.claimed\_by\_me | bool (optional)            | whether the rewards been claimed by me                                                                                                                                                                  |

#### 📌 Examples

#### Withdraw UTXO based coins

```json
{
  "method": "withdraw",
  "coin": "KMD",
  "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
  "amount": "10",
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (KMD success)

```json
{
  "block_height": 0,
  "coin": "KMD",
  "fee_details": {
    "type": "Utxo",
    "amount": "0.00001"
  },
  "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
  "my_balance_change": "-10.00001",
  "received_by_me": "0.34417325",
  "spent_by_me": "10.34418325",
  "to": ["RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"],
  "total_amount": "10.34418325",
  "tx_hash": "3a1c382c50a7d12e4675d12ed7e723ce9f0167693dd75fd772bae8524810e605",
  "tx_hex": "0400008085202f890207a8e96978acfb8f0d002c3e4390142810dc6568b48f8cd6d8c71866ad8743c5010000006a47304402201960a7089f2d93480fff68ce0b7ca7bb7a32a52915753ac7ae780abd6162cb1d02202c9b11d442e5f72a532f44ceb10122898d486b1474a10eb981c60c5538b9c82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff97f56bf3b0f815bb737b7867e71ddb8198bba3574bb75737ba9c389a4d08edc6000000006a473044022055199d80bd7e2d1b932e54f097c6a15fc4b148d21299dc50067c1da18045f0ed02201d26d85333df65e6daab40a07a0e8a671af9d9b9d92fdf7d7ef97bd868ca545a012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200ca9a3b000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acad2a0d02000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000",
  "kmd_rewards": {
    "amount": "0.0791809",
    "claimed_by_my": true
  }
}
```

#### Withdraw UTXO based-coins with fixed fee

```json
{
  "method": "withdraw",
  "coin": "DOC",
  "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
  "amount": "1.0",
  "fee": {
    "type": "UtxoFixed",
    "amount": "0.1"
  },
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
  "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
  "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
  "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
  "total_amount": "60.10253836",
  "spent_by_me": "60.10253836",
  "received_by_me": "60.00253836",
  "my_balance_change": "-0.1",
  "block_height": 0,
  "timestamp": 1566472936,
  "fee_details": {
    "type": "Utxo",
    "amount": "0.1"
  },
  "coin": "DOC",
  "internal_id": ""
}
```

#### Response (error - attempt to use EthGas for UTXO coin)

```json
{ "error": "utxo:1295] Unsupported input fee type" }
```

#### Withdraw UTXO based coins with custom fee per kbyte

```json
{
  "method": "withdraw",
  "coin": "DOC",
  "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
  "amount": "1.0",
  "fee": {
    "type": "UtxoPerKbyte",
    "amount": "1"
  },
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "tx_hex": "0400008085202f890258be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a000000006b483045022100ef11280e981be280ca5d24c947842ca6a8689d992b73e3a7eb9ff21070b0442b02203e458a2bbb1f2bf8448fc47c51485015904a5271bb17e14be5afa6625d67b1e8012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff58be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a010000006b483045022100daaa10b09e7abf9d4f596fc5ac1f2542b8ecfab9bb9f2b02201644944ddc0280022067aa1b91ec821aa48f1d06d34cd26fb69a9f27d59d5eecdd451006940d9e83db012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acf31c655d010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788accd7c5e5d000000000000000000000000000000",
  "tx_hash": "fd115190feec8c0c14df2696969295c59c674886344e5072d64000379101b78c",
  "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
  "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
  "total_amount": "60.00253836",
  "spent_by_me": "60.00253836",
  "received_by_me": "59.61874931",
  "my_balance_change": "-0.38378905",
  "block_height": 0,
  "timestamp": 1566473421,
  "fee_details": {
    "type": "Utxo",
    "amount": "0.38378905"
  },
  "coin": "DOC",
  "internal_id": ""
}
```

#### Response (error - attempt to use EthGas for UTXO coin)

```json
{ "error": "utxo:1295] Unsupported input fee type" }
```

#### Withdraw ETH/ERC20 and other ETH-based forks

```json
{
  "method": "withdraw",
  "coin": "ETH",
  "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
  "amount": 10,
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "block_height": 0,
  "coin": "ETH",
  "fee_details": {
    "type": "Eth",
    "coin": "ETH",
    "gas": 21000,
    "gas_price": "0.000000001",
    "total_fee": "0.000021"
  },
  "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
  "my_balance_change": "-10.000021",
  "received_by_me": "0",
  "spent_by_me": "10.000021",
  "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
  "total_amount": "10.000021",
  "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
  "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```

#### Withdraw ETH/ERC20, and other ETH-based forks with gas limit

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "coin": "COIN_NAME",
  "to": "RECIPIENT_ADDRESS",
  "amount": "AMOUNT",
  "fee": {
    "type": "EthGas",
    "gas_price": "3.5",
    "gas": 55000
  }
}
```

#### Response (success)

```json
{
  "tx_hex": "f86d820b2884d09dc30082d6d894bab36286672fbdc7b250804bf6d14be0df69fa29888ac7230489e80000801ca0ef0167b0e53ed50d87b6fd630925f2bce6ee72e9b5fdb51c6499a7caaecaed96a062e5cb954e503ff83f2d6ce082649fdcdf8a77c8d37c7d26d46d3f736b228d10",
  "tx_hash": "a26c4dcacf63c04e385dd973ca7e7ca1465a3b904a0893bcadb7e37681d38c95",
  "from": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
  "to": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
  "total_amount": "10",
  "spent_by_me": "10.0001925",
  "received_by_me": "10",
  "my_balance_change": "-0.0001925",
  "block_height": 0,
  "timestamp": 1566474670,
  "fee_details": {
    "type": "Eth",
    "coin": "ETH",
    "gas": 55000,
    "gas_price": "0.0000000035",
    "total_fee": "0.0001925"
  },
  "coin": "ETH",
  "internal_id": ""
}
```

#### Response (error - attempt to use UtxoFixed or UtxoPerKbyte for ETH coin)

```json
{ "error": "eth:369] Unsupported input fee type" }
```

#### Withdraw Max

```json
{
  "method": "withdraw",
  "coin": "ETH",
  "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
  "max": true,
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "block_height": 0,
  "coin": "ETH",
  "fee_details": {
    "type": "Eth",
    "coin": "ETH",
    "gas": 21000,
    "gas_price": "0.000000001",
    "total_fee": "0.000021"
  },
  "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
  "my_balance_change": "-10.000021",
  "received_by_me": "0",
  "spent_by_me": "10.000021",
  "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
  "total_amount": "10.000021",
  "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
  "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```

#### Withdraw QRC20

```json
{
  "method": "withdraw",
  "coin": "QRC20",
  "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
  "amount": 10,
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response (success)

```json
{
  "block_height": 0,
  "coin": "QRC20",
  "timestamp": 1608725061,
  "fee_details": {
    "type": "Qrc20",
    "coin": "tQTUM",
    "miner_fee": "0.00000447",
    "gas_limit": 100000,
    "gas_price": 40,
    "total_gas_fee": "0.04"
  },
  "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
  "my_balance_change": "-10",
  "received_by_me": "0",
  "spent_by_me": "10",
  "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
  "total_amount": "10",
  "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
  "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```

#### Withdraw QRC20 with gas limit

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "coin": "QRC20",
  "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
  "amount": 10,
  "fee": {
    "type": "Qrc20Gas",
    "gas_limit": 250000,
    "gas_price": 40
  }
}
```

```json
{
  "block_height": 0,
  "coin": "QRC20",
  "timestamp": 1608725061,
  "fee_details": {
    "type": "Qrc20",
    "coin": "tQTUM",
    "miner_fee": "0.00000447",
    "gas_limit": 250000,
    "gas_price": 40,
    "total_gas_fee": "0.1"
  },
  "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
  "my_balance_change": "-10",
  "received_by_me": "0",
  "spent_by_me": "10",
  "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
  "total_amount": "10",
  "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
  "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```
export const title = "Komodo DeFi Framework Method: Add Delegation";
export const description =
  "The add_delegation method initiates your node's staking of a compatible coin.";

# add\_delegation

The `add_delegation` method initiates your node's staking of a compatible coin. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

Note: Only UTXOs of 100 QTUM / tQTUM will be actively staked. It is recomended to consolidate your balance into a single UTXO before initiating delegated staking. After running `add_delegation`, you will need to broadcast the returned hex via [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process. Staking will only work with legacy QTUM addresses (segwit addresses are not supported).

## Arguments

| Structure                | Type   | Description                  |
| ------------------------ | ------ | ---------------------------- |
| coin                     | string | the coin being staked        |
| staking\_details.type    | string | the protocol being staked    |
| staking\_details.address | string | the delegated staker address |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "add_delegation",
  "params": {
    "coin": "tQTUM",
    "staking_details": {
      "type": "Qtum",
      "address": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "01000000017fdeb56c5b601454731451aa4daa004a7e1993e196462159c5e5360545fb9965000000006b483045022100c4101e0a70560dd8480404a620ac48a36a509c779cd3eb294d5b07f0447109ea0220145096570e6661fa52bf5df4b23329108959cb58cb02f1629e01cefb2d55fca6012102641b541e35bc915e375c8038f1099a977bc6736aa7265e9f65b7270b70d34366ffffffff020000000000000000fd0301540310552201284ce44c0e968c000000000000000000000000d4ea77298fdac12c657a18b222adc8b307e18127000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004120bf35729611a42875b49e890b7330c94a5227259b2cd987f885aaea3a08bad3897266a39db2d34f8009efa95eb877083b1eefccf2257f02cc0aa2e8db9a7f3eea00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000086c200c4a0ba030000001976a914c36ac1020b1eae632079692e7bef350d279489c988acb4db8061",
    "tx_hash": "308c91fd50ec0f724d8c9f5601676b93889ae072b369b7a3d62684d6c3c60e7b",
    "from": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "to": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "total_amount": "161.064",
    "spent_by_me": "161.064",
    "received_by_me": "160.16",
    "my_balance_change": "-0.904",
    "block_height": 0,
    "timestamp": 1635834804,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.004",
      "gas_limit": 2250000,
      "gas_price": 40,
      "total_gas_fee": "0.9"
    },
    "coin": "tQTUM",
    "internal_id": "",
    "transaction_type": "StakingDelegation"
  },
  "id": 0
}
```

#### Response (error - already delegating)

```json
{
  "mmrpc": "2.0",
  "error": "Already delegating to: qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
  "error_path": "qtum_delegation",
  "error_trace": "qtum_delegation:222]",
  "error_type": "AlreadyDelegating",
  "error_data": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Add Node to Version Stat";
export const description = "The add_node_to_version_stat method adds a Node's name, IP address and PeerID to a local database to track which version of MM2 it is running.";

# add\_node\_to\_version\_stat

The `add_node_to_version_stat` method adds a Node's name, IP address and PeerID to a local database to track which version of MM2 it is running. The name parameter is an arbitrary identifying string, such as "seed\_alpha" or "dragonhound\_DEV". The address parameter is the node's IP address or domain names. The Peer ID can be found in the MM2 log file after a connection has been initiated, and looks like the below:

`07 09:33:58, atomicdex_behaviour:610] INFO Local peer id: PeerId("12D3KooWReXsTVCKGAna1tzrD1jaUttTSs17ULFuvvzoGD9bqmmA")
`

Note: To allow collection of version stats, added nodes must open ports 42845 (tcp) and 42855 (ws).

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| name      | string | the name assigned to the node |
| address   | string | the IP address of the node    |
| peer\_id  | string | the node's unique Peer ID     |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "add_node_to_version_stat",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "name": "seed1",
    "address": "168.119.236.241",
    "peer_id": "12D3KooWEsuiKcQaBaKEzuMtT6uFjs89P1E8MK3wGRZbeuCbCw6P"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - peer id already in database)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.peer_id",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.peer_id",
  "id": null
}
```

#### Response (error - name already in database)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.name",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.name",
  "id": null
}
```

#### Response (error - invalid Peer ID)

```json
{
  "mmrpc": "2.0",
  "error": "Error on parse peer id 12D3RsaaWRmXsJsCKGAD5FJSsd7CSbbdrsd: decoding multihash failed",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:121]",
  "error_type": "PeerIdParseError",
  "error_data": [
    "12D3RsaaWRmXsJsCKGAD5FJSsd7CSbbdrsd",
    "decoding multihash failed"
  ],
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Best Orders";
export const description = "The best_orders method returns the best priced trades available on the orderbook.";

# best\_orders

The `best_orders` method returns the best priced trades available on the orderbook. There are two options for the request, either `volume` or `number`.
If request is made by `volume`, the returned results will show the best prices for trades that can fill the requested volume.
If request is made by `number`, the returned results will show a list of the best prices, `number` pairs long (e.g. top 5 best priced orders).
For coins with segwit, they may appear twice in the output (once for each address). E.g. `LTC` and `LTC-segwit`

The response of this method can contain coins that are not activated on the Komodo DeFi Framework API instance.
Activation will be required to proceed with the trade.

#### Arguments

| Structure     | Type   | Description                                                                                     |
| ------------- | ------ | ----------------------------------------------------------------------------------------------- |
| coin          | string | The ticker of the coin to get best orders                                                       |
| action        | string | Whether to `buy` or `sell` the selected coin                                                    |
| exclude\_mine | bool   | Defaults to `false`. If `true`, the users orders will be excluded from the response.            |
| request\_by   | object | A standard [RequestBy](/komodo-defi-framework/api/common_structures/orders/#request-by) object. |

#### Response

| Structure         | Type          | Description                                                                                                                |
| ----------------- | ------------- | -------------------------------------------------------------------------------------------------------------------------- |
| orders            | object (map)  | the `ticker -> array of standard [OrderData](/komodo-defi-framework/api/common_structures/orders/#order-data) objects` map |
| original\_tickers | list (string) | Tickers included in response when `orderbook_ticker` is configured for the queried coin in `coins` file                    |

#### 📌 Examples

#### Command (by number)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "DGB",
    "action": "buy",
    "request_by": {
      "type": "number",
      "value": 100
    }
  }
}
```

#### Response (by number - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "LTC-segwit": [
        {
          "coin": "LTC-segwit",
          "address": {
            "address_type": "Transparent",
            "address_data": "Lgrta1iKRcy8zzygVkZeEXuxBqzssPWtae"
          },
          "price": {
            "decimal": "0.0001087673",
            "rational": [
              [1, [1087673]],
              [1, [1410065408, 2]]
            ],
            "fraction": {
              "numer": "1087673",
              "denom": "10000000000"
            }
          },
          "pubkey": "026da2fc632afabbb1b86d04a9a012db25eca74db38ba2eccd88552f27f4c0b245",
          "uuid": "8530300a-b11c-4eca-80ab-c4124aaf3b64",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "24706.624279842",
            "rational": [
              [1, [986196625, 2876]],
              [1, [500000000]]
            ],
            "fraction": {
              "numer": "12353312139921",
              "denom": "500000000"
            }
          },
          "base_min_volume": {
            "decimal": "5.019891088590044985947063133864681756373468864263432116086360514603194158538457790163036133102504153",
            "rational": [
              [1, [5460000]],
              [1, [1087673]]
            ],
            "fraction": {
              "numer": "5460000",
              "denom": "1087673"
            }
          },
          "rel_max_volume": {
            "decimal": "2.6872728150328587666",
            "rational": [
              [1, [4244429513, 3128397295]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "13436364075164293833",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.000546",
            "rational": [
              [1, [273]],
              [1, [500000]]
            ],
            "fraction": {
              "numer": "273",
              "denom": "500000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ],
      "MATIC": [
        {
          "coin": "MATIC",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xf2ed2ac92489106c942c9e32c6a912ba61af93e3"
          },
          "price": {
            "decimal": "0.0104639634",
            "rational": [
              [1, [52319817]],
              [1, [705032704, 1]]
            ],
            "fraction": {
              "numer": "52319817",
              "denom": "5000000000"
            }
          },
          "pubkey": "02dbd8c73e2e80e4f3cf88d2f04a9d2d0df4269496608b14a3e17556fdcb01e0c1",
          "uuid": "95bb48ce-7411-4be7-a1b9-70e8f8d7887f",
          "is_mine": true,
          "base_max_volume": {
            "decimal": "8964.021726027",
            "rational": [
              [1, [424979275, 2087]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "8964021726027",
              "denom": "1000000000"
            }
          },
          "base_min_volume": {
            "decimal": "20.0825412816031",
            "rational": [
              [1, [1331989663, 46758]],
              [1, [1316134912, 2328]]
            ],
            "fraction": {
              "numer": "200825412816031",
              "denom": "10000000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "93.7991952579513554118",
            "rational": [
              [1, [2658798179, 1822452630, 25]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "468995976289756777059",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.21014297694968393172654",
            "rational": [
              [1, [3263923031, 2549837702, 569]],
              [1, [2067791872, 2170810533, 2710]]
            ],
            "fraction": {
              "numer": "10507148847484196586327",
              "denom": "50000000000000000000000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 3,
            "rel_nota": false
          }
        }
      ]
    },
    "original_tickers": {
      "LTC": ["LTC-segwit"],
      "BTC": ["BTC-segwit"],
      "XMY": ["XMY-segwit"]
    }
  },
  "id": 0
}
```

#### Command (by number, exclude own orders)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "DGB",
    "action": "buy",
    "exclude_mine": true,
    "request_by": {
      "type": "number",
      "value": 100
    }
  }
}
```

#### Response (by number - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "LTC-segwit": [
        {
          "coin": "LTC-segwit",
          "address": {
            "address_type": "Transparent",
            "address_data": "Lgrta1iKRcy8zzygVkZeEXuxBqzssPWtae"
          },
          "price": {
            "decimal": "0.0001087673",
            "rational": [
              [1, [1087673]],
              [1, [1410065408, 2]]
            ],
            "fraction": {
              "numer": "1087673",
              "denom": "10000000000"
            }
          },
          "pubkey": "026da2fc632afabbb1b86d04a9a012db25eca74db38ba2eccd88552f27f4c0b245",
          "uuid": "8530300a-b11c-4eca-80ab-c4124aaf3b64",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "24706.624279842",
            "rational": [
              [1, [986196625, 2876]],
              [1, [500000000]]
            ],
            "fraction": {
              "numer": "12353312139921",
              "denom": "500000000"
            }
          },
          "base_min_volume": {
            "decimal": "5.019891088590044985947063133864681756373468864263432116086360514603194158538457790163036133102504153",
            "rational": [
              [1, [5460000]],
              [1, [1087673]]
            ],
            "fraction": {
              "numer": "5460000",
              "denom": "1087673"
            }
          },
          "rel_max_volume": {
            "decimal": "2.6872728150328587666",
            "rational": [
              [1, [4244429513, 3128397295]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "13436364075164293833",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.000546",
            "rational": [
              [1, [273]],
              [1, [500000]]
            ],
            "fraction": {
              "numer": "273",
              "denom": "500000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ]
    },
    "original_tickers": {
      "LTC": ["LTC-segwit"],
      "BTC": ["BTC-segwit"],
      "XMY": ["XMY-segwit"]
    }
  },
  "id": 0
}
```

#### Command (by volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "BTC",
    "action": "buy",
    "request_by": {
      "type": "volume",
      "value": 0.01
    }
  }
}
```

#### Response (by volume - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "DASH": [
        {
          "coin": "DASH",
          "address": {
            "address_type": "Transparent",
            "address_data": "XefPeyw3KQYa5PUJeTMQRhMHQZGVy4YMWa"
          },
          "price": {
            "decimal": "3333.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
            "rational": [
              [1, [10000]],
              [1, [3]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "3"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "b17d7aee-2c0b-4311-935c-8c05e81f3813",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.097714296984",
            "rational": [
              [1, [3624352531, 2]],
              [1, [445948416, 29]]
            ],
            "fraction": {
              "numer": "12214287123",
              "denom": "125000000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000002331",
            "rational": [
              [1, [2331]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "2331",
              "denom": "1000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "325.71432328",
            "rational": [
              [1, [4071429041]],
              [1, [12500000]]
            ],
            "fraction": {
              "numer": "4071429041",
              "denom": "12500000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "LTC": [
        {
          "coin": "LTC",
          "address": {
            "address_type": "Transparent",
            "address_data": "LPCW5waySMa3BFZsxi2UrBjFnS464b97WU"
          },
          "price": {
            "decimal": "10000",
            "rational": [
              [1, [10000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "07764da3-bbec-4e50-9711-2baf0f8bf30b",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.11423436",
            "rational": [
              [1, [2855859]],
              [1, [25000000]]
            ],
            "fraction": {
              "numer": "2855859",
              "denom": "25000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000777",
            "rational": [
              [1, [777]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "1000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "1142.3436",
            "rational": [
              [1, [2855859]],
              [1, [2500]]
            ],
            "fraction": {
              "numer": "2855859",
              "denom": "2500"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": {
            "base_confs": 1,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ],
      "KMD": [
        {
          "coin": "KMD",
          "address": {
            "address_type": "Transparent",
            "address_data": "RDFjuFARxX8YzTEvFk2JfgzhLV9QcPWy5f"
          },
          "price": {
            "decimal": "322580.6451612903225806451612903225806451612903225806451612903225806451612903225806451612903225806452",
            "rational": [
              [1, [10000000]],
              [1, [31]]
            ],
            "fraction": {
              "numer": "10000000",
              "denom": "31"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "adff2e1d-4514-49ea-a30b-9575711767cd",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.031",
            "rational": [
              [1, [31]],
              [1, [1000]]
            ],
            "fraction": {
              "numer": "31",
              "denom": "1000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000024087",
            "rational": [
              [1, [24087]],
              [1, [3567587328, 232]]
            ],
            "fraction": {
              "numer": "24087",
              "denom": "1000000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "10000",
            "rational": [
              [1, [10000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "1"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "DAI-ERC20": [
        {
          "coin": "DAI-ERC20",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xe5e6d27100474d34cc0f87ee387756395019019c"
          },
          "price": {
            "decimal": "33333333.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
            "rational": [
              [1, [100000000]],
              [1, [3]]
            ],
            "fraction": {
              "numer": "100000000",
              "denom": "3"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "15a47eff-607e-4729-896b-6acb309d5022",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.1075026242236026",
            "rational": [
              [1, [2258990909, 125149]],
              [1, [937459712, 1164153]]
            ],
            "fraction": {
              "numer": "537513121118013",
              "denom": "5000000000000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.0081585",
            "rational": [
              [1, [16317]],
              [1, [2000000]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "2000000"
            }
          },
          "rel_max_volume": {
            "decimal": "3583420.80745342",
            "rational": [
              [1, [2184652735, 41716]],
              [1, [50000000]]
            ],
            "fraction": {
              "numer": "179171040372671",
              "denom": "50000000"
            }
          },
          "rel_min_volume": {
            "decimal": "271950",
            "rational": [
              [1, [271950]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "271950",
              "denom": "1"
            }
          },
          "conf_settings": null
        }
      ],
      "NMC": [
        {
          "coin": "NMC",
          "address": {
            "address_type": "Transparent",
            "address_data": "MzYv2Nn8H5RYSz8E4PMkngpQJT5ruqWV4N"
          },
          "price": {
            "decimal": "80000",
            "rational": [
              [1, [80000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "80000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "87e3e99c-481f-46cc-9a64-ccc89ba5e434",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.025",
            "rational": [
              [1, [1]],
              [1, [40]]
            ],
            "fraction": {
              "numer": "1",
              "denom": "40"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000097125",
            "rational": [
              [1, [777]],
              [1, [3705032704, 1]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "8000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "2000",
            "rational": [
              [1, [2000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "2000",
              "denom": "1"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "DOGE": [
        {
          "coin": "DOGE",
          "address": {
            "address_type": "Transparent",
            "address_data": "D97eMzDnf7EGTT4KXA2k7vq6TMR7JDpe1D"
          },
          "price": {
            "decimal": "20000000",
            "rational": [
              [1, [20000000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "20000000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "14de5083-daee-4d82-bc41-ac809076bf5f",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.02074779",
            "rational": [
              [1, [2074779]],
              [1, [100000000]]
            ],
            "fraction": {
              "numer": "2074779",
              "denom": "100000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "rel_max_volume": {
            "decimal": "414955.8",
            "rational": [
              [1, [2074779]],
              [1, [5]]
            ],
            "fraction": {
              "numer": "2074779",
              "denom": "5"
            }
          },
          "rel_min_volume": {
            "decimal": "155400",
            "rational": [
              [1, [155400]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "155400",
              "denom": "1"
            }
          },
          "conf_settings": null
        }
      ],
      "ETH": [
        {
          "coin": "ETH",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xe5e6d27100474d34cc0f87ee387756395019019c"
          },
          "price": {
            "decimal": "400000",
            "rational": [
              [1, [400000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "400000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "19220788-3643-4fb2-9445-e13515ef811e",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.11209544",
            "rational": [
              [1, [1401193]],
              [1, [12500000]]
            ],
            "fraction": {
              "numer": "1401193",
              "denom": "12500000"
            }
          },
          "base_min_volume": {
            "decimal": "0.0081585",
            "rational": [
              [1, [16317]],
              [1, [2000000]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "2000000"
            }
          },
          "rel_max_volume": {
            "decimal": "44838.176",
            "rational": [
              [1, [5604772]],
              [1, [125]]
            ],
            "fraction": {
              "numer": "5604772",
              "denom": "125"
            }
          },
          "rel_min_volume": {
            "decimal": "3263.4",
            "rational": [
              [1, [16317]],
              [1, [5]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "5"
            }
          },
          "conf_settings": null
        }
      ]
    },
    "original_tickers": {
      "MONA": ["MONA-segwit"],
      "NMC": ["NMC-segwit"],
      "LTC": ["LTC-segwit"],
      "PIC": ["PIC-segwit"],
      "LCC": ["LCC-segwit"],
      "BSTY": ["BSTY-segwit"],
      "BTC": ["BTC-segwit"],
      "PPC": ["PPC-segwit"],
      "GLEEC-OLD": ["GLEEC-OLD-segwit"],
      "LBC": ["LBC-segwit"],
      "BTE": ["BTE-segwit"],
      "VTC": ["VTC-segwit"],
      "LTFN": ["LTFN-segwit"],
      "SYS": ["SYS-segwit"],
      "BTX": ["BTX-segwit"],
      "tBTC-TEST": ["tBTC-TEST-segwit"],
      "CDN": ["CDN-segwit"],
      "FTC": ["FTC-segwit"],
      "GRS": ["GRS-segwit"],
      "RIC": ["RIC-segwit"],
      "XMY": ["XMY-segwit"],
      "VIA": ["VIA-segwit"],
      "WHIVE": ["WHIVE-segwit"],
      "XEP": ["XEP-segwit"],
      "FJC": ["FJC-segwit"],
      "WCN": ["WCN-segwit"],
      "QTUM": ["QTUM-segwit"],
      "tQTUM": ["tQTUM-segwit"],
      "DGB": ["DGB-segwit"]
    }
  },
  "id": null
}
```

#### Error Responses

*   `InvalidRequest` - Invalid type (`number` value must be integer)
*   `InvalidRequest` - Invalid type (type must be either `volume` or `number`, action mut be either `buy` or `sell`)
*   `CoinIsWalletOnly` - Wallet only coins can not be traded.
*   `P2PError` - There is a connection problem.
export const title = "Komodo DeFi Framework Method: Enable BCH with Tokens";
export const description = "Using this method, you can enable BCH/tBCH along with multiple SLP tokens in a single command.";

# enable\_bch\_with\_tokens

The Komodo DeFi Framework supports Bitcoin Cash SLP tokens. Using this method, you can enable BCH/tBCH along with multiple SLP tokens in a single command.

### Request Parameters

| Parameter                | Type             | Description                                                                                                                                                                                                                                               |
| ------------------------ | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                   | string           | Ticker of the platform protocol coin. Options: `BCH` or `tBCH`                                                                                                                                                                                            |
| bchd\_urls               | array of strings | A list of BCHD gRPC API server URLs, used for  validation of SLP token transactions. It's recommended to add as many servers as possible. The URLs list can be found at [https://bchd.fountainhead.cash/](https://bchd.fountainhead.cash/).               |
| mode                     | object           | A standard [ActivationMode](/komodo-defi-framework/api/common_structures/activation/#activation-mode) object.                                                                                                                                             |
| tx\_history              | boolean          | If `true`, spawns a background loop to store the local cache of address(es) transactions. Defaults to `false`.                                                                                                                                            |
| slp\_tokens\_requests    | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                      |
| address\_format          | object           | Optional. Overwrites the address format from coins file, if set. A standard [AddressFormat](/komodo-defi-framework/api/common_structures/#address-format) object.                                                                                         |
| allow\_slp\_unsafe\_conf | boolean          | Optional, defaults to `false`. If `true`, allows bchd\_urls to be empty. **Warning:** it is highly unsafe to do so as it may lead to invalid SLP transactions generation and tokens burning.                                                              |
| get\_balances            | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                   |
| required\_confirmations  | integer          | Optional, defaults to value in the coins file, or `3` if not set. Confirmations to wait for steps in swap.                                                                                                                                                |
| requires\_notarization   | boolean          | Optional, defaults to `true`. Has no effect on BCH.                                                                                                                                                                                                       |
| tx\_history              | boolean          | Optional, defaults to `true`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method |
| utxo\_merge\_params      | object           | A standard [UtxoMergeParams](/komodo-defi-framework/api/common_structures/activation/#utxo-merge-params) object. Used to reduce a wallet's UTXO count in cases where it is causing significantly slower RPC responses.                                    |
|                          |                  |                                                                                                                                                                                                                                                           |

*   Go to: [https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums) for a full list of nodes/servers.

### Response Parameters

| Parameter             | Type    | Description                                                                                                                                                                   |
| --------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block        | integer | Block height of the coin being activated                                                                                                                                      |
| bch\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |
| slp\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |

bch\_addresses\_infos and slp\_addresses\_infos are the same. This should be consolidated in the api.

### 📌 Examples

#### Request with tx\_history, cashaddress format, and automated utxo merging.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_bch_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BCH",
    "allow_slp_unsafe_conf": false,
    "bchd_urls": [
      "https://bchd.dragonhound.info"
    ],
    "mode": {
      "rpc": "Electrum",
      "rpc_data": {
        "servers": [
          {
            "url": "bch.imaginary.cash:50002",
            "protocol": "SSL"
          },
          {
            "url": "cashnode.bch.ninja:50002",
            "protocol": "SSL"
          },
          {
            "url": "electrum3.cipig.net:20055",
            "protocol": "SSL"
          }
        ]
      }
    },
    "tx_history": true,
    "slp_tokens_requests": [
      {
        "ticker": "ASLP-SLP",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false,
    "address_format": {
      "format": "cashaddress",
      "network": "bitcoincash"
    },
    "utxo_merge_params": {
      "merge_at": 50,
      "check_every": 10,
      "max_merge_at_once": 25
    }
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 1480481,
		"bch_addresses_infos": {
			"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
				"balances": {
					"spendable": "0.11398301",
					"unspendable": "0.00001"
				}
			}
		},
		"slp_addresses_infos": {
			"simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
				"balances": {
					"ASLP": {
						"spendable": "5.2974",
						"unspendable": "0"
					}
				}
			}
		}
	},
	"id": null
}
```

#### Request with `get_balances` set to false

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_bch_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BCH",
    "allow_slp_unsafe_conf": false,
    "bchd_urls": [
      "https://bchd.dragonhound.info"
    ],
    "mode": {
      "rpc": "Electrum",
      "rpc_data": {
        "servers": [
          {
            "url": "bch.imaginary.cash:50002",
            "protocol": "SSL"
          },
          {
            "url": "cashnode.bch.ninja:50002",
            "protocol": "SSL"
          },
          {
            "url": "electrum3.cipig.net:20055",
            "protocol": "SSL"
          }
        ]
      }
    },
    "tx_history": true,
    "get_balances": false,
    "slp_tokens_requests": [
      {
        "ticker": "ASLP-SLP",
        "required_confirmations": 4
      }
    ]
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 791267,
		"bch_addresses_infos": {
			"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2"
			}
		},
		"slp_addresses_infos": {
			"simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
				"tickers": ["ASLP-SLP"]
			}
		}
	},
	"id": null
}
```

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformIsAlreadyActivated Error

In this case, you need to [disable](/komodo-defi-framework/api/legacy/disable_coin/) BCH and try again.

```json
{
    "mmrpc": "2.0",
    "error": "BCH",
    "error_path": "platform_coin_with_tokens",
    "error_trace": "platform_coin_with_tokens:281]",
    "error_type": "PlatformIsAlreadyActivated",
    "error_data": "BCH",
    "id": null
}
```

#### PlatformConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform BCH-wrong config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:286] prelude:56]",
    "error_type": "PlatformConfigIsNotFound",
    "error_data": "BCH-wrong",
    "id": null
}
```

#### UnexpectedPlatformProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected platform protocol UTXO for BTC",
    "error_path": "platform_coin_with_tokens.prelude.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:286] prelude:67] bch_with_tokens_activation:127]",
    "error_type": "UnexpectedPlatformProtocol",
    "error_data": {
        "ticker": "BTC",
        "protocol": {
            "type": "UTXO"
        }
    },
    "id": null
}
```

#### UnexpectedTokenProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected token protocol ERC20 { platform: \"ETH\", contract_address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\" } for USDT-ERC20",
    "error_path": "platform_coin_with_tokens.prelude.slp_token_activation",
    "error_trace": "platform_coin_with_tokens:301] platform_coin_with_tokens:114] prelude:67] slp_token_activation:47]",
    "error_type": "UnexpectedTokenProtocol",
    "error_data": {
        "ticker": "USDT-ERC20",
        "protocol": {
            "type": "ERC20",
            "protocol_data": {
                "platform": "ETH",
                "contract_address": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
            }
        }
    },
    "id": null
}
```

#### PlatformCoinCreationError Error

```json
{
    "mmrpc": "2.0",
    "error": "Error Using empty bchd_urls is unsafe for SLP users! on platform coin BCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "BCH",
        "error": "Using empty bchd_urls is unsafe for SLP users!"
    },
    "id": null
}
```

#### PlatformCoinCreationError Error (native)

```json
{
    "mmrpc": "2.0",
    "error": "Error bch:633] utxo:1704] utxo:995] Error parsing the native wallet configuration '/home/user/.Bitcoin Cash Testnet/Bitcoin Cash Testnet.conf': No such file or directory (os error 2) on platform coin tBCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "tBCH",
        "error": "bch:633] utxo:1704] utxo:995] Error parsing the native wallet configuration '/home/user/.Bitcoin Cash Testnet/Bitcoin Cash Testnet.conf': No such file or directory (os error 2)"
    },
    "id": null
}
```

#### PlatformCoinCreationError Error (Electrum server not responding)

```json
{
    "mmrpc": "2.0",
    "error": "Error bch:633] utxo:1667] Failed to connect to at least 1 of [ElectrumRpcRequest { url: \"bch0.kister.net:5100\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"testnet.imaginary.cash:5000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"blackie.c3-soft.com:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"tbch.loping.net:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"electroncash.de:5000\", protocol: TCP, disable_cert_verification: false }] in 5 seconds. on platform coin tBCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "tBCH",
        "error": "bch:633] utxo:1667] Failed to connect to at least 1 of [ElectrumRpcRequest { url: \"bch0.kister.net:5100\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"testnet.imaginary.cash:5000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"blackie.c3-soft.com:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"tbch.loping.net:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"electroncash.de:5000\", protocol: TCP, disable_cert_verification: false }] in 5 seconds."
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable ERC20";
export const description =
  "The enable_erc20 method allows you to activate additional ERC20 like tokens of a EVM type platform coin.";

# enable\_erc20

The `enable_erc20` method allows you to activate additional ERC20 like tokens of a EVM type platform coin. Before using this method, you first need to use the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/enable_eth_with_tokens/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the ERC20 like token coin.                                                               |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_erc20",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BAT-ERC20",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "0x0d317904AF3BA3A993d557b6cba147FEA4DeB57E": {
        "spendable": "0",
        "unspendable": "0"
      }
    },
    "platform_coin": "ETH",
    "token_contract_address": "0x0d8775f648430679a709e98d2b0cb6250d2887ef",
    "required_confirmations": 3
  },
  "id": null
}
```

## Error - Platform coin is not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin ETH is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:126] lp_coins:2797]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "ETH",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token BAT-ERC20 is already activated",
  "error_path": "token",
  "error_trace": "token:119]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "BAT-ERC20",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token BATT-ERC20 config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:122] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "BATT-ERC20",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable ETH with Tokens";
export const description = "The enable_eth_with_tokens method allows you to enable a platform coin like ETH along with multiple ERC20 like tokens of the platform coin chain in a single command.";

# enable\_eth\_with\_tokens

The Komodo DeFi Framework supports ETH(Ethereum) and many other EVM type platform coins like AVAX(Avalanche), BNB(Binance), FTM(Fantom), MATIC(Polygon), ONE(Harmony), ETH-ARB20(Arbitrum).
Additionally, it supports ERC20 tokens on the ETH chain and associated ERC20 like tokens on the rest of the platform coin chains.Using this method, you can enable a platform coin along with multiple ERC20 like tokens of the platform coin chain in a single command.

### Request Parameters

| Parameter                   | Type             | Description                                                                                                                                                                                                                                                                                                                                  |
| --------------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                      | string           | Ticker of the platform protocol coin. Options: `ETH`, `AVAX`, `BNB`, `FTM`, `MATIC`, `ONE`, `ETH-ARB20`                                                                                                                                                                                                                                      |
| mm2                         | integer          | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                                                                                                                   |
| swap\_contract\_address     | string           | Address of etomic swap smart contract                                                                                                                                                                                                                                                                                                        |
| fallback\_swap\_contract    | string           | Address of backup etomic swap smart contract                                                                                                                                                                                                                                                                                                 |
| maker\_swap\_v2\_contract   | string           | Backup address for the maker's swap smart contract                                                                                                                                                                                                                                                                                           |
| taker\_swap\_v2\_contract   | string           | Backup address for the taker's swap smart contract                                                                                                                                                                                                                                                                                           |
| nodes                       | array of objects | A list of standard [EvmNode](/komodo-defi-framework/api/common_structures/activation/#evm-node) objects. ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums)).                                                                                                   |
|                             |                  |                                                                                                                                                                                                                                                                                                                                              |
| erc20\_tokens\_requests     | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                                                                                                         |
| gas\_station\_decimals      | integer          | Optional, for ETH/ERC20 and other gas model chains. Defaults to `8`. Defines the decimals used to denominate the gas station response to gwei units. For example, the ETH gas station uses 8 decimals, which means that "average": 860 is equal to 86 gwei. While the Matic gas station uses 9 decimals, so 860 would mean 860 gwei exactly. |
| gas\_station\_policy.policy | string           | Optional, for ETH/ERC20 and other gas model chains. Defaults to `"MeanAverageFast"`. Defines the method of gas price calculation from the station response. `"MeanAverageFast"` will use the mean between average and fast fields. `"Average"` will return a simple average value.                                                           |
| get\_balances               | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                                                                                                      |
| priv\_key\_policy           | string           | Optional, defaults to `ContextPrivKey`. value can be `ContextPrivKey`,`Trezor` when Komodo DeFi Framework is built for native platforms. value can be `ContextPrivKey`, `Trezor`, `Metamask` when the Komodo DeFi Framework is built targeting `wasm`                                                                                        |
| required\_confirmations     | integer          | Optional, defaults to `3`. When the platform coin is involved, the number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap                                                                                                                                                          |
| requires\_notarization      | boolean          | Optional, defaults to `false`. If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step.                                                                    |
| rpc\_mode                   | string           | Optional, defaults to `Http`, value can be `Metamask` when the Komodo DeFi Framework is built targeting `wasm`                                                                                                                                                                                                                               |
| tx\_history                 | boolean          | Optional, defaults to `false`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                                                                                   |

### Response Parameters

| Parameter               | Type    | Description                                                                                                                                                                   |
| ----------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block          | integer | Block height of the coin being activated                                                                                                                                      |
| eth\_addresses\_infos   | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |
| erc20\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |

### 📌 Examples

#### Request including optional gas station parameters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_eth_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ETH",
    "gas_station_url": "https://ethgasstation.info/json/ethgasAPI.json",
    "gas_station_decimals": 8,
    "gas_station_policy": {
      "policy": "MeanAverageFast"
    },
    "mm2": 1,
    "priv_key_policy": "ContextPrivKey",
    "swap_contract_address": "0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80",
    "fallback_swap_contract": "0x8500AFc0bc5214728082163326C2FF0C73f4a871",
    "nodes": [
      {
        "url": "http://eth1.cipig.net:18555",
        "gui_auth": false
      },
      {
        "url": "https://node.komodo.earth:8080/ethereum",
        "gui_auth": true
      }
    ],
    "rpc_mode": "Http",
    "tx_history": true,
    "erc20_tokens_requests": [
      {
        "ticker": "APE-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "BCH-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "MINDS-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "BUSD-ERC20",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 16145371,
		"eth_addresses_infos": {
			"0x0d317904AF3BA3A993d557b6cba147FEA4DeB57E": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "042e6e6b1ca76a7cd1fd2e1ed13bdc83909ad17b17748781308abe55caf863bec6dac19a0ead812d54c8c07508e2f30a258628832c1337f4fdd423a879f67bc823",
				"balances": {
					"spendable": "0",
					"unspendable": "0"
				}
			}
		},
		"erc20_addresses_infos": {
			"0x0d317904AF3BA3A993d557b6cba147FEA4DeB57E": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "042e6e6b1ca76a7cd1fd2e1ed13bdc83909ad17b17748781308abe55caf863bec6dac19a0ead812d54c8c07508e2f30a258628832c1337f4fdd423a879f67bc823",
				"balances": {
					"MINDS-ERC20": {
						"spendable": "0",
						"unspendable": "0"
					},
					"APE-ERC20": {
						"spendable": "0",
						"unspendable": "0"
					},
					"BUSD-ERC20": {
						"spendable": "0",
						"unspendable": "0"
					},
					"BCH-ERC20": {
						"spendable": "0",
						"unspendable": "0"
					}
				}
			}
		}
	},
	"id": null
}
```

#### Request with `get_balances` set to false

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_eth_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "MATIC",
    "get_balances": false,
    "tx_history": false,
    "gas_station_url": "https://gasstation-mainnet.matic.network/",
    "swap_contract_address": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "fallback_swap_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "nodes": [
      {
        "url": "https://polygon-rpc.com"
      },
      {
        "url": "https://node.komodo.earth:8080/polygon"
      },
      {
        "url": "https://block-proxy.komodo.earth/rpc/matic"
      }
    ],
    "erc20_tokens_requests": [
      {
        "ticker": "PGX-PLG20",
        "required_confirmations": 4
      },
      {
        "ticker": "AAVE-PLG20",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 42328813,
		"eth_addresses_infos": {
			"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b"
			}
		},
		"erc20_addresses_infos": {
			"0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b",
				"tickers": ["AAVE-PLG20", "PGX-PLG20"]
			}
		}
	},
	"id": null
}
```

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformIsAlreadyActivated Error

In this case, you need to [disable](/komodo-defi-framework/api/legacy/disable_coin/) the platform coin and try again.

```json
{
    "mmrpc": "2.0",
    "error": "ETH",
    "error_path": "platform_coin_with_tokens",
    "error_trace": "platform_coin_with_tokens:297]",
    "error_type": "PlatformIsAlreadyActivated",
    "error_data": "ETH",
    "id": null
}
```

#### PlatformConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform ETH config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:302] prelude:79]",
    "error_type": "PlatformConfigIsNotFound",
    "error_data": "ETH",
    "id": null
}
```

#### CoinProtocolParseError Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform coin ETH protocol parsing failed: invalid type: null, expected adjacently tagged enum CoinProtocol",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:302] prelude:82]",
    "error_type": "CoinProtocolParseError",
    "error_data": {
        "ticker": "ETH",
        "error": "invalid type: null, expected adjacently tagged enum CoinProtocol"
    },
    "id": null
}
```

#### UnexpectedPlatformProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected platform protocol QTUM for ETH",
    "error_path": "platform_coin_with_tokens.prelude.eth_with_token_activation",
    "error_trace": "platform_coin_with_tokens:302] prelude:90] eth_with_token_activation:64]",
    "error_type": "UnexpectedPlatformProtocol",
    "error_data": { "ticker": "ETH", "protocol": { "type": "QTUM" } },
    "id": null
}
```

#### TokenConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Token BTUSD-ERC20 config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:79]",
    "error_type": "TokenConfigIsNotFound",
    "error_data": "BTUSD-ERC20",
    "id": null
}
```

#### TokenProtocolParseError Error

```json
{
    "mmrpc": "2.0",
    "error": "Token BUSD-ERC20 protocol parsing failed: unknown variant `TERC20`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:82]",
    "error_type": "TokenProtocolParseError",
    "error_data": {
        "ticker": "BUSD-ERC20",
        "error": "unknown variant `TERC20`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`"
    },
    "id": null
}
```

#### UnexpectedTokenProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected token protocol QRC20 { platform: \"ETH\", contract_address: \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\" } for BUSD-ERC20",
    "error_path": "platform_coin_with_tokens.prelude.erc20_token_activation",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:90] erc20_token_activation:58]",
    "error_type": "UnexpectedTokenProtocol",
    "error_data": {
        "ticker": "BUSD-ERC20",
        "protocol": {
            "type": "QRC20",
            "protocol_data": {
                "platform": "ETH",
                "contract_address": "0x4Fabb145d64652a948d72533023f6E7A623C7C53"
            }
        }
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable SLP";
export const description =
  "The enable_slp method allows you to activate additional SLP tokens.";

# enable\_slp

The `enable_slp` method allows you to activate additional SLP tokens. Before using this method, you first need to use the [enable\_bch\_with\_tokens](/komodo-defi-framework/api/v20/enable_bch_with_tokens/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the SLP token.                                                                           |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_slp",
  "mmrpc": "2.0",
  "params": {
    "ticker": "SPICE-SLP",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
        "spendable": "0",
        "unspendable": "0"
      }
    },
    "token_id": "7f8889682d57369ed0e32336f8b7e0ffec625a35cca183f4e81fde4e71a538a1",
    "platform_coin": "BCH",
    "required_confirmations": 3
  },
  "id": null
}
```

## Error - BCH not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin BCH is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:102] lp_coins:1924]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "BCH",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token SPICE-SLP is already activated",
  "error_path": "token",
  "error_trace": "token:95]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "SPICE-SLP",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token SPICE-SLP-WRONG config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:98] prelude:56]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "SPICE-SLP-WRONG",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable Tendermint Token";
export const description =
  "The enable_tendermint_token method allows you to activate additional Tendermint assets.";

# enable\_tendermint\_token

The `enable_tendermint_token` method allows you to activate additional Tendermint assets. Before using this method, you first need to use the [enable\_tendermint\_with\_assets](/komodo-defi-framework/api/v20/enable_tendermint_with_assets/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the Tendermint asset.                                                                    |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_tendermint_token",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ATOM-IBC_IRIS",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k": {
        "spendable": "0.028306",
        "unspendable": "0"
      }
    },
    "platform_coin": "IRIS"
  },
  "id": null
}
```

## Error - Platform coin is not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin IRIS is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:126] lp_coins:2847]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "IRIS",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token ATOM-IBC_IRIS is already activated",
  "error_path": "token",
  "error_trace": "token:119]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "ATOM-IBC_IRIS",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token UP-AND-ATOM config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:122] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "UP-AND-ATOM",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable Tendermint Token with Assets";
export const description = "Use this method to activate Tendermint coins (COSMOS/IRIS/OSMOSIS) and IBC assets in a single command.";

# enable\_tendermint\_with\_assets

Use this method to activate Tendermint coins (COSMOS/IRIS/OSMOSIS) and IBC assets in a single command.

### Request Parameters

| Parameter               | Type             | Description                                                                                                                                                                                                                                                               |
| ----------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                  | string           | Ticker of the platform protocol coin.  Options: `ATOM`, `IRIS`, `OSMOSIS`                                                                                                                                                                                                 |
| mm2                     | integer          | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                                                |
| tokens\_params          | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                                      |
| priv\_key\_policy       | string           | Optional, defaults to `ContextPrivKey`. value can be `ContextPrivKey`,`Trezor` when Komodo DeFi Framework is built for native platforms. value can be `ContextPrivKey`, `Trezor`, `Metamask` when the Komodo DeFi Framework is built targeting `wasm`                     |
| tx\_history             | boolean          | Optional, defaults to `false`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                |
| required\_confirmations | integer          | Optional, defaults to `3`. When the platform coin is involved, the number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap                                                                                       |
| requires\_notarization  | boolean          | Optional, defaults to `false`. If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step. |
| get\_balances           | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                                   |

### Response Parameters

| Parameter        | Type             | Description                                                                                                                                                            |
| ---------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block   | integer          | Block height of the coin being activated                                                                                                                               |
| ticker           | string           | Ticker of the platform protocol coin, as input in the request.                                                                                                         |
| address          | string           | An address for the activated coin                                                                                                                                      |
| balance          | object           | Only returned when `get_balances` is `true`. A standard [BalanceInfos](/komodo-defi-framework/api/common_structures/#balance-infos) object.                            |
| tokens\_balances | array of objects | Only returned when `get_balances` is `true`. A list of standard [AddressInfo](/komodo-defi-framework/api/common_structures/#address-info) objects, one for each token. |
| tokens\_tickers  | array            | Only returned when `get_balances` is `false`. A list of each token which was activated.                                                                                |

### 📌 Examples

#### Request default optional values

```json
{
  "method": "enable_tendermint_with_assets",
  "mmrpc": "2.0",
  "params": {
    "ticker": "IRIS",
    "tokens_params": [
      {
        "ticker": "ATOM-IBC_IRIS"
      }
    ],
    "rpc_urls": [
      "https://iris.komodo.earth/",
      "https://rpc.irishub-1.irisnet.org"
    ]
  },
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"ticker": "IRIS",
		"address": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
		"current_block": 19769638,
		"balance": {
			"spendable": "44.147264",
			"unspendable": "0"
		},
		"tokens_balances": {
			"ATOM-IBC_IRIS": {
				"spendable": "0.028306",
				"unspendable": "0"
			}
		}
	},
	"id": null
}
```

#### Request with `get_balances` set to `false`

```json
{
  "method": "enable_tendermint_with_assets",
  "mmrpc": "2.0",
  "params": {
    "ticker": "IRIS",
    "tokens_params": [
      {
        "ticker": "ATOM-IBC_IRIS"
      }
    ],
    "rpc_urls": [
      "https://iris.komodo.earth/",
      "https://rpc.irishub-1.irisnet.org"
    ],
    "tx_history": true,
    "get_balances": false
  },
  "userpass": "RPC_UserP@SSW0RD"
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"ticker": "IRIS",
		"address": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
		"current_block": 19769628,
		"tokens_tickers": ["ATOM-IBC_IRIS"]
	},
	"id": null
}
```

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformConfigIsNotFound Error

```json
{
  "mmrpc": "2.0",
  "error": "Platform WALDO config is not found",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:302] prelude:79]",
  "error_type": "PlatformConfigIsNotFound",
  "error_data": "WALDO",
  "id": null
}
```

#### PlatformIsAlreadyActivated Error

```json
{
  "mmrpc": "2.0",
  "error": "IRIS",
  "error_path": "platform_coin_with_tokens",
  "error_trace": "platform_coin_with_tokens:297]",
  "error_type": "PlatformIsAlreadyActivated",
  "error_data": "IRIS",
  "id": null
}
```

#### CoinProtocolParseError

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin IRIS protocol parsing failed: invalid type: null, expected adjacently tagged enum CoinProtocol",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:302] prelude:82]",
  "error_type": "CoinProtocolParseError",
  "error_data": {
    "ticker": "IRIS",
    "error": "invalid type: null, expected adjacently tagged enum CoinProtocol"
  },
  "id": null
}
```

### UnexpectedPlatformProtocol Error

```json
{
  "mmrpc": "2.0",
  "error": "Unexpected platform protocol BCH { slp_prefix: \"simpleledger\" } for BCH",
  "error_path": "platform_coin_with_tokens.prelude.tendermint_with_assets_activation",
  "error_trace": "platform_coin_with_tokens:302] prelude:90] tendermint_with_assets_activation:92]",
  "error_type": "UnexpectedPlatformProtocol",
  "error_data": {
    "ticker": "BCH",
    "protocol": {
      "type": "BCH",
      "protocol_data": {
        "slp_prefix": "simpleledger"
      }
    }
  },
  "id": null
}
```

### TokenConfigIsNotFound Error

```json
{
  "mmrpc": "2.0",
  "error": "Token GALT config is not found",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "GALT",
  "id": null
}
```

### TokenProtocolParseError Error

```json
{
  "mmrpc": "2.0",
  "error": "Token BABYDOGE-BEP20 protocol parsing failed: unknown variant `WOOF`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:82]",
  "error_type": "TokenProtocolParseError",
  "error_data": {
    "ticker": "BABYDOGE-BEP20",
    "error": "unknown variant `WOOF`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`"
  },
  "id": null
}
```

### UnexpectedTokenProtocol Error

```json
{
  "mmrpc": "2.0",
  "error": "Unexpected token protocol UTXO for KMD",
  "error_path": "platform_coin_with_tokens.prelude.tendermint_with_assets_activation",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:90] tendermint_with_assets_activation:101]",
  "error_type": "UnexpectedTokenProtocol",
  "error_data": {
    "ticker": "KMD",
    "protocol": {
      "type": "UTXO"
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Get Public Key";
export const description = "The get_public_key method returns the compressed secp256k1 pubkey corresponding to the user's seed phrase.";

# get\_public\_key

The `get_public_key` method returns the compressed secp256k1 pubkey corresponding to the user's seed phrase.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure   | Type   | Description   |
| ----------- | ------ | ------------- |
| public\_key | string | User's pubkey |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_public_key",
  "params": {},
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "public_key": "0366d28a7926fb20287132692c4cef7bc7e00e76da064948676f8549c0ed7114d3"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Public Key Hash";
export const description = "The get_public_key_hash method returns the RIPEMD-160 hash version of your public key.";

# get\_public\_key\_hash

The `get_public_key_hash` method returns the [RIPEMD-160](https://en.bitcoin.it/wiki/RIPEMD-160) hash version of your public key

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure         | Type   | Description                       |
| ----------------- | ------ | --------------------------------- |
| public\_key\_hash | string | User's RIPEMD-160 public key hash |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_public_key_hash",
  "params": {},
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "public_key_hash": "05aab5342166f8594baf17a7d9bef5d567443327"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Raw Transaction";
export const description = "The get_raw_transaction method retrieves the signed raw transaction hex for a confirmed or mempool transaction by providing the coin and tx_hash as input.";

# get\_raw\_transaction

The `get_raw_transaction` method takes `coin` and `tx_hash` as input, and returns the full signed raw transaction hex for any transaction that is confirmed or within the mempool.

## Arguments

| Structure | Type   | Description                                                          |
| --------- | ------ | -------------------------------------------------------------------- |
| coin      | string | the name of the coin the user desires to request for the transaction |
| tx\_hash  | string | hash of the transaction                                              |

## Response

| Structure | Type   | Description                                  |
| --------- | ------ | -------------------------------------------- |
| tx\_hex   | string | bytes of signed transaction in string format |

#### Examples:

##### Request (DOC)

```json
{
  "mmrpc": "2.0",
  "method": "get_raw_transaction",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "coin": "DOC",
    "tx_hash": "989360b0225b4e05fa13643e2e306c8eb5c52fa611615dfd30195089010b1c7b"
  },
  "id": 1
}
```

##### Response (success)

```json
{
  "mmrpc":"2.0",
  "result":{
  "tx_hex":"0400008085202f89025655b6fec358091a4a6b34107e69b10bd7660056d8f2a1e5f8eef0db6aec960100000000494830450221008c89db5e2d93d7674fe152e37344dfd24a0b1d4d382a7e0bcfc5d8190a141d72022050ce4ef929429e7e1a6c4ebd3f72a1a2aa25da1e0df65553a2c657658077ed1d01feffffff79cc137b70c39c9c7c2b9230c818ec684ffe731bf1ae821f91ba9d3e526f55f00000000049483045022100868c71f4a8e1452a3bc8b1d053a846959ab7df63fb0d147e9173f69818bbb1f3022060c7e045a34cf6af61bc3a74dc2db7b8bfa4949bc5919acceed40fc07d8706d201feffffff0240043a0000000000232102afdbba3e3c90db5f0f4064118f79cf308f926c68afd64ea7afc930975663e4c4ac201efc01000000001976a914347f2aedf63bac168c2cc4f075a2850435e20ac188ac96d3c96036dd0e000000000000000000000000"
  },
  "id":0
}
```

##### Request (ETH)

```json
{
  "mmrpc": "2.0",
  "method": "get_raw_transaction",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "coin": "ETH",
    "tx_hash": "0x529aca42b6b592cca5d400832c83854135b924cada6e1c41b85f27fa0a0984b9"
  },
  "id": 1
}
```

##### Response (success)

```json
{
  "mmrpc":"2.0",
  "result":{
  "tx_hex":"f86e8227578503b6ed90e6825208943faaa59e42f616f859d5771cbc07a99412ae44b288026fe9cb1ec6e9a08026a08e04accc3733376cf7b8f8d51c8398fd244fca736277053a7e87093f6db67708a069cc7dbc57094c4cca7828e6f8d92a8221c457ac7b5d0b0562e9d8896f75d1a5"
  },
  "id":0
}
```

##### Error response (no such coin)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin KMD",
  "error_path": "lp_coins",
  "error_trace": "lp_coins:2234] lp_coins:2156]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "KMD"
  },
  "id": 0
}
```

##### Error (invalid hash)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid  hash: Invalid input length",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1809]",
  "error_type": "InvalidHashError",
  "error_data": "Invalid input length",
  "id": 1
}
```

##### Error (invalid EC Signature)

```json
{
  "mmrpc": "2.0",
  "error": "Internal error: eth:3221] Crypto error (Invalid EC signature)",
  "error_path": "eth",
  "error_trace": "eth:543]",
  "error_type": "InternalError",
  "error_data": "eth:3221] Crypto error (Invalid EC signature)",
  "id": 1
}
```

## Error Types

| Structure        | Type   | Description                                                               |
| ---------------- | ------ | ------------------------------------------------------------------------- |
| NoSuchCoin       | string | The specified coin was not found or is not activated yet                  |
| InvalidHashError | string | The specified `hash` is not valid                                         |
| Transport        | string | The request was failed due to a network error                             |
| HashNotExist     | string | The specified `hash` is not exist                                         |
| InternalError    | string | The request was failed due to an Komodo DeFi Framework API internal error |
export const title = "Komodo DeFi Framework Method: Get Staking Info";
export const description =
  "The get_staking_infos method returns information about your node's staking.";

# get\_staking\_infos

The `get_staking_infos` method returns information about your node's staking. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

## Arguments

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| coin      | string | the coin being staked |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_staking_infos",
  "params": {
    "coin": "tQTUM"
  },
  "id": 0
}
```

#### Response (not currently staking)

```json
{
  "mmrpc": "2.0",
  "result": {
    "staking_infos_details": {
      "type": "Qtum",
      "amount": "0",
      "staker": null,
      "am_i_staking": false,
      "is_staking_supported": true
    }
  },
  "id": 0
}
```

#### Response (staking active)

```json
{
  "mmrpc": "2.0",
  "result": {
    "staking_infos_details": {
      "type": "Qtum",
      "amount": "160.16",
      "staker": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
      "am_i_staking": true,
      "is_staking_supported": true
    }
  },
  "id": 0
}
```
export const title = "Komodo DeFi SDK RPC Protocol v2.0";
export const description = "Starting with version beta-2.1.3434, the Komodo DeFi SDK supports the standardized protocol format called mmrpc 2.0.";

# Komodo DeFi SDK RPC Protocol v2.0

Starting with version [beta-2.1.3434](https://github.com/KomodoPlatform/komodo-defi-framework/releases/tag/beta-2.1.3434), the Komodo DeFi SDK supports the standardized protocol format called `mmrpc 2.0`.

It includes a uniform request, successful and error response formats. At the moment, only a few RPC methods support the `mmrpc 2.0` protocol.

## Request

| Structure | Type              | Description                                                                                                                                                       |
| --------- | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi SDK RPC protocol. Must be exactly "2.0"                                                                      |
| userpass  | string (optional) | your password for protected RPC methods. Skip this field if the specified `method` is public                                                                      |
| method    | string            | the name of the method to be invoked                                                                                                                              |
| params    | object (optional) | a structured value that holds the parameter values to be used during the invocation of the method. This field may be omitted if the method doesn't take arguments |
| id        | number (optional) | the identifier is established by the client. Komodo DeFi SDK will reply with the same value in the Response object if the `id` field is included and not `NULL`   |

### Response (Success)

| Structure | Type              | Description                                                                                 |
| --------- | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi SDK RPC protocol                       |
| result    | object            | the value of this field is determined by the method invoked on Komodo DeFi SDK              |
| id        | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### Response (Error)

| Structure    | Type              | Description                                                                                 |
| ------------ | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc        | string            | the string specifying the version of the Komodo DeFi API RPC protocol                       |
| error        | string            | the common error description                                                                |
| error\_path  | string            | the error path consisting of file names separated by a dot similar to JSON path notation    |
| error\_trace | string            | the error path consisting of file and line number pairs separated by ']'                    |
| error\_type  | string            | the string error identifier used to determine the cause of the error                        |
| error\_data  | object            | an object containing the error data of the corresponding `error_type`                       |
| id           | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### 📌 Examples

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "The amount 0.000005 is too small",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:301]",
  "error_type": "AmountIsTooSmall",
  "error_data": {
    "amount": "0.000005"
  },
  "id": 0
}
```

## Common Komodo DeFi SDK Request / Response Objects

The folowing objects are used in the request or response of multiple Komodo DeFi SDK methods.

### ActivationParams

The `ActivationParams` object defines additional parameters used for activation. These params may vary depending on the coin type.

| Parameter                    | Type    | Description                                                                                                                                                                                                                                                                   |
| ---------------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| required\_confirmations      | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set.                                                                                                                                                                            |
| requires\_notarization       | boolean | Optional, defaults to `false`. For [dPoW](https://komodoplatform.com/en/blog/dpow-demystified/) protected coins, a `true` value will wait for transactions to be notarised when doing swaps. Overrides value if set in `coins` file.                                          |
| mode                         | object  | QTUM, UTXO & ZHTLC coins only. A standard [ActivationMode](/komodo-defi-framework/api/v20/#activation-mode) object.                                                                                                                                                           |
| zcash\_params\_path          | string  | ZHTLC coins only. Path to folder containing [Zcash parameters](https://z.cash/learn/). Optional, defaults to standard location as defined in [this guide](https://forum.komodoplatform.com/t/installing-zcash-params/603)                                                     |
| scan\_blocks\_per\_iteration | integer | ZHTLC coins only. Sets the number of scanned blocks per iteration during `BuildingWalletDb` state. Optional, default value is 1000.                                                                                                                                           |
| scan\_interval\_ms           | integer | ZHTLC coins only. Sets the interval in milliseconds between iterations of `BuildingWalletDb` state. Optional, default value is 0.                                                                                                                                             |
| tx\_history                  | boolean | Optional. Enable transaction history scanning. When active, the Komodo DeFi Framework API will collect transaction history data for local storage, and allow use of the [my\_tx\_history (v2)](/komodo-defi-framework/api/v20/my_tx_history/) method.                         |
| min\_addresses\_number       | integer | Optional, HD wallets only. Number of addresses to generate. If not specified, addresses will be generated up to `path_to_address::address_index`.                                                                                                                             |
| scan\_policy                 | string  | Optional, HD wallets only. Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Defaults to `scan_if_new_wallet`. Note that `scan` will result in multple requests to the Komodo DeFi API and may take some time to complete. |
| gap\_limit                   | integer | Optional, HD wallets only. The max number of empty addresses in a row. Transactions sent to an address outside the `gap_limit`, will not be identified when scanning. Defaults to `20`.                                                                                       |
| path\_to\_address            | object  | Optional, HD wallets only. A standard [AddressDerivationPath](/komodo-defi-framework/api/v20/#address-derivation-path) object.                                                                                                                                                |
| get\_balances                | boolean | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                                       |

Is priv\_key\_policy still a thing?
Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.

For ZHTLC coins, older wallets need to set the `sync_params` field to a date before its
first transaction to see all balance and history. This may take a long time on the first
activation, but subsequent activations will be much faster.
Using a smaller `scan_blocks_per_iteration` and larger `scan_interval_ms`,
will reduce the average CPU load during ZHTLC coin activation (at the cost of a
longer activation time). These optional fields are recommended when developing
for iOS, where a high CPU load may kill the activation process. Android &
desktop operating systems do not appear to have any problems with high CPU
load during ZHTLC coin activation.

### ActivationMode

Defines the activation mode for QTUM, BCH, UTXO & ZHTLC coins.

| Parameter | Type   | Description                                                                                                                  |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------------------- |
| rpc       | string | `Native` if running a native blockchain node, `Electrum` if using electrum servers or `Light` for ZHTLC coins.               |
| rpc\_data | object | `Electrum` or `Light` mode only. A standard [ActivationRpcData](/komodo-defi-framework/api/v20/#activation-rpc-data) object. |

```json
{
    "mode": {
        "rpc": "Electrum",
        "rpc_data": {
            "servers": [
                {
                    "url": "electrum1.cipig.net:10020"
                },
                {
                    "url": "electrum2.cipig.net:10020"
                }
            ]
        }
    },
}
```

### ActivationRpcData

Contains information about electrum & lightwallet\_d servers for coins being used in `Electrum` or `Light` mode.

| Parameter                 | Type              | Description                                                                                                                                                                                                                                                     |
| ------------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| light\_wallet\_d\_servers | list              | ZHTLC only. A list of urls which are hosting lightwallet\_d servers for a coin.                                                                                                                                                                                 |
| electrum\_servers         | list of objects   | ZHTLC only. A list of standard [ActivationServers](/komodo-defi-framework/api/v20/#activation-servers) objects.                                                                                                                                                 |
| electrum                  | list of objects   | QTUM, BCH & UTXO coins only. A list of standard [ActivationServers](/komodo-defi-framework/api/v20/#activation-servers) objects.                                                                                                                                |
| sync\_params              | integer or string | ZHTLC coins only. Optional, defaults to two days ago. Defines where to start scanning blockchain data upon initial activation. Options: `"earliest"` (the coin's sapling\_activation\_height), `height` (a specific block height) or `date` (a unix timestamp). |

### ActivationServers

Contains information electrum servers for coins being used in `Electrum` or `Light` mode.

| Parameter                   | Type    | Description                                                                                                                                                |
| --------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| url                         | string  | The URL and port for an electrum server.                                                                                                                   |
| ws\_url                     | string  | Optional, for WSS only. The URL and port for an electrum server's WSS port.                                                                                |
| protocol                    | string  | Optional, defaults to `TCP`. Transport protocol used to connect to the server. Options: `TCP` or `SSL`                                                     |
| disable\_cert\_verification | boolean | Optional, defaults to `false`. If `true`, this disables server SSL/TLS certificate verification (e.g. for self-signed certificates). Use at your own risk! |

#### ZHTLC Example

```json
{
  "activation_params": {
    "mode": {
      "rpc": "Light",
      "rpc_data": {
        "electrum_servers": [
          {
            "url":"zombie.dragonhound.info:10033"
          }
        ],
        "light_wallet_d_servers": [
          "http://zombie.dragonhound.info:443"
        ]
      },
      "sync_params": { 
          "height":  2528700
      }
    },
    "zcash_params_path": "/home/username/path_to/.zcash-params",
    "scan_blocks_per_iteration": 100,
    "scan_interval_ms": 200
  }
}
```

#### HD UTXO Activation (v2)

```json
{
"activation_params": {
    "mode": {
        "rpc": "Electrum",
        "rpc_data": {
            "servers": [
                {
                    "url": "electrum2.cipig.net:10001"
                },
                {
                    "url": "electrum3.cipig.net:20001",
                    "ws_url": "electrum3.cipig.net:30001",
                    "protocol": "SSL"
                }
            ]
        }
    },
    "scan_policy": "scan_if_new_wallet",
    "priv_key_policy": "Trezor",
    "min_addresses_number": 3,
    "gap_limit": 20
}
}
```

#### HD UTXO Activation (v2)

```json
{
    "activation_params": {
        "mode": {
            "rpc": "Electrum",
            "rpc_data": {
                "servers": [
                    {
                        "url": "electrum2.cipig.net:10001"
                    },
                    {
                        "url": "electrum3.cipig.net:20001",
                        "ws_url": "electrum3.cipig.net:30001",
                        "protocol": "SSL"
                    }
                ]
            }
        },
        "scan_policy": "scan_if_new_wallet",
        "min_addresses_number": 3,
        "gap_limit": 20
    }
}
```

### AddressDerivationPath

The `AddressDerivationPath` object defines the account / change / address\_index of the [derivation path](https://medium.com/mycrypto/wtf-is-a-derivation-path-c3493ca2eb52) used for your wallet. Using different values for `account_id` or `address_id` parameters will result in a different address and private key for each combination. The `chain` parameter is used to specify if the change from a transaction. Set to `External` for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). `Internal` is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction.

| Parameter   | Type    | Description                                                                              |
| ----------- | ------- | ---------------------------------------------------------------------------------------- |
| account\_id | integer | Optional, defaults to `0`. Used as a layer of separation or hierarchy.                   |
| chain       | string  | Optional. Accepted values are `External` (0) and `Internal` (1). Defaults to `External`. |
| address\_id | integer | Optional, defaults to `0`. Used as a layer of separation or hierarchy.                   |

```json
{
    "path_to_address": {
        "account_id": 0,
        "chain": "External",
        "address_id": 1
    }
}
```

### AddressInfos

The `addressInfos` object includes the following items for a given address:

| Parameter          | Type   | Description                                                                                                                              |
| ------------------ | ------ | ---------------------------------------------------------------------------------------------------------------------------------------- |
| balances           | object | A standard [BalanceInfo](/komodo-defi-framework/api/v20/#balance-info) object. Not included in responses where `get_balances` is `false` |
| derivation\_method | object | A standard [DerivationMethod](/komodo-defi-framework/api/v20/#derivation-method) object                                                  |
| pubkey             | string | The public key associated with the seed used to launch Komodo DeFi                                                                       |
| tickers            | array  | A list of tokens which were successfully activated. Only included in responses where `get_balances` is `false`                           |

#### Example with balances

```json
"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
    "derivation_method": {
        "type": "Iguana"
    },
    "pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
    "balances": {
        "spendable": "0.11398301",
        "unspendable": "0.00001"
    }
}
```

#### Example without balances

```json
"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
    "derivation_method": {
        "type": "Iguana"
    },
    "pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
    "tickers": ["ASLP-SLP"]
}
```

### BalanceInfo

The `balanceInfo` object includes the following items for a given coin or token:

| Parameter   | Type             | Description                                                                                                              |
| ----------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------ |
| spendable   | string (numeric) | The available amount of a coin or token which is ready to be traded or withdrawn.                                        |
| unspendable | string (numeric) | The amount of a coin or token which is awaiting confirmation on the block chain for an incoming or outgoing transaction. |

```json
{
    "spendable": "12.11398301",
    "unspendable": "0.53"
}
```

### DerivationMethod

The `DerivationMethod` object includes the following items for a given coin or token:

| Parameter | Type   | Description                                                                     |
| --------- | ------ | ------------------------------------------------------------------------------- |
| type      | string | Defines how keypairs will be generated. Possible values: `Iguana` or `HDWallet` |

Using the same seed or private key to generate keypairs using different derivation methods will result in a different address and private key for each method.

Where the value indicates:

*   `Iguana`: The coin or token is was activated using Iguana derivation (default).
*   `HDWallet`: The coin or token is was activated using a Hierarchical Deterministic (HD) Wallet derivation path.

```json
{
    "type": "Iguana"
}
```

### EvmNode

The `EvmNode` object includes the following items for a given coin or token:

| Parameter | Type    | Description                                                                                                         |
| --------- | ------- | ------------------------------------------------------------------------------------------------------------------- |
| url       | string  | URL of an RPC node                                                                                                  |
| gui\_auth | boolean | Optional, defaults to `false`. Must be set to `true` to access RPC nodes run officially by the Komodo Platform team |

```json
{
    "url": "http://eth1.cipig.net:8555",
    "gui_auth": false
}
```

### CoinProtocol

| Parameter      | Type    | Description                                                                               |
| -------------- | ------- | ----------------------------------------------------------------------------------------- |
| type           | integer | One of the supported \[coin types]\(link TBA)                                             |
| protocol\_data | object  | A standard [CoinProtocolData](/komodo-defi-framework/api/v20/#coin-protocol-data) object. |

### CoinProtocolData

| Parameter             | Type   | Description                                                                                      |
| --------------------- | ------ | ------------------------------------------------------------------------------------------------ |
| platform              | string | Indicates the platform parent coin for EMV-like protocols, or the coin used for lightning nodes. |
| network               | string | Either `mainnet` or \`testnet                                                                    |
| confirmation\_targets | object | A standard [ConfirmationTargets](/komodo-defi-framework/api/v20/#confirmation-targets) object.   |

### ConfirmationTargets

This object represents the number of blocks required for an on-chain lightning-related transaction to be confirmed.
It is used for estimating the transaction fee rate (`feerate`) for different transaction types in the context of permissionless transactions performed by the node. Different target types are `background`, `normal`, and `high_priority`.

| Parameter      | Type    | Description                                                                                                                                                                                                                                                                                                                                                              |
| -------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| background     | integer | Used for transactions that can tolerate slower confirmation times when the transaction fee rate decreases. These transactions are not time-sensitive and can afford to wait longer for confirmation. The recommended range is `12` to `144` blocks to ensure a low `feerate`.                                                                                            |
| normal         | integer | Used for transactions that we want to confirm promptly, without significant delay (e.g, transactions for opening payment channels). These transactions are important but not critical. Suggested value is `6` blocks to ensure a moderate `feerate`.                                                                                                                     |
| high\_priority | integer | Used for transactions that require quick confirmation to prevent potential loss of funds (e.g. redeeming a Hashed Time Lock Contract (HTLC) on the blockchain before it times out). These transactions are time-critical and must be confirmed promptly to ensure the security of funds. Recommended value for `high_priority` is 1-2 blocks to ensure a high `feerate`. |

Using the recommended values in the above table with a coin that has a block time of 10 minutes, the equivalent time in minutes is:

*   `background`: 120 minutes to 1440 minutes (2 hours to 1 day).
*   `normal`: 60 minutes (one hour).
*   `high_priority`: 10 to 20 minutes.

### CounterpartyChannelConfig

| Parameter                               | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                          |
| --------------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| allow\_outbound\_0conf                  | boolean | Optional, defaults to `true`. When setting an outbound channel, it can be used straight away [without waiting](https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelHandshakeLimits.html#structfield.trust_own_funding_0conf) for any on-chain confirmations.                                                                                                                        |
| force\_announced\_channel\_preference   | boolean | Optional, defaults to `true`. Set to force an incoming channel to match our announced channel preference in ChannelOptions announced\_channel.                                                                                                                                                                                                                                                       |
| outbound\_channels\_confirmations       | integer | Optional, defaults to `144`. Confirmations we will wait for before considering an inbound channel locked in.                                                                                                                                                                                                                                                                                         |
| our\_locktime\_limit                    | boolean | Optional, defaults to `2016`. Set to the amount of blocks we're willing to wait to claim money back to us.                                                                                                                                                                                                                                                                                           |
| min\_funding\_sats                      | boolean | Optional, defaults to `0`. Minimum allowed satoshis when an inbound channel is funded.                                                                                                                                                                                                                                                                                                               |
| max\_funding\_sats                      | boolean | Optional, defaults to `16777215`. Maximum allowed satoshis when an inbound channel is funded.                                                                                                                                                                                                                                                                                                        |
| max\_htlc\_minimum\_msat                | boolean | Optional, defaults to `18446744073709551615`. The remote node sets a limit on the minimum size of HTLCs we can send to them. This allows us to limit the maximum minimum-size they can require.                                                                                                                                                                                                      |
| min\_max\_htlc\_value\_in\_flight\_msat | boolean | Optional, defaults to `0`. The remote node sets a limit on the maximum value of pending HTLCs to them at any given time to limit their funds exposure to [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract). This allows us to set a minimum such value.                                                                                                                      |
| max\_channel\_reserve\_sats             | boolean | Optional, defaults to `18446744073709551615`. The remote node will require us to keep a certain amount in direct payment to ourselves at all time, ensuring that we are able to be punished if we broadcast an old state. This allows us to limit the amount which we will have to keep to ourselves (and cannot use for [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract)). |
| min\_max\_accepted\_htlcs               | boolean | Optional, defaults to `0`. The remote node sets a limit on the maximum number of pending HTLCs to them at any given time. This allows us to set a minimum such value.                                                                                                                                                                                                                                |

### FeeInfo

The `FeeInfo` response object includes the following items for [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/) requests:

| Parameter  | Type             | Description                                                                                                                               |
| ---------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| type       | string           | Type of transaction fee; possible values: `UtxoFixed`, `UtxoPerKbyte`, `EthGas`                                                           |
| amount     | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte) |
| gas\_price | string (numeric) | Used only when fee type is EthGas; sets the gas price in `gwei` units                                                                     |
| gas        | number (integer) | Used only when fee type is EthGas; sets the gas limit for transaction                                                                     |

### LightningActivationParams

| Parameter        | Type    | Description                                                                                                                                                                                                                                   |
| ---------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| name             | string  | The name of the node that will be used in [lightning explorers](https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164/r/n)                                                          |
| listening port   | integer | Optional, defaults to `9735`. The port that this node listens for incoming connections on.                                                                                                                                                    |
| color            | string  | Optional, defaults to `2b6680`. A hexidecimal color string which will be used in network graphs on [lightning explorers](https://mempool.space/testnet/lightning/node/024e2a940e0cbeda84a0d5e00fa8e83b3f4e7f98382eedb488d058e0f5636dd164/r/n) |
| payment\_retries | integer | Optional, defaults to `5`. Number of times a payment will be retried if it fails.                                                                                                                                                             |
| backup\_path     | string  | Optional. The backup path for channel backups, preferably on an external drive.                                                                                                                                                               |

### LightningChannelAmount

| Parameter | Type   | Description                                                                            |
| --------- | ------ | -------------------------------------------------------------------------------------- |
| type      | string | `Exact` for a specific amount or `Max` for whole balance.                              |
| value     | object | Only required if type is `Exact`. The amount in BTC you want to open the channel with. |

### LightningChannelConfig

The values in this object are only used if the channel is being opened by the user. If the channel is being opened by the counterparty, the values in this object are ignored.
If not specified when using the [open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel) or [update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel) methods, the values in this object will default to the values set in the `coins` configuration file.

| Parameter                               | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| --------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| inbound\_channels\_confirmations        | string  | Optional, defaults to `6`. Should be set in coins file, and applies to all channels. Confirmations we will wait for before considering an inbound channel locked in.                                                                                                                                                                                                                                                                                                                                   |
| max\_inbound\_in\_flight\_htlc\_percent | integer | Optional, defaults to `10`. Should be set in coins file, and applies to all channels. Sets the percentage of the channel value we will cap the total value of outstanding inbound HTLCs to.                                                                                                                                                                                                                                                                                                            |
| our\_htlc\_minimum\_msat                | integer | Optional, defaults to `1`. The smallest value HTLC we will accept to process. The channel gets closed any time our counterparty misbehaves by sending us an HTLC with a value smaller than this.                                                                                                                                                                                                                                                                                                       |
| announced\_channel                      | boolean | Optional, defaults to `false`. Set to announce the channel publicly and notify all nodes that they can route via this channel. GUIs and wallet apps should be set to `false`.                                                                                                                                                                                                                                                                                                                          |
| commit\_upfront\_shutdown\_pubkey       | boolean | Optional, defaults to `true`. When `true` (and the counterparty agrees), the user must use the same key for cooperative closing. This prevents a user from changing the destination address in a cooperative close, which slightly increases security (however, this option is not required if the counterparty does not support it and a channel can be accepted regardless). **Note that the key for forced closing is always fixed when opening a channel and is different from shutdown\_pubkey.** |
| counterparty\_locktime                  | integer | Optional, defaults to `144`. The number of blocks we require our counterparty to wait to claim their money on chainif they broadcast a revoked transaction. We have to be online at least once during this time to punish our counterparty for broadcasting a revoked transaction. We have to account also for the time to broadcast and confirm our transaction, possibly with time in between to [RBF (Replace-By-Fee)](https://bitcoinops.org/en/topics/replace-by-fee/) the spending transaction.  |
| negotiate\_scid\_privacy                | integer | Optional, defaults to `false`. If `true`, we attempt to negotiate the `scid_privacy` (referred to as `scid_alias` in the [BOLTs](https://github.com/lightning/bolts)) option for outbound private channels. This provides better privacy by not including our real on-chain channel UTXO in each invoice and requiring that our counterparty only relay HTLCs to us using the channel's SCID alias.                                                                                                    |
| their\_channel\_reserve\_sats           | boolean | Optional, defaults to `10000` or 1% of channel value. The minimum balance that the other node has to maintain on their side, at all times. This ensures that if our counterparty broadcasts a revoked state, we can punish them by claiming at least this value on chain.                                                                                                                                                                                                                              |

For GUIs and wallet apps, it is recommended to set `announced_channel` to `false` (the default value), as the node is not expected to be reliably online.

### LightningChannelOptions

| Parameter                               | Type    | Description                                                                                                                                                                                                        |
| --------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| proportional\_fee\_in\_millionths\_sats | integer | Optional, defaults to `0`. Amount (in milli-satoshi) charged for payments forwarded outbound over the channel, in excess of proportional\_fee\_in\_millionths\_sats.                                               |
| base\_fee\_msat                         | integer | Optional, defaults to `1000`. Amount (in milli-satoshi) charged for payments forwarded outbound over the channel, in excess of proportional\_fee\_in\_millionths\_sats.                                            |
| cltv\_expiry\_delta                     | integer | Optional, defaults to `72`. Blocks until [CheckLockTimeVerify (CLTV)](https://academy.bit2me.com/en/que-es-cltv-bitcoin/) expiry.                                                                                  |
| max\_dust\_htlc\_exposure\_msat         | integer | Optional, defaults to `5000000`. Limit our total exposure to in-flight [HTLCs](https://academy.binance.com/en/glossary/hashed-timelock-contract) which are burned to fees as they are too small to claim on-chain. |
| force\_close\_avoidance\_max\_fee\_sats | integer | Optional, defaults to `1000`. The additional fee we're willing to pay to avoid waiting for the counterparty's locktime to reclaim funds.                                                                           |

### LightningClosedChannelsFilter

| Parameter              | Type    | Description                                                                                                                         |
| ---------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| channel\_id            | string  | Optional. Unique string identifying a channel by its ID.                                                                            |
| counterparty\_node\_id | string  | Optional. A hexidecimal string identifying a counterparty node.                                                                     |
| funding\_tx            | string  | Optional. A transaction ID which added funds.                                                                                       |
| from\_funding\_value   | integer | Optional. The minimum value of channel funding in satoshis.                                                                         |
| to\_funding\_value     | integer | Optional. The maximum value of channel funding in satoshis.                                                                         |
| channel\_type          | string  | Optional. `Inbound` or `Outbound`.                                                                                                  |
| closing\_tx            | integer | Optional. A transaction ID which closed the channel.                                                                                |
| closure\_reason        | integer | Optional. The reason a channel was closed.                                                                                          |
| claiming\_tx           | integer | Optional. The ID of the transaction that returned the remaining outbound funds when the channel was closed to our on-chain address. |
| from\_claimed\_balance | integer | Optional. The minimum balance of channel funds claimed in satoshis.                                                                 |
| to\_claimed\_balance   | integer | Optional. The maximum balance of channel funds claimed in satoshis.                                                                 |
| channel\_visibility    | integer | Optional. `Public` or `Private`.                                                                                                    |

Response may change to be more consistent in future.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206446309](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206446309)

### LightningOpenChannelsFilter

| Parameter                      | Type    | Description                                                                                                                                                          |
| ------------------------------ | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| channel\_id                    | string  | Optional. Unique string identifying a channel by its ID.                                                                                                             |
| counterparty\_node\_id         | string  | Optional. A hexidecimal string identifying a counterparty node.                                                                                                      |
| funding\_tx                    | string  | Optional. A transaction ID which added funds.                                                                                                                        |
| from\_funding\_value\_sats     | integer | Optional. The minimum value of channel funding in satoshis.                                                                                                          |
| to\_funding\_value\_sats       | integer | Optional. The maximum value of channel funding in satoshis.                                                                                                          |
| is\_outbound                   | boolean | Optional. If `true`, limits the response to outbound channels only.                                                                                                  |
| from\_balance\_msat            | integer | Optional. The minimum channel balance in millisatoshis.                                                                                                              |
| to\_balance\_msat              | integer | Optional. The maximum channel balance in millisatoshis.                                                                                                              |
| from\_outbound\_capacity\_msat | integer | Optional. The minimum outbound capacity of the channel balance in millisatoshis.                                                                                     |
| to\_outbound\_capacity\_msat   | integer | Optional. The maximum outbound capacity of the channel balance in millisatoshis.                                                                                     |
| from\_inbound\_capacity\_msat  | integer | Optional. The minimum inbound capacity of the channel balance in millisatoshis.                                                                                      |
| to\_inbound\_capacity\_msat    | integer | Optional. The maximum inbound capacity of the channel balance in millisatoshis.                                                                                      |
| confirmed                      | boolean | Optional. If `true`, only channels with channel opening transactions that passed the number of confirmations required for the channel to be usable will be returned. |
| is\_usable                     | boolean | Optional. If `true`, only channels that are confirmed and the counterparty is online, meaning that these channels can be used for payments will be returned.         |
| is\_public                     | boolean | Optional. If `true`, only channels that our node announces to the lightning network, these channels are visible on lightning explorers will be returned.             |

### LightningPayment

| Parameter        | Type   | Description                                                                                                                                                                                       |
| ---------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| type             | string | The payment type. Accepted values are `invoice` or [`keysend`](https://cdecker-lightning.readthedocs.io/lightning-keysend.7.html).                                                                |
| invoice          | string | Only used if `type` is `invoice`. An identifying string which represents the invoice.                                                                                                             |
| destination      | string | Only used if `type` is `keysend`. A `node_pubkey` (which is also the node address in lightning context). Not to be confused with an onchain address.                                              |
| amount\_in\_msat | string | Only used if `type` is `keysend`. Amount to be paid, in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter.html) (A thousandth of a satoshi; the same as 0.00000000001 bitcoin). |
| expiry           | string | Only used if `type` is `keysend`. Optional, defaults to `3600`. Seconds until the payment expires.                                                                                                |

### LightningPaymentFilter

| Parameter             | Type    | Description                                                                                                         |
| --------------------- | ------- | ------------------------------------------------------------------------------------------------------------------- |
| payment\_type         | object  | A standard `LightningPaymentType` object.                                                                           |
| description           | string  | Optional. A note to indicate the purpose of the invoice.                                                            |
| status                | string  | Optional. Accepted values: `pending`, `succeeded`, `failed`.                                                        |
| from\_amount\_msat    | integer | Optional. Minimum amount sent in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter.html)          |
| to\_amount\_msat      | integer | Optional. Maximum amount sent in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter.html)          |
| from\_fee\_paid\_msat | integer | Optional. Minimum transaction fee paid in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter.html) |
| to\_fee\_paid\_msat   | integer | Optional. Maximum transaction fee paid in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter.html) |
| from\_timestamp       | string  | Optional. Minimum timestamp (in milliseconds) of payment results to return.                                         |
| to\_timestamp         | string  | Optional. Maximum timestamp (in milliseconds) of payment results to return.                                         |

### LightningPaymentType

| Parameter   | Type   | Description                                                                         |
| ----------- | ------ | ----------------------------------------------------------------------------------- |
| type        | object | Accepted values are `Outbound Payment` or `Inbound Payment`.                        |
| destination | string | Only used if `type` is `Outbound Payment`. A pubkey which will receive the payment. |

Response may change in future.
See [https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206176530](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206176530)

### Pagination

For requests which return many results, pagination offsets may be applied. \*\* Use either value, not both. \*\*

| Parameter  | Type    | Description                                             |
| ---------- | ------- | ------------------------------------------------------- |
| PageNumber | integer | Optional, defaults to `1`. Offset for paginated results |
| FromId     | integer | Optional. Ignores any results prior to this UUID        |

#### Example

```json
{
    "PageNumber": 1
}
```

```json
{
    "FromId": 4
}
```

### HistoryTarget

Used to specify a HD wallet `account_id` or `address_id` for \[my\_tx\_history (v2)] requests.

| Parameter   | Type    | Description                                                                                                                                                                                                                                                                                                              |
| ----------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| type        | string  | Filters results by `account_id` or `address_id` part of the derivation path.                                                                                                                                                                                                                                             |
| account\_id | integer | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path.                                                                                                                                                                                                                              |
| address\_id | integer | Only required when `type` is `address_id`. `ADDRESS_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path.                                                                                                                                                                                   |
| chain       | string  | Only required when `type` is `address_id`. `Internal`, or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |

#### Example

```json
{
  "type": "account_id",
  "account_id": 77
}
```

```json
{
  "type": "address_id",
  "account_id": 0,
  "chain": "External", // Accepted values: "External" and "Internal"
  "address_id": 1
}
```

### TokensRequest

The `TokensRequest` object includes the following items for a given coin or token:

| Parameter               | Type    | Description                                                                                                                    |
| ----------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------ |
| ticker                  | string  | Ticker of the token to be enabled                                                                                              |
| required\_confirmations | integer | How many confirmations to wait during the transaction steps of an atomic swap. Overwrites value in coins file; defaults to `3` |

```json
{
    "ticker": "MINDS-ERC20",
    "required_confirmations": 4
}
```

### WalletBalanceInfo

The `WalletBalanceInfo` object includes the following items in the activation response for a coin in HD mode:

| Parameter    | Type   | Description                                                                                 |
| ------------ | ------ | ------------------------------------------------------------------------------------------- |
| wallet\_type | string | In HD wallet mode, this will return `HD`.  What are the other values?                       |
| accounts     | object | A standard [WalletAccountInfo](/komodo-defi-framework/api/v20/#wallet-account-info) object. |

```json
{
    "wallet_balance": {
        "wallet_type": "HD",
        "accounts": [
            ...
        ]
    }
}
```

### WithdrawFromInfo

The `WithdrawFromInfo` response object includes the following items for HD Wallet [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/) requests.
You can use either the `derivation_path` on its own, or the `account_id`, `chain` and `address_id` together.

| Parameter        | Type    | Description                                                                                                                                                                                                                                                                   |
| ---------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| derivation\_path | string  | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address.                                                                                                                                                                   |
| account\_id      | integer | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with the global account.**                                                                                                                                 |
| address\_id      | integer | `ADDRESS_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path.                                                                                                                                                                                   |
| chain            | string  | `Internal`, or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |

### FeeInfo

The `FeeInfo` response object includes the following items for [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/) requests:

| Parameter  | Type             | Description                                                                                                                               |
| ---------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| type       | string           | Type of transaction fee; possible values: `UtxoFixed`, `UtxoPerKbyte`, `EthGas`                                                           |
| amount     | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte) |
| gas\_price | string (numeric) | Used only when fee type is EthGas; sets the gas price in `gwei` units                                                                     |
| gas        | number (integer) | Used only when fee type is EthGas; sets the gas limit for transaction                                                                     |

### ScanAddressesInfo

The `ScanAddressesInfo` response object includes the following items for request in HD mode:

| Parameter        | Type    | Description                                                                                                                                   |
| ---------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| account\_index   | integer | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with the global account.** |
| derivation\_path | string  | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the account.                                   |
| new\_addresses   | list    | A list of standard [NewAddressInfo](/komodo-defi-framework/api/v20/#new-address-info) objects.                                                |

Confirm `new_addresses` array has the structure of `NewAddressInfo`.

### NewAddressInfo

The `NewAddressInfo` response object includes the following items for request in HD mode:

| Parameter        | Type   | Description                                                                                                                                                                                                                                                                   |
| ---------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| address          | string | The account address for a specific derivation path under the `account_index`.                                                                                                                                                                                                 |
| derivation\_path | string | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address. If there are no more addresses with balances within the gap limit, the address index will increment.                                                              |
| balance          | object | A standard [balanceInfo](/komodo-defi-framework/api/v20/#balance-info) object.                                                                                                                                                                                                |
| chain            | string | `Internal`, or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |

### WalletAccountInfo

The `WalletAccountInfo` object includes the following items in the activation response for a coin in HD mode:

| Parameter        | Type    | Description                                                                                                                                   |
| ---------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| account\_index   | integer | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with the global account.** |
| derivation\_path | string  | Derivation path up to the `COIN` child. E.g. `"m/44'/141'/0'"`                                                                                |
| total\_balance   | object  | A standard [balanceInfo](/komodo-defi-framework/api/v20/#balance-info) object.                                                                |
| addresses        | list    | A list of standard [AccountAddressInfo](/komodo-defi-framework/api/v20/#account-address-info) objects.                                        |

```json
{
    "account_index": 0,
    "derivation_path": "m/44'/141'/0'",
    "total_balance": {
        "spendable": "23.08710255",
        "unspendable": "0"
    },
    "addresses": [
        ...
    ]
}
```

### AccountAddressInfo

The `AccountAddressInfo` object includes the following items for active addresses in the activation response for a coin in HD mode:

| Parameter        | Type   | Description                                                                                                 |
| ---------------- | ------ | ----------------------------------------------------------------------------------------------------------- |
| address          | string | The account address for a specific derivation path under the `account_index`.                               |
| derivation\_path | string | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address. |
| chain            | string | `External` or `Internal`, as defined in the activation request.                                             |
| balance          | object | A standard [balanceInfo](/komodo-defi-framework/api/v20/#balance-info) object.                              |

```json
{
    "address": "RXNtAyDSsY3DS3VxTpJegzoHU9bUX54j56",
    "derivation_path": "m/44'/141'/0'/0/0",
    "chain": "External",
    "balance": {
        "spendable": "7.64018255",
        "unspendable": "0"
    }
}
```

## Error types

#### NotSufficientBalance

The `available` balance is not sufficient to transfer the specified amount.

| Structure | Type             | Description                                                                                                                                            |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin      | string           | the name of the coin which balance is not sufficient. This coin name may differ from the requested coin. For example, ERC20 fees are paid by ETH (gas) |
| available | string (numeric) | the balance available for transfer                                                                                                                     |
| required  | string (numeric) | the amount required to transfer the specified amount. This amount is necessary but may not be sufficient                                               |

#### Response (NotSufficientBalance error)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough DOC to withdraw: available 69.75066225, required at least 1000.00001",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:449]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "DOC",
    "available": "69.75066225",
    "required": "1000.00001"
  },
  "id": 0
}
```

#### ZeroBalanceToWithdrawMax

The available balance is zero.

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### AmountTooLow

The specified amount is too low. Required at least `threshold`.

| Structure | Type             | Description                                          |
| --------- | ---------------- | ---------------------------------------------------- |
| amount    | string (numeric) | the amount the user was willing to transfer          |
| threshold | string (numeric) | the `amount` has not to be less than the `threshold` |

#### InvalidAddress

The specified `to` address is not valid.

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| (none)    | string | the error description |

#### InvalidFeePolicy

The specified `fee` is not valid.

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| (none)    | string | the error description |

#### Response (InvalidFeePolicy error - attempt to use EthGas for UTXO coin)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1371]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "id": 0
}
```

#### Response (InvalidFeePolicy error - attempt to use UtxoFixed or UtxoPerKbyte for ETH coin)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'EthGas' fee type, found UtxoFixed",
  "error_path": "eth",
  "error_trace": "eth:535]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'EthGas' fee type, found UtxoFixed",
  "id": 0
}
```

#### NoSuchCoin

The specified coin was not found or is not activated yet.

| Structure | Type   | Description                                   |
| --------- | ------ | --------------------------------------------- |
| coin      | string | the not found `coin` specified in the Request |

#### Transport

The request was failed due to a network error.

| Structure | Type   | Description                     |
| --------- | ------ | ------------------------------- |
| (none)    | string | the transport error description |

#### InternalError

The request was failed due to an Komodo DeFi API internal error.

| Structure | Type   | Description                    |
| --------- | ------ | ------------------------------ |
| (none)    | string | the internal error description |

## Error cases

### Error - Coin not active

```json
{
  "mmrpc": "2.0",
  "error": "TTT-SLP",
  "error_path": "my_tx_history_v2.lp_coins",
  "error_trace": "my_tx_history_v2:389] lp_coins:2847]",
  "error_type": "CoinIsNotActive",
  "error_data": "TTT-SLP",
  "id": null
}
```

### Error - Coin not compatible

```json
{
  "mmrpc": "2.0",
  "error": "TTT-SLP",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:336]",
  "error_type": "NotSupportedFor",
  "error_data": "TTT-SLP",
  "id": null
}
```

### Error - Coin enabled without tx\_history = true

```json
{
  "mmrpc": "2.0",
  "error": "Storage is not initialized for TTT-SLP",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:343]",
  "error_type": "StorageIsNotInitialized",
  "error_data": "Storage is not initialized for TTT-SLP",
  "id": null
}
```

### Error - Local database failed

```json
{
  "mmrpc": "2.0",
  "error": "SqliteFailure(Error { code: Unknown, extended_code: 1 }, Some(\"no such column: block_height\"))",
  "error_path": "my_tx_history_v2.sql_tx_history_storage",
  "error_trace": "my_tx_history_v2:351] sql_tx_history_storage:472]",
  "error_type": "StorageError",
  "error_data": "SqliteFailure(Error { code: Unknown, extended_code: 1 }, Some(\"no such column: block_height\"))",
  "id": null
}
```

There are some common objects that are used in the Komodo DeFi SDK RPC protocol. These standard objects have been collected and grouped into the following sections:

*   [Activation](/komodo-defi-framework/api/common_structures/activation/)
*   [Swaps](/komodo-defi-framework/api/common_structures/swaps/)
*   [Lightning Network](/komodo-defi-framework/api/common_structures/lightning/)
*   [Non-fungible Tokens](/komodo-defi-framework/api/common_structures/nfts/)
export const title = "Komodo DeFi Framework Method: Signing and Verifying Messages";
export const description = "The methods in this document allow you to sign and verify messages for all coins supported by Komodo DeFi Framework.";

# Signing\_and\_Verifying\_Messages

Cryptographically signed messages are a useful feature which can be used to [prove ownership of an address](https://www.coindesk.com/policy/2020/05/25/craig-wright-called-fraud-in-message-signed-with-bitcoin-addresses-he-claims-to-own/).

If your [`coins`](https://github.com/KomodoPlatform/coins) file contains the correct [`sign_message_prefix`](https://bitcoin.stackexchange.com/questions/77324/how-are-bitcoin-signed-messages-generated/77325#77325) parameter value for a coin, you can sign messages with the [Komodo DeFi Framework API](https://github.com/KomodoPlatform/komodo-defi-framework).

```json
{
  "coin": "DOC",
  "asset": "DOC",
  "fname": "DOC (TESTCOIN)",
  "sign_message_prefix": "Komodo Signed Message:\n",
  "rpcport": 25435,
  "txversion": 4,
  "overwintered": 1,
  "mm2": 1,
  "protocol": {
    "type": "UTXO"
  }
}
```

## Sign Message

### Arguments

| Structure | Type   | Description                     |
| --------- | ------ | ------------------------------- |
| coin      | string | The coin to sign a message with |
| message   | string | The message you want to sign    |

### Response

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| signature | string | The signature generated for the message |

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sign_message",
  "mmrpc": "2.0",
  "id": 0,
  "params": {
    "coin": "DOC",
    "message": "Between subtle shading and the absence of light lies the nuance illusion"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "signature": "H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY="
  },
  "id": 0
}
```

### ⚠ Error types

**PrefixNotFound:** sign\_message\_prefix is not set in coin config file
**CoinIsNotFound:** Specified coin is not found
**InvalidRequest:** Message signing is not supported by the given coin type
**InternalError:** An internal error occured during the signing process

## Verify Message

### Arguments

| Structure | Type   | Description                                          |
| --------- | ------ | ---------------------------------------------------- |
| coin      | string | The coin to sign a message with                      |
| message   | string | The message input via the `sign_message` method sign |
| signature | string | The signature generated for the message              |
| address   | string | The address used to sign the message                 |

### Response

| Structure | Type    | Description                                                 |
| --------- | ------- | ----------------------------------------------------------- |
| is\_valid | boolean | `true` is message signature is valid; `false` if it is not. |

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "verify_message",
  "mmrpc": "2.0",
  "id": 0,
  "params": {
    "coin": "DOC",
    "message": "Between subtle shading and the absence of light lies the nuance illusion",
    "signature": "H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY=",
    "address": "RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d"
  }
}
```

#### Response (valid)

```json
{
  "mmrpc": "2.0",
  "result": {
    "is_valid": true
  },
  "id": 0
}
```

#### Response (not valid)

```json
{
  "mmrpc": "2.0",
  "result": {
    "is_valid": false
  },
  "id": 0
}
```

### ⚠ Error types

**PrefixNotFound:** sign\_message\_prefix is not set in coin config
**CoinIsNotFound:** Specified coin is not found
**InvalidRequest:** Message verification is not supported by the given coin type
**InternalError:** An internal error occured during the verification process
**SignatureDecodingError:** Given signature could not be decoded
**AddressDecodingError:** Given address could not be decoded
export const title = "Komodo DeFi Framework Method: My Recent Swaps V2";
export const description = "The my_recent_swaps method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node.";

# my\_recent\_swaps

**my\_recent\_swaps (from\_uuid page\_number=1 limit=10 my\_coin other\_coin from\_timestamp to\_timestamp)**

The `my_recent_swaps` method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node. Please note that all filters (my\_coin, from\_timestamp, etc.) are combined using logical AND.

## Arguments

| Parameter       | Type    | Description                                             |
| --------------- | ------- | ------------------------------------------------------- |
| my\_coin        | string  | Optional. Coin being used by you for the swap/trade.    |
| other\_coin     | string  | Optional. Coin you are trading against                  |
| from\_timestamp | integer | Optional. Start timestamp in UNIX format                |
| to\_timestamp   | integer | Optional. End timestamp in UNIX format                  |
| from\_uuid      | string  | Optional. The UUID from which to start fetching results |
| limit           | integer | Optional. The maximum number fo results to return       |
| page\_number    | integer | Optional. Offset for paginated results                  |

#### Response

| Parameter      | Type             | Description                                                                                                                                                                                            |
| -------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| swaps          | array of objects | A list of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects                                                                                               |
| from\_uuid     | string           | the from\_uuid that was set in the request; this value is null if nothing was set                                                                                                                      |
| skipped        | integer          | the number of skipped records (i.e. the position of `from_uuid` in the list + 1 or `(page_number - 1) * limit`; the value is 0 if `from_uuid` or `page_number` were not set or `page_number` is 1)     |
| limit          | integer          | the limit that was set in the request; note that the actual number of swaps can differ from the specified limit (e.g. on the last page)                                                                |
| total          | integer          | total number of swaps available with the selected filters                                                                                                                                              |
| page\_number   | integer          | the page\_number that was set in the request; if both `page_number` and `from_uuid` are not set in request it will default to `1`; if `from_uuid` is present in request this value will be always null |
| total\_pages   | integer          | total pages available with the selected filters and limit                                                                                                                                              |
| found\_records | integer          | the number of returned swaps                                                                                                                                                                           |

#### 📌 Example

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "params": {
    "my_coin": "MARTY",
    "other_coin": "DOC",
    "from_timestamp": 1672531200,
    "to_timestamp": 1734067200,
    "from_uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
    "limit": 5,
    "page_number": 1
  }
}
```

#### Response (success)

```json
{
  "result": {
      "swaps": [
          {
              "type": "Taker",
              "uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
              "my_order_uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
              "events": [
                  {
                      "timestamp": 1725849334423,
                      "event": {
                          "type": "Started",
                          "data": {
                              "taker_coin": "MARTY",
                              "maker_coin": "DOC",
                              "maker": "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                              "my_persistent_pub": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "lock_duration": 7800,
                              "maker_amount": "2.4",
                              "taker_amount": "2.4",
                              "maker_payment_confirmations": 1,
                              "maker_payment_requires_nota": false,
                              "taker_payment_confirmations": 1,
                              "taker_payment_requires_nota": false,
                              "taker_payment_lock": 1725857133,
                              "uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
                              "started_at": 1725849333,
                              "maker_payment_wait": 1725852453,
                              "maker_coin_start_block": 724378,
                              "taker_coin_start_block": 738955,
                              "fee_to_send_taker_fee": {
                                  "coin": "MARTY",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": false
                              },
                              "taker_payment_trade_fee": {
                                  "coin": "MARTY",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": false
                              },
                              "maker_payment_spend_trade_fee": {
                                  "coin": "DOC",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": true
                              },
                              "maker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "taker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "p2p_privkey": null
                          }
                      }
                  },
                  {
                      "timestamp": 1725849338425,
                      "event": {
                          "type": "Negotiated",
                          "data": {
                              "maker_payment_locktime": 1725864931,
                              "maker_pubkey": "000000000000000000000000000000000000000000000000000000000000000000",
                              "secret_hash": "91ddaac214398b0b728d652af8d86f2e06fbbb34",
                              "maker_coin_swap_contract_addr": null,
                              "taker_coin_swap_contract_addr": null,
                              "maker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                              "taker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849339829,
                      "event": {
                          "type": "TakerFeeSent",
                          "data": {
                              "tx_hex": "0400008085202f890101280d9a0703a25cdd553babd5430708f303fe3d446cd79555a53619c987d7b3000000006a47304402205805ecb3fad4c69e27061a35197c470e6a72a2b762269d3ef6b249c835396cd5022046b710dd5b6bdda75cc32a2cb9511ca51c754e4f2bcac8cd0f2757728a1671c6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88aca0e4dc11000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acfb5ede66000000000000000000000000000000",
                              "tx_hash": "614d3b1ef3666799d71f54ea242f2cb839646be3bfc81d8f1cfce26747cb9892"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849341830,
                      "event": {
                          "type": "TakerPaymentInstructionsReceived",
                          "data": null
                      }
                  },
                  {
                      "timestamp": 1725849341831,
                      "event": {
                          "type": "MakerPaymentReceived",
                          "data": {
                              "tx_hex": "0400008085202f8901175391f3922ffcf7dc8929b9795c2fec8d82ed1649e0f3926e04709993dc35a6020000006a4730440220363ea815a237b46c5dd305809fcc103793bb4f620325c12caccb0c88f320e81c02205df417a4b806f3c3d50aa058c4d6a30203868ba786f2a1bd3b3b12917b3882ff01210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914944cf7300280e31374b3994422a252bce1fcbd10870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34083d6aff050000001976a9141462c3dd3f936d595c9af55978003b27c250441f88acfc5ede66000000000000000000000000000000",
                              "tx_hash": "70f6078b9d3312f14dff45fc1e56e503b01d33e22cac8ebd195e4951d468dca6"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849341832,
                      "event": {
                          "type": "MakerPaymentWaitConfirmStarted"
                      }
                  },
                  {
                      "timestamp": 1725849465809,
                      "event": {
                          "type": "MakerPaymentValidatedAndConfirmed"
                      }
                  },
                  {
                      "timestamp": 1725849469603,
                      "event": {
                          "type": "TakerPaymentSent",
                          "data": {
                              "tx_hex": "0400008085202f89019298cb4767e2fc1c8f1dc8bfe36b6439b82c2f24ea541fd7996766f31e3b4d61010000006a4730440220526bd1e2114642b2624cb283bada8dbeb734d3fae9184f6833e0eca87b20fffe0220554a3b38ecde2b8a521b681f5ac3e3940e08f45cc35a2fc19eeaeae513368a6c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff03001c4e0e0000000017a9141036c1fcbdf2b3e2d8b65913c78ab7412422cf17870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34b8c48e03000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac7a5fde66000000000000000000000000000000",
                              "tx_hash": "ffe2fe025d470996c3057dc561bd79d0a09f2aa5a14b25fb8e444b49394e5ad8"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849469604,
                      "event": {
                          "type": "WatcherMessageSent",
                          "data": [
                              [
                                  4,
                                  ...
                                  0
                              ]
                          ]
                      }
                  },
                  {
                      "timestamp": 1725849486567,
                      "event": {
                          "type": "TakerPaymentSpent",
                          "data": {
                              "transaction": {
                                  "tx_hex": "0400008085202f8901d85a4e39494b448efb254ba1a52a9fa0d079bd61c57d05c39609475d02fee2ff00000000d74730440220544c5a2eec1e3fb7a2c71e3b6bf3c612300a9c5375ca5c7131742f0afc8a6e8f02206df5b042ec1ff359bf7209269ce3b59d09f5f2340842d5e0a253875624bbce120120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b63046d7dde66b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb3488210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac68ffffffff0118184e0e000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac6d7dde66000000000000000000000000000000",
                                  "tx_hash": "58813eb1037e40425d56146c2f6bfbe70b8bcc18e45b752b51c726503ad4f8df"
                              },
                              "secret": "d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849488871,
                      "event": {
                          "type": "MakerPaymentSpent",
                          "data": {
                              "tx_hex": "0400008085202f8901a6dc68d451495e19bd8eac2ce2331db003e5561efc45ff4df112339d8b07f67000000000d74730440220286e61b401b1b57b4ddf93294c588a4614e755549168e73c922402ece652d9830220521c7f1df0cbcacf29f55e3a09f2332a6fff25834917307db91072da8f793b030120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b6304e39bde66b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb34882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118184e0e000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ace39bde66000000000000000000000000000000",
                              "tx_hash": "60f83a68e5851ff93308758763ce30c643bd94ae89f4ae43fe7e02dc88d61642"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849488872,
                      "event": {
                          "type": "Finished"
                      }
                  }
              ],
              "maker_amount": "2.4",
              "maker_coin": "DOC",
              "maker_coin_usd_price": "0.0000001",
              "taker_amount": "2.4",
              "taker_coin": "MARTY",
              "taker_coin_usd_price": "0.00000005",
              "gui": "mm2_777",
              "mm_version": "2.2.0-beta_2bdee4f",
              "success_events": [
                  "Started",
                  "Negotiated",
                  "TakerFeeSent",
                  "TakerPaymentInstructionsReceived",
                  "MakerPaymentReceived",
                  "MakerPaymentWaitConfirmStarted",
                  "MakerPaymentValidatedAndConfirmed",
                  "TakerPaymentSent",
                  "WatcherMessageSent",
                  "TakerPaymentSpent",
                  "MakerPaymentSpent",
                  "MakerPaymentSpentByWatcher",
                  "Finished"
              ],
              "error_events": [
                  "StartFailed",
                  "NegotiateFailed",
                  "TakerFeeSendFailed",
                  "MakerPaymentValidateFailed",
                  "MakerPaymentWaitConfirmFailed",
                  "TakerPaymentTransactionFailed",
                  "TakerPaymentWaitConfirmFailed",
                  "TakerPaymentDataSendFailed",
                  "TakerPaymentWaitForSpendFailed",
                  "MakerPaymentSpendFailed",
                  "TakerPaymentWaitRefundStarted",
                  "TakerPaymentRefundStarted",
                  "TakerPaymentRefunded",
                  "TakerPaymentRefundedByWatcher",
                  "TakerPaymentRefundFailed",
                  "TakerPaymentRefundFinished"
              ],
              "my_info": {
                  "my_coin": "MARTY",
                  "other_coin": "DOC",
                  "my_amount": "2.4",
                  "other_amount": "2.4",
                  "started_at": 1725849333
              },
              "recoverable": false,
              "is_finished": true
          }
      ],
      "from_uuid": null,
      "skipped": 0,
      "limit": 10,
      "total": 1,
      "page_number": 1,
      "total_pages": 1,
      "found_records": 1
  }
}
```

### Error Responses

#### Invalid UUID

```json
{
    "error": "rpc:215] dispatcher_legacy:141] lp_swap:1298] UUID parsing failed: invalid length: expected length 32 for simple format, found 64"
}
```

#### Unknown SQL Error

```json
{
    "error": "rpc:215] dispatcher_legacy:141] lp_swap:1299] my_swaps_storage:102] Unknown SQL error: Query returned no rows"
}
```
export const title = "Komodo DeFi Framework Method: My TX History";
export const description = "The my_tx_history method allows you to view the transaction history of coins.";

# my\_tx\_history

To use this method, you must activate your coin with `"tx_history": true`. The response will vary depending on the coin.
Currently only BCH & SLP tokens are supported in the master/release API. In the latest dev API, UTXO coins, QTUM, and Tendermint/Tendermint tokens are also supported.
For ZHTLC coins, you must use the [z\_coin\_tx\_history](/komodo-defi-framework/api/v20-dev/zhtlc_coins/transaction_history/) method.
For all other coins, use the legacy [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method.

## Arguments

| parameter       | Type    | Description                                                                                      |
| --------------- | ------- | ------------------------------------------------------------------------------------------------ |
| coin            | string  | Ticker of the coin to get history for.                                                           |
| limit           | integer | Optional. Limits the number of returned transactions. Defaults to `10`. Ignored if `max = true`. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/v20/#pagination) object.            |
| target          | object  | Optional. A standard [HistoryTarget](/komodo-defi-framework/api/v20/#history-target) object.     |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

## HD Wallet Account Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "my_tx_history",
  "params": {
    "coin": "DOC",
    "limit": 10,
    "paging_options": {
      "PageNumber": 1
    },
    "target": {
      "type": "account_id",
      "account_id": 77
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "coin": "DOC",
      "target": {
          "type": "account_id",
          "account_id": 77
      },
      "current_block": 2066531,
      "transactions": [
          {
              "tx_hex": "0400008085202f890165d40f00c0b4395ccdbe6d4f3124fa8b06d4910e5327b67c8186dd4b55afa124030000006b483045022100a3fe466d53ce9e5429608427e0d0224e8923d86dabf5b6c4b4d54dae7c060acd022039d165e1e245efd93a9172ab0a7837985310b4beccd6e05be1894cd66e0912cc012102d09f2cb1693be9c0ea73bb48d45ce61805edd1c43590681b02f877206078a5b3ffffffff0400e1f505000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88ac00c2eb0b000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88aca01f791c000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88ace04728b93f0200001976a91490a0d8ba62c339ade97a14e81b6f531de03fdbb288ac00000000000000000000000000000000000000",
              "tx_hash": "e5cd671c71f9a2564cd05057ee94be86bd215df257bfb7408b9ee6deb1e461c5",
              "from": [
                  "RNTv4xTLLm26p3SvsQCBy9qNK7s1RgGYSB"
              ],
              "to": [
                  "RLNu8gszQ8ENUrY3VSyBS2714CNVwn1f7P",
                  "RNTv4xTLLm26p3SvsQCBy9qNK7s1RgGYSB"
              ],
              "total_amount": "24734.9033",
              "spent_by_me": "0",
              "received_by_me": "7.777",
              "my_balance_change": "7.777",
              "block_height": 2051968,
              "timestamp": 1693906841,
              "fee_details": {
                  "type": "Utxo",
                  "coin": "DOC",
                  "amount": "0.0001"
              },
              "coin": "DOC",
              "internal_id": "e5cd671c71f9a2564cd05057ee94be86bd215df257bfb7408b9ee6deb1e461c5",
              "transaction_type": "StandardTransfer",
              "memo": null,
              "confirmations": 14564
          }
      ],
      "sync_status": {
          "state": "Finished"
      },
      "limit": 10,
      "skipped": 0,
      "total": 1,
      "total_pages": 1,
      "paging_options": {
          "PageNumber": 1
      }
  },
  "id": null
}
```

## HD Wallet Address Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "my_tx_history",
  "params": {
    "coin": "DOC",
    "limit": 1,
    "paging_options": {
      "PageNumber": 1
    },
    "target": {
      "type": "address_id",
      "account_id": 0,
      "chain": "External",
      "address_id": 1
    }
  }
}
```

### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "coin": "DOC",
        "target": {
            "type": "address_id",
            "account_id": 0,
            "chain": "External",
            "address_id": 1
        },
        "current_block": 2066531,
        "transactions": [
            {
                "tx_hex": "0400008085202f8901c97b980d21538685a1fa82e1bb0c3a25b2dfaeaecb10647403b48afaefdcef3d010000006b483045022100d4ec136c54cda3861916e2390f0c8afc5348ce7844eaecb98da1bd2c964703280220107bb95194bdb51b9fd584d1834357376288b1ed5185a2bae34b290947683f5a01210325f62245ee44b9e586e71ef462833d8aa32ae2a05d06a9b78a9fb95b7a7d2a3fffffffff0280969800000000001976a914f26650dc9aa4e4505978ad635cdb15491cee70e188ace07c5205000000001976a914e30fff4883a28b09889f3e94c24392c899d2833e88ac930cf264000000000000000000000000000000",
                "tx_hash": "8c6456383d7d112ec400597739e07a3c50557a4ec399b8993312d8c4780ce973",
                "from": [
                    "RVyndZp3ZrhGKSwHryyM3Kcz9aq2EJrW1z"
                ],
                "to": [
                    "RVyndZp3ZrhGKSwHryyM3Kcz9aq2EJrW1z",
                    "RXNtAyDSsY3DS3VxTpJegzoHU9bUX54j56"
                ],
                "total_amount": "0.99293",
                "spent_by_me": "0.99293",
                "received_by_me": "0.99292",
                "my_balance_change": "-0.00001",
                "block_height": 2046628,
                "timestamp": 1693584717,
                "fee_details": {
                    "type": "Utxo",
                    "coin": "DOC",
                    "amount": "0.00001"
                },
                "coin": "DOC",
                "internal_id": "8c6456383d7d112ec400597739e07a3c50557a4ec399b8993312d8c4780ce973",
                "transaction_type": "StandardTransfer",
                "memo": null,
                "confirmations": 19904
            }
        ],
        "sync_status": {
            "state": "Finished"
        },
        "limit": 1,
        "skipped": 0,
        "total": 10,
        "total_pages": 10,
        "paging_options": {
            "PageNumber": 1
        }
    },
    "id": null
}
```

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "BCH",
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "BCH",
    "target": {
      "type": "iguana"
    },
    "current_block": 772607,
    "transactions": [
      {
        "tx_hex": "0100000001b7b45d92f8f3413a0e5656258e0a51f5c7e8230c0a08cef2ebec1ddbb8f7c28200000000d747304402203ca957fdfcfbba6123d78afe28b17fd4103cc04f6ada4110eb61c2a0350c29b802204215f203d583e8bcc79bd70f33af4f4e27500b5a5375efe75a1c31ec112f3c344120b3f71dbea00eeace7f09b0911de31e46f76a48036b86ccc207dac55540912e01004c6b6304dbf67563b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a914dde61fe24ea3cfa39379c475702692fa2f080900882103ed00156316c46094c0cbcf21a5ee549a1b3a50938c43096ef499ca28059edca6ac68ffffffff0133980200000000001976a91411a1563bfa55ae05fa621b2e245abe5a358c852e88acdbf67563",
        "tx_hash": "e2167df56142bccdb8c620297f1b6ca3f7c8a955332838430d4d0f62530870f9",
        "from": [
          "bitcoincash:ppaa62685yaucdf2a54g3rgtyc9g7yawrvvmqsfumc"
        ],
        "to": [
          "bitcoincash:qqg6z43mlf26up06vgdjufz6hedrtry99cvk5dgcnt"
        ],
        "total_amount": "0.00171035",
        "spent_by_me": "0",
        "received_by_me": "0.00170035",
        "my_balance_change": "0.00170035",
        "block_height": 766923,
        "timestamp": 1668615553,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00001"
        },
        "coin": "BCH",
        "internal_id": "e2167df56142bccdb8c620297f1b6ca3f7c8a955332838430d4d0f62530870f9",
        "transaction_type": "StandardTransfer",
        "confirmations": 5685
      },
      {
        "tx_hex": "0100000001eccfa8c296e7b3e229be28a8ca6a5e5a7e89ee07a2d9441faaf5905679286a3c00000000d7473044022077d38ae45bb7257b152d4cb803aab62ca879cab60e9b3a7ca05ef099078e000402203106be31513c6526c14bdf40b28b4d38f78bb1958fc995e040ac4b2165d9d79141203bffadbc5bf035674f0d0f6e1d1a121fc6d404720679ff9b6610b298b41375a3004c6b6304bc847463b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91457c7ce14c0444edc37ee52ed32b68890b0647cd3882103ed00156316c46094c0cbcf21a5ee549a1b3a50938c43096ef499ca28059edca6ac68ffffffff0163b10200000000001976a91411a1563bfa55ae05fa621b2e245abe5a358c852e88acbc847463",
        "tx_hash": "98ddc27aa161967519f53cb3e91146a23b76ac4e33605f8e827c69f4d9b6de37",
        "from": [
          "bitcoincash:ppnzkha52y53d7r7qn6mq4mcmaadmxzj4clfgneaxv"
        ],
        "to": [
          "bitcoincash:qqg6z43mlf26up06vgdjufz6hedrtry99cvk5dgcnt"
        ],
        "total_amount": "0.00177483",
        "spent_by_me": "0",
        "received_by_me": "0.00176483",
        "my_balance_change": "0.00176483",
        "block_height": 766752,
        "timestamp": 1668519015,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00001"
        },
        "coin": "BCH",
        "internal_id": "98ddc27aa161967519f53cb3e91146a23b76ac4e33605f8e827c69f4d9b6de37",
        "transaction_type": "StandardTransfer",
        "confirmations": 5856
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 2,
    "skipped": 2,
    "total": 16,
    "total_pages": 8,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": null
}
```

## Request (TTT-SLP with FromId)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "TTT-SLP",
    "limit": 2,
    "paging_options": {
      "FromId": "433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970"
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "TTT-SLP",
    "target": {
      "type": "iguana"
    },
    "current_block": 772612,
    "transactions": [
      {
        "tx_hex": "0200000002365a29eb638da7fc57720ad6c99fdbc6cfb9c957920cfb62fd69e494b412c1c1020000006b483045022100de81bca8cfef2f95b3da8aa89edf4f5cc6cf489c565d0965b8142380ef3986f1022062d6ed47f2cd281f4860a27e835949aafbab89eeb0865fbf2280a283dfb7c417412102b9fdfedefde71b21523974b9f24a4b6a1b83c5640b839baa6eb14418cae08191ffffffffc1f73b403f893f93d95b8c7dfa1b59bb5445109d4c51107da1e08fb770e54136010000006a47304402203658375dac3b84ae17e72cf3f5157b8ad25e7caee0629fa8708868974f8d58b402206f38d016ed4e390d783627441685692d21b889d83919abd39368cba28f43f544412102b9fdfedefde71b21523974b9f24a4b6a1b83c5640b839baa6eb14418cae08191ffffffff040000000000000000406a04534c500001010453454e44205321508197ffed321c5fc9a1427e5c68b31d2c1ec92ae1c495f8acb08d8d66cd080000000000002710080000002278c569d322020000000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac22020000000000001976a914580af35e3553d57b4b3a2036f4959f10246e98c788ac68955e03000000001976a914580af35e3553d57b4b3a2036f4959f10246e98c788ac00000000",
        "tx_hash": "7b58248f3486079951a57d6dbd41c019a83f2b876c9fa3afa6fcc5a7c595b837",
        "from": ["simpleledger:qpvq4u67x4fa276t8gsrday4nugzgm5ccu4usawss8"],
        "to": [
          "simpleledger:qpvq4u67x4fa276t8gsrday4nugzgm5ccu4usawss8",
          "simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v"
        ],
        "total_amount": "1480551016.67",
        "spent_by_me": "0",
        "received_by_me": "100",
        "my_balance_change": "100",
        "block_height": 772211,
        "timestamp": 1671817336,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00000482"
        },
        "coin": "TTT-SLP",
        "internal_id": "57b78eb912a704921640a589d8bb42bb147dfb88c3d1b4b2e3df910be6b9ab31",
        "transaction_type": {
          "TokenTransfer": "5321508197ffed321c5fc9a1427e5c68b31d2c1ec92ae1c495f8acb08d8d66cd"
        },
        "confirmations": 402
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 10,
    "skipped": 0,
    "total": 1,
    "total_pages": 1,
    "paging_options": {
      "FromId": "433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970"
    }
  },
  "id": null
}
```

## Request (IRIS with limit = 50)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "IRIS",
    "limit": 50
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "IRIS",
    "target": {
      "type": "iguana"
    },
    "current_block": 18120346,
    "transactions": [
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1a110a05756972697312083130303030303030",
        "tx_hash": "B34A8D5AD74067F01A0207DF1851A14673C859D8A6F4FB0CBE292D2104C143CA",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "total_amount": "10.044559",
        "spent_by_me": "10.044559",
        "received_by_me": "10",
        "my_balance_change": "-0.044559",
        "block_height": 18120218,
        "timestamp": 1673016440,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.044559",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "4644373032304131304637363034374441354438413433420000000000000000",
        "transaction_type": "StandardTransfer",
        "memo": "while you are out, buy milk",
        "confirmations": 129
      },
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a696161317a78733476776c36326b687174376e7a7276687a676b34377467366365706677707a673537711a4d0a446962632f3237333934464230393244324543434435363132334337344633364534433146393236303031434541444139434139374541363232423235463431453545423212053130303030",
        "tx_hash": "09ADDD3427A3BA4B0A94023456DF534DB5B9B6821EC17C7C1B2C168EFCF49F26",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": [],
        "total_amount": "0.051788",
        "spent_by_me": "0.051788",
        "received_by_me": "0",
        "my_balance_change": "-0.051788",
        "block_height": 17996530,
        "timestamp": 1672232661,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.051788",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "0000000000000000303941444444333432374133424134423041393430323334",
        "transaction_type": "FeeForTokenTx",
        "memo": null,
        "confirmations": 123817
      },
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1240343133433843414333434142363945454632344432423643414238314146454344383044413745323731433237343637453142324635463337314446353241441a4061353539343834666536316665383630326465383632353964643263663031613865393437306437666635346262323536336233393035646462366238366535",
        "tx_hash": "4E30C074CED6825F3E1B6584C376A426C20FDEFC9A22EB17D8E7DA4139FA0AEB",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": [],
        "total_amount": "182.742425",
        "spent_by_me": "0.053103",
        "received_by_me": "182.689322",
        "my_balance_change": "182.636219",
        "block_height": 17981793,
        "timestamp": 1672138900,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.053103",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "3438353642314533463532383644454334373043303345340000000000000000",
        "transaction_type": {
          "CustomTendermintMsg": {
            "msg_type": "SignClaimHtlc",
            "token_id": null
          }
        },
        "memo": null,
        "confirmations": 138554
      }
    ],
    "sync_status": {
      "state": "NotStarted"
    },
    "limit": 50,
    "skipped": 0,
    "total": 3,
    "total_pages": 1,
    "paging_options": {
      "PageNumber": 1
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Orderbook v2";
export const description = "The orderbook method requests from the network the currently available orders for the specified trading pair.";

# orderbook

**orderbook base rel**

The v2 `orderbook` method requests from the network the currently available orders for the specified trading pair.

## Arguments

| Structure | Type   | Description                                          |
| --------- | ------ | ---------------------------------------------------- |
| base      | string | Base currency of a pair                              |
| rel       | string | Related currency, also known as the "quote currency" |

## Response

| Structure              | Type             | Description                                                                                                                                |
| ---------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| base                   | string           | The name of the coin the user desires to receive                                                                                           |
| rel                    | string           | The name of the coin the user will trade                                                                                                   |
| numasks                | integer          | The number of outstanding asks                                                                                                             |
| numbids                | integer          | The number of outstanding bids                                                                                                             |
| netid                  | integer          | The id of the network on which the request is made (default is `8762`)                                                                     |
| asks                   | array of objects | An array of standard [OrderDataV2](/komodo-defi-framework/api/common_structures/orders/#order-data-v2) objects containing outstanding asks |
| bids                   | array of objects | An array of standard [OrderDataV2](/komodo-defi-framework/api/common_structures/orders/#order-data-v2) objects containing outstanding bids |
| timestamp              | integer          | A UNIX timestamp representing when the orderbook was requested                                                                             |
| total\_asks\_base\_vol | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_asks\_rel\_vol  | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_bids\_base\_vol | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_bids\_rel\_vol  | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook",
  "params": {
    "base": "DGB",
    "rel": "DASH"
  },
  "id": 42
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "asks": [
      {
      "coin": "DGB",
      "address": {
        "address_type": "Transparent",
        "address_data": "DEsCggcN3WNmaTkF2WpqoMQqx4JGQrLbPS"
      },
      "price": {
        "decimal": "0.0002658065",
        "rational": [
          [1, [531613]],
          [1, [2000000000]]
        ],
        "fraction": {
          "numer": "531613",
          "denom": "2000000000"
        }
      },
      "pubkey": "03de96cb66dcfaceaa8b3d4993ce8914cd5fe84e3fd53cefdae45add8032792a12",
      "uuid": "1115d7f2-a7b9-4ab1-913f-497db2549a2b",
      "is_mine": false,
      "base_max_volume": {
        "decimal": "90524.256020352",
        "rational": [
          [1, [2846113615, 164]],
          [1, [7812500]]
        ],
        "fraction": {
          "numer": "707220750159",
          "denom": "7812500"
        }
      },
      "base_min_volume": {
        "decimal": "0.3762135237475381527539770472129161626973004798603495399849138376977237200745655204067620618758382508",
        "rational": [
          [1, [200000]],
          [1, [531613]]
        ],
        "fraction": {
          "numer": "200000",
          "denom": "531613"
        }
      },
      "rel_max_volume": {
        "decimal": "24.061935657873693888",
        "rational": [
          [1, [4213143411, 87536811]],
          [1, [3466432512, 3637978]]
        ],
        "fraction": {
          "numer": "375967744654276467",
          "denom": "15625000000000000"
        }
      },
      "rel_min_volume": {
        "decimal": "0.0001",
        "rational": [
          [1, [1]],
          [1, [10000]]
        ],
        "fraction": {
          "numer": "1",
          "denom": "10000"
        }
      },
      "conf_settings": {
        "base_confs": 7,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false
      },
      "base_max_volume_aggr": {
        "decimal": "133319.023345413",
        "rational": [
          [1, [3238477573, 31040]],
          [1, [1000000000]]
        ],
        "fraction": {
          "numer": "133319023345413",
          "denom": "1000000000"
        }
      },
      "rel_max_volume_aggr": {
        "decimal": "35.2500366381728643576",
        "rational": [
          [1, [473921343, 1669176307, 2]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "44062545797716080447",
          "denom": "1250000000000000000"
        }
      }
      }
    ],
    "base": "DGB",
    "bids": [
      {
      "coin": "DASH",
      "address": {
        "address_type": "Transparent",
        "address_data": "XcYdfQgeuM5f5V2LNo9g8o8p3rPPbKwwCg"
      },
      "price": {
        "decimal": "0.0002544075418788651605521516540338523799763700988224165198319218986992534200426899830070024093907274001",
        "rational": [
          [1, [1410065408, 2]],
          [1, [3765089107, 9151]]
        ],
        "fraction": {
          "numer": "10000000000",
          "denom": "39307010814803"
        }
      },
      "pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
      "uuid": "e9e4feb2-60b4-4184-8294-591687171e6b",
      "is_mine": false,
      "base_max_volume": {
        "decimal": "15449.5309493280527473176",
        "rational": [
          [1, [161102659, 3869502237, 1046]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "19311913686660065934147",
          "denom": "1250000000000000000"
        }
      },
      "base_min_volume": {
        "decimal": "0.39307010814803",
        "rational": [
          [1, [3765089107, 9151]],
          [1, [276447232, 23283]]
        ],
        "fraction": {
          "numer": "39307010814803",
          "denom": "100000000000000"
        }
      },
      "rel_max_volume": {
        "decimal": "3.930477192",
        "rational": [
          [1, [491309649]],
          [1, [125000000]]
        ],
        "fraction": {
          "numer": "491309649",
          "denom": "125000000"
        }
      },
      "rel_min_volume": {
        "decimal": "0.0001",
        "rational": [
          [1, [1]],
          [1, [10000]]
        ],
        "fraction": {
          "numer": "1",
          "denom": "10000"
        }
      },
      "conf_settings": {
        "base_confs": 7,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false
      },
      "base_max_volume_aggr": {
        "decimal": "15449.5309493280527473176",
        "rational": [
          [1, [161102659, 3869502237, 1046]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "19311913686660065934147",
          "denom": "1250000000000000000"
        }
      },
      "rel_max_volume_aggr": {
        "decimal": "3.930477192",
        "rational": [
          [1, [491309649]],
          [1, [125000000]]
        ],
        "fraction": {
          "numer": "491309649",
          "denom": "125000000"
        }
      }
      }
    ],
    "net_id": 8762,
    "num_asks": 3,
    "num_bids": 3,
    "rel": "DASH",
    "timestamp": 1694183345,
    "total_asks_base_vol": {
      "decimal": "133319.023345413",
      "rational": [
        [1, [3238477573, 31040]],
        [1, [1000000000]]
      ],
      "fraction": {
        "numer": "133319023345413",
        "denom": "1000000000"
      }
    },
    "total_asks_rel_vol": {
      "decimal": "35.2500366381728643576",
      "rational": [
        [1, [473921343, 1669176307, 2]],
        [1, [2436694016, 291038304]]
      ],
      "fraction": {
        "numer": "44062545797716080447",
        "denom": "1250000000000000000"
      }
    },
    "total_bids_base_vol": {
      "decimal": "59100.6554157135128550633",
      "rational": [
        [1, [1422777577, 2274178813, 32038]],
        [1, [2313682944, 2328306436]]
      ],
      "fraction": {
        "numer": "591006554157135128550633",
        "denom": "10000000000000000000"
      }
    },
    "total_bids_rel_vol": {
      "decimal": "14.814675225",
      "rational": [
        [1, [592587009]],
        [1, [40000000]]
      ],
      "fraction": {
        "numer": "592587009",
        "denom": "40000000"
      }
    }
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Recreate Swap Data";
export const description = "The recreate_swap_data method helps recover lost swap data due to storage errors or hardware failure.";

# recreate\_swap\_data

The `recreate_swap_data` can assist in the event of local stored swap data being lost due to storage errors related to low disk space or hardware failure, and if required, aid with the refunding of failed swaps.

To source the opposite side of the trade, please [contact the Komodo Support team on Discord](https://komodoplatform.com/discord). You will need to provide details about the trade you are trying to recover, such as the coins and amounts being traded, the approximate time of the trade, any known transaction IDs involved in the trade, and if available the UUID of the trade.

## Arguments

| Structure | Type   | Description                                                                                                                             |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| swap      | object | Swap data from other side of trade. For example to recreate a Maker's swap data, the input would be the corresponding Taker's swap data |

#### Response

| Structure | Type   | Description                                                                                                                       |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------------------- |
| result    | object | Opposite side's swap data. For example if a Taker's swap data is input, the reponse would be the corresponding Maker's swap data. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "recreate_swap_data",
  "params": {
    "swap": {
      "type": "Taker",
      "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "my_order_uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "events": [
        {
          "timestamp": 1638984440546,
          "event": {
            "type": "Started",
            "data": {
              "taker_coin": "MARTY",
              "maker_coin": "DOC",
              "maker": "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "my_persistent_pub": "03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "lock_duration": 7800,
              "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
              "taker_amount": "1",
              "maker_payment_confirmations": 1,
              "maker_payment_requires_nota": false,
              "taker_payment_confirmations": 1,
              "taker_payment_requires_nota": false,
              "taker_payment_lock": 1638992240,
              "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
              "started_at": 1638984440,
              "maker_payment_wait": 1638987560,
              "maker_coin_start_block": 1207822,
              "taker_coin_start_block": 1222573,
              "fee_to_send_taker_fee": {
                "coin": "MARTY",
                "amount": "0.00001",
                "paid_from_trading_vol": false
              },
              "taker_payment_trade_fee": {
                "coin": "MARTY",
                "amount": "0.00001",
                "paid_from_trading_vol": false
              },
              "maker_payment_spend_trade_fee": {
                "coin": "DOC",
                "amount": "0.00001",
                "paid_from_trading_vol": true
              }
            }
          }
        },
        {
          "timestamp": 1638984456603,
          "event": {
            "type": "Negotiated",
            "data": {
              "maker_payment_locktime": 1639000040,
              "maker_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "secret_hash": "4da9e7080175e8e10842e0e161b33cd298cab30b",
              "maker_coin_swap_contract_addr": null,
              "taker_coin_swap_contract_addr": null
            }
          }
        },
        {
          "timestamp": 1638984456814,
          "event": {
            "type": "TakerFeeSent",
            "data": {
              "tx_hex": "0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000",
              "tx_hash": "fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc"
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "MakerPaymentReceived",
            "data": {
              "tx_hex": "0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000",
              "tx_hash": "6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d"
            }
          }
        },
        {
          "timestamp": 1638984457826,
          "event": {
            "type": "MakerPaymentWaitConfirmStarted"
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "MakerPaymentWaitConfirmFailed",
            "data": {
              "error": "An error"
            }
          }
        },
        {
          "timestamp": 1638984503615,
          "event": {
            "type": "Finished"
          }
        }
      ],
      "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
      "maker_coin": "DOC",
      "taker_amount": "1",
      "taker_coin": "MARTY",
      "gui": "KomodoWallet 0.5.1 iOS",
      "mm_version": "1b065636a",
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeSent",
        "MakerPaymentReceived",
        "MakerPaymentWaitConfirmStarted",
        "MakerPaymentValidatedAndConfirmed",
        "TakerPaymentSent",
        "TakerPaymentSpent",
        "MakerPaymentSpent",
        "Finished"
      ],
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeSendFailed",
        "MakerPaymentValidateFailed",
        "MakerPaymentWaitConfirmFailed",
        "TakerPaymentTransactionFailed",
        "TakerPaymentWaitConfirmFailed",
        "TakerPaymentDataSendFailed",
        "TakerPaymentWaitForSpendFailed",
        "MakerPaymentSpendFailed",
        "TakerPaymentWaitRefundStarted",
        "TakerPaymentRefunded",
        "TakerPaymentRefundFailed"
      ]
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "swap": {
      "type": "Maker",
      "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "my_order_uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "events": [
        {
          "timestamp": 1638984440546,
          "event": {
            "type": "Started",
            "data": {
              "taker_coin": "MARTY",
              "maker_coin": "DOC",
              "taker": "b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "secret": "0000000000000000000000000000000000000000000000000000000000000000",
              "secret_hash": "4da9e7080175e8e10842e0e161b33cd298cab30b",
              "my_persistent_pub": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "lock_duration": 7800,
              "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
              "taker_amount": "1",
              "maker_payment_confirmations": 1,
              "maker_payment_requires_nota": false,
              "taker_payment_confirmations": 1,
              "taker_payment_requires_nota": false,
              "maker_payment_lock": 1639000040,
              "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
              "started_at": 1638984440,
              "maker_coin_start_block": 1207822,
              "taker_coin_start_block": 1222573,
              "maker_payment_trade_fee": null,
              "taker_payment_spend_trade_fee": null
            }
          }
        },
        {
          "timestamp": 1638984456603,
          "event": {
            "type": "Negotiated",
            "data": {
              "taker_payment_locktime": 1638992240,
              "taker_pubkey": "03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "maker_coin_swap_contract_addr": null,
              "taker_coin_swap_contract_addr": null
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "TakerFeeValidated",
            "data": {
              "tx_hex": "0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000",
              "tx_hash": "fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc"
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "MakerPaymentSent",
            "data": {
              "tx_hex": "0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000",
              "tx_hash": "6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d"
            }
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "TakerPaymentValidateFailed",
            "data": {
              "error": "Origin Taker error event: MakerPaymentWaitConfirmFailed(SwapError { error: \"An error\" })"
            }
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "MakerPaymentWaitRefundStarted",
            "data": {
              "wait_until": 1639003740
            }
          }
        }
      ],
      "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
      "maker_coin": "DOC",
      "taker_amount": "1",
      "taker_coin": "MARTY",
      "gui": "nogui",
      "mm_version": "",
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeValidated",
        "MakerPaymentSent",
        "TakerPaymentReceived",
        "TakerPaymentWaitConfirmStarted",
        "TakerPaymentValidatedAndConfirmed",
        "TakerPaymentSpent",
        "TakerPaymentSpendConfirmStarted",
        "TakerPaymentSpendConfirmed",
        "Finished"
      ],
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeValidateFailed",
        "MakerPaymentTransactionFailed",
        "MakerPaymentDataSendFailed",
        "MakerPaymentWaitConfirmFailed",
        "TakerPaymentValidateFailed",
        "TakerPaymentWaitConfirmFailed",
        "TakerPaymentSpendFailed",
        "TakerPaymentSpendConfirmFailed",
        "MakerPaymentWaitRefundStarted",
        "MakerPaymentRefunded",
        "MakerPaymentRefundFailed"
      ]
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Remove Delegation";
export const description =
  "The remove_delegation method stops your node's staking of a compatible coin.";

# remove\_delegation

The `remove_delegation` method stops your node's staking of a compatible coin. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

Note: After running `remove_delegation`, you will need to broadcast the returned hex via [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process.

## Arguments

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| coin      | string | the coin being staked |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "remove_delegation",
  "params": {
    "coin": "tQTUM"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "01000000015c7f32b1b3396ce1bed4f6c161bcc3a5bf5c58e4338c66a24c9de1deffc5b94e000000006a47304402203fcdf1e48f6e43fd718b4aab79c56a7ff81b12304339ddf6d871a3f26f217a7502200c22fa8e2bcc33d16f4bf62feb71f637acbefdd34135314e6aa526e6655cba73012102641b541e35bc915e375c8038f1099a977bc6736aa7265e9f65b7270b70d34366ffffffff020000000000000000225403a086010128043d666e8b140000000000000000000000000000000000000086c280584f00000000001976a914c36ac1020b1eae632079692e7bef350d279489c988acb8d98061",
    "tx_hash": "3564859a7ff902e8d65387c44f6049943582e0b9e29161bf1075a00097e535ae",
    "from": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "to": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "total_amount": "0.096",
    "spent_by_me": "0.096",
    "received_by_me": "0.052",
    "my_balance_change": "-0.044",
    "block_height": 0,
    "timestamp": 1635834296,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.004",
      "gas_limit": 100000,
      "gas_price": 40,
      "total_gas_fee": "0.04"
    },
    "coin": "tQTUM",
    "internal_id": "",
    "transaction_type": "RemoveDelegation"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Remove Node from Version Stat";
export const description = "The remove_node_from_version_stat method removes a Node from the local database that tracks which version of MM2 it is running.";

# remove\_node\_from\_version\_stat

The `remove_node_from_version_stat` method removes a Node (by name) from the local database which tracks which version of MM2 it is running. The name parameter is an arbitrary identifying string, such as "seed\_alpha" or "dragonhound\_DEV".

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| name      | string | the name assigned to the node |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "remove_node_from_version_stat",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "name": "dragonhound_DEV"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Sign Raw Transaction";
export const description = "The methods in this document allow you to sign raw transactions.";

# Sign Raw Transaction

This method allows users to:

*   Create a signed UTXO raw transaction given unsigned hex, and optionally a set of prior transaction inputs.
*   Create a signed EVM raw transaction, given the destination address, amount and gas limit.

The transaction can then be broadcasted to the network using the [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process.

This method is used to sign a raw transaction that has already been created.
For UTXO coins, the unsigned hex is required to sign the transaction.
If `prev_txns` is not provided, it will be sourced via electrums.

### Request Parameters

| Structure | Type   | Description                                                                                     |
| --------- | ------ | ----------------------------------------------------------------------------------------------- |
| coin      | string | The coin to sign the raw transaction with                                                       |
| type      | string | The operation type. Accepted values: UTXO ( for utxo coins), ETH (for emv coins)                |
| tx        | object | A standard [RawTxInfo object](/komodo-defi-framework/api/common_structures/wallet/#raw-tx-info) |

### Response Parameters

| Structure | Type   | Description                                     |
| --------- | ------ | ----------------------------------------------- |
| tx\_hex   | string | The signed transaction hex, ready for broadcast |

#### Sign UTXO raw transaction hex

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "sign_raw_transaction",
  "params": {
    "coin": "KMD",
    "type": "UTXO",
    "tx": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd036020000006a47304402206b40df6d7b1d87622ea1eba0cdce09dfaf21556a408b2bd245920c2f3e9ff5e702201bd7bcc9587a9731cfd7c57057f173cbf635d2818263a96f211c413f6e83d187012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000"
    },
    "id":0
  }
```

#### Sign UTXO raw transaction hex with inputs

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 0,
  "method": "sign_raw_transaction",
  "params": {
    "coin": "KMD",
    "type": "UTXO",
    "tx": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000",
      "prev_txns": [
        {
          "tx_hash": "36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8",
          "index": 2,
          "script_pub_key": "76a914d346067e3c3c3964c395fee208594790e29ede5d88ac",
          "amount": 0.00001
        }
      ]
    }
  }
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "020000000001010d23d763f12d77a337cc16df2696ac3f48552dda373c9977fa1f5dd8d5025cb20100000000fdffffff01f40100000000000016001488accd2145b7232b958db5cdf09336ad619541e2024730440220156d185b3fb21725c040b7ddcf84bf862b46f079bb66067eef1941023b8451e602204d877ac51b74932dea34c20874fa8112b3636eb506ac429548f7c05fe54e3faf0121039ad38f67dbc22cf5a6bd48b26920d9fac71681836faf80a9a678ddbaa0fe92f800000000"
    },
    "id":0
  }
```

#### Signed an ETH/EVM raw transaction

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 0,
  "method": "sign_raw_transaction",
  "params": {
    "coin": "MATIC",
    "type": "ETH",
    "tx": {
      "to": "0x927DaFDDa16F1742BeFcBEAE6798090354B294A9",
      "value": "1.4",
      "gas_limit": "21000"
    }
  }
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "f86680847735940083021000947bc1bbdd6a0a722fc9bffc49c921b685ecb84b948210008025a06c0ecbccf92caf5ac620b118f09a84a18c73d7b209e75696bb10e3c24c2dba64a055af3638f92daec1eb3057fb6a9ccf418325bb1aa6121a3314c3885100a5e63a"
    },
    "id": 0
  }
```

Once you have signed the raw transaction, dont forget to broadcast it to
the network using the [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) method.

### Errors

#### Signing Error

You might see this if you try to sign a raw transaction that belongs to a different key pair.

```json
{
  "mmrpc":"2.0",
  "error":"Signing error: with_key_pair:114] P2PKH script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\nOP_EQUALVERIFY\nOP_CHECKSIG\n' built from input key pair doesn't match expected prev script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0x32311a35188a9439c6c866e842564d6fefd3a028\nOP_EQUALVERIFY\nOP_CHECKSIG\n'","error_path":"utxo_common","error_trace":"utxo_common:3144]",
  "error_type":"SigningError",
  "error_data":"with_key_pair:114] P2PKH script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\nOP_EQUALVERIFY\nOP_CHECKSIG\n' built from input key pair doesn't match expected prev script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0x32311a35188a9439c6c866e842564d6fefd3a028\nOP_EQUALVERIFY\nOP_CHECKSIG\n'",
  "id":0
}
```

#### Invalid Request

```json
{
  "mmrpc":"2.0",
  "error":"Error parsing request: invalid digit found in string",
  "error_path":"dispatcher",
  "error_trace":"dispatcher:108]",
  "error_type":"InvalidRequest",
  "error_data":"invalid digit found in string",
  "id":0
}
```

#### Invalid Parameter

```json
{
  "mmrpc":"2.0",
  "error":"Invalid param: Invalid input length",
  "error_path":"eth",
  "error_trace":"eth:2544]",
  "error_type":"InvalidParam",
  "error_data":"Invalid input length",
  "id":0
}
```

#### No Such Coin

Coin does not exist or has not been activated.

```json
{
  "mmrpc":"2.0",
  "error":"No such coin NOTSURE",
  "error_path":"lp_coins",
  "error_trace":"lp_coins:3965] lp_coins:3861]",
  "error_type":"NoSuchCoin",
  "error_data":{
    "coin":"NOTSURE"
  },
  "id":0
}
```
export const title =
  "Komodo DeFi Framework Method: Start Simple Market Maker Bot";
export const description =
  "The Komodo DeFi Framework API allows for simple bot trading via the start_simple_market_maker_bot method.";

# start\_simple\_market\_maker\_bot

The Komodo DeFi Framework API allows for simple bot trading via the `start_simple_market_maker_bot` method. This method takes as input a url to a price service, and configuration parameters of the pair to trade at a defined spread percentage value. It will update orders every 30 seconds (or higher values if defined with the `bot_refresh_rate` parameter).

Note: If using a custom prices API endpoint, please ensure it conforms to the same schema as the url in the example.

For convenience, an online [tool for generating configs](https://stats.kmd.io/atomicdex/makerbot_config_form/) is available.

## Arguments

| Structure                                                | Type    | Description                                                                                                                                                                                                                                                                                            |
| -------------------------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| price\_urls                                              | list    | Optional. A list of URLs serving price data in JSON format. During each update loop, price data will be sourced from the first working URL in the list. If not defined, a [default list](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/lp_price.rs#L13) will be used. |
| bot\_refresh\_rate                                       | float   | Bot loop interval in seconds (optional, 30 sec default)                                                                                                                                                                                                                                                |
| cfg.name                                                 | string  | The name assigned to this configuration (e.g. the pair being configured)                                                                                                                                                                                                                               |
| cfg.name.base                                            | string  | Ticker of the coin you wish to sell                                                                                                                                                                                                                                                                    |
| cfg.name.rel                                             | string  | Ticker of the coin you wish to buy                                                                                                                                                                                                                                                                     |
| cfg.name.max                                             | boolean | Set to `true` if you would like to trade your whole balance (optional)                                                                                                                                                                                                                                 |
| cfg.name.max\_volume.percentage                          | string  | Percentage of balance to trade (optional; can not use at same time as `max_volume.usd`; if greater than 1.0 `max=true` is implied)                                                                                                                                                                     |
| cfg.name.max\_volume.usd                                 | string  | Maximum USD trade volume value to trade (optional; can not use at same time as `max_volume.percentage`; if greater than full balance `max=true` is implied)                                                                                                                                            |
| cfg.name.min\_volume.percentage                          | string  | Minimum percentage of balance to accept in trade (optional, can not use at same time as `min_volume.usd`)                                                                                                                                                                                              |
| cfg.name.min\_volume.usd                                 | float   | Minimum USD trade volume of trades accepted for order (optional, can not use at same time as `min_volume.percentage`)                                                                                                                                                                                  |
| cfg.name.min\_base\_price                                | float   | Minimum USD price of base coin to accept in trade (optional)                                                                                                                                                                                                                                           |
| cfg.name.min\_rel\_price                                 | float   | Minimum USD price of rel coin to accept in trade (optional)                                                                                                                                                                                                                                            |
| cfg.name.min\_pair\_price                                | float   | Minimum USD price of pair (base/rel) to accept in trade (optional)                                                                                                                                                                                                                                     |
| cfg.name.spread\*\*                                      | string  | Target price in relation to prices API value                                                                                                                                                                                                                                                           |
| cfg.name.base\_confs                                     | integer | number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                       |
| cfg.name.base\_nota                                      | boolean | whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                             |
| cfg.name.rel\_confs                                      | integer | number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                         |
| cfg.name.rel\_nota                                       | boolean | whether dPoW notarization is required for rel coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                              |
| cfg.name.enable                                          | boolean | Bot will ignore this config entry if set to false                                                                                                                                                                                                                                                      |
| cfg.name.price\_elapsed\_validity                        | float   | Will cancel current orders for this pair and not submit a new order if last price update time has been longer than this value in seconds (optional; defaults to 5 minutes)                                                                                                                             |
| cfg.name.check\_last\_bidirectional\_trade\_thresh\_hold | boolean | Will readjust the calculated cex price if a precedent trade exists for the pair (or reversed pair), applied via a [VWAP logic](https://www.investopedia.com/terms/v/vwap.asp) (optional; defaults to false)                                                                                            |

*   Percentage values are within the range of 0-1, such that 0.25 = 25%
*   For spread, a value of 1.05 equates to 5% over the value returned from the prices API url.
*   At least one of the optional fields `max`, `max_volume.usd` or `max_volume.percentage` must be present, or orders will not be placed.

#### 📌 Examples

As demonstrated below, multiple configs can be included within the same command. It is recommended to not exceed 500-1000 simultaneous orders placed to avoid decreased performance.

In the example below, the first config lets the bot know we want to:

*   Sell DASH in exchange for KMD
*   Use whole of available DASH balance, with minimum trade volume accepted as 25% of your balance
*   Sets the sell price at 2.5% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 30 seconds
*   Waits for 3 confirmations and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Checks trade history within the local Komodo DeFi Framework API database to never create trades with a sell price that is less than the average trading price.

The second config tells the bot to:

*   Sell DASH in exchange for DGB
*   Trade at most 50% of your DASH balance, with minimum trade volume accepted at least $20 USD.
*   Only place an order when the DASH price is $250 USD or more.
*   Sets the sell price at 4% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 60 seconds
*   Waits for 1 confirmation and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Ignores your trade history and average trading price, creating/updating orders regardless.

The third config tells the bot to:

*   Sell DASH in exchange for LTC
*   Trade at most $500 USD worth of DASH, with minimum trade volume accepted at least $50 USD.
*   Only place an order when the DASH price is $250 USD or more.
*   Sets the sell price at 5% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 60 seconds
*   Waits for 1 confirmation and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Ignores your trade history and average trading price, creating/updating orders regardless.

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "start_simple_market_maker_bot",
  "params": {
    "price_urls": [
      "https://prices.komodo.live:1313/api/v2/tickers?expire_at=600",
      "https://prices.komodo.earth/api/v2/tickers?expire_at=600",
      "https://prices.komodian.info/api/v2/tickers?expire_at=600"
    ],
    "bot_refresh_rate": 60,
    "cfg": {
      "DASH/KMD": {
        "base": "DASH",
        "rel": "KMD",
        "max": true,
        "min_volume": {
          "percentage": "0.25"
        },
        "spread": "1.025",
        "base_confs": 3,
        "base_nota": false,
        "rel_confs": 3,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 30,
        "check_last_bidirectional_trade_thresh_hold": true
      },
      "DASH/DGB": {
        "base": "DASH",
        "rel": "DGB",
        "min_volume": {
          "usd": "20"
        },
        "min_base_price": "250",
        "spread": "1.04",
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 60,
        "check_last_bidirectional_trade_thresh_hold": false
      },
      "DASH/LTC": {
        "base": "DASH",
        "rel": "LTC",
        "max_volume": {
          "usd": "500"
        },
        "min_volume": {
          "usd": "50"
        },
        "min_base_price": "250",
        "spread": "1.04",
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 60,
        "check_last_bidirectional_trade_thresh_hold": false
      }
    }
  },
  "id": 0
}
```

As we have `\"bot_refresh_rate\": 60,` in the above command, our bot loop will update order prices every 60 seconds, as long as the price service returns data that is no more than 30 seconds old (for DASH/KMD) or no more than 60 seconds old (for DASH/DGB).

#### Response (success) {{class : 'text-green-500'}}

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": 0
}
```

#### Response (error - bot already started) {{class : 'text-red-500'}}

```json
{
  "mmrpc": "2.0",
  "error": "The bot is already started",
  "error_path": "simple_market_maker",
  "error_trace": "simple_market_maker:770]",
  "error_type": "AlreadyStarted",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Start Version Stat Collection";
export const description = "The start_version_stat_collection method initiates storing version statistics for nodes previously registered via the add_node_to_version_stat method.";

# start\_version\_stat\_collection

The `start_version_stat_collection` method initiates storing version statistics for nodes previously registered via the `add_node_to_version_stat` method.

## Arguments

| Structure | Type    | Description                                      |
| --------- | ------- | ------------------------------------------------ |
| interval  | integer | polling rate (in seconds) to check node versions |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "start_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "interval": 600
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - invalid peer id unable to parse)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.peer_id",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.peer_id",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Stop Simple Market Maker Bot";
export const description = "The stop_simple_market_maker_bot method tells the bot to finish placing orders at the end of the current loop 30 seconds minimum and 30 seconds by default.";

# stop\_simple\_market\_maker\_bot

The `stop_simple_market_maker_bot` method tells the bot to finish placing orders at the end of the current loop (30 seconds minimum & 30 seconds by default). This method takes as input a url to a price service, and configuration parameters of the pairs to trade at a defined spread percentage value.

At the end of the final loop, orders placed by the bot will be cancelled. Users should wait until the loop ends before exiting the Komodo DeFi Framework API, otherwise orders will not cancel, and will reappear on the orderbook next time Komodo DeFi Framework API starts.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none )   |      |             |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "stop_simple_market_maker_bot",
  "params": {},
  "id": 0
}
```

#### Response (success) {{class : 'text-green-500'}}

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": 0
}
```

#### Response (error - bot already stopped) {{class : 'text-red-500'}}

```json
{
  "mmrpc": "2.0",
  "error": "The bot is already stopped",
  "error_path": "simple_market_maker",
  "error_trace": "simple_market_maker:813]",
  "error_type": "AlreadyStopped",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Stop Version Stat Collection";
export const description = "The stop_version_stat_collection method stops the collection of version stats at the end of the current loop interval.";

# stop\_version\_stat\_collection

The `stop_version_stat_collection` method stops the collection of version stats at the end of the current loop interval.

#### Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type   | Description      |
| --------- | ------ | ---------------- |
| result    | string | success or error |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "stop_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {}
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - stats collection not running)

```json
{
  "mmrpc": "2.0",
  "error": "start_version_stat_collection is not running",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:395]",
  "error_type": "NotRunning",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Telegram Alerts for MM Bot";
export const description = "The Komodo DeFi Framework API Market Maker bot can be configured to send status update alerts via Telegram.";

# Telegram Alerts for Market Maker Bot

The Komodo DeFi Framework API Market Maker bot can be configured to send status update alerts via [Telegram!](https://telegram.org/)

To set this up, you can add some additional parameters to your MM2.json as shown in the example below

```json
{
	"gui": "MarketMakerBot",
	"netid": 8762,
	"rpc_password": "YOUR_PASSWORD",
	"passphrase": "YOUR SEED PHRASE",
	"dbdir": "/path/to/your/komodefi/DB",
	"message_service_cfg": {
		"telegram": {
			"api_key": "YOUR:TELEGRAM_API_TOKEN",
			"chat_registry": {
				"default": "YOUR_TELEGRAM_CHAT_ID",
				"maker_bot": "YOUR_TELEGRAM_CHAT_ID",
				"swap_events": "YOUR_TELEGRAM_CHAT_ID"
			}
		}
	}
}
```

The extra fields required are:

| Parameter                   | Type   | Description              |
| --------------------------- | ------ | ------------------------ |
| api\_key                    | string | A Telegram bot API token |
| chat\_registry.default      | string | A Telegram Chat ID       |
| chat\_registry.maker\_bot   | string | A Telegram Chat ID       |
| chat\_registry.swap\_events | string | A Telegram Chat ID       |

You can use the same Telegram chat ID for all three `chat_registry` subfields, or sent your alerts to a different chat ID if you want to separate the alerts by type.

To get a Telegram bot API token, you need to [have chat with the BotFather](https://sean-bradley.medium.com/get-telegram-chat-id-80b575520659)

To get a Telegram chat ID, check out [this guide](https://sean-bradley.medium.com/get-telegram-chat-id-80b575520659)
export const title = "Komodo DeFi Framework Method: Trade Preimage";
export const description = "The trade_preimage method returns the approximate fee amounts that are paid per the whole swap.";

# trade\_preimage

The `trade_preimage` method returns the approximate fee amounts that are paid per the whole swap.
Depending on the parameters, the function returns different results:

*   If the `swap_method` is `buy` or `sell`, then the result will include the `taker_fee` and the `fee_to_send_taker_fee`.
    The `taker_fee` amount is paid from the `base` coin balance if the `swap_method` is `sell`, else it is paid from the `rel` coin balance;
*   If the `max` field is true, then the result will include the `volume`.

This method can be used instead of **max\_taker\_vol**, if the `max` field is true and the `swap_method` is `buy` or `sell`.
Use the resulting `volume` as an argument of the `buy` or `sell` requests.

Use the `trade_preimage` request with `max = true` and `swap_method = "setprice"` arguments to approximate the fee amounts **only**. Do not use the resulting `volume` as an argument of the `setprice`.

## Arguments

| Structure    | Type                                  | Description                                                                                                                          |
| ------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| base         | string                                | the base currency of the request                                                                                                     |
| rel          | string                                | the rel currency of the request                                                                                                      |
| swap\_method | string                                | the name of the method whose preimage is requested. Possible values: `buy`, `sell`, `setprice`                                       |
| price        | numeric string or rational            | the price in `rel` the user is willing to pay per one unit of the `base` coin                                                        |
| volume       | numeric string or rational (optional) | the amount the user is willing to trade; ignored if `max = true` **and** `swap_method = setprice`, otherwise, it must be set         |
| max          | bool (optional)                       | whether to return the maximum available volume for `setprice` method; must not be set or `false` if `swap_method` is `buy` or `sell` |

### Result

| Structure                 | Type             | Description                                                                                                                                                                                                                                    |
| ------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base\_coin\_fee           | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `base` coin                                                          |
| rel\_coin\_fee            | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `rel` coin                                                           |
| volume                    | string (numeric) | Optional. The max available volume that can be traded (in decimal representation); empty if the `max` argument is missing or false                                                                                                             |
| volume\_rat               | rational         | Optional. The max available volume that can be traded represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.; empty if the `max` argument is missing or false                         |
| volume\_fraction          | fraction         | Optional. The max available volume that can be traded represented as a standard [fractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.; empty if the `max` argument is missing or false                     |
| taker\_fee                | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The dex fee to be paid by Taker; empty if `swap_method` is `setprice`                                                                    |
| fee\_to\_send\_taker\_fee | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid to send the dex fee; empty if `swap_method` is `setprice`                                              |
| total\_fees               | array of objects | A standard [TotalFeeInfo](/komodo-defi-framework/api/common_structures/#total-fee-info) object. Each element is a sum of fees required to be paid from user's balance of corresponding `ExtendedFeeInfo.coin`; the elements are unique by coin |

### ⚠ Error types

#### NotSufficientBalance

The `available` balance of the `coin` is not sufficient to start the swap.

| Structure         | Type                       | Description                                                                               |
| ----------------- | -------------------------- | ----------------------------------------------------------------------------------------- |
| coin              | string                     | the name of the coin which balance is not sufficient                                      |
| available         | string (numeric)           | the balance available for swap, including the amount locked by other swaps                |
| required          | string (numeric)           | the amount required to start the swap. This amount is necessary but may not be sufficient |
| locked\_by\_swaps | string (numeric, optional) | the amount locked by other swaps                                                          |

#### NotSufficientBaseCoinBalance

The available balance of the base `coin` is not sufficient to pay transaction fees.

For example, ERC20 fees are paid by ETH (gas), and this error type is returned if the ETH coin balance is not sufficient to start the swap.

| Structure         | Type                       | Description                                                                               |
| ----------------- | -------------------------- | ----------------------------------------------------------------------------------------- |
| coin              | string                     | the name of the base coin which balance is not sufficient                                 |
| available         | string (numeric)           | the balance available for swap, including the amount locked by other swaps                |
| required          | string (numeric)           | the amount required to start the swap. This amount is necessary but may not be sufficient |
| locked\_by\_swaps | string (numeric, optional) | the amount is locked by other swaps                                                       |

#### VolumeTooLow

The specified `volume` is too low. Required at least `threshold`.

If the `coin` field returned in Response is the same as the `rel` argument in Request, then the base volume threshold can be calculated as follows:
`base_coin_threshold = rel_vol_threshold / price`

| Structure | Type             | Description                                        |
| --------- | ---------------- | -------------------------------------------------- |
| coin      | string           | either `base` or `rel` coin specified in Request   |
| volume    | string (numeric) | the amount the user was willing to trade in `coin` |
| threshold | string (numeric) | the `volume` has not to be less than this amount   |

#### NoSuchCoin

The specified coin was not found or is not activated yet.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| coin      | string | either `base` or `rel` coin specified in Request |

#### CoinIsWalletOnly

The specified coin is wallet only and cannot be participated in the swap.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| coin      | string | either `base` or `rel` coin specified in Request |

#### BaseEqualRel

The coin is wallet only and cannot be participated in the swap.

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### InvalidParam

Incorrect use of the `param` parameter in Request.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| param     | string | the name of the parameter in Request             |
| reason    | string | the reason why the parameter is used incorrectly |

#### PriceTooLow

The specified `price` is too low.

| Structure | Type             | Description                                                                        |
| --------- | ---------------- | ---------------------------------------------------------------------------------- |
| price     | string (numeric) | the price in `rel` the user was willing to receive per one unit of the `base` coin |
| threshold | string (numeric) | the `price` has not to be less than this amount                                    |

#### Transport

The request was failed due to a network error.

| Structure | Type   | Description                     |
| --------- | ------ | ------------------------------- |
| (none)    | string | the transport error description |

#### InternalError

The request was failed due to a Komodo DeFi Framework API internal error.

| Structure | Type   | Description                    |
| --------- | ------ | ------------------------------ |
| (none)    | string | the internal error description |

### 📌 Examples

#### Command (setprice)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "0.1",
    "swap_method": "setprice"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "coin": "KMD",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "coin": "DGB",
      "amount": "0.00030782",
      "amount_fraction": {
        "numer": "15391",
        "denom": "50000000"
      },
      "amount_rat": [
        [1, [15391]],
        [1, [50000000]]
      ],
      "paid_from_trading_vol": true
    },
    "volume": "1138.46868712",
    "volume_fraction": {
      "numer": "14230858589",
      "denom": "12500000"
    },
    "volume_rat": [
      [1, [1345956701, 3]],
      [1, [12500000]]
    ],
    "total_fees": [
      {
        "coin": "KMD",
        "amount": "0.00001",
        "amount_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "amount_rat": [
          [1, [1]],
          [1, [100000]]
        ],
        "required_balance": "0.00001",
        "required_balance_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "required_balance_rat": [
          [1, [1]],
          [1, [100000]]
        ]
      },
      {
        "coin": "DGB",
        "amount": "0.00030782",
        "amount_fraction": {
          "numer": "15391",
          "denom": "50000000"
        },
        "amount_rat": [
          [1, [15391]],
          [1, [50000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (buy)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "0.1",
    "swap_method": "buy"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.00042049",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "42049"
      },
      "amount_rat": [
        [1, [42049]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": true
    },
    "rel_coin_fee": {
      "amount": "0.0001",
      "amount_fraction": {
        "denom": "10000",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "taker_fee": {
      "amount": "0.00012870012870012872",
      "amount_fraction": {
        "denom": "7770",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [7770]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "fee_to_send_taker_fee": {
      "amount": "0.0001",
      "amount_fraction": {
        "denom": "10000",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "coin": "DOC",
        "amount": "0.001307001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "amount_fraction": {
          "numer": "50777",
          "denom": "38850000"
        },
        "amount_rat": [
          [1, [50777]],
          [1, [38850000]]
        ],
        "required_balance": "0.001307001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "required_balance_fraction": {
          "numer": "50777",
          "denom": "38850000"
        },
        "required_balance_rat": [
          [1, [50777]],
          [1, [38850000]]
        ]
      },
      {
        "coin": "tBTC",
        "amount": "0.00042049",
        "amount_fraction": {
          "denom": "100000000",
          "numer": "42049"
        },
        "amount_rat": [
          [1, [42049]],
          [1, [100000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (sell, max)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "2.21363478",
    "swap_method": "sell"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.00042049",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "42049"
      },
      "amount_rat": [
        [1, [42049]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": true
    },
    "taker_fee": {
      "amount": "0.0028489508108108107",
      "amount_fraction": {
        "denom": "1850000000",
        "numer": "5270559"
      },
      "amount_rat": [
        [1, [5270559]],
        [1, [1850000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "fee_to_send_taker_fee": {
      "amount": "0.00033219",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "33219"
      },
      "amount_rat": [
        [1, [33219]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "coin": "DOC",
        "amount": "0.00001",
        "amount_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "amount_rat": [
          [1, [1]],
          [1, [100000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      },
      {
        "coin": "BTC",
        "amount": "0.0036016308108108106",
        "amount_fraction": {
          "denom": "1850000000",
          "numer": "6663017"
        },
        "amount_rat": [
          [1, [6663017]],
          [1, [1850000000]]
        ],
        "required_balance": "0.0036016308108108106",
        "required_balance_fraction": {
          "denom": "1850000000",
          "numer": "6663017"
        },
        "required_balance_rat": [
          [1, [6663017]],
          [1, [1850000000]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (ERC20 and QRC20)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BAT",
    "rel": "QC",
    "price": "1",
    "volume": "2.21363478",
    "swap_method": "setprice"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.0045",
      "amount_fraction": {
        "denom": "2000",
        "numer": "9"
      },
      "amount_rat": [
        [1, [9]],
        [1, [2000]]
      ],
      "coin": "ETH",
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "amount": "0.00325",
      "amount_fraction": {
        "denom": "4000",
        "numer": "13"
      },
      "amount_rat": [
        [0, [13]],
        [1, [4000]]
      ],
      "coin": "QTUM",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "amount": "0.003",
        "amount_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "amount_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "required_balance": "0.003",
        "required_balance_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "required_balance_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "coin": "ETH"
      },
      {
        "amount": "0.00325",
        "amount_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "amount_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "required_balance": "0.00325",
        "required_balance_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "required_balance_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "coin": "QTUM"
      }
    ]
  },
  "id": 0
}
```

#### Response (NotSufficientBalance error)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough BTC for swap: available 0.000015, required at least 0.10012, locked by swaps None",
  "error_path": "maker_swap",
  "error_trace": "maker_swap:1540] maker_swap:1641]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "BTC",
    "available": "0.000015",
    "required": "0.10012",
    "locked_by_swaps": "0"
  },
  "id": 0
}
```

#### Response (VolumeTooLow error)

```json
{
  "mmrpc": "2.0",
  "error": "The volume 0.00001 of the DOC coin less than minimum transaction amount 0.0001",
  "error_path": "maker_swap",
  "error_trace": "maker_swap:1599]",
  "error_type": "VolumeTooLow",
  "error_data": {
    "coin": "DOC",
    "volume": "0.00001",
    "threshold": "0.0001"
  },
  "id": 0
}
```

#### Response (Transport error)

```json
{
  "mmrpc": "2.0",
  "error": "Transport error: JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "error_path": "taker_swap.utxo_common",
  "error_trace": "taker_swap:1599] utxo_common:1990] utxo_common:166]",
  "error_type": "Transport",
  "error_data": "JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "id": 0
}
```

#### Response (incorrect use of "max" error)

```json
{
  "mmrpc": "2.0",
  "error": "Incorrect use of the 'max' parameter: 'max' cannot be used with 'sell' or 'buy' method",
  "error_path": "taker_swap",
  "error_trace": "taker_swap:1602]",
  "error_type": "InvalidParam",
  "error_data": {
    "param": "max",
    "reason": "'max' cannot be used with 'sell' or 'buy' method"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Update Version Stat Collection";
export const description = "The update_version_stat_collection method updates the polling interval for version stats collection.";

# update\_version\_stat\_collection

The `update_version_stat_collection` method updates the polling interval for version stats collection. Note: the new interval will take effect after the current interval loop has completed.

## Arguments

| Structure | Type    | Description                                      |
| --------- | ------- | ------------------------------------------------ |
| interval  | integer | polling rate (in seconds) to query node versions |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "update_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "interval": 900
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - stats collection not running)

```json
{
  "mmrpc": "2.0",
  "error": "start_version_stat_collection is not running",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:374]",
  "error_type": "NotRunning",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Withdraw";
export const description = "The withdraw method generates, signs, and returns a transaction that transfers the amount of coin to the address indicated in the to argument.";

# withdraw

The `withdraw` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument.

This method generates a raw transaction which should then be broadcast using [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/).

## Arguments

| Structure | Type             | Description                                                                                                |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| coin      | string           | The name of the coin the user desires to withdraw                                                          |
| to        | string           | Coins are withdrawn to this address                                                                        |
| amount    | string (numeric) | The amount the user desires to withdraw, ignored when `max=true`                                           |
| memo      | string           | Optional. Adds a transaction memo for compatible coins (e.g. Tendermint ecosystem).                        |
| max       | bool             | Withdraw the maximum available amount                                                                      |
| fee       | object           | A standard [FeeInfo](/komodo-defi-framework/api/v20/#fee-info) object.                                     |
| from      | object           | HD wallets only. A standard [WithdrawFromInfo](/komodo-defi-framework/api/v20/#withdraw-from-info) object. |

### Response

| Structure                    | Type                       | Description                                                                                                                                                                                             |
| ---------------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| from                         | array of strings           | coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| to                           | array of strings           | coins are withdrawn to this address; this may contain the `my_address` address, where change from UTXO coins is sent                                                                                    |
| my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| fee\_details                 | object                     | the fee details of the generated transaction; this value differs for utxo and ETH/ERC20 coins, check the examples for more details                                                                      |
| tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the `send_raw_transaction` method                                                                                                  |
| coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| kmd\_rewards                 | object (optional)          | an object containing information about accrued rewards; always exists if the coin is `KMD`                                                                                                              |
| kmd\_rewards.amount          | string (numeric, optional) | the amount of accrued rewards                                                                                                                                                                           |
| kmd\_rewards.claimed\_by\_me | bool (optional)            | whether the rewards been claimed by me                                                                                                                                                                  |

### 📌 Examples

#### Withdraw BTC, KMD, and other BTC-based forks

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (KMD success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "KMD",
    "fee_details": {
      "type": "Utxo",
      "amount": "0.00001"
    },
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "my_balance_change": "-10.00001",
    "received_by_me": "0.34417325",
    "spent_by_me": "10.34418325",
    "to": ["RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"],
    "total_amount": "10.34418325",
    "tx_hash": "3a1c382c50a7d12e4675d12ed7e723ce9f0167693dd75fd772bae8524810e605",
    "tx_hex": "0400008085202f890207a8e96978acfb8f0d002c3e4390142810dc6568b48f8cd6d8c71866ad8743c5010000006a47304402201960a7089f2d93480fff68ce0b7ca7bb7a32a52915753ac7ae780abd6162cb1d02202c9b11d442e5f72a532f44ceb10122898d486b1474a10eb981c60c5538b9c82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff97f56bf3b0f815bb737b7867e71ddb8198bba3574bb75737ba9c389a4d08edc6000000006a473044022055199d80bd7e2d1b932e54f097c6a15fc4b148d21299dc50067c1da18045f0ed02201d26d85333df65e6daab40a07a0e8a671af9d9b9d92fdf7d7ef97bd868ca545a012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200ca9a3b000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acad2a0d02000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000",
    "kmd_rewards": {
      "amount": "0.0791809",
      "claimed_by_my": true
    }
  },
  "id": 0
}
```

#### HD Withdraw with derivation\_path

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "MCL",
    "to": "RNBA756iaFCx2Uhya3pvCufbeyovAaknJL",
    "amount": 1.025,
    "from": {
      "derivation_path": "m/44'/141'/0'/0/0"
    }
  },
  "id": 0
}
```

#### Response (KMD success)

```json
# TODO: Add response
```

#### HD Withdraw with `account_id`, `chain` and `address_id`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "VRSC",
    "to": "RNBA756iaFCx2Uhya3pvCufbeyovAaknJL",
    "amount": 1.025,
    "from": {
      "account_id": 0,
      "chain": "External",
      "address_id": 2
    }
  },
  "id": 0
}
```

#### Response (KMD success)

```json
# TODO: Add response
```

#### Withdraw BTC, KMD, and other BTC-based forks, fixed fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "DOC",
    "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
    "amount": "1.0",
    "fee": {
      "type": "UtxoFixed",
      "amount": "0.1"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw BTC, KMD, and other BTC-based forks, 1 coin per Kbyte fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "DOC",
    "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
    "amount": "1.0",
    "fee": {
      "type": "UtxoPerKbyte",
      "amount": "1"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f890258be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a000000006b483045022100ef11280e981be280ca5d24c947842ca6a8689d992b73e3a7eb9ff21070b0442b02203e458a2bbb1f2bf8448fc47c51485015904a5271bb17e14be5afa6625d67b1e8012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff58be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a010000006b483045022100daaa10b09e7abf9d4f596fc5ac1f2542b8ecfab9bb9f2b02201644944ddc0280022067aa1b91ec821aa48f1d06d34cd26fb69a9f27d59d5eecdd451006940d9e83db012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acf31c655d010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788accd7c5e5d000000000000000000000000000000",
    "tx_hash": "fd115190feec8c0c14df2696969295c59c674886344e5072d64000379101b78c",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.00253836",
    "spent_by_me": "60.00253836",
    "received_by_me": "59.61874931",
    "my_balance_change": "-0.38378905",
    "block_height": 0,
    "timestamp": 1566473421,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.38378905"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw ETH, ERC20, and other ETH-based forks

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "ETH",
    "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
    "amount": 10
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 21000,
      "gas_price": "0.000000001",
      "total_fee": "0.000021"
    },
    "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
    "my_balance_change": "-10.000021",
    "received_by_me": "0",
    "spent_by_me": "10.000021",
    "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
    "total_amount": "10.000021",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

#### ETH/ERC20 and other ETH-based forks, with gas fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "EthGas",
      "gas_price": "3.5",
      "gas": 55000
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "f86d820b2884d09dc30082d6d894bab36286672fbdc7b250804bf6d14be0df69fa29888ac7230489e80000801ca0ef0167b0e53ed50d87b6fd630925f2bce6ee72e9b5fdb51c6499a7caaecaed96a062e5cb954e503ff83f2d6ce082649fdcdf8a77c8d37c7d26d46d3f736b228d10",
    "tx_hash": "a26c4dcacf63c04e385dd973ca7e7ca1465a3b904a0893bcadb7e37681d38c95",
    "from": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
    "to": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
    "total_amount": "10",
    "spent_by_me": "10.0001925",
    "received_by_me": "10",
    "my_balance_change": "-0.0001925",
    "block_height": 0,
    "timestamp": 1566474670,
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 55000,
      "gas_price": "0.0000000035",
      "total_fee": "0.0001925"
    },
    "coin": "ETH",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw maximum

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "ETH",
    "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
    "max": true
  },
  "id": 0
}
```

##### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 21000,
      "gas_price": "0.000000001",
      "total_fee": "0.000021"
    },
    "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
    "my_balance_change": "-10.000021",
    "received_by_me": "0",
    "spent_by_me": "10.000021",
    "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
    "total_amount": "10.000021",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw QRC20 coins

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "QRC20",
    "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
    "amount": 10
  },
  "id": 0
}
```

##### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "QRC20",
    "timestamp": 1608725061,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.00000447",
      "gas_limit": 100000,
      "gas_price": 40,
      "total_gas_fee": "0.04"
    },
    "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
    "my_balance_change": "-10",
    "received_by_me": "0",
    "spent_by_me": "10",
    "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
    "total_amount": "10",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw QRC20 coins with gas limit

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "QRC20",
    "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
    "amount": 10,
    "fee": {
      "type": "Qrc20Gas",
      "gas_limit": 250000,
      "gas_price": 40
    }
  },
  "id": 0
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "QRC20",
    "timestamp": 1608725061,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.00000447",
      "gas_limit": 250000,
      "gas_price": 40,
      "total_gas_fee": "0.1"
    },
    "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
    "my_balance_change": "-10",
    "received_by_me": "0",
    "spent_by_me": "10",
    "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
    "total_amount": "10",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw Tendermint coins with a memo and custom gas fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "IRIS",
    "to": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
    "amount": 13,
    "memo": "It was a bright cold day in April, and the clocks were striking thirteen.",
    "fee": {
      "type": "CosmosGas",
      "gas_price": 0.05,
      "gas_limit": 150000
    }
  },
  "id": 0
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0ade010a8b010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e64126b0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1a110a05756972697312083133303030303030124949742077617320612062726967687420636f6c642064617920696e20417072696c2c20616e642074686520636c6f636b73207765726520737472696b696e6720746869727465656e2e188f85b50812680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801181d12140a0e0a0575697269731205333835353310a08d061a40a9ac8c4112d7d7252062e289d222a438258a7c49c6657fdcbf831d62fc5eb2d05af46d6b86881335b3bc7ca98b2bfc3ef02ec5adf6768de9a778b282f9cc868e",
    "tx_hash": "E00982A2A8442D7140916A34E29E287A0B1CBB4B38940372D1966BA7ACDE5BD6",
    "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
    "to": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
    "total_amount": "13.038553",
    "spent_by_me": "13.038553",
    "received_by_me": "13",
    "my_balance_change": "-0.038553",
    "block_height": 0,
    "timestamp": 0,
    "fee_details": {
      "type": "Tendermint",
      "coin": "IRIS",
      "amount": "0.038553",
      "gas_limit": 100000
    },
    "coin": "IRIS",
    "internal_id": "e00982a2a8442d7140916a34e29e287a0b1cbb4b38940372d1966ba7acde5bd6",
    "transaction_type": "StandardTransfer",
    "memo": "It was a bright cold day in April, and the clocks were striking thirteen."
  },
  "id": 0
}
```

You can see the memo is included on the [block explorer](https://irishub.iobscan.io/#/txs/E00982A2A8442D7140916A34E29E287A0B1CBB4B38940372D1966BA7ACDE5BD6)

### Error Responses

#### InvalidRequest: Unknown fee type

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `Tendermint`, expected one of `UtxoFixed`, `UtxoPerKbyte`, `EthGas`, `Qrc20Gas`, `CosmosGas`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `Tendermint`, expected one of `UtxoFixed`, `UtxoPerKbyte`, `EthGas`, `Qrc20Gas`, `CosmosGas`",
    "id": 0
}
```

#### InvalidRequest: wrong parameter type

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: invalid type: string \"0.1\", expected f64",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "invalid type: string \"0.1\", expected f64",
    "id": 0
}
```

#### InvalidFeePolicy: attempt to use EthGas for UTXO coin

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1371]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Current MTP";
export const description = "The get_current_mtp method returns the Median Time Past (MTP) from electrum servers for UTXO coins.";

# get\_current\_mtp

The `get_current_mtp` method returns the Median Time Past (MTP) from electrum servers for UTXO coins. This information is useful for debugging, specifically in cases where an electrum server has been misconfigured.

## Arguments

| Parameter | Type    | Description                                                                             |
| --------- | ------- | --------------------------------------------------------------------------------------- |
| coin      | string  | A compatible (UTXO) coin's ticker                                                       |
| id        | integer | Optional. Identifies a request to allow matching it with a response. Defaults to `null` |

#### Response

| Parameter | Type    | Description                                                                                                   |
| --------- | ------- | ------------------------------------------------------------------------------------------------------------- |
| mtp       | integer | Unix timestamp                                                                                                |
| id        | integer | Identifies a response to allow matching it with a request. Defaults to `null` if `id` not provided in request |

#### 📌 Examples

#### Command

```json
{
  "method": "get_current_mtp",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 42,
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "mtp": 1658746383
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Get Locked Amount";
export const description = "The get_locked_amount method returns the amount of a coin which is currently locked by a swap which is in progress.";

# get\_locked\_amount

The `get_locked_amount` method returns the amount of a coin which is currently locked by a swap which is in progress. If the coin is not activated, a `NoSuchCoin` error will be returned.

## Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter               | Type            | Description                                                                                      |
| ----------------------- | --------------- | ------------------------------------------------------------------------------------------------ |
| coin                    | string          | The ticker of the coin you queried.                                                              |
| locked\_amount          | object          | An object cointaining the locked amount in decimal, fraction and rational formats.               |
| locked\_amount.decimal  | numeric string  | The locked amount in [decimal format](https://www.mathsisfun.com/definitions/decimal.html).      |
| locked\_amount.rational | rational object | The locked amount in [rational format](/komodo-defi-framework/api/legacy/rational_number_note/). |
| locked\_amount.fraction | fraction object | The locked amount in [fraction format](https://www.mathsisfun.com/definitions/fraction.html).    |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_locked_amount",
  "params": {
    "coin": "DOC"
  },
  "id": 42
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "DOC",
    "locked_amount": {
      "decimal": "0.77803",
      "rational": [
        [1, [77803]],
        [1, [100000]]
      ],
      "fraction": {
        "numer": "77803",
        "denom": "100000"
      }
    }
  },
  "id": 42
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin: TIME",
  "error_path": "lp_swap.lp_coins",
  "error_trace": "lp_swap:486] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: HD Address Management";
export const description = "The methods in this document allow generation of HD addresses on Komodo DeFi Framework.";

# Hierarchical Deterministic Address Management

A hierarchical-deterministic (HD) wallet generates a new key pair from a master key pair, allowing for multiple addresses to be generated from the same seed so that change from transactions go to a previously unused address, enhancing privacy and security. The hierarchical structure resembles that of a tree, with the master key “determining” the key pairs that follow it in the hierarchy. If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, you can use the methods below to generate new addresses.

## get\_new\_address

If we don't already have too many unused addresses, we can use the `get_new_address` method to generate a new address. The generated address will be shown in account\_balance and init\_account\_balance RPCs and on the next coin activation.

#### Arguments

| Parameter   | Type    | Description                                                                                                                                                                                                                                                                                                                 |
| ----------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to get a new address for                                                                                                                                                                                                                                                                    |
| account\_id | integer | Generally this will be `0` unless you have multiple accounts registered on your Trezor                                                                                                                                                                                                                                      |
| chain       | string  | `Internal`, or `External`. Defaults to `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided                                                                                                                                                                                       |

#### Response

| Parameter    | Type   | Description                                                                           |
| ------------ | ------ | ------------------------------------------------------------------------------------- |
| new\_address | object | A standard [NewAddressInfo](/komodo-defi-framework/api/v20/#new-address-info) object. |

Some reasons you might not be able to get a new address are:

*   `EmptyAddressesLimitReached` - Last gap\_limit addresses are still unused.
*   `AddressLimitReached` - Addresses limit reached. Currently, the limit is [2^31](https://www.wolframalpha.com/input?i=2%5E%2832%29)

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_new_address",
  "params": {
    "coin": "DOC",
    "account_id": 0,
    "chain": "External",
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "new_address": {
            "address": "RDKyU11wFTa8kYETaDbr4YuJZG8C4e6JUm",
            "derivation_path": "m/44'/141'/0'/0/3",
            "chain": "External",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

## task\_scan\_for\_new\_addresses\_init

#### Arguments

| Parameter   | Type    | Description                                                                                                                           |
| ----------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to scan addresses for                                                                                 |
| account\_id | integer | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                  |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::init",
  "params": {
    "coin": "DGB",
    "account_index": 0,
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "task_id": 3
  },
  "id": null
}
```

## task\_scan\_for\_new\_addresses\_status

Use the `task::scan_for_new_addresses::status` method to query the status of a HD address scanning task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                         |
| details   | string or object | Once complete, a standard [ScanAddressesInfo](/komodo-defi-framework/api/v20/#scan-addresses-info) object. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::status",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success, no new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": []
      }
  },
  "id": null
}
```

#### Response (success, new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": [
              {
                  "address": "RXaMK6RtvwPiy67oramBfFXCgMobBofMWv",
                  "derivation_path": "m/44'/141'/0'/0/3",
                  "chain": "External",
                  "balance": {
                      "spendable": "0",
                      "unspendable": "0"
                  }
              },
              {
                  "address": "RJkjq4DeQ5vTNJxa1gHoS4y31ZU9F3aisu",
                  "derivation_path": "m/44'/141'/0'/0/4",
                  "chain": "External",
                  "balance": {
                      "spendable": "0.444",
                      "unspendable": "0"
                  }
              }
          ]
      }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework: HD Wallets Overview";
export const description =
  "This document provides and overview of functionality available using the Komodo DeFi Framework API in Hierarchical Deterministic (HD) mode.";

# HD Wallets Overview

[Hierarchical Deterministic (HD) Wallets](https://atomicdex.io/en/blog/hd-wallet/) are different to other wallets, as they use a key pair management system that allows generating multiple new addresses from a single seed phrase or private key.

`Hierarchical` refers to the structure of HD wallets, which resembles a tree, where parent keys can produce children keys, which can produce grandchildren keys, and so on, all from the same root seed.
`Deterministic` means that the addresses generated in this tree will always be the same for the same root seed phrase.

HD wallets offer several advantages over traditional wallets:

*   Convenience: HD wallets allow users to generate multiple public and private keys from a single seed phrase, making it easier to manage multiple addresses in one place.
*   Privacy: HD wallets can generate new addresses for each transaction, making it more difficult for malicious parties to track a user’s transaction history.
*   Access Control: A user who controls the root seed can create new addresses & keypairs which can be shared with a 3rd party, providing limited or regulated access to funds held under specific pairs.

To use HD wallet functionality with the Komodo DeFi Framework API, you must include `"enable_hd":true` in your `MM2.json` file.
Hardware wallets like [Trezor](https://trezor.io/) are always in HD mode, and this parameter **must** to be set to `true`.

In some cases, the methods used to interact with HD wallets are the same as those used with legacy wallets. However, there are some differences, which are detailed in the links below.

## Initialisation and authentication (Hardware wallets only):

*   Initialise connection with your Trezor with [task::init\_trezor::init](/komodo-defi-framework/api/v20-dev/task_init_trezor/#init)
*   Check the status of the connecton with [task::init\_trezor::status](/komodo-defi-framework/api/v20-dev/task_init_trezor/#status)
*   Cancel authentication process with [task::init\_trezor::cancel](/komodo-defi-framework/api/v20-dev/task_init_trezor/#cancel)
*   Authenticate using PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action)

These methods (and others with a `task::` prefix) will be linked to a numeric
`task_id` value which is used to query the status or outcome of the task.

## UTXO & QTUM Coin Activation in HD Mode:

As HD mode activation performs address scanning to return addresses and balances for enabled accounts, we use `task` methods because fetching this data can take some time.

*   Use [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) for UTXO coins like KMD, BTC and DOGE.
*   Check the activation status with [task::enable\_utxo::status](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#status)
*   Authenticate the activation with [task::enable\_utxo::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#user-action) (hardware wallet only)
*   Use [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) for QTUM Ecosystem coins.
*   Check the activation status with [task::enable\_qtum::status](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#status)
*   Authenticate the activation with [task::enable\_qtum::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#user-action) (hardware wallet only)

When using the activation methods with a Trezor, `"priv_key_policy": "Trezor"` needs to be included in the request.

## Withdrawing your Funds:

*   Prepare a transaction with [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/#withdraw)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)
*   Prepare a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20-dev/task_withdraw/#init)
*   Check the status of the transaction preparation with [task::withdraw::status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status)
*   Cancel the transaction preparation with [task::withdraw::cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel)

Not sure if these are still active?

## Viewing Hardware Wallet Coin Balances:

*   Initialise the balance request with [task::account\_balance::init](/komodo-defi-framework/api/v20-dev/task_account_balance/#init)
*   Check the status of the balance request with [task::account\_balance::status](/komodo-defi-framework/api/v20-dev/task_account_balance/#status)

## Creating New Addresses:

# TODO: add this item back after the method is redocumented

{/* *   Use [can\_get\_new\_address](/komodo-defi-framework/api/v20-dev/hd_address_management/#can-get-new-address) to determine if your current address has been used, or should be updated. */}

*   Use [get\_new\_address](/komodo-defi-framework/api/v20-dev/hd_address_management/#get-new-address) to generate a new address

## Viewing Transaction History:

*   Transaction history using an `account_id` [my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/)
*   Transaction history using an `address_id` [my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/)

# TODO: Add hashlinks to the above methods
export const title = "Komodo DeFi Framework API RPC Protocol v2.0 (Dev)";
export const description = "Komodo DeFi Framework API now supports mmrpc 2.0 protocol format, providing a standardized format for requests, successful responses, and error responses.";

# Komodo DeFi Framework API RPC Protocol v2.0 (Dev)

Starting with version [beta-2.1.3434](https://github.com/KomodoPlatform/komodo-defi-framework/releases/tag/beta-2.1.3434), the Komodo DeFi Framework API supports the standardized protocol format called `mmrpc 2.0`.

It includes a uniform request, successful and error response formats. At the moment, only a few RPC methods support the `mmrpc 2.0` protocol.

## Request

| Structure | Type              | Description                                                                                                                                                               |
| --------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol. Must be exactly "2.0"                                                                    |
| userpass  | string (optional) | your password for protected RPC methods. Skip this field if the specified `method` is public                                                                              |
| method    | string            | the name of the method to be invoked                                                                                                                                      |
| params    | object (optional) | a structured value that holds the parameter values to be used during the invocation of the method. This field may be omitted if the method doesn't take arguments         |
| id        | number (optional) | the identifier is established by the client. Komodo DeFi Framework API will reply with the same value in the Response object if the `id` field is included and not `NULL` |

### Response (Success)

| Structure | Type              | Description                                                                                 |
| --------- | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol             |
| result    | object            | the value of this field is determined by the method invoked on Komodo DeFi Framework API    |
| id        | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### Response (Error)

| Structure    | Type              | Description                                                                                 |
| ------------ | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc        | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol             |
| error        | string            | the common error description                                                                |
| error\_path  | string            | the error path consisting of file names separated by a dot similar to JSON path notation    |
| error\_trace | string            | the error path consisting of file and line number pairs separated by ']'                    |
| error\_type  | string            | the string error identifier used to determine the cause of the error                        |
| error\_data  | object            | an object containing the error data of the corresponding `error_type`                       |
| id           | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "The amount 0.000005 is too small",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:301]",
  "error_type": "AmountIsTooSmall",
  "error_data": {
    "amount": "0.000005"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Initialization Tasks";
export const description = "The methods in this document allow initialization of Lightning Network on Komodo DeFi Framework.";

# Lightning Network Initialization Tasks

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Initialize Lightning {{label : 'task::enable_lightning::init', tag : 'API-v2'}}

The `task::enable_lightning::init` request a task to run a lightning node. Use the returned `task_id` as an input to check the status of the lightning node (i.e, running or still initiating). An error will be returned if a lightning node was already running for the requested ticker.

Any methods with a `task::` prefix will be linked to a numeric `task_id` value which is used to query the status or outcome of the task.

### Request Parameters

| Parameter          | Type   | Description                                                                                                                         |
| ------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                                          |
| activation\_params | object | A standard [LightningActivationParams](/komodo-defi-framework/api/common_structures/lightning/#lightning-activation-params) object. |

#### 📌 Example

```json
{
  "method": "task::enable_lightning::init",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "ticker": "tBTC-lightning",
    "activation_params": {
      "name": "KomoDeFi-Docs-Node-1",
      "listening_port": 9735,
      "color": "000000",
      "payment_retries": 5
    }
  },
  "id": 2
}
```

### Response Parameters

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "task_id": 1
    },
    "id": null
}
```

#### L2ConfigIsNotFound Error

Coin is not in `coins` file. Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20-dev/lightning/#lightning-coin-config-parameters) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Layer 2 tBTC-lightning config is not found",
	"error_path": "init_l2.prelude",
	"error_trace": "init_l2:82] prelude:82]",
	"error_type": "L2ConfigIsNotFound",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

#### InvalidRequest Error

A parameter is incorrect.

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string "9735", expected u16",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:110]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string "9735", expected u16",
	"id": 762
}
```

#### UnexpectedL2Protocol Error

Coin is wrong protocol type.

```json
{
	"mmrpc": "2.0",
	"error": "Unexpected layer 2 protocol UTXO for tBTC-segwit",
	"error_path": "init_l2.prelude.lightning_activation",
	"error_trace": "init_l2:82] prelude:93] lightning_activation:92]",
	"error_type": "UnexpectedL2Protocol",
	"error_data": {
		"ticker": "tBTC-segwit",
		"protocol": {
			"type": "UTXO"
		}
	},
	"id": 2
}
```

#### Internal Error

Address already in use.

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Error",
        "details": {
            "error": "I/O error Address already in use (os error 48)",
            "error_path": "lib.lightning_activation.ln_p2p",
            "error_trace": "lib:103] lightning_activation:280] ln_p2p:196]",
            "error_type": "Internal",
            "error_data": "I/O error Address already in use (os error 48)"
        }
    },
    "id": null
}
```

#### PlatformCoinIsNotActivated Error

The selected coin is not activated. It needs to be activated before the lightning node can be initialized.

```json
{
	"mmrpc": "2.0",
	"error": "Platform coin tBTC-lightning is not activated",
	"error_path": "init_l2.lp_coins",
	"error_trace": "init_l2:87] lp_coins:3087]",
	"error_type": "PlatformCoinIsNotActivated",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1197550229](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1197550229)
Another bug found, will fix it in an upcoming PR. Platform coin should be tBTC-segwit. You can leave as it is in docs until I fix it.

#### InvalidPlatformConfiguration Error

Coin's configuration is missing a required parameter.  Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20-dev/lightning/#lightning-network-coins-file-configuration) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Invalid config for platform coin: tBTC-segwit, error: 'avg_blocktime' field is not found in platform coin config",
	"error_path": "init_l2.lightning_activation",
	"error_trace": "init_l2:95] lightning_activation:254]",
	"error_type": "InvalidPlatformConfiguration",
	"error_data": {
		"platform_coin_ticker": "tBTC-segwit",
		"err": "'avg_blocktime' field is not found in platform coin config"
	},
	"id": 2
}
```

## Initialization Status {{label : 'task::enable_lightning::status', tag : 'API-v2'}}

The `task::enable_lightning::status` request checks the status of lightning node initialization.

### Request Parameters

| Parameter            | Type    | Description                                                                                                                 |
| -------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------- |
| task\_id             | integer | The task id returned from `task::enable_lightning::init`                                                                    |
| forget\_if\_finished | boolean | Optional, defaults to `true`. If `false`, the status of the `task_id` will still be available after the task has completed. |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::status",
  "params": {
    "task_id": 1,
    "forget_if_finished": false
  },
  "id": 2
}
```

### Response Parameters

| Parameter      | Type   | Description                                                                    |
| -------------- | ------ | ------------------------------------------------------------------------------ |
| platform\_coin | string | The coin ticker for which the lightning node is being intitialized.            |
| address        | string | This node's address for the activated coin.                                    |
| balance        | object | A standard [BalanceInfo](/komodo-defi-framework/api/v20/#balance-info) object. |

The unspendable balance for lightning is different to a layer-1 unspendable balance. The channel reserve is part of the unspendable balance in lightning - the user will get this part of the balance on chain when closing the channel, but it can't be spent on layer 2 (lightning) because it's part of the security mechanism to prevent channel breaches and ensure that both parties fulfill their obligations within the channel.

#### Response (ready, success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "platform_coin": "BTC-segwit",
            "address": "0321937a095229510bd2b02a930d7b7eb273147e348ef1086b22e8790e3c609804",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

In the above response spendable will always be 0 since the balance is unspendable until connections with lightning channels counterparties are established.
Using the [my\_balance](/komodo-defi-framework/api/legacy/my_balance/) method after the coin is activated will get the spendable balance depending on how many channel counterparties are online.
For exact channels balances and which channels are usable, use [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-open-channels-by-filter).

#### Response (in progress state)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "InProgress",
        "details": "ReadingNetworkGraphFromFile"
    },
    "id": null
}
```

Possible in progress statuses:

*   ActivatingCoin
*   GettingFeesFromRPC
*   ReadingNetworkGraphFromFile
*   InitializingChannelManager
*   InitializingPeerManager
*   ReadingScorerFromFile
*   InitializingBackgroundProcessor
*   ReadingChannelsAddressesFromFile

## Cancel Initialization {{label : 'task::enable_lightning::cancel', tag : 'API-v2'}}

The `task::enable_lightning::cancel` request cancels lightning node initialization.

### Request Parameters

| Parameter | Type    | Description                                              |
| --------- | ------- | -------------------------------------------------------- |
| task\_id  | integer | The task id returned from `task::enable_lightning::init` |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::cancel",
  "params": {
    "task_id": 1
  },
  "id": 1
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": "success",
    "id": null
}
```

#### TaskFinished Error

Task has already been completed.

```json
{
    "mmrpc": "2.0",
    "error": "Task is finished already",
    "error_path": "init_l2.manager",
    "error_trace": "init_l2:157] manager:104]",
    "error_type": "TaskFinished",
    "error_data": 3,
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Channels";
export const description = "The methods in this document allow management of Lightning Network Channels on Komodo DeFi Framework.";

# Lightning Network Channels

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Open Channel {{label : 'lightning::channels::open_channel', tag : 'API-v2'}}

The `lightning::channels::open_channel` method opens a new channel with a remote node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                                                                                                                                                                                                                                           |
| ---------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | The ticker of the coin you would like to open a channel for.                                                                                                                                                                                                                                                                                                                          |
| node\_address    | string  | Lightning node addresses always have a format of `node_pubkey`@`ip_address`:`port`.                                                                                                                                                                                                                                                                                                   |
| amount           | object  | A standard [LightningChannelAmount](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-amount) object.                                                                                                                                                                                                                                                         |
| push\_msat       | integer | Optional. The amount in millisatoshi to push to the counterparty while openning, to create inbound liquidity for the channel. Using the `push_msat` parameter avoids having to send funds in a separate request later. Please note that the funds given using push\_msat is given unconditionally, meaning that there is no proof of payment in a preimage as with paying an invoice. |
| channel\_options | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                                                             |
| channel\_configs | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                                                               |

#### 📌 Example using an exact amount

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Exact",
      "value": 0.004
    }
  },
  "id": 22
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@233.112.95.142:9735"
	},
	"id": 22
}
```

#### 📌 Example using max available with channel options and configs

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Max"
    },
    "push_msat": 0,
    "channel_options": {
      "proportional_fee_in_millionths_sats": 0,
      "base_fee_msat": 1000,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    },
    "channel_configs": {
      "counterparty_locktime": 144,
      "our_htlc_minimum_msat": 1,
      "negotiate_scid_privacy": false,
      "max_inbound_in_flight_htlc_percent": 10,
      "commit_upfront_shutdown_pubkey": true,
      "inbound_channels_confirmations": 3,
      "their_channel_reserve_sats": 10000
    }
  },
  "id": null
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
	},
	"id": null
}
```

## Close Channel {{label : 'lightning::channels::close_channel', tag : 'API-v2'}}

The `lightning::channels::close_channel` method closes a channel with a remote node.

### Request Parameters

| Parameter    | Type    | Description                                                                  |
| ------------ | ------- | ---------------------------------------------------------------------------- |
| coin         | string  | The ticker of the coin you would like to close a channel for.                |
| uuid         | string  | Unique channel identifier.                                                   |
| force\_close | boolean | Optional, defaults to `false`. If `true`, will force closure of the channel. |

It is not recommended to force close a channel unless the counterparty is offline or unreachable for a long time.
Force closure of a channel will makeresult in the party who initiates the force closure to wait for a number of blocks (equal to the `force_close_spend_delay` value returned by [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details)) before they can get their funds on chain.

#### 📌 Example to force closing a channel

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::close_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
    "force_close": true
  },
  "id": 8
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": "Initiated closing of channel with uuid: 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

To see if the channel is closed or not, use the [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details) method.

Already added this message to the response in this upcoming PR KomodoPlatform/komodo-defi-framework#1814, also added force\_close\_spend\_delay to the close channel response. No need to change the docs now until this PR is merged KomodoPlatform/komodo-defi-framework#1814, I will write a comment about all the changes when opening the PR for review.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1202462310](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1202462310)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `uuid`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `uuid`",
	"id": 8
}
```

#### NoSuchChannel Error

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"error_path": "close_channel",
	"error_trace": "close_channel:55]",
	"error_type": "NoSuchChannel",
	"error_data": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

## Update Channel {{label : 'lightning::channels::update_channel', tag : 'API-v2'}}

The `lightning::channels::update_channel` method updates channel options.

### Request Parameters

| Parameter        | Type   | Description                                                                                                                     |
| ---------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string | The ticker of the coin you would like to update channel configuration options for.                                              |
| uuid             | string | Unique channel identifier.                                                                                                      |
| channel\_options | object | A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object. |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::update_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
    "channel_options": {
      "proportional_fee_in_millionths_sats": 1,
      "base_fee_msat": 1100,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    }
  },
  "id": 2
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"channel_options": {
			"proportional_fee_in_millionths_sats": 1,
			"base_fee_msat": 1100,
			"cltv_expiry_delta": 72,
			"max_dust_htlc_exposure_msat": 5000000,
			"force_close_avoidance_max_fee_sats": null
		}
	},
	"id": 2
}
```

#### NoSuchChannel Error

Channel with the given uuid is not foun on the lightning network.

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid dc33b998-8589-44fd-a246-256a582e8942",
	"error_path": "update_channel",
	"error_trace": "update_channel:61]",
	"error_type": "NoSuchChannel",
	"error_data": "dc33b998-8589-44fd-a246-256a582e8942",
	"id": 2
}
```

## Get Channel Details {{label : 'lightning::channels::get_channel_details', tag : 'API-v2'}}

The `lightning::channels::get_channel_details` method returns details about a channel.

### Request Parameters

| Parameter | Type   | Description                                                        |
| --------- | ------ | ------------------------------------------------------------------ |
| coin      | string | The ticker of the coin you would like to view channel details for. |
| uuid      | string | Unique channel identifier.                                         |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_channel_details",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92"
  },
  "id": 54
}
```

The response will vary depending on whether the channel status is `open` or `closed`.

#### Response (opened channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 959722,
			"is_outbound": true,
			"balance_msat": 959722000,
			"outbound_capacity_msat": 950125000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": 3,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}
	},
	"id": 54
}
```

`force_close_spend_delay` is not currently available in get\_channel\_details response, but should be added soon.
It's configured by the other side using counterparty\_locktime where we are the counterparty to the other side, the other side gets to set it since it's part of their security considerations since they have to be online at least once during this period if we tried to steal funds by broadcasting an old commitment transaction. We set our own too in our configs where it shows in the channel details of the other side as force\_close\_spend\_delay. The other side can't set counterparty\_locktime to any value when opening the channel though, since they can set it to a very long time and our funds will be locked for a very long time if we force closed the channel, this is where counterparty\_channel\_config\_limits::our\_locktime\_limit comes in as the other side can't make counterparty\_locktime larger than this limit otherwise the channel gets rejected and is never opened in the first place.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206109172](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206109172)

#### Response (closed channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_value": "98982",
			"closing_tx": "f1591864ad0e2c0bad060425a94b8288646e6d24f56b6d2db42d4636aba64612",
			"closure_reason": "null",
			"claiming_tx": "null",
			"claimed_balance": "null",
			"funding_generated_in_block": "null",
			"is_outbound": false,
			"is_public": true,
			"is_closed": true,
			"created_at": 167273496966,
			"closed_at": 171069595935
		}
	},
	"id": 54
}
```

The closed response above was spoofed, so the values are not accurate. Once code is finalised we should generate a real one.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206150595](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206150595)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `coin`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `coin`",
	"id": 54
}
```

## Get Claimable Balances {{label : 'lightning::channels::get_claimable_balances', tag : 'API-v2'}}

The `lightning::channels::get_claimable_balances` method returns a list of claimable balances for a coin.

### Request Parameters

| Parameter                         | Type    | Description                                                                     |
| --------------------------------- | ------- | ------------------------------------------------------------------------------- |
| coin                              | string  | The ticker of the coin you would like to view claimable balances for.           |
| include\_open\_channels\_balances | integer | Optional, defaults to `false`. If `true`, includes balances from open channels. |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_claimable_balances",
  "params": {
    "coin": "tBTC-lightning",
    "include_open_channels_balances": true
  },
  "id": 762
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": [{
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 0
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 38815
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 959539
		}
	}],
	"id": 762
}
```

This response may include additional information in future.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206152132](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206152132)

## List Open Channels by Filter  {{label : 'lightning::channels::list_open_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_open_channels_by_filter` method returns a list of open channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                              |
| --------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view open channels for.                                                                         |
| filter          | object  | A standard [LightningOpenChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-open-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                      |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                         |

#### 📌 Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": null,
			"funding_tx_output_index": null,
			"funding_tx_value_sats": 4000,
			"is_outbound": true,
			"balance_msat": 4000000,
			"outbound_capacity_msat": 4000000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": null,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "is_outbound": false
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1"
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 1000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}, {
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 2,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

## List Closed Channels by Filter  {{label : 'lightning::channels::list_closed_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_closed_channels_by_filter` method returns a list of closed channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                                  |
| --------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view closed channels for.                                                                           |
| filter          | object  | A standard [LightningClosedChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-closed-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                          |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                             |

#### 📌 Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		},
        {
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": true,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "channel_type": "Inbound"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": false,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 100000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "f901b604-54f7-4094-80f7-86aa9e362343",
			"channel_id": "20aae008973fad5a59559ac0650143ec5b53aba1c6584d3d92177491a8284d00",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "3807d9353557d15ad46e90a68dab8e4cd3a68a4af6b61bc7414bf81e29bc0517",
			"funding_value": 40000,
			"closing_tx": "61575237132b78aa5d1b4d62137da316bc67d09804b0bee53ab50f5d7cd0337c",
			"closure_reason": "Channel closed because the channel was cooperatively closed",
			"funding_generated_in_block": 2433122,
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1684083341,
			"closed_at": 1684146940
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 762
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Methods";
export const description =
  "This document describes all the available methods for the Lightning Network on Komodo DeFi Framework.";

import lightningflowchart from "@/public/images/docs/api-images/lightning-methods.png";

# Lightning Network Methods

Lightning methods are currently only available using the native Komodo DeFi Framework.
WASM support should be available in late 2023.

## Lightning Network Initialization Tasks

*   Initialise your lightning node with [task::enable\_lightning::init](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialize-lightning)
*   Check the initialization status of the lightning node with [task::enable\_lightning::status](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialization-status)
*   Cancel initialization process of the lightning node with [task::enable\_lightning::cancel](/komodo-defi-framework/api/v20-dev/lightning/activation/#cancel-initialization)

Any methods with a `task::` prefix will be linked to a numeric `task_id` value
which is used to query the status or outcome of the task.

## Lightning Network Nodes Methods

*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#connect-to-node)
*   Add a trusted node with [lightning::nodes::add\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#add-trusted-node)
*   Remove a trusted node with [lightning::nodes::remove\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#remove-trusted-node)
*   List your trusted lightning nodes with [lightning::nodes::list\_trusted\_nodes](/komodo-defi-framework/api/v20-dev/lightning/nodes/#list-trusted-nodes)

## Lightning Network Channels Methods

*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel)
*   Close a lightning channel [lightning::channels::close\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#close-channel)
*   Update a lightning channel [lightning::channels::update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel)
*   Get details about a lightning channel [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details)
*   Get claimable balances from lightning channels [lightning::channels::get\_claimable\_balances](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-claimable-balances)
*   List open lightning channels matching a filter [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-open-channels-by-filter)
*   List closed lightning channels matching a filter [lightning::channels::list\_closed\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-closed-channels-by-filter)

## Lightning Network Payments Methods

*   Generate lightning invoices with [lightning::payments::generate\_invoice](/komodo-defi-framework/api/v20-dev/lightning/payments/#generate-invoice)
*   Send lightning payments with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20-dev/lightning/payments/#send-payment)
*   Get details about a lightning payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20-dev/lightning/payments/#get-payment-details)
*   Get a filtered list of lightning payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/payments/#list-payments-by-filter)

## Lightning Network Flowchart

Once you:

*   Enable lightning with [task::enable\_lightning::init](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialize-lightning)
*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#connect-to-node)
*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel)

You can get an invoice for a coffee from [https://starblocks.acinq.co](https://starblocks.acinq.co)!

Then you can:

*   Pay the invoice with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20-dev/lightning/payments/#send-payment)
*   View details about the payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20-dev/lightning/payments/#get-payment-details)
*   List your payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/payments/#list-payments-by-filter)

Follow the flowchart below to visualize the process:

## Lightning Network Coins File Configuration

Some configurations are set per coin, and some are set per channel. The
[counterparty\_channel\_config\_limits](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config)
param must be set in the `coins` configuration file, and aplies to all
channels opened by counterparty nodes. The
[our\_channels\_config](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) and
[channel\_options](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) parameters
are set per channel. These can be defined in the `coins` configuration file to
act as the default for all opened channels, and optionally overwritten or
updated using the
[open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel) or
[update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel)
methods.

### Lightning Coin Config Parameters

| Parameter                             | Type    | Description                                                                                                                                                                                                                                                                                                                                    |
| ------------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                                  | object  | The ticker of the coin you will use lightning network with, suffixed with `-lightning`                                                                                                                                                                                                                                                         |
| mm2                                   | integer | Defaults to `0`. A value of `1`, indicates the coin is atomic swap compatible.                                                                                                                                                                                                                                                                 |
| decimals                              | integer | The decimal precision of the coin you will use the lightning network with.                                                                                                                                                                                                                                                                     |
| protocol                              | object  | A standard [CoinProtocol](/komodo-defi-framework/api/common_structures/activation/#coin-protocol) object.                                                                                                                                                                                                                                      |
| accept\_inbound\_channels             | boolean | Optional, defaults to `true`. If this is set to false, we do not accept inbound requests to open a new channel.                                                                                                                                                                                                                                |
| accept\_forwards\_to\_priv\_channels  | boolean | Optional, defaults to `false`. When set to `false`, any HTLCs which were to be forwarded over private channels will be rejected. This prevents us from taking on HTLC-forwarding risk when we intend to run as a node which is not online reliably (e.g. GUI wallet apps). Generally, private channels are used for non-routing purposes only. |
| counterparty\_channel\_config\_limits | object  | Optional. A standard [CounterpartyChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config) object.                                                                                                                                                                                                  |
| channel\_options                      | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                      |
| our\_channels\_config                 | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                        |

For GUIs and wallet apps, it is recommended to set
`accept_forwards_to_priv_channels` to `false`. This prevents users from taking
on HTLC-forwarding risk when a node is expected to not be reliably online.
[our\_channels\_config::announced\_channel](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options)
should also be set to `false` for GUIs and wallet apps.

```json
  {
    "coin": "BTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_config": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90
    },
    "counterparty_channel_config_limits": {
        "outbound_channels_confirmations": 3,
        "force_announced_channel_preference": false
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "BTC-segwit",
            "network": "mainnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
  {
    "coin": "tBTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_configs": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90,
        "their_channel_reserve_sats": 10000
    },
    "counterparty_channel_config_limits": { 
        "outbound_channels_confirmations": 3
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "tBTC-segwit",
            "network": "testnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
```
export const title = "Komodo DeFi Framework Method: Lightning Network Nodes";
export const description = "The methods in this document allow management of connections to Lightning Network Nodes on Komodo DeFi Framework.";

# Lightning Network Nodes

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Connect to Node {{label : 'lightning::nodes::connect_to_node', tag : 'API-v2'}}

The `lightning::nodes::connect_to_node` method allows you to connect to a lightning node.

### Request Parameters

| Parameter     | Type   | Description                                                                         |
| ------------- | ------ | ----------------------------------------------------------------------------------- |
| coin          | string | The coin ticker you would like to connect to a node on.                             |
| node\_address | string | Lightning nodes addresses always have a format of `node_pubkey`@`ip_address`:`port` |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::connect_to_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
  },
  "id": 1
}
```

The node address in the above request is for the WalletOfSatoshi lightning node, which is one of the most connected lightning nodes.
Other node addresses can be retrieved from any lightning explorer, such as:

*   [https://1ml.com/](https://1ml.com/)
*   [https://mempool.space/lightning/](https://mempool.space/lightning/)

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": "Connected successfully to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### Response (already connected)

```json
{
    "mmrpc": "2.0",
    "result": "Already connected to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### InvalidRequest Error (Invalid node\_address)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: Could not parse node address from str rgjhk3",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "Could not parse node address from str rgjhk3",
	"id": 762
}
```

#### ConnectionError Error (Timed out waiting to connect to node\_address)

```json
{
    "mmrpc": "2.0",
    "error": "Error connecting to node: Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "error_path": "connect_to_node",
    "error_trace": "connect_to_node:78]",
    "error_type": "ConnectionError",
    "error_data": "Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "id": null
}
```

## List Trusted Nodes {{label : 'lightning::nodes::list_trusted_nodes', tag : 'API-v2'}}

The `lightning::nodes::list_trusted_nodes` method allows you to list all nodes in your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to view your trusted nodes to. |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::list_trusted_nodes",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"trusted_nodes": ["038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"]
	},
	"id": 1
}
```

## Add Trusted Node {{label : 'lightning::nodes::add_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::add_trusted_node` method allows you to add a node to your trusted list.

### Request Parameters

| Parameter | Type   | Description                                               |
| --------- | ------ | --------------------------------------------------------- |
| coin      | string | The coin ticker you would like to add a trusted node for. |
| node\_id  | string | ID of node you would like to add to your trusted list.    |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::add_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"added_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```

## Remove Trusted Node {{label : 'lightning::nodes::remove_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::remove_trusted_node` method allows you to remove a node from your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to remove a trusted node from. |
| node\_id  | string | ID of node you would like to remove from your trusted list.   |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::remove_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"removed_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Payments";
export const description = "The methods in this document allow management of Lightning Network Payments on Komodo DeFi Framework.";

# Lightning Network Payments

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Generate invoice {{label : 'lightning::payments::generate_invoice', tag : 'API-v2'}}

The `lightning::payments::generate_invoice` method generates an invoice to be paid by another node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                |
| ---------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | Ticker of coin to generate invoice for.                                                                                                                    |
| description      | string  | A note to indicate the purpose of the invoice.                                                                                                             |
| amount\_in\_msat | integer | Amount to be paid, in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter) (A thousandth of a satoshi; the same as 0.00000000001 bitcoin.) |
| expiry           | integer | Optional, defaults to `3600`. Seconds until the invoice expires.                                                                                           |

#### 📌 Example

```json
{
  "method": "lightning::payments::generate_invoice",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "description": "For the burger on Tuesday",
    "amount_in_msat": 10000,
    "expiry": 600
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
		"invoice": "lntb100n1pj9aq73dpggehhygr5dpjjqcn4wfnk2u3qdahzq4r4v4ekgctenp4qf3dqylh55jd8m5x5hh0g5q82h9p86yghwhl2s0t826nlyp8zdgjzpp58leevp0jzjjtg9vln385fj2duw388ucqqsk2rzmuk0tz7fc2n67qsp5k33rvvq46xtuppl22ggcq5q7qqywyekcemhzazt4m6vulwsarcrq9qyysgqcqpcxqzjcrzjqwyx8nu2hygyvgc02cwdtvuxe0lcxz06qt3lpsldzcdr46my5epmjfgaasqqqvqqqqqqqqlgqqqqqqgq9qpwesnhre7xmdg6tajvp939vl72vxm8csecy6hfcah9fzgazd5eyzjskgtt7u9xshj7gq2vkejjcquem08tqfrc2pj78xa95teazzf0qq7pnyqj"
	},
	"id": 1
}
```

### InvalidRequest (invalid paramater value)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string '56', expected u64",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string '56', expected u64",
	"id": 762
}
```

## Send Payment {{label : 'lightning::payments::send_payment', tag : 'API-v2'}}

The `lightning::payments::send_payment` method sends a payment to another node.

Used to pay an invoice or send a payment via pubkey/address.

### Request Parameters

| Parameter | Type   | Description                                                                                                      |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------- |
| type      | string | Ticker of the coin to query.                                                                                     |
| payment   | object | A standard [LightningPayment](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment) object. |

#### 📌 Example using `invoice`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "invoice",
      "invoice": "lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y"
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb"
	},
	"id": 762
}
```

#### 📌 Example using `keysend`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "keysend",
      "destination": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
      "amount_in_msat": 1000,
      "expiry": 24
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "2620d47033fd366bff40cfe0879c47f683ef66c3882d0fab88a9bc72b5499655"
	},
	"id": 762
}
```

### PaymentError (attempt to pay self)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:231]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"id": 6
}
```

### PaymentError (no outbound routes)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"id": 762
}
```

### PaymentError (keysend - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:107] lightning:256]",
	"error_type": "PaymentError",
	"error_data": "Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"id": 762
}
```

### PaymentError (invoice - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"id": 762
}
```

### InvalidRequest (request is missing a required field)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `payment`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `payment`",
	"id": 762
}
```

### InvalidRequest (A required field is invalid)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: ParseError(Bech32Error(MissingSeparator))",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "ParseError(Bech32Error(MissingSeparator))",
	"id": 762
}
```

## Get Payment Details {{label : 'lightning::payments::get_payment_details', tag : 'API-v2'}}

The `lightning::payments::get_payment_details` method returns details about a lightning payment from a given `payment_hash`.

### Request Parameters

| Parameter     | Type   | Description                                                                                                                                                                                                                                                                          |
| ------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin          | string | Ticker of the coin to query.                                                                                                                                                                                                                                                         |
| payment\_hash | string | The hexidecimal string which identifies a invoice. The payment\_hash is returned from a `lightning::payments::send_payment` request if the payment was sent by us, or from a `lightning::payments::generate_invoice` request if the payment is received (or will be received) by us. |

#### 📌 Example

```json
{
  "method": "lightning::payments::get_payment_details",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "payment_hash": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e"
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_details": {
			"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb",
			"payment_type": {
				"type": "Outbound Payment",
				"destination": "0348cc1a9479697cd52db445ea74149ad40bb01bb2045a3e8acba21b70f94ab7cf"
			},
			"description": "1 Blokaccino",
			"amount_in_msat": 1000000,
			"fee_paid_msat": 1803,
			"status": "succeeded",
			"created_at": 1684081413,
			"last_updated": 1684081419
		}
	},
	"id": 762
}
```

### NoSuchPayment (payment hash not found)

```json
{
	"mmrpc": "2.0",
	"error": "Payment with hash: 414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e is not found",
	"error_path": "get_payment_details",
	"error_trace": "get_payment_details:75]",
	"error_type": "NoSuchPayment",
	"error_data": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e",
	"id": 762
}
```

### InvalidRequest (payment\_hash not a hash string)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid value: string '', expected a hash string",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid value: string '', expected a hash string",
	"id": 762
}
```

## List Payments by Filter {{label : 'lightning::payments::list_payments_by_filter', tag : 'API-v2'}}

The `lightning::payments::list_payments_by_filter` method returns a list of payments (sent and/or received) for a coin which match the given filter.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                             |
| --------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | Ticker of the coin to query.                                                                                                            |
| filter          | object  | Optional. A standard [LightningPaymentFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                     |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                        |

#### 📌 Example without filter

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "59175643db24fc79c77da073994d596444b6909fb2d452bde662ae386115c758",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683917593,
			"last_updated": 1683917593
		}, {
			"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "A 1:24 scale model of a 1981 DeLorean DMC-12",
			"amount_in_msat": 88000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1683714225,
			"last_updated": 1683805721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "ACME shrink ray",
			"amount_in_msat": 4000012,
			"status": "succeeded",
			"created_at": 1683814625,
			"last_updated": 1683815321
		}],
		"limit": 10,
		"skipped": 0,
		"total": 6,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### 📌 Example for Inbound Payment `payment_type`, `limit` and `pagination`

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "payment_type": {
        "type": "Inbound Payment"
      }
    },
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}, {
			"payment_hash": "605f214a4b4b159f9c4f44c94de3a273f3ff39300042ca18b7cbb4159f3d62f2",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "14 pallets of frozen spinach",
			"amount_in_msat": 56005000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}],
		"limit": 2,
		"skipped": 2,
		"total": 7,
		"total_pages": 4,
		"paging_options": {
			"PageNumber": 2
		}
	},
	"id": 1
}
```

#### 📌 Example for `pending` payments between 10000 and 40000 millisatoshis

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "pending",
      "from_amount_msat": 10000,
      "to_amount_msat": 40000
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### 📌 Example for successful payments on the 20th of April 2023

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "succeeded",
      "from_timestamp": 1681948800,
      "to_timestamp": 1682035199
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1681998480,
			"last_updated": 1682008491
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Max Maker Vol";
export const description =
  "The max_maker_vol method returns the maximum volume of a coin which can be used to create a maker order.";

# max\_maker\_vol

The `max_maker_vol` method returns the maximum volume of a coin which can be used to create a maker order (taking into account estimated fees). If the coin is not activated, a `NoSuchCoin` error will be returned.

#### Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter         | Type   | Description                                                                                                                                                                                    |
| ----------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin              | string | The ticker of the coin you queried.                                                                                                                                                            |
| volume            | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable maker volume.                                           |
| balance           | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable taker balance.                                          |
| locked\_by\_swaps | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the volume of a coin's balance which is locked by swaps in progress. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "max_maker_vol",
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "MARTY",
    "volume": {
      "decimal": "4.489763268712998712998712998712998712998712998712998712998712998712998712998712998712998712998712999",
      "rational": [
        [1, [962255003, 81]],
        [1, [390588672, 18]]
      ],
      "fraction": {
        "numer": "348854605979",
        "denom": "77700000000"
      }
    },
    "balance": {
      "decimal": "5.49110027",
      "rational": [
        [1, [549110027]],
        [1, [100000000]]
      ],
      "fraction": {
        "numer": "549110027",
        "denom": "100000000"
      }
    },
    "locked_by_swaps": {
      "decimal": "1.001317001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001",
      "rational": [
        [1, [77802331]],
        [1, [77700000]]
      ],
      "fraction": {
        "numer": "77802331",
        "denom": "77700000"
      }
    }
  },
  "id": null
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin TIME",
  "error_path": "max_maker_vol_rpc.lp_coins",
  "error_trace": "max_maker_vol_rpc:140] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": null
}
```

#### Response (balance too low)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough QTUM for swap: available 0, required at least 0.000728, locked by swaps None",
  "error_path": "max_maker_vol_rpc.maker_swap.utxo_common",
  "error_trace": "max_maker_vol_rpc:148] maker_swap:2203] utxo_common:3327] utxo_common:892]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "QTUM",
    "available": "0",
    "required": "0.000728"
  },
  "id": null
}
```

#### Response (Transport error)

```json
{
  "mmrpc": "2.0",
  "error": "Transport error: JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "error_path": "taker_swap.utxo_common",
  "error_trace": "taker_swap:1599] utxo_common:1990] utxo_common:166]",
  "error_type": "Transport",
  "error_data": "JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the clear_nft_db method Komodo DeFi Framework  provides to clear NFT data from your local database";

# Clear NFT Database {{label : 'clear_nft_db', tag : 'API-v2'}}

This method will clear the NFT database data stored in the local database for selected (or all) networks.

### Request Parameters

| Parameter  | Type    | Description                                                                                                        |
| ---------- | ------- | ------------------------------------------------------------------------------------------------------------------ |
| clear\_all | boolean | Defaults to `false`. If `true` all NFT data for all networks will be purged.                                       |
| chains     | array   | Optional. List of networks to remove NFT data for. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`. |

You can confirm the NFT database has been cleared by querying the `KOMODEFI.db` database file.
For more information, refer to the [Query NFT Database Tables](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/query_nft_database_tables/) documentation.

#### 📌 Example to clear Binance Smart chain and Polygon NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON",
      "BSC"
    ]
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

#### 📌 Example to clear all NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "clear_all": true
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

### Error responses

#### UnsupportedChainType

Returned when the `chains` parameter contains an unsupported network.

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: UnsupportedChainType",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:110]",
    "error_type": "InvalidRequest",
    "error_data": "UnsupportedChainType",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Get NFT List";
export const description =
  "This document describes all the get_nft_list method Komodo DeFi Framework  provides to get a list of your wallets NFTs";

# Get a list of NFTs {{label : 'get_nft_list', tag : 'API-v2'}}

Returns a list of the NFTs owned by the user, shown in descending order of the `block_number` value (the block height when the amount or owner changed). If the request is for NFTs on more than one chain, this means that the order may not be chronological. In the case of ERC1155 tokens, the `block_number` will update when additional NFTs are received or when all NFTs are withdrawn, but will generally remain the same if only some NFTs are withdrawn.

Before using this method, you must first call the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                      |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFTs without pagination, and will ignore the `limit` and `page_number` values.                       |
| limit               | integer | Optional, defaults to `10`. The number of NFTs displayed per page in response.                                                                                          |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-filter) object.                                                                 |

### Response Parameters

| Parameter | Type            | Description                                                                                        |
| --------- | --------------- | -------------------------------------------------------------------------------------------------- |
| nfts      | list of objects | A list of standard [NftInfo](/komodo-defi-framework/api/common_structures/nfts/#nft-info) objects. |
| skipped   | integer         | The number of NFTs in your wallet excluded by the request filters.                                 |
| total     | integer         | The total number of NFTs in your wallet matching the request filters.                              |

#### 📌 Example with no optional params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ]
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "BSC",
        "token_address": "0x5c7d6712dfaf0cb079d48981781c8705e8417ca0",
        "token_id": "0",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "b34ddf294013d20a6d70691027625839",
        "block_number_minted": 25465916,
        "block_number": 25919780,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://tikimetadata.s3.amazonaws.com/tiki_box.json",
        "token_domain": "tikimetadata.s3.amazonaws.com",
        "metadata": "{\"name\":\"Tiki box\",\"description\":\"Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!\",\"external_url\":\"\",\"image\":\"https://tikimetadata.s3.amazonaws.com/tiki_box.png\",\"attributes\":[{\"trait_type\":\"Crypto Logo\",\"value\":\"TIKI NFT CRYPTOLOGO SCAR\"}],\"properties\":{\"category\":\"image\",\"creators\":[]}}",
        "last_token_uri_sync": "2023-02-07T17:10:08.402Z",
        "last_metadata_sync": "2023-02-07T17:10:16.858Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_url": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_domain": "tikimetadata.s3.amazonaws.com",
          "name": "Tiki box",
          "description": "Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!",
          "attributes": [
            {
              "trait_type": "Crypto Logo",
              "value": "TIKI NFT CRYPTOLOGO SCAR"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "",
          "external_domain": null,
          "image_details": null
        }
      },
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 2
  },
  "id": null
}
```

#### 📌 Example with optional limit & page\_number params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "limit": 1,
    "page_number": 2
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 1,
    "total": 1
  },
  "id": null
}
```

#### 📌 Example with optional spam protection

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "protect_from_spam": true,
    "filters": {
      "exclude_spam": true,
      "exclude_phishing": true
    }
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```

### 📌 Error responses

#### Unsupported Chain Type

The supported chains are

```json
{
  "mmrpc":"2.0",
  "error":"Error parsing request: UnsupportedChainType",
  "error_path":"dispatcher",
  "error_trace":"dispatcher:109]",
  "error_type":"InvalidRequest",
  "error_data":"UnsupportedChainType",
  "id":null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_metadata method Komodo DeFi Framework  provides to get metadata for your NFTs";

# Get NFT Metadata {{label : 'get_nft_metadata', tag : 'API-v2'}}

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain               | string  | The token chain.                                                                                                                                                        |
| token\_address      | string  | The token address.                                                                                                                                                      |
| token\_id           | string  | Token ID.                                                                                                                                                               |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |

### Response Parameters

| Parameter              | Type    | Description                                                                                                                                                           |
| ---------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount                 | string  | The amount of this NFT the user owns (used by `ERC1155`).                                                                                                             |
| block\_number\_minted  | integer | The block height when the NFT was minted. May be `null`.                                                                                                              |
| block\_number          | integer | The block height when the amount or owner changed.                                                                                                                    |
| chain                  | string  | Chain name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| name                   | string  | May be `null`. An NFT collection name.                                                                                                                                |
| contract\_type         | string  | The type of NFT contract standard. One of `ERC721` or `ERC1155`.                                                                                                      |
| last\_token\_uri\_sync | string  | When the token\_uri was last updated.                                                                                                                                 |
| last\_metadata\_sync   | string  | When the metadata was last updated.                                                                                                                                   |
| metadata               | string  | The metadata of the token. May be `null`.                                                                                                                             |
| minter\_address        | string  | Minter address. May be `null`.                                                                                                                                        |
| owner\_of              | string  | The wallet address of the owner of the NFT.                                                                                                                           |
| possible\_spam         | boolean | If `true`, the contract address has [been identified](https://docs.moralis.io/web3-data-api/evm/nft-spam-detection) as associated with spam or suspicious activities. |
| possible\_phishing     | boolean | If `true`, the token has been identified as associated with phishing, as at least one of domain fields is found in database with phishing domains.                    |
| symbol                 | string  | May be `null`. The symbol of the NFT contract.                                                                                                                        |
| token\_address         | string  | The address of the NFT contract.                                                                                                                                      |
| token\_id              | string  | The token ID of the NFT.                                                                                                                                              |
| token\_hash            | string  | The token hash. May be `null`.                                                                                                                                        |
| token\_uri             | string  | The URI to the metadata of the token. May be `null`.                                                                                                                  |
| token\_domain          | string  | Token domain. May be `null`.                                                                                                                                          |
| uri\_meta              | object  | A standard [NftMetadata](/komodo-defi-framework/api/common_structures/nfts/#nft-metadata) object.                                                                     |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
    "token_id": "214300044414",
    "chain": "BSC"
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "amount": "1",
      "owner_of": "0xab95d01bc8214e4d993043e8ca1b68db2c946498",
      "token_hash": "af811b641bccbdc10c444ba4f3a2ffb5",
      "name": "OpenSea Collections",
      "symbol": "OPENSTORE",
      "token_uri": "https://api.opensea.io/api/v2/metadata/matic/0x2953399124F0cBB46d2CbACD8A89cF0599974963/0xf43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710",
      "token_domain": "api.opensea.io",
      "metadata": "{\"image\":\"https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format\",\"name\":\"Doge Napoleon\",\"description\":null,\"external_link\":null,\"animation_url\":\"https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4\",\"traits\":[]}",
      "last_token_uri_sync": "2023-09-01T04:04:30.867Z",
      "last_metadata_sync": "2023-09-01T04:35:01.128Z",
      "minter_address": "ERC1155 tokens don't have a single minter",
      "possible_spam": true,
      "chain": "POLYGON",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "block_number_minted": 19645247,
      "block_number": 45776404,
      "contract_type": "ERC1155",
      "possible_phishing": false,
      "uri_meta": {
          "image": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_url": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_domain": "i.seadn.io",
          "name": "Doge Napoleon",
          "description": null,
          "attributes": null,
          "animation_url": "https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4",
          "animation_domain": "openseauserdata.com",
          "external_url": null,
          "external_domain": null,
          "image_details": null
      }
  },
  "id": null
}
```

## Error responses

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f81, token_id 214300044414 was not found in wallet",
    "error_path": "nft",
    "error_trace": "nft:123]",
    "error_type": "TokenNotFoundInWallet",
    "error_data": {
        "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
        "token_id": "214300044414"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_transfers method Komodo DeFi Framework  provides to get information about your NFT transactions";

# Get a list of NFT transfers {{label : 'get_nft_transfers', tag : 'API-v2'}}

Returns a list of the NFT transfers involving the user, shown in descending order of the `block_timestamp` value of the NFT's last transfer.

To view NFT transactions, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of chains to scan for NFTs.                                                                                                                                        |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFT transfers without pagination, and will ignore the `limit` and `page_number` values.              |
| limit               | integer | Optional, defaults to `10`. The number of NFT transfers displayed per page in response.                                                                                 |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftTransferFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer-filter) object.                                                |

### Response Parameters

| Parameter         | Type            | Description                                                                                                |
| ----------------- | --------------- | ---------------------------------------------------------------------------------------------------------- |
| transfer\_history | list of objects | A list of standard [NftTransfer](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer) objects. |
| total             | integer         | The total number of NFT transfers in your wallet matching the request filters.                             |
| skipped           | integer         | The number of NFT transfers in your wallet excluded by the request filters.                                |

#### 📌 Example with date and `send` filters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_transfers",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON"
    ],
    "max": true,
    "filters": {
      "receive": true,
      "from_date": 1678233600
    },
    "protect_from_spam": true
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "transfer_history": [
      {
        "block_hash": "0xfd012e9dc2c7fa652ae3c0923599a9e6196520ac46e55f0f467d3a1ce84b8580",
        "transaction_hash": "0x4063c4ae3e56a06b6c8768ad76e0cb1523e671cf06e4325517106497778ede9e",
        "transaction_index": 87,
        "log_index": 468,
        "value": "0",
        "transaction_type": "Single",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "from_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "to_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "amount": "2",
        "verified": 1,
        "operator": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "possible_spam": false,
        "chain": "POLYGON",
        "token_id": "5",
        "block_number": 44506464,
        "block_timestamp": 1688107346,
        "contract_type": "ERC1155",
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "collection_name": null,
        "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
        "image_domain": "metadata.thesmurfssociety.com",
        "token_name": "Forest Mushrooms",
        "status": "Receive",
        "possible_phishing": false,
        "fee_details": {
          "coin": "MATIC",
          "gas": 40249,
          "gas_price": "0.000000153160317706",
          "total_fee": "0.006164549627348794"
        },
        "confirmations": 5775855
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the methods Komodo DeFi Framework  provides to get information and transact with NFTs";

# Non Fungible Tokens (NFTs)

The Komodo DeFi Framework API supports [ERC1155](https://www.nftstandards.wtf/Standards/ERC1155+Multi+token) and [ERC721](https://www.nftstandards.wtf/Standards/ERC721+Non+Fungible+Standard) NFTs via the [Moralis API](https://docs.moralis.io/) on the Avalanche (AVAX), BNB Smart Chain (BNB), Ethereum (ETH), Fantom (FTM), Polygon (MATIC) networks.

Before using other NFT methods, you should first call the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

## NFT Information Methods

*   Get a list of your tokens with [get\_nft\_list](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_list/)
*   Get a list of token transfers with [get\_nft\_transfers](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_transfers/)
*   Get token metadata with [get\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_metadata/)
*   Update NFT [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
*   Refresh NFT metadata with [refresh\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/refresh_nft_metadata/)

## NFT Transaction Methods

*   Withdraw ERC721 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/#erc-721-withdraw-example)
*   Withdraw ERC1155 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/#erc-1155-withdraw-example)

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Query NFT database tables";
export const description =
  "This document describes how to query the local NFT database tables.";

# Query NFT database tables

After using the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/#update-nft) method to initialise your local NFT database,
the following tables are available in `DB/KOMODEFI.db`:

*   AVAX\_nft\_list
*   AVAX\_nft\_transfer\_history
*   BNB\_nft\_list
*   BNB\_nft\_transfer\_history
*   ETH\_nft\_list
*   ETH\_nft\_transfer\_history
*   FTM\_nft\_list
*   FTM\_nft\_transfer\_history
*   MATIC\_nft\_list
*   MATIC\_nft\_transfer\_history
*   scanned\_nft\_blocks

## NFT List tables

The COIN\_nft\_list tables contain the NFTs that you own
It has the following columns, though not all columns are populated for all NFTs:

| ID | Name                   | Type         | Description                                                                    |
| -- | ---------------------- | ------------ | ------------------------------------------------------------------------------ |
| 0  | token\_address         | VARCHAR(256) | The address of the token contract.                                             |
| 1  | token\_id              | VARCHAR(256) | The id of the token.                                                           |
| 2  | chain                  | TEXT         | The coin network which the NFT is on.                                          |
| 3  | amount                 | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 4  | block\_number          | INTEGER      | The block height of this transaction.                                          |
| 5  | contract\_type         | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | possible\_spam         | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 7  | possible\_phishing     | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 8  | collection\_name       | TEXT         | The collection name which includes the token.                                  |
| 9  | symbol                 | TEXT         | An arbitrary symbol for the NFT                                                |
| 10 | token\_uri             | TEXT         | A link to the token's metadata.                                                |
| 11 | token\_domain          | TEXT         | The domain the token metadata is hosted on.                                    |
| 12 | metadata               | TEXT         | The token's metadata in JSON format.                                           |
| 13 | last\_token\_uri\_sync | TEXT         | Date and time when the token uri was last syncronised.                         |
| 14 | last\_metadata\_sync   | TEXT         | Date and time when the token metadata was last syncronised.                    |
| 15 | raw\_image\_url        | TEXT         | The raw URL for the token image.                                               |
| 16 | image\_url             | TEXT         | A link for the token's image (or other media).                                 |
| 17 | image\_domain          | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 18 | token\_name            | TEXT         | The name of the token.                                                         |
| 19 | description            | TEXT         | An arbitrary description of the NFT.                                           |
| 20 | attributes             | TEXT         | Additional attribute data for the NFT in JSON format.                          |
| 21 | animation\_url         | TEXT         | If NFT is animated, the URL of the animation.                                  |
| 22 | animation\_domain      | TEXT         | If NFT is animated, the domain of the animation.                               |
| 23 | external\_url          | TEXT         | Additional URL related to the NFT                                              |
| 24 | external\_domain       | TEXT         | Domain of the additional URL related to the NFT                                |
| 25 | image\_details         | TEXT         | Additional details about the NFT's image.                                      |
| 26 | details\_json          | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_list table query

> SELECT chain, token\_name, token\_address, token\_id, possible\_spam, possible\_phishing FROM MATIC\_nft\_list LIMIT 5;

| chain   | token\_name            | token\_address                             | token\_id | possible\_spam | possible\_phishing |
| ------- | ---------------------- | ------------------------------------------ | --------- | -------------- | ------------------ |
| POLYGON | $2000 USDT Airdrop🎁   | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         | 1              | 0                  |
| POLYGON | $1000 USDC Voucher🎁   | 0xb092b5eb5c653e915880dfc1f606be2ffe6fae8c | 1         | 1              | 0                  |
| POLYGON | 1000 BLUR Reward       | 0xeaa3c52052b809c8d8072187efc134def2dd5b13 | 0         | 1              | 0                  |
| POLYGON | SHIB Voucher 66 of 100 | 0xc46e36339ebd8bed48b1bdb6bd815e4b72103949 | 0         | 1              | 0                  |
| POLYGON | $1000 Rewards          | 0x6e0b84421388ad635f2a1167e39aff2dc742da2a | 0         | 1              | 0                  |

The NFTs listed above are all spam, and will be ignored by the [get\_nft\_list](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_list/) method.

## NFT Transfer table

The COIN\_nft\_transfer\_history tables contain the history of transfers of your NFTs, and have the following columns:

| ID | Name               | Type         | Description                                                                    |
| -- | ------------------ | ------------ | ------------------------------------------------------------------------------ |
| 0  | transaction\_hash  | VARCHAR(256) | Hex string, representing the transaction.                                      |
| 1  | log\_index         | INTEGER      | Simply a table index.                                                          |
| 2  | chain              | TEXT         | The coin network which the NFT is on.                                          |
| 3  | block\_number      | INTEGER      | The block height of this transaction.                                          |
| 4  | block\_timestamp   | INTEGER      | The block time of this transaction.                                            |
| 5  | contract\_type     | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | token\_address     | VARCHAR(256) | The address of the token contract.                                             |
| 7  | token\_id          | VARCHAR(256) | The id of the token.                                                           |
| 8  | status             | TEXT         | The transaction type: `Recieve` or `Send`                                      |
| 9  | amount             | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 10 | possible\_spam     | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 11 | possible\_phishing | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 12 | token\_uri         | TEXT         | A link to the token's metadata.                                                |
| 13 | token\_domain      | TEXT         | The domain the token metadata is hosted on.                                    |
| 14 | collection\_name   | TEXT         | The collection name which includes the token.                                  |
| 15 | image\_url         | TEXT         | A link for the token's image (or other media).                                 |
| 16 | image\_domain      | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 17 | token\_name        | TEXT         | The name of the token.                                                         |
| 18 | details\_json      | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_transfer\_history table query

> SELECT transaction\_hash, token\_name, token\_address, token\_id,  FROM MATIC\_nft\_transfer\_history WHERE block\_timestamp > 1701519320;

| transaction\_hash                                                  | token\_name          | token\_address                             | token\_id |
| ------------------------------------------------------------------ | -------------------- | ------------------------------------------ | --------- |
| 0x7b57303bcc2c68808b460490e984adcd18567a80660a18b7a151b62015247cda | $2000 USDT Airdrop🎁 | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         |

## NFT Last Scanned Block table

The scanned\_nft\_blocks table contains the last block that was scanned for each chain.
It has the following columns:

| ID | Name                 | Type    | Description                                                            |
| -- | -------------------- | ------- | ---------------------------------------------------------------------- |
| 2  | chain                | TEXT    | The coin network which the NFT is on.                                  |
| 1  | last\_scanned\_block | INTEGER | The block height when the last scan for NFTs was performed on a chain. |

### Example scanned\_nft\_blocks table query

> SELECT \* FROM scanned\_nft\_blocks;

| chain | last\_scanned\_block |
| ----- | -------------------- |
| MATIC | 50651981             |
| FTM   | 66512090             |
| ETH   | 0                    |
| BNB   | 0                    |
| AVAX  | 0                    |
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the refresh_nft_metadata method Komodo DeFi Framework  provides to refresh an NFT's metadata";

# Refresh NFT Metadata {{label : 'refresh_nft_metadata', tag : 'API-v2'}}

This method refreshes metadata of one NFT and metadata of related transactions with the same token\_address and token\_id.

### Request Parameters

| Parameter      | Type    | Description                                                                                                                                                                                                       |
| -------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain          | string  | Chains which holds the NFT you would like to updated metadata for.                                                                                                                                                |
| token\_address | string  | Token address.                                                                                                                                                                                                    |
| token\_id      | string  | Token ID.                                                                                                                                                                                                         |
| proxy\_auth    | boolean | Indicates whether authentication is required for accessing the proxy URLs (true if authentication is necessary, otherwise false).                                                                                 |
| url            | string  | URL link to the Moralis API proxy base url ([https://moralis-proxy.komodo.earth](https://moralis-proxy.komodo.earth)) or equivalent (if proxy\_auth is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam  | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent. [docs](https://nft.antispam.dragonhound.info/docs).                                                           |

If there are no errors, this request will return an empty response.

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "refresh_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
    "token_id": "5",
    "chain": "POLYGON",
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info"
  }
}
```

If there are no errors, this request will return an empty response.

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

Need to add some error responses here.
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the update_nft method Komodo DeFi Framework  provides to update NFT information in your local database";

# Update NFT {{label : 'update_nft', tag : 'API-v2'}}

This method will scan selected networks to update NFT information stored in the local database.
To interact with your NFTs, you will first need to activate the coin for the network the NFT is on.

See below for which coin to activate for each network:

| Network   | Coin  |
| --------- | ----- |
| AVALANCHE | AVAX  |
| BSC       | BNB   |
| ETH       | ETH   |
| FANTOM    | FTM   |
| POLYGON   | MATIC |

These coins can be activated using the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/enable_eth_with_tokens/) or method.

### Request Parameters

| Parameter     | Type    | Description                                                                                                                                                                  |
| ------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains        | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                           |
| proxy\_auth   | boolean | Indicates whether authentication is required for accessing the proxy URLs (true if necessary, false otherwise).                                                              |
| url           | string  | URL link to the [Moralis API proxy base url](https://moralis-proxy.komodo.earth) or equivalent (if proxy\_auth is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent.                                                                          |

If there are no errors, this request will return an empty response.
When updating multiple networks, or wallets with numerous NFTs, this request may take a while to complete.

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_nft",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON"
    ],
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info",
    "proxy_auth": false
  }
}
```

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

Need to add some error responses here.
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the withdraw_nft method Komodo DeFi Framework  provides to send NFTs to an address";

# Withdraw NFTs {{label : 'withdraw_nft', tag : 'API-v2'}}

To withdraw NFTs, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.
The `withdraw_nft` method will return signed raw transaction hex which must be broadcast using the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) method to complete the withdrawal.

### Request Parameters

| Parameter      | Type   | Description                                                                                                |
| -------------- | ------ | ---------------------------------------------------------------------------------------------------------- |
| type           | string | The contract type of the NFT to withdraw. Either `withdraw_erc721` or `withdraw_erc1155`                   |
| withdraw\_data | object | A standard [WithdrawNftData](/komodo-defi-framework/api/common_structures/nfts/#withdraw-nft-data) object. |

### Response Parameters

| Parameter         | Type    | Description                                                                                                                                                          |
| ----------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount            | string  | Amount of tokens to withdraw.                                                                                                                                        |
| tx\_hex           | string  | Raw hex of signed transaction. Use this with the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) RPC to broadcast the transaction. |
| tx\_hash          | string  | Transaction ID of the withdrawl.                                                                                                                                     |
| from              | array   | List of source addresses.                                                                                                                                            |
| to                | array   | List of destination addresses.                                                                                                                                       |
| contract\_type    | string  | Contract type. `ERC721` or `ERC1155`.                                                                                                                                |
| token\_address    | string  | Token address.                                                                                                                                                       |
| token\_id         | string  | Token ID.                                                                                                                                                            |
| fee\_details      | object  | A standard [WithdrawFee](/komodo-defi-framework/api/common_structures/#withdraw-fee) object.                                                                         |
| coin              | string  | Coin name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| block\_height     | integer | Block height of the transaction. If the value is `0`, the transaction is unconfirmed.                                                                                |
| timestamp         | integer | Timestamp of the block containing the withdrawl transaction in [unix epoch format](https://www.epochconverter.com/).                                                 |
| internal\_id      | integer | Used for internal transaction identification, for some coins it may be equal to transaction hash.                                                                    |
| transaction\_type | string  | This will always be `NftTransfer`.                                                                                                                                   |

#### 📌 ERC721 Withdraw Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc721",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8509818733db8289929473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c9464980000000000000000000000000000000000000000000000000000000000000001820136a0564b5c9c8309a3f8f6cc007ca957e4c411259026d68c2c34419158aff4d3ebf8a007afaa0590da01a2ce36c7edb5380f41235168f3633ed459b1fc8a750fecd38d",
        "tx_hash": "bb030f618702715eb39035dccd218355f78ae5379ff6d0691f0f3c0db3c03789",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 35218,
            "gas_price": "0.000000040827827163",
            "total_fee": "0.001437874417026534"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732198,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### 📌 ERC1155 Withdraw Example

If you are sending 2 or more NFTs, you must use the `withdraw_erc1155` withdraw type.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8502dffe7b4682f3a09473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa5395656600000000000000000000000000000000000000000000000000000000000000001820135a0476a4623c9df31cecbd319e0571c62d14a6dcedd5a760ced945ffa2e39fb12c5a03293f3c10d115edcc3795e414670f070c04ad936e2e87001da12f961df5962a7",
        "tx_hash": "d6b46e70bf755617366a5c10875eb639d55586bb568010ea82ef42e8d68c6523",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 62368,
            "gas_price": "0.000000012347931462",
            "total_fee": "0.000770115789422016"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732805,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### 📌 ERC1155 Withdraw Max Example

If you would like to withdraw all NFTs from a token\_address, you must use the `withdraw_erc1155` withdraw type and set `max` to `true`.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0x27Ad1F808c1ef82626277Ae38998AfA539565660",
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "max": true
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f9014b2a8508d579565282ea3b942953399124f0cbb46d2cbacd8a89cf059997496380b8e4f242432a000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa539565660f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000820135a0feb67607bd5e5c58f7533c8d2c88ef0ba3beac7fea29bfe11c3ce9bd10641f2ca02f1045b9f87536e45fe63556805734293e534284efecd9210f614316a3e8dca7",
        "tx_hash": "9dce8e555d388532bdafd42dd44cd6a2bdcbf74bdda079e15f71b808c8395bcc",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC1155",
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "amount": "7",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 59963,
            "gas_price": "0.00000003794123733",
            "total_fee": "0.00227507041401879"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732937,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

### 📌 Withdraw NFTs Error Responses

#### InvalidRequest (missing field)

```json
  {
      "mmrpc": "2.0",
      "error": "Error parsing request: missing field `type`",
      "error_path": "dispatcher",
      "error_trace": "dispatcher:109]",
      "error_type": "InvalidRequest",
      "error_data": "missing field `type`",
      "id": null
  }
```

#### InvalidRequest (wrong withdraw type)

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "id": null
}
```

#### TokenNotFoundInWallet (trying to send NFT you dont own)

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f82, token_id 110473361632261669912565539602449606788298723469812631769659886404530570536722 was not found in wallet",
    "error_path": "eth.nft",
    "error_trace": "eth:883] nft:1177]",
    "error_type": "GetNftInfoError",
    "error_data": {
        "error_type": "TokenNotFoundInWallet",
        "error_data": {
            "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f82",
            "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536722"
        }
    },
    "id": null
}
```

#### TransportError (unable to estimate gas)

```json
{
    "mmrpc": "2.0",
    "error": "Transport error: request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "error_path": "eth",
    "error_trace": "eth:1004] eth:5792]",
    "error_type": "Transport",
    "error_data": "request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "id": null
}
```

#### NotEnoughNftsAmount (trying to send more NFTs than you have)

```json
{
    "mmrpc": "2.0",
    "error": "Not enough NFTs amount with token_address: 0x2953399124f0cbb46d2cbacd8a89cf0599974963 and token_id 110473361632261669912565539602449606788298723469812631769659886404530570536720. Available 1, required 2",
    "error_path": "eth",
    "error_trace": "eth:897]",
    "error_type": "NotEnoughNftsAmount",
    "error_data": {
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "available": "1",
        "required": "2"
    },
    "id": null
}
```

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Account Balance Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# Account Balance Tasks

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'task::account_balance::init', tag : 'API-v2'}}

Use the `task::account_balance::init` method to initialise an account balance request.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                     |
| -------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| coin           | string | Ticker of activated coin you want to see addresses and balance for                                                                              |
| account\_index | string | For GUIs, this will be zero. In CLI you can use other values if you [know what you are doing](https://learnmeabitcoin.com/technical/hd-wallets) |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::init",
  "params": {
    "coin": "COIN_NAME",
    "account_index": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'task::account_balance::status', tag : 'API-v2'}}

Use the `task::account_balance::status` method to view the status / response of an account balance request.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter           | Type            | Description                                                                                                                                                                                                                                                                  |
| ------------------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result              | object          | Object containing status and details of the task                                                                                                                                                                                                                             |
| .status             | string          | Status of the task (`Ok` or `Error`)                                                                                                                                                                                                                                         |
| ..account\_index    | integer         | For GUIs, this will return `0`. In CLI it will return the same as the user request input                                                                                                                                                                                     |
| ..derivation\_path  | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the wallet.                                                                                                                                                               |
| ..total\_balance    | object          | Contains the spendable and unspendable balance for the wallet                                                                                                                                                                                                                |
| ...spendable        | string(numeric) | Spendable balance for this wallet                                                                                                                                                                                                                                            |
| ...unspendable      | string(numeric) | Unspendable balance for this wallet (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                            |
| ..addresses         | list            | Contains information about current active addresses in the wallet                                                                                                                                                                                                            |
| ...address          | string          | Spendable balance for this address                                                                                                                                                                                                                                           |
| ...derivation\_path | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of an address.                                                                                                                                                               |
| ...chain            | string(numeric) | `Internal` or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ...balance          | object          | Contains the spendable and unspendable balance for this address                                                                                                                                                                                                              |
| ....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                           |
| ....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                           |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "account_index": 0,
      "derivation_path": "m/44'/20'/0'",
      "total_balance": {
        "spendable": "99.999",
        "unspendable": "0"
      },
      "addresses": [
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/0",
          "chain": "External",
          "balance": {
            "spendable": "49.999",
            "unspendable": "0"
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/1",
          "chain": "External",
          "balance": {
            "spendable": "50",
            "unspendable": "0"
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/2",
          "chain": "External",
          "balance": {
            "spendable": "0",
            "unspendable": "0"
          }
        }
      ]
    }
  },
  "id": null
}
```

## cancel {{label : 'task::account_balance::cancel', tag : 'API-v2'}}

Use the `task::account_balance::cancel` method to cancel an account balance request.

#### Arguments

| Parameter | Type    | Description                                                             |
| --------- | ------- | ----------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdrawal process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::cancel",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_account_balance.manager",
  "error_trace": "init_account_balance:113] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 2,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: HD Account Management Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# task\_create\_new\_account

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and are using `HD Mode`, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'init', tag : 'API-v2'}}

Use the `task::create_new_account::init` method to initialise a HD account.

#### Arguments

| Parameter   | Type   | Description                                                                                                                             |
| ----------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string | Ticker of coin you would like to initialise a HD account for.                                                                           |
| account\_id | string | Optional. If not defined, will increment to the next unused account id in the wallet.                                                   |
| scan        | string | Optional. If `true`, will scan the account for funded addresses. Defaults to `true`.                                                    |
| gap\_limit  | string | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation, or 20 if no value was provided. |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::init",
  "params": {
    "coin": "KMD",
    "account_id": 77,
    "scan": true,
    "gap_limit": 20
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'status', tag : 'API-v2'}}

Use the `task::create_new_account::status` method to query the status of a HD account creation task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                                                                                  |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                                                                                           |
| details   | string or object | If in progress, either `Preparing` or `RequestingAccountBalance`. Once complete, a standard [WalletAccountInfo](/komodo-defi-framework/api/v20/#wallet-account-info) object. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::status",
  "params": {
    "task_id": 1
  }
}
```

#### Response (ready, successful)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "account_index": 77,
            "derivation_path": "m/44'/141'/77'",
            "total_balance": {
                "spendable": "7.777",
                "unspendable": "0"
            },
            "addresses": [
                {
                    "address": "RMsnNdVfZbxWwDxJafc6scbaN1xYVoR7Gx",
                    "derivation_path": "m/44'/141'/77'/0/4",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "R9roM4acnrrp1BL73MXd9EWdF5biRcSJ5X",
                    "derivation_path": "m/44'/141'/77'/0/5",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "RLNu8gszQ8ENUrY3VSyBS2714CNVwn1f7P",
                    "derivation_path": "m/44'/141'/77'/0/7",
                    "chain": "External",
                    "balance": {
                        "spendable": "7.777",
                        "unspendable": "0"
                    }
                }
            ]
        }
    },
    "id": null
}
```

#### Response (in progress)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "InProgress",
      "details": "Preparing"
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework: QTUM Activation Tasks";
export const description =
  "The methods in this document allow activation of QTUM.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_qtum

## init {{label : 'task::enable_qtum::init', tag : 'API-v2'}}

QTUM coins are activated using this method. For UTXO coins, refer to [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::init",
  "params": {
    "ticker": "QTUM",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10050"
            },
            {
              "url": "electrum3.cipig.net:20050",
              "ws_url": "electrum3.cipig.net:30050",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_qtum::status', tag : 'API-v2'}}

After running the `task::enable_qtum::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

The response formats for this method are the same as the [task::enable\_utxo::status](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#status) responses.

## user\_action {{label : 'task::enable_qtum::user_action', tag : 'API-v2'}}

If the `task::enable_qtum::status` returns `UserActionRequired`, we need to use the `task::enable_qtum::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Error Cases

`CoinCreationError`: Returned when a coin is not supported.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin QTUM creation: Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config",
      "error_path": "lib.init_qtum_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_qtum_activation:71] utxo_coin_builder:234]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "QTUM",
        "error": "Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config"
      }
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: UTXO Coin Activation Tasks";
export const description =
  "The methods in this document allow activation of UTXO coins.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_utxo

## init {{label : 'task::enable_utxo::init', tag : 'API-v2'}}

UTXO coins are activated using this method. For QTUM coins, refer to [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Activation in Trezor mode

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::init",
  "params": {
    "ticker": "KMD",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10001"
            },
            {
              "url": "electrum3.cipig.net:20001",
              "ws_url": "electrum3.cipig.net:30001",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_utxo::status', tag : 'API-v2'}}

After running the `task::enable_utxo::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful, Trezor mode)

| Parameter            | Type            | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| -------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| status               | string          | A short indication of how the requested process is progressing.                                                                                                                                                                                                                                                                                                                                                                                              |
| details.result       | object          | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                                                                                                                                                                                                                                                                                                          |
| .ticker              | string          | The ticker of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                       |
| .current\_block      | integer         | The block height of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                 |
| .wallet\_balance     | object          | Information about the addresses of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                  |
| ..wallet\_type       | string          | In Trezor mode, this will return `HD`                                                                                                                                                                                                                                                                                                                                                                                                                        |
| ..accounts           | list            | A list of addresses and related information for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                     |
| ...account\_index    | integer         | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with mm2 global Iguana/HD/HW account.**                                                                                                                                                                                                                                                                                                   |
| ...derivation\_path  | string          | Derivation path up to the `COIN` child. E.g. `"m/44'/141'/0'"`                                                                                                                                                                                                                                                                                                                                                                                               |
| ...total\_balance    | object          | Combined total spendable and unconfirmed balances of all account addresses                                                                                                                                                                                                                                                                                                                                                                                   |
| ....spendable        | string(numeric) | Combined total spendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                   |
| ....unspendable      | string(numeric) | Combined total unspendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                 |
| ...addresses         | list            | A list of addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                              |
| ....address          | string          | One of the addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                             |
| ....derivation\_path | string          | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address.                                                                                                                                                                                                                                                                                                                                                  |
| ....chain            | string          | Returns `External` when `CHAIN=0` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. Returns `Internal` when `CHAIN=1` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ....balance          | object          | Contains the spendable and unspendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                              |
| .....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                                                           |
| .....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                                                                                                                                                                                                           |

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "ticker": "DOC",
        "current_block": 1529989,
        "wallet_balance": {
          "wallet_type": "HD",
          "accounts": [
            {
              "account_index": 0,
              "derivation_path": "m/44'/141'/0'",
              "total_balance": {
                "spendable": "7.74199",
                "unspendable": "0"
              },
              "addresses": [
                {
                  "address": "RFarfkYdmMVv9q4dHTmHUgS5j6nBy6qate",
                  "derivation_path": "m/44'/141'/0'/0/0",
                  "chain": "External",
                  "balance": {
                    "spendable": "0",
                    "unspendable": "0"
                  }
                },
                {
                  "address": "RUu1JYSAYVmSLL2Nb5eLNdenp1JtHcReYZ",
                  "derivation_path": "m/44'/141'/0'/0/1",
                  "chain": "External",
                  "balance": {
                    "spendable": "7.74199",
                    "unspendable": "0"
                  }
                },
                {
                  "address": "RTnduXSuRJegfMXf7nQM6C5gS68sbpL7AY",
                  "derivation_path": "m/44'/141'/0'/1/0",
                  "chain": "Internal",
                  "balance": {
                    "spendable": "0",
                    "unspendable": "0"
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  "id": null
}
```

#### Response (ready, successful, Iguana mode)

| Parameter        | Type            | Description                                                                                                         |
| ---------------- | --------------- | ------------------------------------------------------------------------------------------------------------------- |
| status           | string          | A short indication of how the requested process is progressing.                                                     |
| details.result   | object          | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .ticker          | string          | The ticker of the coin being activated                                                                              |
| .current\_block  | integer         | The block height of the coin being activated                                                                        |
| .wallet\_balance | object          | Information about the addresses of the coin being activated                                                         |
| ..wallet\_type   | string          | In Trezor mode, this will return `HD`                                                                               |
| ..address        | string          | One of the addresses in the account for the coin being activated                                                    |
| ..balance        | object          | Contains the spendable and unspendable balance for this address                                                     |
| ...spendable     | string(numeric) | Spendable balance for this address                                                                                  |
| ...unspendable   | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                  |

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "current_block": 1531669,
        "wallet_balance": {
          "wallet_type": "Iguana",
          "address": "RKK5UzcZnXBZNGvS5RqrnycHRiFfnL8fMq",
          "balance": {
            "spendable": "0",
            "unspendable": "0"
          }
        }
      }
    }
  },
  "id": null
}
```

#### Response (in progress)

| Parameter | Type   | Description                                                 |
| --------- | ------ | ----------------------------------------------------------- |
| status    | string | Will return `InProgress` if task is not yet comepleted      |
| details   | string | An indication of the current step of the activation process |

Possible In Progress Cases:

*   `ActivatingCoin`: The first step of activation. It does not require any action from the user.
*   `RequestingWalletBalance`: The first step of activation, while initial balances info is being requested. It does not require any action from the user.
*   `Finishing`: Activation process completed
*   `WaitingForTrezorToConnect`: Waiting for the user to plugin a Trezor device
*   `FollowHwDeviceInstructions`: Waiting for the user to follow the instructions on the device

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "RequestingWalletBalance"
  },
  "id": null
}
```

#### Response (ready, error)

| Parameter      | Type   | Description                                                                                                         |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------- |
| status         | string | A short indication of how the requested process is progressing.                                                     |
| details.result | object | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .error         | string | The ticker of the coin being activated                                                                              |
| .error\_path   | string | Used for debugging. A reference to the function in code base which returned the error                               |
| .error\_trace  | string | Used for debugging. A trace of lines of code which led to the returned error                                        |
| .error\_type   | string | An enumerated error identifier to indicate the category of error                                                    |
| .error\_data   | string | Additonal context for the error type                                                                                |

Possible Error Cases:

*   `TaskTimedOut` - Timed out waiting for coin activation, connecting to the device trezor or for user to confirm pubkey)
*   `CoinCreationError` - Error during activation. E.g. incorrect or inactive electrum servers.
*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20-dev/task_init_trezor/#details-for-hw-error-error-type) for more info.

## user\_action {{label : 'task::enable_utxo::user_action', tag : 'API-v2'}}

If the `task::enable_utxo::status` returns `UserActionRequired`, we need to use the `task::enable_utxo::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```
export const title = "Komodo DeFi Framework: Trezor Initialisation";
export const description = "Prepare your Trezor device for use in the Komodo DeFi Framework API, and authenticate using your PIN or phrase.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# Trezor Initialisation

The methods below prepare your Trezor device for use within the Komodo DeFi Framework API. Once completed, you can authenticate using your PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action).

Methods with a `task::` prefix will be linked to a numeric
`task_id` value which can be used to query the status or outcome of a task.

## init {{label : 'task::init_trezor::init', tag : 'API-v2'}}

Before using this method, launch the Komodo DeFi Framework API, and plug in your Trezor.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                                          |
| -------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| device\_pubkey | string | Optional. If known, you can specify the device pubkey. If not known, this will be part of the `task::init_trezor::status` response which you can save for future use |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command (without device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {}
}
```

#### Command (with device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {
    "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status {{label : 'task::init_trezor::status', tag : 'API-v2'}}

After running the `task::init_trezor::init` method, we can query the status of device initialisation to check its progress.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter              | Type         | Description                                                                                                                                                         |
| ---------------------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                 | string       | A short indication of how the requested process is progressing.                                                                                                     |
| details                | object       | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                 |
| details.type           | string       | Type of hardware wallet device (e.g. `Trezor`)                                                                                                                      |
| details.model          | string       | The model of the hardware wallet device (e.g. `One` or `T`)                                                                                                         |
| details.device\_name   | string       | The name of the device as defned by user in Trezor Suite or another wallet application.                                                                             |
| details.device\_id     | string (hex) | An unique identifier of the device, set during manufacturing.                                                                                                       |
| details.device\_pubkey | string (hex) | The hardware wallet device's pubkey. If included in the `task::init_trezor::init` request, it wll be the same as input. If not, it should be stored for future use. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (in progress)

Possible "In progress" Cases:

*   `Initializing` - This is the normal task state. It does not require any action from the user.

*   `WaitingForTrezorToConnect` - The Komodo DeFi Framework API is waiting for the user to plugin a Trezor device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForTrezorToConnect"
  },
  "id": null
}
```

*   `FollowHwDeviceInstructions` - The Komodo DeFi Framework API is waiting for the user to follow instructions displayed on the device (e.g. clicking a button to confirm).

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "FollowHwDeviceInstructions"
  },
  "id": null
}
```

*   `UserActionRequired` - This will either be `EnterTrezorPin` or `EnterTrezorPassphrase`. Refer to the [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action) section for more information.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "UserActionRequired",
    "details": "EnterTrezorPin"
  },
  "id": null
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "type": "Trezor",
        "model": "One",
        "device_name": "Fitzchivalry Farseer",
        "device_id": "A1CCF11243A795A84111955E",
        "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
      }
    }
  },
  "id": null
}
```

#### Error Responses (by `error_type`)

:

*   `HwContextInitializingAlready` - Returned if user calls `task::init_trezor::init` before the previous `task::init_trezor::init` task has been completed.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Hardware Wallet context is initializing already",
      "error_path": "init_hw.crypto_ctx",
      "error_trace": "init_hw:151] crypto_ctx:235]",
      "error_type": "HwContextInitializingAlready"
    }
  },
  "id": null
}
```

*   `Timeout` - Task timed out while trying to connect to a device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "RPC timed out 300s",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:156]",
      "error_type": "Timeout",
      "error_data": {
        "secs": 300,
        "nanos": 0
      }
    }
  },
  "id": null
}
```

*   `NoSuchTask` - Something went wrong or `task::init_trezor::init` was not called. Refer to the [task::init\_trezor::init](/komodo-defi-framework/api/v20-dev/task_init_trezor/#init) section for more information.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '0'",
  "error_path": "init_hw",
  "error_trace": "init_hw:184]",
  "error_type": "NoSuchTask",
  "error_data": 0,
  "id": null
}
```

*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20-dev/task_init_trezor/#details-for-hw-error-error-type) for more info.

## cancel {{label : 'task::init_trezor::cancel', tag : 'API-v2'}}

Use the `task::init_trezor::cancel` method to cancel the initialisation task.

#### Arguments

| Parameter | Type    | Description                                                                 |
| --------- | ------- | --------------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the initialisation process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::cancel",
  "params": {
    "task_id": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_hw.manager",
  "error_trace": "init_hw:209] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

## user\_action {{label : 'task::init_trezor::user_action', tag : 'API-v2'}}

When you see the pin grid on your device, or it asks for a passphrase word, use this method.

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                                                          |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                                                          |
| user\_action              | object          | Object containing the params below                                                                                                                                                                                                   |
| user\_action.action\_type | string          | Either `TrezorPin` or `TrezorPassphrase`, depending on which is requested by responses from related methods returning `"status": "UserActionRequired"`                                                                               |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information.                                     |
| user\_action.passphrase   | string          | The [passphrase](https://trezor.io/learn/a/passphrases-and-hidden-wallets) functions like an extra word added to your recovery seed, and it used to access hidden wallets. To access the default wallet, input an empty string here. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

Even an incorrect PIN will return `success`. This doesn't mean the PIN was accepted, just that it was communicated without errors. If the PIN was incorrect, you will see an error like below in the next response for a method that requires authentication.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin KMD creation: Hardware Wallet context is not initialized",
      "error_path": "lib.init_utxo_standard_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_utxo_standard_activation:79] utxo_coin_builder:317]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "KMD",
        "error": "Hardware Wallet context is not initialized"
      }
    }
  },
  "id": null
}
```

#### 📌 Examples

#### Command (for TrezorPin)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Command (for TrezorPassphrase)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPassphrase",
      "passphrase": "breakfast"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Details for `HwError` error type

When requesting the status of a task, if an `error_type` of `HwError` is returned, the GUI / User should check the details in `error_data` field to know which action is required (as detailed below).

### FoundUnexpectedDevice

The connected Trezor device has a different pubkey value than what was specified in the `device_pubkey` parameter

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found unexpected device. Please re-initialize Hardware wallet",
      "error_path": "lib.common_impl.coin_balance.utxo_common.hd_pubkey.hw_ctx",
      "error_trace": "lib:93] common_impl:46] coin_balance:304] utxo_common:163] hd_pubkey:176] hw_ctx:149]",
      "error_type": "HwError",
      "error_data": "FoundUnexpectedDevice"
    }
  },
  "id": null
}
```

### FoundMultipleDevices

Multiple Trezor devices are plugged in. Remove the additional devices, and keep the one you want to use plugged in.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found multiple devices. Please unplug unused devices",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:152] hw_client:126]",
      "error_type": "HwError",
      "error_data": "FoundMultipleDevices"
    }
  },
  "id": null
}
```

### NoTrezorDeviceAvailable

No Trezor device detected by the Komodo DeFi Framework API. Make sure it is plugged in, or try a different USB cable / port.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "No Trezor device available",
      "error_path": "init_hw.crypto_ctx.hw_ctx.response.usb.libusb",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_ctx:120] response:136] usb:46] libusb:195]",
      "error_type": "HwError",
      "error_data": "NoTrezorDeviceAvailable"
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Withdraw Tasks";
export const description = "The methods in this document allow withdrawal of coins from Komodo DeFi Framework.";

# Withdraw Tasks

## init {{label : 'task::withdraw::init', tag : 'API-v2'}}

The `task::withdraw::init` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument. The status of this method can be queried via the [withdraw\_status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status) method.

It will return the transaction hex (via `task::withdraw::status`), which then needs to be broadcast with the [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the withdrawal. This method is uses the same input fields as the [standard v2 withdraw method](/komodo-defi-framework/api/v20/withdraw/), with additional optional fields to specify the `from` address when using a hardware or HD wallet. There are two way to indicate which HD address to send funds from:

*   Using `derivation_path` as a single input. E.g `m/44'/20'/0'/0/2`
*   Using `account_id` (0), `chain` (External) & `address_id` (2) inputs. The bracketed values are the equavalent of the derivation path above.

To cancel the transaction generation, use the [withdraw\_cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel) method.

When used for ZHTLC coins like ARRR or ZOMBIE, it may take some time to
complete.

### Arguments

| Structure             | Type             | Description                                                                                                                                                                                                                                                                                                                      |
| --------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                  | string           | The name of the coin the user desires to withdraw                                                                                                                                                                                                                                                                                |
| to                    | string           | Coins are withdrawn to this address                                                                                                                                                                                                                                                                                              |
| amount                | string (numeric) | The amount the user desires to withdraw, ignored when `max=true`                                                                                                                                                                                                                                                                 |
| memo                  | string           | Optional, used for ZHTLC and Tendermint coins only. Attaches a memo to the transaction.                                                                                                                                                                                                                                          |
| from                  | string           | Optional, used only for transactions using a hardware wallet. For more information, see the [Trezor Integration guide](/komodo-defi-framework/api/v20-dev/task_init_trezor/)                                                                                                                                                     |
| from.derivation\_path | string           | Optional, HD wallets only. Follows the format `m/44'/COIN_ID'/ACCOUNT_ID'/CHAIN/ADDRESS_ID`                                                                                                                                                                                                                                      |
| from.account\_id      | integer          | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                                                                                                                                                                                                             |
| from.chain            | string           | Optional, HD wallets only. `Internal`, or `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). `Internal` is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| from.address\_id      | integer          | Optional, HD wallets only. Check the output from coin activation to find the ID of an address with balance.                                                                                                                                                                                                                      |
| max                   | bool             | Optional. Withdraw the maximum available amount. Defaults to `false`                                                                                                                                                                                                                                                             |
| fee                   | object           | Optional. Used only to set a custom fee, otherwise fee value will be derived from a deamon's `estimatefee` (or similar) RPC method                                                                                                                                                                                               |
| fee.type              | string           | Type of transaction fee; possible values: `UtxoFixed` or `UtxoPerKbyte`                                                                                                                                                                                                                                                          |
| fee.amount            | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte)                                                                                                                                                                                        |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT"
  },
  "id": 0
}
```

#### Command (max = true)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "max": true
  },
  "id": 0
}
```

#### Command (custom UtxoFixed fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoFixed",
      "amount": "0.001"
    }
  },
  "id": 0
}
```

#### Command (custom UtxoPerKbyte fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoPerKbyte",
      "amount": "0.00097"
    }
  },
  "id": 0
}
```

#### Command (HD wallet: derivation path option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "derivation_path": "DERIVATION_PATH"
    }
  }
}
```

#### Command (HD wallet: account\_id, chain & address\_id option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "account_id": 0,
      "chain": "External",
      "address_id": "ADDRESS_ID"
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status  {{label : 'task::withdraw::status', tag : 'API-v2'}}

To get the status of your withdrawal transaction generation, use the `task::withdraw::status` method. Once ready, it will provide the raw hex used to broadcast your transaction with [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/). The response returned is the same as what is returned from the [standard v2 withdraw method](/komodo-defi-framework/api/v20/withdraw/#response)

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure                            | Type                       | Description                                                                                                                                                                                             |
| ------------------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                               | string                     | A short indication of how the withdrawal is progressing.                                                                                                                                                |
| details                              | object                     | Depending on the state of withdrawal progress, this will contain different information as shown in the responses below.                                                                                 |
| details.to                           | array of strings           | Coins are withdrawn to these addresses; this may contain the `my_address` address, where change from UTXO coins is sent.                                                                                |
| details.from                         | array of strings           | Coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| details.my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| details.received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| details.spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| details.total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| details.fee\_details                 | object                     | the fee details of the generated transaction; `fee_details.type` is "Utxo" for Z coins. `fee_details.coin` will be the same as `details.coin`, and `fee_details.amount` will be a numeric value.        |
| details.tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| details.tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/)                                              |
| details.coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| details.transaction\_type            | string                     | Transaction type will be `StandardTransfer` for Z coin transactions.                                                                                                                                    |
| details.kmd\_rewards                 | object (optional)          | If supported (e.g. when withdrawing `KMD`), an object containing information about accrued rewards.                                                                                                     |
| details.kmd\_rewards.amount          | string (numeric, optional) | The amount of accrued rewards                                                                                                                                                                           |
| details.kmd\_rewards.claimed\_by\_me | bool (optional)            | Whether or not the rewards been claimed by me.                                                                                                                                                          |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  },
  "id": 0
}
```

#### Response (Generating transaction)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "GeneratingTransaction"
  },
  "id": 0
}
```

#### Response (Generating transaction complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f8900000000000056390400e803000000000000017aef9bb6fda6cff496046976f57dea0848fc05a46ce948dd1dab7d551a5e5a5cdc41b3409adec489e1c4ffb33bfca7a949833fadfb7cc93546aab96a8bffca469bbd435682f5af367ab07dbbbecc448010e056103fa236251b2b74d4f43d031d43df8e32672e99dae0ee51ece01c523b7ce7fb9aa8682e23e122d732a67664d3822b04edd1a12ed586b1e7dcef08c4f870792eccc2ad74a48da134a9368adb5967b01681fd1d617c2ce972f5860f976cb828363b9501f167d99e8ac17422a54e055cbfc7fce40e95b4de7bb0c8fa9e61f8a0ec07f23a28a7c4897fa6fe372a2e0fb8a2706b71db38648782eac18529d7bbcb5fe42b9da26fb2adf050538bd21c42aecbad0626ad4f4094c337ff3e9cf19292c1f0cc37b0e506231647573fb9ba479675ed99471b7fad4e54213c98facb47af6851e182ee7142a86cfd80a7741bdbeab8a1a6b093c1c093599165c8a8e7ae43c47b87b97fb7363bebc34df4fc2a045c04f850d5bc693f481ab0028706c673fad02a93c3e8e170e08f438034a600027a2974f846c278dce35d564e4c0d5de17c341fbe97d0048b4129c7dc81c4a0172e0986a5568d240fb50c9dc746e5398603aaec588835165e17162f218b71e55bf1403e4d1b81a8c745c7e87571f6c62966154a10ae908293bc66270d8ebc8d835498c7bfd379f87a57babe18db1e379a2fdb4c7413915015b23a54cf6ea2344bbd4f7abbaaec007427c69be51ea7f696ac94741305860ced9cfe96a1cf6bfbbaa182769bc6c8a74169c52990ee27accb51835766397183f408cd6679ccb04ddfc957bedea7fd2dd81103425f886566658b99baf9e0b7c353c5b19a84fece3f35d3902406b1757149f89cab9fe1301bd03d6e3994f617d0bb8b7706b946a15deb2afa0e42e2b8f15f758c6909a51d3ace11fb465e1ed34986f728568088ca75b20b29e924f561534dd38a54ca79ddc318b06f4d2d9a107ecd7601caa3b766d435ad7099e1aff7a0e64f3dbf9500c4f8274b16a1a76858187cebcbde43c8fc30955ff09f0d2930fbcc54f2b931d76e7924f58dbe181a04c22dc8729cf04d0b939206b62f8abbb07bdeedc65086b0c1703570130f928427ff0b6d605c1760be7d32f6343d0c871575f88785c36db39133cf7ce40a712681baaa299706a69d816a24bb8009c4a900021e91530a952eb4dbf036f29cb7e7788665d7318e9486ae99c9ca0d108134fb79588e73bca79cf34cb50ccfdcfef6154f8a399c87dc212eb29961b7bb61454f455b0ff03b3a57cfaacafb437a9341c0fa1c107c27a065716c9de69c129557e35f6af63312f25138174c020c9754d57c45066e28b0d70d77ceef1f69a4c55ce7a33a4120924fb08207018da848bdc4f4e44fbfe0889ba9cd3741ca565516e34cbb260b3870927310d99059c2651ee645b7d9f755e59a9c3821a4d576d7f5b5db22a9befa3163189b09124789897bde57d662d3c7e25d99d709ffdc803acbb8fde2a93dca1525bb1123ed661f8c58113a7e6d1eeb04f738f31bf80ef687804c32de4ca82ae0c3100533e498d9551618b91424489d31526ea46f78d93aa8eef2a25cf53b83cad226d17ba92dc55366a011c494c7f7b9a9c4e1ac6c41fa96f03a66a402d6e6b1b864e8b640ec44bcaf0c00f5ed093823f0a10749708f69377cab25b393a4251f2b605e8022bbfc8c9832c31a5e98d7730042644b56507e00bc24ecf4979fa22e1b40bed2246f38baf715d25a38e400386847997adaf71fe50d29da6995bd50760b08faeec9360147d68175c7cc81be238b406b1e1d414f142a8053e119b2d1ee508fe510d2adad21bd4dff33f6400f17ef88055992b3335fb2a19836b1df3c7ac5ef1a342c9eadb69202d06bfe25ee84625cec62cf507caa2f5b7de8ccdc85921dbdc09e885ad2a7b1f86a6963086073d33f25fd5281f879e1b01d4422048a9a11d6fb6da1d457dd0f9583e38edc4cb4d0c7a7049fd7821c6ccf86160c3d2e4afba86cf154cabf3e8766607d017e348a15b576347e2fdc6742093b8635c0cb0a22835df10f93859875b36cffd1dcb23c6ea95542c9f3c9b5afe613438347b753af37d955dbbe169733beaaff57f1fc685e8c43abb3aaa4bbc4af0211677d87c7d7bcb69631acecd93110b572f3508ff49a0d64f3bd7c01c60cdfd45b01165e3682e8d68f614b523cc73d1a402d650bca867e5bc09c9a920ac8adf8c502db88da0579087e93125836b6398790dc3cba5c1dcfec974d58bf22a9fbc10ca63d5116da35e15eb149d85aa58de15784cfc2574cbc8c7cf81c0f44ea250925e176d2010f7864a393e43da8349dcaf26d7814d7da07d2069a1ee7bd6184351dfc8ae28757d65d15347eae69e9fac8453e1dc6506f4db9aa22db3f35b1782f7b43b1b85e6e0f8ac772712a044e5ef90235eb79ff83a7723ff78a7bba1381ada81507480ac1f0eca939061891b41c1b25aba3172916c3bab939d9f3baec391b2d503be7f63b44dd0fefd5ba769f2f699923531a7bf3a50079133dba31ff3c13b925e6e678b45e217c7ed0c328c15e36ebc56f2cd8c5e7961dadc99f42fe9a0a7d13e849308bcbd760f9570e821db1ea13d3f65ade8b50d3b9b95d2c0eb3e6b8b9796daa4ad0e1ab9dc6585a2dcf1d189e86c7698657f2684df36f31b5e955f9dd044dd3fd174fafcb814da305d15bfed40b4746875abe999bbfc97c58a24ba383dc7c4bb098e09df55f1ed05bbc3f3e0ea510d7dcfc01b1386a6e376c41879a77427e16cb7a0263b635c99713cfa95794cf7b5717836be632c1434970875f9b5c7886d0237f88c509b08a55981259fa08823bd455febd12ee3e5c6e41f66057a3039946052545694ada38babc3f421a531d90cd80461674e4b8efc0ada6a349e56fd12a60f083cce4169170e4a3bb1aeb7193c8b7f686f88240bda72e8fe682c1ad955689a9de678e143e67e04eefd18d86020829eb7603e4449c92189ddb9e41a63a59920d697f8a1a16f26697f31bd34faf02299e8b99a17523ccfa81ed72c6b7e4edd5d128432d353a8f53e0e6c76835d914e8c7348050f48ec68ddd44e6601502952b3d23afd7621ac7174223b7bbc59da87273fbb82f086df2669825de92e456c00734b072b28574a4fc2f4fba13618980f32df91a34bea01ecfeb619ee4ed52d4885f68f636427ca8fda56a9c4b716814bb9074002e18f369666b6fcef7c0008dd8863ea028f8b7c89575b23a871196846857b7f85bd0532503991342d9ab34dd6d9c7700cfb8e991f660a81f2b110740bec308d67d39998bf89d3d667b240e",
      "tx_hash": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "from": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "to": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "total_amount": "29.99989008",
      "spent_by_me": "29.99989008",
      "received_by_me": "29.99988008",
      "my_balance_change": "-0.00001000",
      "block_height": 0,
      "timestamp": 0,
      "fee_details": {
        "type": "Utxo",
        "coin": "ZOMBIE",
        "amount": "0.00001"
      },
      "coin": "ZOMBIE",
      "internal_id": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "transaction_type": "StandardTransfer"
    }
  },
  "id": 0
}
```

#### Response (Generating KMD transaction complete with rewards info)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f89051f43676aa53f06aaf67cfe76b4995a80c204aee630bf1909c37e2efc03c8ceac000000006b48304502210084c8d5345794b6bc78557a7aab71668020a6decf2537e9854044969f0125579202207d059c5cb465ffdd5920ddcca2760da49ce03252b4b3fd4b58605adbbc4d3ec1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2fffffffffc4ba9e537032043caba0982f4b0d46b029ecb261edf9b22fd84a665158cc3d6000000006a47304402207d720393347252195c09b16b9e23a0da7e00979521a9277daa297cd2f5d6d5b902204a8b35f7088ba7e7e7327c2c4fb30de300c26ba1527f3979cf1ed7a85bd70a58012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff19723c4dd6e57edbf623625370ffc8fbeef1ec367e4514491e3da333896f01260000000069463043021f488fa0fc7c8e1f2dbcff589c72f33d4354bc065b4d0e0c69592df293a81fb40220224e7cf3ec63dbbb6f9a2929baed7328af286b6b5f53c1ac0a9bc8156163d6e5012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff59c28f535d6b73c7f622f7aade547ef1db2277d3a43207b289cf56afa5e37f6b010000006a473044022017fbc3310ce3ae66caaf6782cba58a6065af43052e0a97db93d0fa9f6a5eb59e02207d3f766a230bf5159333104f773e2c45daa91828ac53da9f87b6c7dcd255370c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffcdbbc54aabaa6d0f5984c444f4317500c2f2b2b77e70f310b1940987b5ce9d3c010000006a4730440220793808739a53e3eedec7aef12b833fdd0e1d789e5211170331f492250757cac002207a3b748b674cb875bdf0cce87d61da10ca2eb24788afe5b061dba01972d9cdb1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0200e40b54020000001976a914e6d49471e6e83b5b69c0bee93caa4dc880205d9a88ac5856bb5b000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac095cbe63000000000000000000000000000000",
      "tx_hash": "7c201920db65b134a99c8405d84456bed7456bc29451c5bdcc92f30db62a4279",
      "from": ["RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d"],
      "to": ["RWKi9wkqMH4C9h4psPKjcKQaYNq5vsL89F"],
      "total_amount": "115.39004992",
      "spent_by_me": "115.39004992",
      "received_by_me": "15.39003992",
      "my_balance_change": "-100.00001",
      "block_height": 0,
      "timestamp": 1673421831,
      "fee_details": {
        "type": "Utxo",
        "coin": "KMD",
        "amount": "0.00001"
      },
      "coin": "KMD",
      "internal_id": "",
      "kmd_rewards": {
        "amount": "5.64955481",
        "claimed_by_me": true
      },
      "transaction_type": "StandardTransfer",
      "memo": null
    }
  },
  "id": 0
}
```

#### Response (No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw",
  "error_trace": "init_withdraw:57]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (error, waiting for user to confirm signing on hardware wallet device)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForUserToConfirmSigning"
  },
  "id": null
}
```

## cancel {{label : 'task::withdraw::cancel', tag : 'API-v2'}}

Use the `task::withdraw::cancel` method to cancel the withdrawal preparation task.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdraw process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 6
  }
}
```

#### Response (Success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (Error: No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:92] manager:97]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (Error: Task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:94] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 4,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Activation";
export const description =
  "The methods in this document allow activation of ZHTLC coins like ARRR & ZOMBIE.";

# Initialize ZHTLC Coin Activation {{label : 'task::enable_z_coin::init', tag : 'API-v2'}}

To enable Z coins you also need to [install some Zcash
Params](https://forum.komodoplatform.com/t/installing-zcash-params/603)

#### Arguments

| Structure          | Type   | Description                                                                                                          |
| ------------------ | ------ | -------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                           |
| activation\_params | object | A standard [ActivationRpcData](/komodo-defi-framework/api/common_structures/activation/#activation-rpc-data) object. |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Enable Z coin without any optional parameters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            },
            {
              "url": "zombie.dragonhound.info:20033",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30058"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ]
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from block 2528700, with custom `.zcash-params` path and scan params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": {
            "height": 2528700
          }
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from sapling activation height (earliest)

The Z coin lightwallet client only supports blocks that are post-sapling. The sapling activation height for Z coins can be found in the [coins file](https://github.com/KomodoPlatform/coins/blob/master/coins)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            },
            {
              "url": "zombie.dragonhound.info:20033",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30058"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": "earliest"
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Using websockets to sync from Proof of Keys Day, 2023.

[About proof of Keys Day](https://hackernoon.com/not-your-keys-not-your-bitcoin-jan3bitcoin-z6k3ktb)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "protocol": "SSL",
              "url": "zombie.dragonhound.info:20133",
              "ws_url": "zombie.dragonhound.info:30059"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": {
            "date": 1672704000
          }
        }
      }
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## Activation Status {{label : 'task::enable_z_coin::status', tag : 'API-v2'}}

Z coins need to build sync a local block cache and wallet database before they can be used. Using `task_id` as an input, this method will return the current status of the activation process.

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure | Type   | Description                                                                                                           |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------- |
| status    | string | A short indication of how the enabling is progressing.                                                                |
| details   | object | Depending on the state of enabling progress, this will contain different information as shown in the responses below. |

#### 📌 Examples

#### Status of Z coin activation

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::status",
  "mmrpc": "2.0",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ActivatingCoin - enabling has started)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "ActivatingCoin"
  },
  "id": null
}
```

#### Response (UpdatingBlocksCache)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "UpdatingBlocksCache": {
        "current_scanned_block": 265930,
        "latest_block": 269656
      }
    }
  },
  "id": null
}
```

#### Response (BuildingWalletDb)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "BuildingWalletDb": {
        "current_scanned_block": 265311,
        "latest_block": 269656
      }
    }
  },
"id": null
}
```

#### Response (CoinCreationError - no Zcash Params)

```json
{
	"error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
	"error_path": "lib.z_coin_activation.z_coin",
	"error_trace": "lib:104] z_coin_activation:218] z_coin:1007]",
	"error_type": "CoinCreationError",
	"error_data": {
		"ticker": "ZOMBIE",
		"error": "ZCashParamsNotFound"
	}
}
```

#### Response (error - NoSuchTask)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

#### Response (error - InvalidRequest)

```json
{
  "mmrpc": "2.0",
  "error": "Error parsing request: invalid value: integer `-205`, expected u64",
  "error_path": "dispatcher",
  "error_trace": "dispatcher:109]",
  "error_type": "InvalidRequest",
  "error_data": "invalid value: integer `-205`, expected u64",
  "id": 42
}
```

#### Response (Enabling complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "ticker": "ZOMBIE",
      "current_block": 269657,
      "wallet_balance": {
        "wallet_type": "Iguana",
        "address": "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj",
        "balance": {
          "spendable": "29.99989008",
          "unspendable": "0"
        }
      }
    }
  },
  "id": null
}
```

#### Response (no Zcash Params)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
      "error_path": "lib.z_coin_activation.z_coin",
      "error_trace": "lib:103] z_coin_activation:192] z_coin:761]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "ZOMBIE",
        "error": "ZCashParamsNotFound"
      }
    }
  },
  "id": null
}
```

#### Response (error - no such task)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

## Cancel Activation {{label : 'task::enable_z_coin::cancel', tag : 'API-v2'}}

If you want to cancel the enabling process before it has completed, you can use this method.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the enabling process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (success - already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_standalone_coin.manager",
  "error_trace": "init_standalone_coin:144] manager:101]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

#### Response (error - no such task)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Methods";
export const description =
  "The methods in this document allow activation and management of ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Methods

ZHTLC coins, like Pirate (ARRR) and the test coin ZOMBIE take a little longer to enable, and use a new two step method to enable.
Activation can take a little while the first time, as we need to download some block cache data, and build a wallet database.
Subsequent enabling will be faster, but still take a bit longer than other coins. The second step for activation is optional, but allows us to check the status of the activation process.

To activate ZHTLC coins, you need to use the [task::enable\_z\_coin](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods:

*   Initialize activation with with [task::enable\_z\_coin::init](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#initialize-zhtlc-coin-activation)
*   Query activation status with [task::enable\_z\_coin::status](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#activation-status)
*   Cancel activation with [task::enable\_z\_coin::cancel](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#cancel-activation)

To withdraw ZHTLC coins, you need to use the [task::withdraw](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods:

*   Generate a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20-dev/task_withdraw/#init)
*   Query its status with [task::withdraw::status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status)
*   Cancel generating the transaction with [task::withdraw::cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)

ZHTLC coins are not compatible with the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods.
To get the transaction history for ZHTLC coins, you need to use the [z\_coin\_tx\_history](/komodo-defi-framework/api/v20-dev/zhtlc_coins/transaction_history/) method.
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Transaction History";
export const description =
  "The methods in this document allow querying the transaction history ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Transaction History {{label : 'z_coin_tx_history', tag : 'API-v2'}}

To get the transaction history for ZHTLC coins, you need to use this special method - the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods are not compatible with ZHTLC coins. Currently trasaction memos will not be displayed in output, though they can be added to outgoing transactions with the [task::withdraw](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods.

#### Arguments

| Structure                  | Type    | Description                                                                                                                                                                                                               |
| -------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                       | string  | Ticker of the coin to get history for.                                                                                                                                                                                    |
| limit                      | integer | Optional. Limits the number of returned transactions. Defaults to `10`. Ignored if `max = true`.                                                                                                                          |
| paging\_options.FromId     | string  | Optional. Komodo DeFi Framework API will skip records until it reaches this ID, skipping the from\_id as well; track the internal\_id of the last displayed transaction to find the value of this field for the next page |
| paging\_options.PageNumber | integer | Optional. Komodo DeFi Framework API will return limit swaps from the selected page. Ignored if `FromId` .                                                                                                                 |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

#### 📌 Examples

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "z_coin_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "ARRR",
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "ARRR",
    "target": {
      "type": "iguana"
    },
    "current_block": 2228711,
    "transactions": [
      {
        "tx_hash": "b7e8307778d7d61ebb2ebc7a130661ef6fbeb66ee5d15d0f84a3bfce3ebad5a1",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "17.65495855",
        "received_by_me": "17.65494855",
        "my_balance_change": "-0.00001000",
        "block_height": 2224011,
        "confirmations": 4701,
        "timestamp": 1673018341,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 26
      },
      {
        "tx_hash": "967deb0a8cbce0c1f0ba20deee7a955e1a82bd1173bb3dd15cc95f03738ca65c",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs10ah73fpudlecg678jmqjdyeym5fgccvjytqry533rq2w04dekenxe8ekt349s3lelmlss3j4u9q",
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "20.65496855",
        "received_by_me": "17.65495855",
        "my_balance_change": "-3.00001000",
        "block_height": 2196913,
        "confirmations": 31799,
        "timestamp": 1671100306,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 25
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 2,
    "skipped": 2,
    "total": 28,
    "total_pages": 14,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": null
}
```

#### Response (error - coin not supported)

```json
{
  "mmrpc": "2.0",
  "error": "TKL",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:523]",
  "error_type": "NotSupportedFor",
  "error_data": "TKL",
  "id": null
}
```

#### Response (error - coin not active)

```json
{
  "mmrpc": "2.0",
  "error": "ZOMBIE",
  "error_path": "my_tx_history_v2.lp_coins",
  "error_trace": "my_tx_history_v2:521] lp_coins:2849]",
  "error_type": "CoinIsNotActive",
  "error_data": "ZOMBIE",
  "id": null
}
```
export const title = "ChangeLog";
export const description =
  "Find the Changelogs of various versions of Komodo DeFi Framework  on this page.";

# Change Log

## Komodo DeFi Framework v2.1.0-beta

### Essential New Features: Trading Protocol Upgrade, HD Wallet, Event Streaming, and Seeds Management

This release introduces a range of significant features designed to enhance the framework’s capabilities. The trading protocol has been upgraded to boost the security and reliability of swaps. HD Wallets have been integrated to enhance privacy and streamline address management for both UTXO and EVM chains. Event Streaming has been implemented to provide clients with real-time balance updates, with more real-time events planned for future updates. Seed Management has been enhanced to ensure robust seed generation and storage. These features are complemented by advancements in the NFT feature, expanded chain support for Trezor, fee improvements, ARRR/Pirate support in browser environments, and updates to the Tendermint protocol that facilitate integration with external wallets.

### Release Notes

#### Features:

*   **Trading Protocol Upgrade:**

    *   A major upgrade to the trading protocol (enabled with `"use_trading_proto_v2": true`) was implemented by @artemii235 in several PRs. This upgrade is currently available only for UTXO/UTXO swaps. All other swap types are not yet supported with this new protocol.

    *   This upgrade introduces significant enhancements:

        *   Immediate refund handling for taker payments, including DEX fee refunds, and subsequent immediate maker payment refunds, effectively solving maker/taker backout issues.
        *   New RPCs: `my_swap_status`, `my_recent_swaps`, and `active_swaps` V2.
        *   Upgraded swap data is also accessible through V1 RPCs.
        *   *Important note:* Seednodes must be updated to support and rebroadcast new swap protocol messages.

    *   **Relevant PRs:** [#1927](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1927), [#1958](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1958), [#1980](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1980), [#2015](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2015), [#2046](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2046).

*   **HD Wallet:**

    *   HD wallet functionalities were fully implemented by @shamardy for UTXO and EVM coins, allowing users to enable the feature with `"enable_hd": true`. For Tendermint and Pirate coins, only a single address is supported, following the BIP32/39/44 standards.

    *   This implementation simplifies the process of importing mnemonics from other wallets into the Komodo DeFi Framework (KDF), enabling users to retain their balances, transaction history, and more.

    *   Users can now manage multiple addresses for UTXO and EVM coins, enhancing flexibility and control. The `path_to_address` parameter was added to coin activation requests to set the default account'/change/address\_index path used for swaps. If not provided, the default path will be 0'/0/0.

    *   HD withdrawals from any account'/change/address\_index path were added for UTXO, EVM, Tendermint, and ARRR coins.

    *   Address scanning for balances is supported through the `scan_for_new_addresses` RPC, and users can manage their HD wallet with new RPCs such as `account_balance`, `get_new_address`, and `create_new_account`.

    *   These RPCs (`scan_for_new_addresses`, `account_balance`, `get_new_address`, and `create_new_account`) can be managed through the task manager using `task::<rpc-name>::(init, cancel, status)`.

    *   For full HD wallet functionalities, including balance scanning and withdrawals, use task manager-enabled methods like `task::enable_eth::init`, `task::enable_qtum::init`, `task::enable_utxo::init`, `task::enable_erc20::init`, and manage tasks through `task::<rpc-name>::(init, cancel, status)`.

    *   Task manager withdrawals are also supported using `task::withdraw::init`.

    *   **Relevant PRs:** [#1933](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1933), [#1962](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1962).

*   **Event Streaming:**

    *   Streaming channels using Server-Sent Events (SSE) to continuously send data to clients were implemented by @onur-ozkan in several PRs. This feature supports various event types, including P2P network events, coin balance events, error events, and heartbeat events.

    *   **P2P network events**: Streaming real-time updates about the network status.

    *   **Coin balance events**: For UTXOs, EVM, ARRR/Pirate by @borngraced, and Tendermint Protocols, providing continuous balance updates.

    *   **Error events**: Emitted when there's an error in generating an event, ensuring robust monitoring.

    *   **Heartbeat events**: Periodic notifications about the health of the streaming channel.

    *   For WebAssembly (Wasm), event streaming uses Shared Workers instead of SSE, enabling a more flexible and efficient event handling mechanism.
        *   SharedWorker support was added, allowing any worker path in `event_stream_configuration`, with a default to `event_streaming_worker.js`.
        *   To handle broadcasted messages from the client side, an event listener must be implemented within the client browser environment to capture and process these events as they are streamed.

    *   To utilize this feature, the `event_stream_configuration` needs to be added to the KDF config before starting.

    *   **Relevant PRs:** [#1945](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1945), [#1978](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1978), [#2013](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2013), [#2041](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2041), [#2058](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2058), [#2076](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2076), [#2080](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2080).

*   **Seed Management:**

    *   Seed generation, encryption, and storage were implemented by @shamardy, introducing secure methods for seed handling, including strong encryption and key derivation techniques.

    *   Introduced a new `get_mnemonic` API for retrieving mnemonics as plaintext or encrypted.

    *   Added support for a `wallet_name` parameter in the configuration, enabling KDF to handle seed management.
        *   If `wallet_name` is used, `wallet_password` must be provided, allowing for encrypted storage and retrieval of mnemonics.
        *   If no mnemonic is provided, a new one is generated, encrypted, and stored.
        *   Existing mnemonics can be imported and encrypted, or mnemonics can be imported in an encrypted format.

    *   Introduced a global database for storing encrypted mnemonics and wallet names, separate from individual wallet-specific databases.

    *   Seed management is fully integrated within KDF when `wallet_name` config parameter is used, bypassing the need for external mnemonic handling.

    *   **Relevant PRs:** [#2014](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2014), [#1939](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1939).

### NB - Backwards compatibility breaking changes

*   The `mm2` binaries have been renamed to `kdf`, with backward-compatible copies provided for `mm2` naming. However, WASM binaries use the `kdf` naming only, which is a breaking change. [#2126](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2126) by @shamardy

### New Contributors

*   @mariocynicys made their first contribution in [https://github.com/KomodoPlatform/komodo-defi-framework/pull/2061](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2061)
*   @r2st made their first contribution in [https://github.com/KomodoPlatform/komodo-defi-framework/pull/2091](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2091)
*   @CharlVS made their first contribution in [https://github.com/KomodoPlatform/komodo-defi-framework/pull/2163](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2163)

**Full Changelog**: [https://github.com/KomodoPlatform/komodo-defi-framework/compare/v2.0.0-beta...v2.1.0-beta](https://github.com/KomodoPlatform/komodo-defi-framework/compare/v2.0.0-beta...v2.1.0-beta)

### Enhancements:

*   **KMD Burn:**
    *   KMD dex fee burn for upgraded swaps was added. [#2046](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2046) by @artemii235
*   **Network Enhancements:**
    *   A new `sign_raw_transaction` RPC was added for UTXO and EVM coins, facilitating future air-gapped wallet implementations. [#1930](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1930) by @dimxy
*   **Hardware Wallet:**
    *   Trezor now supports SegWit for withdrawals. [#1984](https://github.com/KomodoPlatform/atomicDEX-API/pull/1984) by @dimxy
    *   Trezor support was added for EVM coins/tokens using task manager activation methods. [#1962](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1962) by @dimxy
    *   Support for unsigned Tendermint transactions using Ledger's Keplr extension was added, excluding HTLC transactions and swap operations. [#2148](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2148) by @onur-ozkan
*   **NFT Integration:**
    *   A new `clear_nft_db` RPC for NFT data management was added, enabling selective or complete NFT DB data clearance. [#2039](https://github.com/KomodoPlatform/atomicDEX-API/pull/2039) by @laruh
    *   NFT can now be enabled using `enable_eth_with_tokens` or `enable_nft`, similar to `enable_erc20`. [#2049](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2049) by @laruh
*   **Simple Maker Bot:**
    *   Maker bot was updated to support multiple price URLs. [#2027](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2027) by @shamardy
    *   `testcoin` was added to provider options, allowing testing of the maker bot using test chain assets. [#2161](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2161) by @shamardy
*   **Swap Stats DB:**
    *   `stats_swaps` table now includes GUI and KDF version data used for a swap. [#2061](https://github.com/KomodoPlatform/atomicDEX-API/pull/2061) by @mariocynicys
*   **P2P Layer:**
    *   Added `max_concurrent_connections` to KDF config to control the maximum number of concurrent connections for Gossipsub. [#2063](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2063) by @onur-ozkan
*   **ARRR/Pirate:**
    *   ARRR/Pirate wallet and Dex operations now work in browser environments/WASM. [#1957](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1957), [#2077](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2077) by @borngraced
    *   Syncing and activation improvements were made, including stopping sync status after main sync and refining `first_sync_block` handling. [#2089](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2089) by @borngraced
*   **EVM Transport:**
    *   ETH websocket transport was introduced, and `komodo-defi-proxy` signed messages were supported for websocket transport. [#2058](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2058) by @onur-ozkan
*   **Tendermint Integration:**
    *   Nucleus chain support was introduced as an alternative HTLC backend to Iris. [#2079](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2079) by @onur-ozkan
    *   Pubkey-only mode for Tendermint protocol was introduced, allowing use of any external wallet for wallet and swap operations. [#2088](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2088) by @onur-ozkan
    *   `ibc_withdraw` RPC was removed, and `withdraw` was refactored to support IBC transfers by automatically finding IBC channels. [#2088](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2088) by @onur-ozkan
*   **Fees Improvements:**
    *   EIP-1559 gas fee estimator and RPCs were added for ETH, including priority fee support for withdrawals and swaps, and improved gas limits for swap transactions. [#2051](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2051) by @dimxy
    *   `gas_limit` parameter can be used in coin configs to override default gas limit values. [#2137](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2137) by @dimxy
*   **Rust Toolchain:**
    *   Toolchain was upgraded to Rust toolchain version 1.72 nightly (nightly-2023-06-01). [#2149](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2149) by @onur-ozkan
    *   `rust-analyzer` was added into the workspace toolchain. [#2179](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2179) by @onur-ozkan
*   **CI Builds:**
    *   MacOS builds for Apple Silicon are now provided through the CI pipeline. [#2163](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2163) by @CharlVS
*   Implemented root application directory `.kdf` under `$HOME` to consolidate all runtime files, enhancing user experience by following standard UNIX practices. [#2102](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2102) by @onur-ozkan
*   Swaps and orders file handling was enhanced to use `.tmp` files to avoid concurrent reading/writing issues. [#2118](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2118) by @dimxy
*   UTXO P2PK balance is now shown as part of the P2PKH/Legacy address balance and can be spent in withdrawals and swaps. [#2053](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2053) by @mariocynicys

### Bug Fixes:

*   Additional checks were added for malicious `token_uri` links. [#2100](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2100) by @laruh
*   Improved environment detection to ensure the correct method is used for accessing the IndexedDB factory, accommodating both window and worker contexts. [#1953](https://github.com/KomodoPlatform/atomicDEX-API/pull/1953), [#2131](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2131) by @onur-ozkan @borngraced
*   Cursor implementation was fixed, ensuring stable iteration over items. [#2028](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2028) by @borngraced
*   **Tendermint Integration:**
    *   Tendermint fee calculation was fixed to use `get_receiver_trade_fee` in platform coins. [#2106](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2106) by @onur-ozkan
    *   Transaction history handling was enhanced to support base64 encoded transaction values for Cosmos-based networks, preventing missing transactions in the history table. [#2133](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2133) by @onur-ozkan
    *   The precision of max amount handling was improved for Tendermint withdraw operations by simulating the transaction and removing the estimated fee. [#2155](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2155) by @onur-ozkan
    *   Account sequence numbers are now resolved locally, avoiding incorrect sequence numbers from cached responses. [#2164](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2164) by @onur-ozkan
*   **Swap Watchers:**
    *   UTXO swaps were fixed to apply events that occurred while the taker was offline, such as maker spending or watcher refunding the taker payment. [#2114](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2114) by @dimxy
*   BCH block header deserialization was fixed to match BTC's handling of `KAWPOW` version headers. [#2099](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2099) by @shamardy
*   `wallet-only` restriction was removed from `max_maker_vol` RPC, enabling its use for wallet-only mode assets. [#2153](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2153) by @onur-ozkan

## Komodo DeFi Framework v2.0.0-beta

### Network Evolution & KMD Burn: Enhancing KMD's Role in Komodo's DeFi Framework

Introducing pivotal network enhancements to pave the way for an evolved DEX P2P network, Komodo DeFi Framework 2.0.0-beta marks a strategic step forward. This release not only streamlines network performance but also introduces a deflationary aspect to KMD, underscoring its utility and value in Komodo Platform's expanding ecosystem.

### Release Notes

**Features:**

*   KMD Burn:
    *   Burning 25% of the taker fee when paid in KMD was implemented by [@onur-ozkan](https://github.com/onur-ozkan) [#2006](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2006)
*   Swap watcher nodes (only for UTXO/UTXO swaps):
    *   For UTXO/UTXO swaps, watcher nodes will either complete the swap for taker or refund the taker payment if the taker goes offline after sending their payment. This was implemented by [@caglaryucekaya](https://github.com/caglaryucekaya) in [#1457](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1457) [#1496](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1496) [#1523](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1523) [#1552](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1552)
    *   Using watcher nodes for swaps were enabled by default for UTXO/UTXO swaps by [@caglaryucekaya](https://github.com/caglaryucekaya). All nodes doing a swap will broadcast a watcher message after the taker payment is sent if both coins swapped are supported by watchers (currently only UTXO) [#1859](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1859)

**Enhancements:**

*   Network Enhancements:
    *   P2P layer was upgraded to use the latest stable libp2p version by [@onur-ozkan](https://github.com/onur-ozkan) [#1878](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1878)
    *   `7777` network was deprecated by [@onur-ozkan](https://github.com/onur-ozkan) [#2020](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2020).
    *   Seednodes for `netid` `8762` were updated by [@smk762](https://github.com/smk762) [#2024](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2024)
    *   `libp2p-yamux` was updated by [@onur-ozkan](https://github.com/onur-ozkan) to use yamux `v0.13` (new version) by default and to fall back to yamux `v0.12` (old version) when setting any configuration options [#2030](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2030)
    *   The backpressure buffer cap was increased from `25` to `256` by [@onur-ozkan](https://github.com/onur-ozkan) [#2030](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2030)
    *   New protocol version (Version2) was added by [@onur-ozkan](https://github.com/onur-ozkan) to be used for peer exchange and request-response behaviours in [#2030](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2030)
    *   Network information is now written to stdout so users can find mm2 ports easily [@onur-ozkan](https://github.com/onur-ozkan) [#2034](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2034)
*   NFT feature was released in [v1.0.6-beta](https://github.com/KomodoPlatform/komodo-defi-framework/releases/tag/v1.0.6-beta), this release adds significant enhancements to this feature:
    *   `exclude_spam` and `exclude_phishing` params were added for `get_nft_list` and `get_nft_transfers` RPCs by [@laruh](https://github.com/laruh) [#1959](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1959)
    *   Spam transfers with empty meta was fixed by [@laruh](https://github.com/laruh) to no longer update [#1989](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1989)
*   `version` method was added to `PUBLIC_METHODS` that require no login by [@smk762](https://github.com/smk762) [#2001](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2001)
*   An additional `PRICE_ENDPOINTS` url which is a cached copy of `https://prices.komodian.info/api/v2/tickers` and is updated every minute was added by [@smk762](https://github.com/smk762) [#2032](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2032)

**Bug Fixes:**

*   ARRR/Pirate:
    *   ARRR infrastructure for lightwallet servers uses a fork of `lightwalletd`, the grpc service was renamed by [@smk762](https://github.com/smk762) `from cash.z.wallet.sdk.rpc` to `pirate.wallet.sdk.rpc` to use the `lightwalletd` fork [#1963](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1963)
    *   Previous blocks/wallet sync was fixed by [@borngraced](https://github.com/borngraced) to be resumed if `sync_params` are not provided after restart [#1967](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1967)
*   EVM web3 requests timeout was reduced to 20s by [@shamardy](https://github.com/shamardy) [#1973](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1973)
*   Fixed `0.0001` min threshold for TakerFee was removed by [@shamardy](https://github.com/shamardy) [#1971](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1971)
*   The minimum trading volume for evm and tendermint was changed to be the smallest possible amount of the coin by [@shamardy](https://github.com/shamardy) [#1971](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1971)
*   Minimum trading price was reduced by [@shamardy](https://github.com/shamardy) to be any value above 0 [#1971](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1971)
*   `Cryptocondition` script type was added to utxo transactions by [@shamardy](https://github.com/shamardy) [#1991](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1991)
*   On response error the next web3 node is now tried [@shamardy](https://github.com/shamardy) [#1998](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1998)
*   Watchtower taker-side restart bug was fixed by [@caglaryucekaya](https://github.com/caglaryucekaya) [#1908](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1908)
*   `rpcport` value can now accept a string [@shamardy](https://github.com/shamardy) [#2026](https://github.com/KomodoPlatform/komodo-defi-framework/pull/2026)

### NB - Backwards compatibility breaking changes

*   `7777` Network deprecation and the upgrade to a new p2p layer breaks compatibility with previous versions of Komodo DeFi Framework. Connections between nodes/clients running an older version of Komodo DeFi Framework and nodes/clients running this version will not be possible. To avoid this, all nodes/clients must be upgraded to the latest version of Komodo DeFi Framework.
*   Because of KMD burn of a part of the taker fee, the taker fee outputs for any `coin/KMD` swap are changed and makers running older versions will not be able to validate the taker fee, this will cause the swap to fail. This case will never happen anyway because older versions will not be able to connect to this latest version due to the network upgrade.
*   Because of the removal of the fixed 0.0001 min threshold for TakerFee, taker fee validation will also fail for these cases. Again, this case will never happen as the previous case.

## Komodo DeFi Framework v1.0.7-beta

**Enhancements:**

*   Using a specific start date for Pirate/ARRR synchronization was added by [@borngraced](https://github.com/borngraced). This allows users to specify a specific date as the starting point for synchronization as a substitute for the checkpoint block from config or syncing from the first block [#1922](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1922)

**Bug Fixes:**

*   PoSV coins withdrawal was fixed by [@reddink](https://github.com/reddink). The issue was a missing n\_time field in the generated transaction. The fix now correctly considers when n\_time is required, and the rawtransaction can be broadcasted [#1925](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1925)
*   Tendermint tests were fixed by [@onur-ozkan](https://github.com/onur-ozkan) by using latest relayer channel [#1929](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1929)
*   Price service urls were updated by [@smk762](https://github.com/smk762) [#1928](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1928)
*   NFT transactions that transfer multiple NFT tokens were fixed in db by [@shamardy](https://github.com/shamardy). log\_index is now used as part of the transfers history table primary key [#1926](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1926)
*   A fix was introduced by [@shamardy](https://github.com/shamardy) to use kmd rewards for fees if change + interest is below dust threshold [#1944](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1944)
*   Debug info was removed from release binary by [@onur-ozkan](https://github.com/onur-ozkan) to reduce the file size [#1954](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1954)
*   Failing tests due to BCHD were ignored by [@shamardy](https://github.com/shamardy) [#1955](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1955)

## Komodo DeFi Framework v1.0.6-beta

**New Features:**

*   NFT Wallet APIs for ERC721/ERC1155 tokens using Moralis Web3 was added by [@laruh](https://github.com/laruh) for multiple EVM chains to enable developers to access real-time NFT data and metadata from various blockchains without building their own backend services in [#1652](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1652) [#1704](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1704) [#1775](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1775) [#1817](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1817) [#1823](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1823) [#1833](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1833) [#1877](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1877)

**Enhancements:**

*   HTTPS support was added for the RPC server by [@shamardy](https://github.com/shamardy) in [#1861](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1861)
*   Infrastructure DNS rotation for default seed nodes was done by [@ca333](https://github.com/ca333) in [#1868](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1868)
*   Price endpoints were updated by [@laruh](https://github.com/laruh) in [#1869](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1869)
*   IBC and standard withdrawals for Cosmos now allow users to specify the gas price and gas limit for each transaction @ozkanonur [#1894](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1894)
*   CI enhancements by @ozkanonur
    *   The time needed for CI completion was reduced by caching the downloaded dependencies in [#1880](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1880)
    *   Label validation on PRs was added. This validation will only succeed if one of the following labels is used but not both: `under review` or `in progress` [#1881](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1881)
    *   A CI job was added to check if mm2 version was bumped before merging any pull request to main in [#1899](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1899)
    *   All CI tests now run with the `--no-fail-fast` flag, allowing other tests to proceed despite any failures [#1907](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1907)

**Bug Fixes:**

*   Some RUSTSEC advisories were fixed by @ozkanonur in [#1853](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1853)
*   Orderbook response now returns the right age for the age field, this was fixed by [@rozhkovdmitrii](https://github.com/rozhkovdmitrii) in [#1851](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1851)
*   A bug that caused `best_orders` rpc to return `is_mine: false` for the user's orders was fixed by [@rozhkovdmitrii](https://github.com/rozhkovdmitrii) in [#1849](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1849)
    *   An optional parameter `exclude_mine` was also added to the `best_orders` request that allows users to exclude their own orders from the response.
    *   `exclude_mine` defaults to false to maintain the same behaviour before the PR.
*   A fix removed the passed config string from the error logs during mm2 initialization if there was a deserialization error was done by [@shamardy](https://github.com/shamardy) in [#1872](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1872)
*   Index out of bounds errors in the `tx_details_by_hash` functions was fixed by [@shamardy](https://github.com/shamardy) in [#1915](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1915)

## AtomicDEX v1.0.5-beta

*   Deprecated `wasm-timer` dependency was removed from atomicDEX-API tree by @ozkanonur in [#1836](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1836)
*   `log`, `getrandom` and `wasm-bindgen` dependencies were updated to more recent versions that are inline with the latest libp2p upstream by @ozkanonur in [#1837](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1837)
*   A CI lint pipeline was added that validates pull request titles to ensure that they comply with the conventional commit specifications by @ozkanonur in [#1839](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1839)
*   KMD AUR were reduced from 5% to 0.01% starting at nS7HardforkHeight to comply with [KIP-0001](https://github.com/KomodoPlatform/kips/blob/main/kip-0001.mediawiki) by [@shamardy](https://github.com/shamardy) in [#1841](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1841)

## AtomicDEX v1.0.4-beta

*   Some enhancements were done for `enable_bch_with_tokens`, `enable_eth_with_tokens`, `enable_tendermint_with_assets` RPCs by [@shamardy](https://github.com/shamardy) in [#1762](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1762)
    *   A new parameter `get_balances` was added to the above methods requests, when this parameter is set to `false`, balances will not be returned in the response. The default value for this parameter is `true` to ensure backward compatibility.
    *   Token balances requests are now performed concurrently for the above methods.
*   Passive parent coin state for keeping tokens active when platform is disabled was added by @ozkanonur in [#1763](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1763)
*   Detection of a chain reorganization for SPV was added by [@borngraced](https://github.com/borngraced) [@shamardy](https://github.com/shamardy). If a chain reorg occurs, the new best chain headers are re-downloaded and re-validated [#1728](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1728)
*   Optimization of release compilation profile for mm2 was done by @ozkanonur in [#1821](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1821)
*   PoSV support for UTXO coins was added by [@reddink](https://github.com/reddink) in [#1815](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1815)

## AtomicDEX v1.0.3-beta

*   adex tool was introduced [#1729](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1729)
*   bump mm2 to `v1.0.2-beta` [#1743](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1743)
*   bump mm2 to `v1.0.3-beta` [#1769](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1769)
*   \[release] v1.0.3 [#1771](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1771)

## AtomicDEX v1.0.2-beta

*   adex-cli command line utility was introduced that supplies commands: init, start, stop, status [#1729](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1729)
*   CI/CD workflow logics are improved [#1736](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1736)
*   Project root is simplified/refactored [#1738](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1738)
*   Created base image to provide more glibc compatible pre-built binaries for linux [#1741](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1741)
*   Set default log level as "info" [#1747](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1747)

## AtomicDEX v1.0.1-beta

*   2 Update pirate & zombie domains for tests [#1705](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1705)
*   2 lock free avoid on account sequence problems [#1694](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1694)
*   sec fixes, build-time optimizations, dependency optimizations, CI migration, etc [#1699](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1699)
*   \[release] 1.0.1-beta [#1721](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1721)

## AtomicDEX-v1.0.0-beta

*   2 spv storage optimization [#1](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1) [#1585](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1585)
*   \[doc] update mobile build instructions [#1661](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1661)
*   2 `disable_coin` should fail if there are tokens dependent on the platform [#1651](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1651)
*   2 fix vulnerable dependencies [#1666](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1666)
*   Bugfix pubkey keepalive overflow and "forever orders" [#1668](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1668)
*   2 Hardware Wallet enhancements [#1672](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1672)
*   2 Complete MetaMask [#1674](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1674)
*   Add workflow for VirusTotal results [#1676](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1676)
*   2 refactor version handling [#1686](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1686)
*   \[release] 1.0.0-beta [#1576](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1576)

## beta-2.1.8741

*   Don't respond to GetKnownPeers p2p msg if the number of peers requested exceeds the default number by [@shamardy](https://github.com/shamardy) in [#1445](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1445)
*   \[r2r] Avoid deadlock on `DuplexMutex` by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1453](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1453)
*   \[r2r] Mobile libs code fixes, build instructions and CI. by [@artemii235](https://github.com/artemii235) in [#1463](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1463)
*   \[r2r] hotfix: disallow withdraw to taproot addresses by [@shamardy](https://github.com/shamardy) in [#1503](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1503)
*   update cc and cmake dependencies to be compatible with Visual Studio … by [@DeckerSU](https://github.com/DeckerSU) in [#1532](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1532)
*   \[r2r] Don't return an error if a UTXO coin is enabled with `trezor_coin` field by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1541](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1541)

## beta-2.1.7404

*   Target-branch added for dependabot in mm2.1 by [@laruh](https://github.com/laruh) in [#1426](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1426)
*   Skip orders not existing in orders\_set instead of using expect. by [@artemii235](https://github.com/artemii235) in [#1430](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1430)
*   Fix ARRR activation. More info to activation statuses. Check point block by [@artemii235](https://github.com/artemii235) in [#1439](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1439)

## beta-2.1.7132

*   \[r2r] Implement tx history RPC for Zcoin (ARRR). by [@artemii235](https://github.com/artemii235) in [#1336](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1336)
*   \[r2r] No login mode by [@caglaryucekaya](https://github.com/caglaryucekaya) in [#1341](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1341)
*   \[r2r] Fix for LBC block header deserializing bug by [@borngraced](https://github.com/borngraced) in [#1343](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1343)
*   Release SLP, WASM, Maker bot, QTUM delegation. by [@artemii235](https://github.com/artemii235) in [#1184](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1184)
*   \[r2r] Fix P2P OrdermatchRequest backward compatibility. by [@artemii235](https://github.com/artemii235) in [#1406](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1406)

## beta-2.1.6805

*   \[WASM] Fixing, refactoring, and implementing P2P, IndexedDB, SwapLock, SavedSwap, MySwaps, MyOrdersStorage by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1007](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1007)
*   update\_maker\_order memory leak fix by [@shamardy](https://github.com/shamardy) in [#1068](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1068)
*   MVP swaps support for SLP tokens and PIRATE. by [@artemii235](https://github.com/artemii235) in [#1067](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1067)
*   Upload release library to nightly server during CI build. by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1093](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1093)
*   Add SLP UTXOs validation using BCHD API. by [@artemii235](https://github.com/artemii235) in [#1094](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1094)
*   simple market maker bot by [@Milerius](https://github.com/Milerius) in [#1066](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1066)
*   Enable 2.0 skeleton by [@artemii235](https://github.com/artemii235) in [#1099](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1099)
*   Partial lightning network node implementation by [@shamardy](https://github.com/shamardy) in [#1103](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1103)
*   Use 'wss' P2P protocol instead of 'ws' by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1117](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1117)
*   Qtum delegation by [@Milerius](https://github.com/Milerius) in [#1096](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1096)
*   Slurp refactoring [#914](https://github.com/KomodoPlatform/komodo-defi-framework/issues/914) by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1119](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1119)
*   Add gRPC-web support in WASM (BCHD API for SLP). by [@artemii235](https://github.com/artemii235) in [#1127](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1127)
*   Next iteration of enable v2. Refactoring. Added enable\_slp. by [@artemii235](https://github.com/artemii235) in [#1130](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1130)
*   simple telegram client by [@Milerius](https://github.com/Milerius) in [#1114](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1114)
*   feat(lp\_bot): use `other` for unknown variant in provider by [@Milerius](https://github.com/Milerius) in [#1140](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1140)
*   Implement enable\_bch\_with\_tokens RPC. Refactoring by [@artemii235](https://github.com/artemii235) in [#1145](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1145)
*   feat(lp\_bot): cancel order on stopping mm2 context by [@Milerius](https://github.com/Milerius) in [#1143](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1143)
*   Fix hanging pointers [#1158](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1158) by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1162](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1162)
*   Use parking lot mutex for maker orders by [@shamardy](https://github.com/shamardy) in [#1163](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1163)
*   Lightning Network Channels by [@shamardy](https://github.com/shamardy) in [#1133](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1133)
*   Add and implement a swap recoverer [#1160](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1160) by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1164](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1164)
*   Trezor integration PoC by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1150](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1150)
*   Fix orders "leak" due to race condition. by [@artemii235](https://github.com/artemii235) in [#1178](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1178)
*   Implement BCH and SLP tx history. Refactoring. by [@artemii235](https://github.com/artemii235) in [#1175](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1175)
*   Fix recreating Taker swap data by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1191](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1191)
*   Optimize CI pipeline to run faster checks as a separate stage. by [@artemii235](https://github.com/artemii235) in [#1192](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1192)
*   Update CI pipeline for MacOS. by [@artemii235](https://github.com/artemii235) in [#1202](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1202)
*   Add `mm2_version` WASM foreign function by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1213](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1213)
*   Changes for Linux CI by [@artemii235](https://github.com/artemii235) in [#1209](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1209)
*   Fix unstable test\_update\_maker\_order\_fail test by [@shamardy](https://github.com/shamardy) in [#1216](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1216)
*   Use komodod multiarch Docker image in tests. Do not build and upload libmm2 for desktop. by [@artemii235](https://github.com/artemii235) in [#1214](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1214)
*   Implement requesting balances of HD wallet addresses by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1190](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1190)
*   Arrr integration WIP. by [@artemii235](https://github.com/artemii235) in [#1204](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1204)
*   Expect larger integers on blockchain.scripthash.get\_balance by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1218](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1218)
*   Add confirmation settings to orderbook by [@shamardy](https://github.com/shamardy) in [#1217](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1217)
*   Lightning payments by [@shamardy](https://github.com/shamardy) in [#1210](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1210)
*   Integrate HD account storage by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1223](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1223)
*   Spv proof by [@Milerius](https://github.com/Milerius) in [#1207](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1207)
*   Sync dev with mm2.1 by [@Milerius](https://github.com/Milerius) in [#1236](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1236)
*   Solana by [@Milerius](https://github.com/Milerius) in [#1109](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1109)
*   Provide podman compatibility by @ozkanonur in [#1242](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1242)
*   update podman requirement by @ozkanonur in [#1243](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1243)
*   Fix `coin` in `recover_funds_of_swap` RPC by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1249](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1249)
*   Simultaneous activation of coins in two modes (Iguana and Trezor) by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1227](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1227)
*   Add RPC call to get raw transaction encoded in hex by [@hrmhatef](https://github.com/hrmhatef) in [#1248](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1248)
*   provide custom swap locktime functionality by @ozkanonur in [#1252](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1252)
*   \[r2r] Add PR naming convention to the docs by @ozkanonur in [#1257](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1257)
*   \[r2r] add dependencies update note when basing branch on mm2.1 to the docs by [@shamardy](https://github.com/shamardy) in [#1261](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1261)
*   \[r2r] impl get publickey hash rpc method by [@borngraced](https://github.com/borngraced) in [#1258](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1258)
*   \[r2r] Update WASM docs, fix `my_recent_swaps` in WASM by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1264](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1264)
*   \[r2r] ARRR integration WIP. by [@artemii235](https://github.com/artemii235) in [#1237](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1237)
*   \[r2r] Lightning channels and payments history by [@shamardy](https://github.com/shamardy) in [#1240](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1240)
*   \[r2r] fix spv proof validation by @ozkanonur in [#1268](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1268)
*   Update block headers in DB in case of a chain reorganization by [@shamardy](https://github.com/shamardy) in [#1276](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1276)
*   Store maker\_coin\_htlc\_privkey and taker\_coin\_htlc\_privkey as None by [@artemii235](https://github.com/artemii235) in [#1277](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1277)
*   \[r2r] broadcast tx to txhlp / refactor tx errors by @ozkanonur in [#1245](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1245)
*   \[r2r] Sign and verify messages by [@caglaryucekaya](https://github.com/caglaryucekaya) in [#1256](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1256)
*   \[r2r] continuously push for playground nodes by @ozkanonur in [#1280](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1280)
*   \[r2r] UTXO RPC batch requests by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1255](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1255)
*   \[r2r] overall refactoring by @ozkanonur in [#1284](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1284)
*   \[r2r] fix `MM_VERSION` path by @ozkanonur in [#1296](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1296)
*   \[r2r] Deps update by [@artemii235](https://github.com/artemii235) in [#1294](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1294)
*   \[r2r] update rust-lightning & remove bitcoin-spv crate from our deps tree by [@shamardy](https://github.com/shamardy) in [#1300](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1300)
*   Temporary ignore RUSTSEC-2020-0071 (time crate potential segfault). by [@artemii235](https://github.com/artemii235) in [#1303](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1303)
*   update License GPLv3 by [@ca333](https://github.com/ca333) in [#1286](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1286)
*   \[r2r] fixes incorrect coin type for rpc error by [@borngraced](https://github.com/borngraced) in [#1289](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1289)
*   Remove unused dependencies, add unused dependencies check step to CI by [@shamardy](https://github.com/shamardy) in [#1305](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1305)
*   \[r2r] Impl storing Infos about fiat price to MM2.db on swap completion by [@borngraced](https://github.com/borngraced) in [#1282](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1282)
*   \[r2r] fix nonce\_lock problem by [@laruh](https://github.com/laruh) in [#1306](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1306)
*   \[r2r] HD wallet tx history by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1285](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1285)
*   \[r2r] Implement ARRR swap in light mode. by [@artemii235](https://github.com/artemii235) in [#1302](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1302)
*   \[r2r] split qtum utxo by [@laruh](https://github.com/laruh) in [#1313](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1313)
*   \[r2r] Don't return Null on `my_recent_swaps` by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1317](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1317)
*   \[r2r] Try to find `check_utxo_maturity` from the coins config by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1315](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1315)
*   update playground pipeline by @ozkanonur in [#1323](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1323)
*   add commit prefix for playground node by @ozkanonur in [#1325](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1325)
*   \[r2r] Fix unstable test\_get\_channels\_by\_filter test by [@shamardy](https://github.com/shamardy) in [#1320](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1320)
*   \[r2r] Get rid of fomat, wite macros by [@sergeyboyko0791](https://github.com/sergeyboyko0791) in [#1316](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1316)
*   \[r2r] API call optimization by [@caglaryucekaya](https://github.com/caglaryucekaya) in [#1279](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1279)
*   \[r2r] Fix rpc\_password length constraints by [@laruh](https://github.com/laruh) in [#1329](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1329)
*   \[r2r] Allow bestorders RPC execution with number by [@laruh](https://github.com/laruh) in [#1327](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1327)
*   \[r2r] Remove outdated transactions from transaction history by [@caglaryucekaya](https://github.com/caglaryucekaya) in [#1328](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1328)
*   \[r2r] Dependabot integration by [@laruh](https://github.com/laruh) in [https://github.com](https://github.com)...

## beta-2.1.5724

*   Hotfix for FIRO block header format (prog pow).
*   hotfix for unknown destination address errors showing up by [@shamardy](https://github.com/shamardy) in [#1186](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1186)
*   Avoid log spam and malfunctioning electrums excessive reconnects [#1193](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1193) [#1161](https://github.com/KomodoPlatform/komodo-defi-framework/issues/1161). by [@artemii235](https://github.com/artemii235) in [#1194](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1194)
*   \[wip] update readme by [@ca333](https://github.com/ca333) in [#1180](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1180)
*   Remove nxt arg from help by [@tonymorony](https://github.com/tonymorony) in [#1199](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1199)
*   feat(firo\_hot\_fix): add support for prog pow by [@Milerius](https://github.com/Milerius) in [#1235](https://github.com/KomodoPlatform/komodo-defi-framework/pull/1235)
export const title = "Introduction to Komodo DeFi Framework";
export const description =
  "Explore the technical documentation for Komodo DeFi Framework, the DeFi engine powered by atomic swaps";

# Introduction to Komodo DeFi Framework

Welcome to the Komodo DeFi Framework technical documentation.

#### About the Komodo DeFi Framework Section

This documentation is intended for developers utilizing the Komodo DeFi Framework.

#### Conceptual Overview

A brief conceptual overview of Komodo DeFi Framework can be found in the Start Here > Product Introductions > Komodo DeFi Framework  section.

[Link to "Komodo DeFi Framework" Introduction](/komodo-defi-framework/tutorials/#why-is-komodo-de-fi-framework-special)

The [Komodo DeFi Framework Tutorials](/komodo-defi-framework/tutorials/) section contains a more thorough conceptual explanation of Komodo DeFi Framework.

Please consult our [Learning Path Outlines](/start-here/learning-launchpad/#introduction) section for more details on approaches to learning Komodo DeFi Framework from both a conceptual and technical perspective.

#### About Komodo DeFi Framework Setup

The Komodo DeFi Framework Setup section contains basic information about setting up and using an Komodo DeFi Framework enabled environment.

#### About Komodo DeFi Framework Tutorials

The Komodo DeFi Framework Tutorials section contains various tutorials that provide instruction for Komodo DeFi Framework usage and creation.

For a walkthrough covering multiple tutorials in a targeted fashion, please see the [Learning Launchpad](/start-here/learning-launchpad/#introduction) section.

#### About Komodo DeFi Framework

The Komodo DeFi Framework section contains all available API commands.

These API commands can also be called Remote Procedure Calls (or RPCs) and are used to interact with the Komodo DeFi Framework daemon using a variety of languages.

Recently, a `komodefi-cli` binary has been introduced to simplify the process of [interacting with the Komodo DeFi Framework daemon from the command line](/komodo-defi-framework/tutorials/using-komodefi-cli-in-console/).
export const title = "Komodo DeFi API configuration";
export const description =
  "Configure and activate coins on Komodo DeFi API using MM2.json and the coins file.";

# Komodo DeFi API configuration

Komodo DeFi-API configuration parameters, along with additional runtime flags, and per-process environment variables are [listed in the source code](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/mm2_main/src/mm2.rs#L151-L205), and can be viewed by running the `./mm2 --help`.

## MM2.json

When running the Komodo DeFi API via commandline with the `mm2` binary, some basic configuration parameters need to be defined in either an `MM2.json` file, or at runtime.

### Configuration Parameters

| Parameter                    | Type            | Description                                                                                                                                                                                                                                                                                                                                                                                                                           |
| ---------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| gui                          | string          | Information to identify which app, tool or product is using the API, e.g. `KomodoWallet iOS 1.0.1`. Helps developers identify if an issue is related to specific builds or operating systems etc.                                                                                                                                                                                                                                     |
| netid                        | integer         | Nework ID number, telling the Komodo DeFi Framework  which network to join. 8762 is the current main network, though alternative netids can be used for testing or "private" trades as long as seed nodes exist to support it.                                                                                                                                                                                                        |
| passphrase                   | string          | Your passphrase; this is the source of each of your coins private keys. [**KEEP IT SAFE!**](https://www.youtube.com/watch?v=WFpxVbTqhB8)                                                                                                                                                                                                                                                                                              |
| rpc\_password                | string          | For RPC requests that need authentication, this will need to match the `userpass` value in the request body.                                                                                                                                                                                                                                                                                                                          |
| allow\_weak\_password        | boolean         | Optional, defaults to `false`. If `true`, will allow low entropy rpc\_password. If `false` rpc\_password must not have 3 of the same characters in a row, must be between 8-32 characters in length, must contain at least one of each of the following: numeric, uppercase, lowercase, special character (e.g. !#$\*). It also can not contain the word "password", or the chars `<`, `>`, or `&`.                                   |
| dbdir                        | string          | Optional, defaults to a subfolder named `DB` in the path of your `mm2` binary. This path will store the Komodo DeFi-API database data.                                                                                                                                                                                                                                                                                                |
| rpcip                        | string          | Optional, defaults to `127.0.0.1`. IP address to bind to for RPC server.                                                                                                                                                                                                                                                                                                                                                              |
| rpcport                      | integer         | Optional, defaults to `7783`. Port to use for RPC communication.                                                                                                                                                                                                                                                                                                                                                                      |
| rpc\_local\_only             | boolean         | Optional, defaults to `true`. If `false` the Komodo DeFi Framework API will allow rpc methods sent from external IP addresses. **Warning:** Only use this if you know what you are doing, and have put the appropriate security measures in place.                                                                                                                                                                                    |
| i\_am\_seed                  | boolean         | Optional, defaults to `false`. Runs Komodo DeFi Framework API as a seed node mode (acting as a relay for Komodo DeFi Framework API clients). Use of this mode is not reccomended on the main network (8762) as it could result in a pubkey ban if non-compliant. On alternative testing or private networks, at least one seed node is required to relay information to other Komodo DeFi Framework API clients using the same netID. |
| seednodes                    | list of strings | Optional. If operating on a test or private netID, the IP address of at least one seed node is required (on the main network, these are already hardcoded)                                                                                                                                                                                                                                                                            |
| enable\_hd                   | boolean         | Optional. If `true`, the Komodo DeFi-API will work in only the [HD mode](/komodo-defi-framework/api/v20-dev/hd_wallets_overview/), and coins will need to have a coin derivation path entry in the `coins` file for activation. Defaults to `false`.                                                                                                                                                                                  |
| message\_service\_cfg        | object          | Optional. This data is used to configure [Telegram](https://telegram.org/) messenger alerts for swap events when running using the [makerbot functionality](/komodo-defi-framework/api/v20/start_simple_market_maker_bot/). For more information check out the [telegram alerts guide](/komodo-defi-framework/api/v20/telegram_alerts/)                                                                                               |
| metrics                      | integer         | Optional, defaults to `300`. The interval in seconds which metrics are logged. Set to `0` to disable metrics.                                                                                                                                                                                                                                                                                                                         |
| prometheusport               | integer         | Optional. Only used if you are logging metrics in [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/). For more information check out the [Komodo DeFi metrics guide](/komodo-defi-framework/tutorials/api-metrics/)                                                                                                                                                                                             |
| prometheus\_credentials      | integer         | Optional. Only used if you are logging metrics in [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) with authentication. For more information check out the [Komodo DeFi metrics guide](/komodo-defi-framework/tutorials/api-metrics/)                                                                                                                                                                         |
| https                        | boolean         | Optional. Only used with wss. Defaults to `false`, set to `true` to allow TLS/SSL enabled RPC (e.g. remote queries to a domain with a valid SSL certificate).                                                                                                                                                                                                                                                                         |
| wss\_certs                   | object          | Optional. Contains fields for `server_priv_key` and `certificate` to allow RPC or P2P communications over TLS/SSL.                                                                                                                                                                                                                                                                                                                    |
| event\_stream\_configuration | object          | Optional, a standard [EventStreamConfig](/komodo-defi-framework/api/v20/#derivation-method) object. Configuration for subscribing to events.                                                                                                                                                                                                                                                                                          |

#### Example (allowing weak password):

```json
{
  "gui": "DEVDOCS_CLI",
  "netid": 8762,
  "rpc_password": "ENTER_UNIQUE_PASSWORD",
  "passphrase": "ENTER_UNIQUE_SEED_PHRASE_DONT_USE_THIS_CHANGE_IT_OR_FUNDS_NOT_SAFU",
  "allow_weak_password": true,
  "dbdir": "/path/to/DB/folder"
}
```

#### Example (not allowing weak password):

```json
{
  "gui": "DEVDOCS_CLI",
  "netid": 8762,
  "rpc_password": "Ent3r_Un1Qu3_Pa$$w0rd",
  "passphrase": "ENTER_UNIQUE_SEED_PHRASE_DONT_USE_THIS_CHANGE_IT_OR_FUNDS_NOT_SAFU",
  "allow_weak_password": false,
  "dbdir": "/path/to/DB/folder"
}
```

#### Example (WSS with certificates):

```json
{
  "gui": "DEVDOCS_CLI",
  "netid": 8762,
  "rpc_password": "Ent3r_Un1Qu3_Pa$$w0rd",
  "passphrase": "ENTER_UNIQUE_SEED_PHRASE_DONT_USE_THIS_CHANGE_IT_OR_FUNDS_NOT_SAFU",
  "wss_certs": {
    "server_priv_key": "/path/to/privkey.pem",
    "certificate": "/path/to/fullchain.pem"
  }

}
```

#### Example for HD Wallets:

If you are using HD wallets, you will need to add the `hd_account_id` value to your `MM2.json` file. This value will be used in the derivation path for all coins, and will take the place of the `COIN_ID` value in the following path: `m/44'/COIN_ID'/<hd_account_id>'/CHAIN/ADDRESS_ID`.

Using the same seed phrase with / without setting the `hd_account_id` value
will result in different addresses being generated. For example, when using
the seed phrase `february soldier message acid member jump shadow walk novel     impose puppy tornado`: - If the `hd_account_id` value is set to `0` in
MM2.json, the first address in the wallet returns the address
`0x26cE5D1cD4CC673a1b0b980371C7c862B9503452` for ETH - If the `hd_account_id`
value is not set, the wallet will return the address
`0x8c40a6E127c7a13e26ce95deA88354C3fb134580` for ETH

```json
{
  "gui": "DEVDOCS_CLI",
  "netid": 8762,
  "rpc_password": "Ent3r_Un1Qu3_Pa$$w0rd",
  "passphrase": "ENTER_UNIQUE_SEED_PHRASE_DONT_USE_THIS_CHANGE_IT_OR_FUNDS_NOT_SAFU",
  "allow_weak_password": false,
  "dbdir": "/path/to/DB/folder",
  "hd_account_id": 0
}
```

## Coins file configuration

You can download and use [this file](https://github.com/KomodoPlatform/coins/blob/master/coins) as a starting point for your own `coins` file. It contains all of the coins that are currently supported by the Komodo DeFi API, and is maintained by the Komodo Platform team.
The structure for adding additional coins can vary, please refer to the [listing guide](/komodo-defi-framework/tutorials/listing-a-new-coin/) or [contact the KomodoPlatform team](https://komodoplatform.com/discord) for assistance.

### Optional environment variables:

| Variable            | Type   | Description                                                                                                                                                                                                          |
| ------------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| MM2\_CONF\_PATH     | string | A file path to load the `MM2.json` configuration file. Defaults to `MM2.json` in the same folder as the `mm2` binary.                                                                                                |
| MM\_COINS\_PATH     | string | A file path to load the `coins` configuration file. A comprehensive version for public use is maintained in the [Komodo Platform coins github repository](https://github.com/KomodoPlatform/coins/blob/master/coins) |
| MM\_LOG             | string | A file path to store the Komodo DeFi-API logs.                                                                                                                                                                       |
| USERPASS            | string | For convenience, this variable can store the value of your `rpc_password` to be referenced in any shell scripts                                                                                                      |
| MM\_CERT\_PATH      | string | Full path to TLS/SSL certificate file.                                                                                                                                                                               |
| MM\_CERT\_KEY\_PATH | string | Full path to TLS/SSL certificate key file.                                                                                                                                                                           |

### What now?

Check out the rest of the Komodo DeFi API documentation for examples of how to:

*   [Enable coins](/komodo-defi-framework/api/legacy/coin_activation/)
*   [Place orders](/komodo-defi-framework/api/legacy/buy/)
*   [View the orderbook](/komodo-defi-framework/api/legacy/orderbook/)
*   [Check your balance](/komodo-defi-framework/api/legacy/my_balance/)
*   [Configure bot trading!](/komodo-defi-framework/api/v20/start_simple_market_maker_bot/)

If you have any questions or feedback, join us on the [Komodo Platform Discord Server](https://komodoplatform.com/discord) and tell us about your experience!
export const title = "Installing the Komodo DeFi Framework API";
export const description =
  "Learn how to install the Komodo DeFi Framework API on MacOS, Windows, and Linux systems.";

import rustupMinimal from "@/public/images/docs/setup/rustup-minimal.png";

# Installing the Komodo DeFi Framework API

## Minimum Requirements for Installation

*   MacOS, Windows (see note below), and Linux (see note below)

*   64-bit (see note below for 32-bit)

*   Minimum 2GB of free RAM

*   Normal user account with admin/root privileges

If you would prefer to avoid building the Komodo DeFi Framework API from source, you can
download our pre-built binary [from our Github releases
page.](https://github.com/KomodoPlatform/komodo-defi-framework/releases)

### Note about Linux

For Linux users, much of the following documentation assumes that you are building and running the Komodo DeFi Framework API on a Debian 9/10 or Ubuntu 18.04 host. If you have questions about other releases or distributions, [please reach out to us on the #dev-marketmaker channel on Discord.](https://komodoplatform.com/discord)

### Note about Installing on Windows

Developing software on Windows typically requires an installation of Git Bash.

Git Bash is a terminal shell based on Unix. It is similar to the Windows Shell or Windows Command Prompt, but uses Unix-based syntax.

All instructions in the Komodo DeFi Framework documentation are given with Unix-based syntax, and therefore we recommend installing Git Bash before proceeding.

You may download and install Git Bash for Windows here:

[Download Git Bash for Windows](https://git-scm.com/download/win)

The download should begin automatically.

Double-click the downloaded `.exe` file and follow the Installation Wizard.

Once Git Bash is open and running on your machine, you may continue.

### Note About 32-bit Operating Systems

We are currently testing 32-bit operating system functionality. As 32-bit machines can often be comparatively older hardware, we cannot guarantee that Komodo DeFi Framework API will run successfully by default.

We invite users of 32-bit operating systems to test the software and [report any errors to our team on the #dev-marketmaker channel on Discord](https://komodoplatform.com/discord).

### Installing Dependencies

#### Rust

Install [Rust](https://www.rust-lang.org/tools/install):

Choose `2)` to customize the installation, select `default host triple` and `default toolchain`, and choose the `minimal` profile.

#### cmake Version 3.12 or Higher

Download the cmake software here: [download link](https://cmake.org/download/)

Unpack and follow the instructions here: [instructions link](https://cmake.org/resources/)

#### Build Tools for Your OS

##### Linux:

```bash
sudo apt-get install build-essential
```

##### Windows:

[Follow these instructions for MSVC](https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170\&viewFallbackFrom=vs-2017)

##### MacOS:

[Install XCode via the App Store](https://apps.apple.com/us/app/xcode/id497799835?mt=12)

#### Install Additional Dependencies

Install the following additional dependencies using the terminal.

```bash
sudo apt-get install -y git llvm-3.9-dev libclang-3.9-dev clang-3.9 libssl-dev pkg-config
```

If you are using Ubuntu-20.04, run:

```bash
sudo apt-get install -y git llvm-dev libclang-dev clang libssl-dev pkg-config
```

#### Install Additional Rust Components

Install additional Rust components:

```bash
rustup install nightly-2022-02-01
```

```bash
rustup default nightly-2022-02-01
```

(Optional) Skip this step if it fails.

```bash
rustup component add rustfmt-preview
```

#### Install jq

`jq` is an optional, but useful addition to our needed software. `jq` can provide a more readable format of JSON output in the terminal, which helps us more quickly digest the data response output by the Komodo DeFi Framework API.

##### Linux:

```bash
sudo apt-get install jq
```

##### MacOS:

Download the appropriate file from [this link.](https://stedolan.github.io/jq/download/)

In your terminal, make the file executable by changing into the directory where the file downloaded and executing:

```bash
chmod +x jq
```

Execute the file.

##### Windows:

Download and execute the appropriate file from [this link.](https://stedolan.github.io/jq/download/)

### Build Komodo DeFi Framework

Clone the Komodo DeFi Framework repository:

```bash
cd ~
git clone https://github.com/KomodoPlatform/komodo-defi-framework --branch main --single-branch && cd komodo-defi-framework
```

For development, please use the `dev` branch ( `git clone https://github.com/KomodoPlatform/komodo-defi-framework --branch dev` ) instead of a specific release branch.

Compile the source code:

```bash
cargo build --features native -vv
```

#### MacOS

If the above command results in an error, use the following command instead.

```bash
LIBRARY_PATH=/usr/local/opt/openssl/lib cargo build --features native -vv
```

Alternatively, create a permanent link called `libcrypto` to `/usr/local/lib`.

```bash
ln -s /usr/local/opt/openssl/lib/libcrypto.a /usr/local/lib
```

If everything installed successfully, a response that is similar to the following should appear.

```bash
“Finished dev [optimized + debuginfo] target(s) in 3m 33s”
```

The Komodo DeFi Framework API executable is now built and available here: `~/komodo-defi-framework/target/debug/mm2`
export const title = "Additional Information About Komodo DeFi Framework";
export const description = "The Komodo DeFi Framework API is built to have a core component that can serve many front-end graphical-user interfaces (GUIs).";

# Additional Notes

## A Back End for Front-End Implementations

The Komodo DeFi Framework API is built to have a core component that can serve many front-end graphical-user interfaces (GUIs).

Various front-end GUIs exist in our ecosystem, some of them built by the volunteer efforts of our community members.

This also allows developers and entrepreneurs the freedom to create your own front-end implementation for your own purposes. For example, you can create your own front-end implementation that acts on the same atomic-swap network as other communities. Or, you could make a front-end implementation for your own private network.

The documentation here only concerns the core component, the Komodo DeFi Framework API. This component is typically accessed via an API or a terminal interface.

Documentation for GUIs based on Komodo DeFi Framework API are not yet available.

## New Features of Komodo DeFi Framework API (Desktop)

Users who worked with the previous version of the Komodo DeFi Framework API software, MarketMaker 1.0 (MM1), will note several differences with the new release.

### New Off-Chain Technology

MM1 used nanomsg technology for its off-chain network layer (e.g. orderbook propagation, ordermatching, client traffic routing, and other technologies that are not active on the blockchain itself).

Komodo DeFi Framework API replaced nanomsg with Rust TCP implementation and also uses `libtorrent` as a torrent/DHT network system for the off-chain network layer. This p2p software is widely used and highly reliable, granting a greater development experience.

### Rust Implementation

MM1 was based on ANSI C.

For Komodo DeFi Framework API we ported the system to Rust, utilizing the cargo ecosystem. Internal benchmarks prove this to be more efficient. Furthermore, the Rust code base supports mobile devices, including Android & iOS. This is a key benefit, as we expect mobile devices to be a key component of Komodo DeFi Framework API adoption.

### Multi-Threading and Other Multi-Tasking Improvements

MM1 had limited multi-tasking capabilities. Also, the bob-side technology was not reliable when using MM1 in lite mode (SPV), wherein blockchain syncing is not required for end-users.

Komodo DeFi Framework API has multi-threading. This allows it to reliably manage multiple concurrent requests.

## Komodo DeFi Framework API for Mobile (New!)

Komodo is pleased to announce that Komodo DeFi Framework API is preparing for release on compatible Android and iOS devices. The software is currently undergoing quality tests and external reviews before publication.

Notable aspects of the Mobile Komodo DeFi Framework software include:

*   Optimization for low-data usage and CPU consumption
*   Low storage requirements (less than 50 MB)
*   Integrates seamlessly with the desktop Komodo DeFi Framework API software

Through the Komodo API, mobile-device developers can integrate Komodo DeFi Framework API for Mobile into other software packages.

Please reach out to our team on [Discord](https://komodoplatform.com/discord) to be involved with the software release.

## Add Your Coin to the Komodo DeFi Framework API

All coins that are built on the BTC and ETH core software can be added to the Komodo DeFi Framework API quickly and simply. Coins built on other software frameworks may be able to be added as well, depending on specific details. Specifically, a coin must support functionality that is similar to the "CheckLockTimeVerify" of the Bitcoin protocol, wherein a utxo can be locked for a specific amount of time and then released in a manner determined by the developer. For more information, please reach out to our team on Discord.

To add your BTC or ETH-based coin to Komodo DeFi Framework API, first follow the linked checklist below:

[Link to checklist for adding coin to Komodo DeFi Framework API](https://github.com/KomodoPlatform/coins#about-this-repository)

Upon completing the checklist, please submit your proposed coin configuration files to the same repository with a pull request.

## Features Carried From MM1

##### SPV-based Trading

Komodo DeFi Framework holds support for [SPV Electrum-based](https://en.bitcoin.it/wiki/Electrum) coins. This feature allows a user to trade with their coins without downloading their coins' blockchain data. This feature is available for all Bitcoin-protocol based coins running native-coin daemons, Ethereum, and Ethereum-based ERC20 tokens. The Komodo DeFi Framework API is built to handle the nature of the SPV requirements, providing additional functionality to developers.

##### Liquidity Multiplication

Komodo DeFi Framework also enables a feature known as Liquidity Multiplication, a protocol that allows the same funds to be used in multiple requests on Komodo DeFi Framework "orderbooks." The first request to fill completes the trade, and all outstanding requests are immediately cancelled. This feature is available to the user when providing liquidity to the exchange (called a "Bob-side" trade).

Liquidity Multiplication therefore allows an initial amount of funding to create an exponentially higher amount of liquidity on the exchange. This also provides a special advantage for traders that like to wait for below-market dumps. While this feature is something that any other exchange could implement, few do.

On Komodo DeFi Framework, all orderbook entries are 100% backed by real funds, as opposed to a centralized exchange’s vouchers, which may be one reason why Komodo DeFi Framework can more readily offer this feature.
export const title = "Get telegram notifications for your Komodo DeFi Framework LP";
export const description =
  "This document describes how to become a Liquidity Provider for Komodo DeFi Framework with telegram notifications using docker.";

import rickmorty from "@/public/images/docs/api-images/tg-bot-rickmorty.png";
import passphrase from "@/public/images/docs/api-images/tg-bot-passphrase.png";
import orderbook from "@/public/images/docs/api-images/tg-RICKMORTYorderbook.png";

# How To Become a Liquidity Provider for Komodo DeFi Framework with Telegram Notifications using Docker

## Installation

### Clone the repository

Command:

```bash
git clone https://github.com/komodohowto/docker-atomicdex-api-marketmaker.git
```

```bash
Cloning into 'docker-atomicdex-api-marketmaker'...
remote: Enumerating objects: 20, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 20 (delta 10), reused 20 (delta 10), pack-reused 0
Unpacking objects: 100% (20/20), done.
```

### Build Docker Image

Commands:

```bash
cd docker-atomicdex-api-marketmaker/
docker build -t komodohowto/dev-marketmaker2 .
```

```bash
Sending build context to Docker daemon  99.33kB
Step 1/14 : FROM ubuntu:18.04 as build
---> 4c108a37151f
Step 2/14 : ENV BUILD_PACKAGES="build-essential git llvm-3.9-dev libclang-3.9-dev clang-3.9 cmake libssl-dev pkg-config jq curl"
---> Using cache
---> 3b813b17e4d7
Step 3/14 : RUN apt-get update &&   apt-get install -y $BUILD_PACKAGES
---> Using cache
---> 41810097bcaa
Step 4/14 : RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
---> Using cache
---> 2009c98d7fa6
Step 5/14 : RUN /bin/bash -c "source $HOME/.cargo/env && rustup install nightly-2019-06-26 && rustup default nightly-2019-06-26 && rustup component add rustfmt-preview"
---> Using cache
---> a53c682998f9
Step 6/14 : RUN git clone https://github.com/KomodoPlatform/atomicDEX-API --branch mm2 --single-branch
---> Using cache
---> 8a8e51b28cc0
Step 7/14 : RUN cd atomicDEX-API && /bin/bash -c "source $HOME/.cargo/env && cargo build --features native -vv"
---> Using cache
---> adfcc059873e
Step 8/14 : FROM ubuntu:18.04
---> 4c108a37151f
Step 9/14 : RUN apt-get update &&   apt-get install -y git jq wget curl nano
---> Using cache
---> 2dd149bda261
Step 10/14 : RUN cd /usr/local/bin && wget https://raw.githubusercontent.com/jl777/coins/master/coins
---> Using cache
---> e9184dd1aaeb
Step 11/14 : COPY --from=build /atomicDEX-API/target/debug/mm2 /usr/local/bin
---> Using cache
---> 28f19909035f
Step 12/14 : COPY /scripts/* /usr/local/bin/
---> Using cache
---> a1d73142edd9
Step 13/14 : COPY entrypoint.sh /usr/local/bin/
---> Using cache
---> 67edd3956442
Step 14/14 : CMD ["/usr/local/bin/entrypoint.sh"]
---> Using cache
---> dad149e9d795
Successfully built dad149e9d795
Successfully tagged komodohowto/dev-marketmaker2:latest
```

## Setup Telegram Bot

*   Open your Telegram App.
*   Search for the bot named `@BotFather` and start a chat with it
*   Send the message `/help` to receive a list of commands available
*   Send the message `/newbot` to create a new bot
*   Send a message containing the required name of the bot. It must end in `bot`. Like this, for example: TetrisBot or tetris\_bot.
*   Once the bot is created, take note of the username (hereby referred as `BOT_USERNAME`) and bot token (hereby referred as `BOT_TOKEN`) from the message sent to you.
*   Start a chat with the new bot created
*   Go to the url: `https://api.telegram.org/bot<YourBOTToken>/getUpdates`. Replace the `<YourBOTToken>` with the `BOT_TOKEN`
*   In the response, look for the key: `chat`

```json
"chat": {
"id": "7xxxxxxxxxx",
"first_name": "gxxxxxxx",
"type": "private"
},
```

*   the id in the above json is hereby referred as `BOT_CHATID`

Now we have all the details needed to start our Marketmaker with Telegram bot notifications enabled!

## Usage

### Start Container With Telegram Bot Notification

Command:

```bash
docker run -it -e BOT_TOKEN='989XXXXXX:AAXXXXXXXXXXXXeso' -e BOT_CHATID='93XXXXX6' -e BOT_USERNAME='mymarketmakerbot' komodohowto/dev-marketmaker2
```

Replace the values `BOT_TOKEN='989XXXXXX:AAXXXXXXXXXXXXeso' -e BOT_CHATID='93XXXXX6' -e BOT_USERNAME='mymarketmakerbot'` with the ones belonging to your bot

A message will be received on your bot like this:

### Start Atomic DEX API Marketmaker

Command:

```bash
start.sh
```

```bash
 root        30 17.5  3.8 879940 154996 pts/0   Sl+  10:09   0:00 /usr/local/bin/mm2 {"gui":"MM2GUI","netid":9999, "userhome":"/root", "passphrase":"L1XXXXXXXXXXXXXXXXXXXRY", "rpc_password":"HlXXXXXXXKW"}
```

This outputs the PID within the docker container, the passphrase & the rpc\_password that is used with the packaged scripts.

### Connect to RICK & MORTY Coin Networks

Commands:

```bash
RICKconnect.sh
MORTYconnect.sh
```

The helpful telegram bot sends this notification for this demo:

### View RICK/MORTY Orderbook

Command:

```bash
RICKMORTYorderbook.sh
```

Which our bot helpfully relays to us!

Now that we can see the orderbooks are in a simple JSON schema, it is trivial to create a rudimentary GUI application.
export const title = "Komodo DeFi Framework Metrics";
export const description =
  "Monitor and analyze the performance and activity of your Komodo DeFi Framework API sessions with various metrics.";

import prometheus1 from "@/public/images/docs/komodo-defi-framework-tutorials/prometheus1.png";
import graphana1 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana1.png";
import graphana2 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana2.png";
import graphana3 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana3.png";
import graphana4 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana4.png";
import graphana5 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana5.png";
import graphana6 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana6.png";
import graphana7 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana7.png";
import graphana8 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana8.png";
import graphana9 from "@/public/images/docs/komodo-defi-framework-tutorials/graphana9.png";

# Komodo DeFi Framework Metrics

The Komodo DeFi Framework  collects data metrics that allow interested users to view a history of events of an Komodo DeFi Framework API session, such as incoming and outgoing traffic.

The metrics can be:

*   Recorded to a log file at a specified frequency
*   Requested using Komodo DeFi Framework API in JSON format
*   Visualized using Prometheus and Grafana

## Setting Up Log Recording

By default, collected metrics are recorded to a log file every five minutes, but this value can be defined with the `metrics` parameter in a user's [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).

```bash
"metrics\": 0,
```

To disable the collection of metrics, set the `metrics` parameter to 0.

### Requesting Metrics Manually

Execute the following command to request a metrics snapshot.

```json
{
  "method": "metrics",
  "userpass": "RPC_UserP@SSW0RD"
}
```

```json
{
  "metrics": [
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "coin": "MARTY",
        "method": "tx_detail_by_hash"
      },
      "value": 25
    },
    {
      "type": "counter",
      "key": "rpc_client.request.count",
      "labels": {
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 1224
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "method": "tx_detail_by_hash",
        "coin": "DOC"
      },
      "value": 27
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "DOC",
        "method": "tx_detail_by_hash"
      },
      "value": 27
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.in",
      "labels": {
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 823841
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.out",
      "labels": {
        "coin": "MARTY",
        "client": "electrum"
      },
      "value": 139396
    },
    {
      "type": "counter",
      "key": "tx.history.response.total_length",
      "labels": {
        "client": "electrum",
        "coin": "MARTY",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 1041
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 11
    },
    {
      "type": "counter",
      "key": "tx.history.response.count",
      "labels": {
        "method": "blockchain.scripthash.get_history",
        "client": "electrum",
        "coin": "DOC"
      },
      "value": 6
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "MARTY",
        "method": "tx_detail_by_hash"
      },
      "value": 25
    },
    {
      "type": "counter",
      "key": "rpc_client.response.count",
      "labels": {
        "coin": "DOC",
        "client": "electrum"
      },
      "value": 1351
    },
    {
      "type": "counter",
      "key": "rpc_client.request.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 1237
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.in",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 772964
    },
    {
      "type": "counter",
      "key": "tx.history.response.total_length",
      "labels": {
        "coin": "DOC",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 767
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "DOC",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 6
    },
    {
      "type": "counter",
      "key": "rpc_client.traffic.out",
      "labels": {
        "coin": "DOC",
        "client": "electrum"
      },
      "value": 136368
    },
    {
      "type": "counter",
      "key": "tx.history.request.count",
      "labels": {
        "coin": "MARTY",
        "client": "electrum",
        "method": "blockchain.scripthash.get_history"
      },
      "value": 11
    },
    {
      "type": "counter",
      "key": "rpc_client.response.count",
      "labels": {
        "client": "electrum",
        "coin": "MARTY"
      },
      "value": 1361
    },
    {
      "type": "gauge",
      "key": "p2p.connected_peers.count",
      "labels": {},
      "value": 8.0
    },
    {
      "type": "gauge",
      "key": "p2p.received_messages.count",
      "labels": {},
      "value": 24.0
    },
    {
      "type": "gauge",
      "key": "p2p.connected_relays.len",
      "labels": {},
      "value": 8.0
    },
    {
      "type": "gauge",
      "key": "p2p.relay_mesh.len",
      "labels": {},
      "value": 2.0
    },
    {
      "type": "gauge",
      "key": "orderbook.memory_db",
      "labels": {},
      "value": 297800390224.0
    },
    {
      "type": "gauge",
      "key": "orderbook.len",
      "labels": {},
      "value": 15.0
    },
    {
      "type": "gauge",
      "key": "p2p.received_messages.period_in_secs",
      "labels": {},
      "value": 60.0
    },
    {
      "type": "histogram",
      "key": "peer.outgoing_request.timing",
      "labels": {
        "peer": "12D3KooWJDoV9vJdy6PnzwVETZ3fWGMhV41VhSbocR1h2geFqq9Y"
      },
      "count": 2.0,
      "max": 0.801318629,
      "min": 0.699428848
    }
  ]
}
```

## Prometheus Integration

Komodo DeFi Framework API 2.0 supports integration with [Prometheus](https://github.com/prometheus/prometheus#install). This software allows users to setup automated scraping of metrics at regular intervals and enables sophisticated queries on the stored [timeseries](https://en.wikipedia.org/wiki/Time_series) data. It also allows users to configure an elegant dashboard using built-in [graphs,](https://prometheus.io/docs/prometheus/latest/getting_started/#using-the-expression-browser) or to export data for graphical processing using [Grafana](https://prometheus.io/docs/visualization/grafana/).

Prometheus scrapes metrics using an HTTP pull model. To provide Prometheus with the ability to scrape the metrics at [localhost:9001](http://localhost:9001), you need to add the `prometheusport` parameter to your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/):

```bash
"prometheusport": 9001
```

You can also define your username and password for Prometheus to enforce basic authorization security with the `prometheus_credentials` in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/). Note that this additional argument is NOT necessary.

```bash
"prometheus_credentials": "PROM_USERNAME:PROM_PASSWORD"
```

Replace `PROM_USERNAME` and `PROM_PASSWORD` with your actual Prometheus username and password. Make sure your username and password are separated by `:`.

### Configuring Prometheus to monitor the Komodo DeFi Framework API

The following basic Prometheus configuration file, named `prometheus.yml`, can simplify the process of connecting Prometheus to the Komodo DeFi Framework API.

```yaml
global:
  scrape_interval: 10s

scrape_configs:
  - job_name: "KomoDeFi_API"

    basic_auth:
      username: "PROM_USERNAME"
      password: "PROM_PASSWORD"

    static_configs:
      - targets: ["0.0.0.0:9001"]
        labels:
          group: "komodefi"
```

Replace `PROM_USERNAME` and `PROM_PASSWORD` with your actual Prometheus username and password.

To learn more about creating a Prometheus configuration file, [read this documentation.](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)

### Starting Prometheus and Grafana

A simple way to initiate Prometheus and Grafana is to have the standard Prometheus and Grafana [docker containers](https://www.infoworld.com/article/3310941/why-you-should-use-docker-and-containers.html) run together using `docker-compose`.

Name the following compose file as `docker-compose.yml`.

```yaml
version: "3.1"
volumes:
  prometheus:
  grafana:
services:
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    network_mode: "host"
    volumes:
      - grafana:/var/lib/grafana
    restart: always
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    network_mode: "host"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    restart: always
```

Use the following command to start both containers.

```bash
docker-compose up
```

### Using the graphing interface

#### Prometheus

Once the docker containers are up and running, navigate to [http://localhost:9090/graph](http://localhost:9090/graph) and use the `Graph` tab to use Prometheus's built-in graph expressions.

To visualize one of the available metrics, open the metric explorer (next to the execute button), select a metric and then click execute.

More graphs can be added to the same page using the "Add Panel" button available.

#### Grafana

Grafana can access data scraped by Prometheus and it can analyze, transform and display it in a variety of ways. For more information see the [Prometheus guide.](https://prometheus.io/docs/visualization/grafana/#using)

To use Grafana, navigate to [http://localhost:3000](http://localhost:3000) and log in using the default credentials: `admin` / `admin`. When offered to set a new password, do so and secure it in an encrypted password manager like [KeePassXC](https://keepassxc.org/).

Next we need to add Prometheus as a data source. Click on the cog icon in the sidebar to open the configuration panel.

Click the "Add data source" button, and select **Prometheus** from the menu. Set the URL to `http://localhost:9090`, leave other fields as default, and click the "Test and save" button at the bottom of the form.

Next, navigate to [http://localhost:3000/dashboards](http://localhost:3000/dashboards) and click on the `New Dashboard` button

Next, click on `Add a new panel`

In the next screen, select `Prometheus` as the provider from the drop down menu in the `Query` tab.

Click the `Metrics` menu and select one of the available options. These should be the same ones available directly in the Graphs tab of Prometheus: [http://localhost:9090/graph](http://localhost:9090/graph).

Optionally, you can tweak the query options (shown in the image below).

Once complete, click on `Run queries` to see the data displayed on the graph. If you like, you can also customise the graph, by adding a title, changing the colors, or using a different graph type. Click `Apply` in the top right corner once complete.

Add any additional panels as desired, and save them to your dashboard.
export const title = "Komodo DeFi Framework API Walkthrough";
export const description =
  "This guide describes a step-by-step process to get started with Komodo DeFi Framework.";

# Komodo DeFi Framework API Walkthrough

Now that you have the Komodo DeFi Framework API [installed](/komodo-defi-framework/setup/) you are ready for your first atomic swap!
Since we're testing Komodo DeFi Framework API as a back end, we're going to be doing a few things that a normal user using a GUI will not be expected to do.
Let's open up the terminal and get started.

## Setting Up the Coin List

In the Komodo ecosystem we use two blockchain coins, DOC and MARTY, for testing purposes. These coins are freely distributed and have no blockchain scarcity, so don't treat these coins as having any real value.
If you lose them or destroy them, there's no need to stress. You can always grab more from our faucet in the [KomodoPlatform Discord server](https://komodoplatform.com/discord).
Let's set up a file in the `~/komodo-defi-framework/target/debug` directory to import the settings for these test coins. Make a file called `coins` and place the following text into it:

```json
[
  {
    "coin": "DOC",
    "asset": "DOC",
    "fname": "DOC",
    "rpcport": 62415,
    "txversion": 4,
    "overwintered": 1,
    "mm2": 1,
    "sign_message_prefix": "Komodo Signed Message:\n",
    "is_testnet": true,
    "required_confirmations": 1,
    "requires_notarization": false,
    "avg_blocktime": 60,
    "protocol": {
      "type": "UTXO"
    },
    "derivation_path": "m/44'/141'",
    "trezor_coin": "Komodo"
  },
  {
    "coin": "MARTY",
    "asset": "MARTY",
    "fname": "MARTY",
    "rpcport": 52592,
    "txversion": 4,
    "overwintered": 1,
    "mm2": 1,
    "sign_message_prefix": "Komodo Signed Message:\n",
    "is_testnet": true,
    "required_confirmations": 1,
    "requires_notarization": false,
    "avg_blocktime": 60,
    "protocol": {
      "type": "UTXO"
    },
    "derivation_path": "m/44'/141'",
    "trezor_coin": "Komodo"
  }
]
```

Save this file. Komodo DeFi Framework API will search for it automatically on launch.

The `coins` file in [this linked repository](https://github.com/KomodoPlatform/coins) contains the standard coin configuration file used in GUI software.
You can download and use [this file](https://github.com/KomodoPlatform/coins/blob/master/coins) if you want to activate other coins.

Servers used for light mode activation are listed within [this file](https://github.com/KomodoPlatform/coins/blob/master/utils/coins_config.json),
and you can find many coin activation request body json examples at [https://stats.kmd.io/atomicdex/activation\_commands/](https://stats.kmd.io/atomicdex/activation_commands/).

## Launching the Komodo DeFi Framework API

We also need to create an MM2.json file in the same directory as the `coins` file. We'll use a minimal configuration for this example (check out the [configure mm2 guide](/komodo-defi-framework/setup/configure-mm2-json/) for more information about additional configuration parameters).

### MM2.json Minimal Configuration

| Parameter     | Type    | Description                                                                                                                                                                                                                       |
| ------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| gui           | string  | Information to identify which app, tool or product is using the API, e.g. `KomodoWallet iOS 1.0.1`. Helps developers identify if an issue is related to specific builds or operating systems etc.                                 |
| netid         | integer | Nework ID number, telling the Komodo DeFi Framework API which network to join. 8762 is the current main network, though alternative netids can be used for testing or "private" trades as long as seed nodes exist to support it. |
| passphrase    | string  | Your passphrase; this is the source of each of your coins private keys. KEEP IT SAFE!                                                                                                                                             |
| rpc\_password | string  | For RPC requests that need authentication, this will need to match the `userpass` value in the request body.                                                                                                                      |

Unless you include the `allow_weak_password` paramater and set it to `true`, your `rpc_password`:

*   Can't have 3 of the same characters in a row,
*   Must be between 8-32 characters in length
*   Must contain at least one each of the following: numeric, uppercase, lowercase, special character (e.g. !#$\*).
*   Must not contain the word "password", or the chars `<`, `>`, or `&`.

The MM2.json configuration commands can also be supplied at runtime, as below:

```bash
stdbuf -oL ./mm2 "{\"gui\":\"Docs_Walkthru\",\"netid\":8762, \"passphrase\":\"YOUR_PASSPHRASE_HERE\", \"rpc_password\":\"YOUR_PASSWORD_HERE\"}" &
```

Replace `YOUR_PASSPHRASE_HERE` and `YOUR_PASSWORD_HERE` with your actual passphrase and password, and then execute the command in the terminal.

You should see output similar to the following:

```bash
06 10:26:37, mm2:279] Komodo DeFi Framework API 1.0.3-beta_6444336 DT 2023-05-01T22:25:14+03:00
06 10:26:37, mm2_main::mm2::lp_native_dex:424] INFO Version: 1.0.3-beta_6444336 DT 2023-05-01T22:25:14+03:00
06 10:26:37, crypto::crypto_ctx:333] INFO Public key hash: d346c085a470963c399fe67e3c3b3e93e29ede5d
06 10:26:37, crypto::crypto_ctx:334] INFO Shared Database ID: 7d4df7c448a7b66c62f6ec3bb8798ca6f0d17862
06 10:26:38, mm2_libp2p::atomicdex_behaviour:653] INFO Local peer id: PeerId("12D3KooWBGkWw6LMvXLwQsb4w5vffmnM2cunFhTjqQd9oeNuc18a")
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWEsuiKcQaBaKEzuMtT6uFjs89P1E8MK3wGRZbeuCbCw6P to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWKxavLCJVrQ5Gk1kd9m6cohctGQBmiKPS9XQFoXEoyGmS to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWAToxtunEBWCoAHjefSv74fmnM2cunFhTjjw6PNsmxran to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWSmEi8ypaVzFA1AGde2RjxNW5Pvxw3qa2fVe48PjNs63R to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWHKkHiNhZtKceQehHhPqwU5W1jXpoVBgS1qst899GjvTm to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWMrjLmrv8hNgAoVf1RfumfjyPStzd4nv5XL47zN4ZKisb to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWL6yrrNACb7t7RPyTEPxKmq8jtrcbkcNd6H5G2hK7bXaL to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWHBeCnJdzNk51G4mLnao9cDsjuqiMTEo5wMFXrd25bd1F to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooW9soGyPfX6kcyh3uVXNHq1y2dPmQNt2veKgdLXkBiCVKq to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWPR2RoPi19vQtLugjCdvVmCcGLP2iXAzbDfP3tp81ZL4d to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWKu8pMTgteWacwFjN7zRWWHb3bctyTvHU3xx5x4x6qDYY to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWJWBnkVsVNjiqUEPjLyHpiSmQVAJ5t6qt1Txv5ctJi9Xd to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWGrUpCAbkxhPRioNs64sbUmPmpEcou6hYfrqQvxfWDEuf to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWEaZpH61H4yuQkaNG5AsyGdpBhKRppaLdAY52a774ab5u to explicit relay list
06 10:26:38, atomicdex_gossipsub::behaviour:147] INFO Adding peer 12D3KooWAd5gPXwX7eDvKWwkr2FZGfoJceKDCA53SHmTFFVkrN7Q to explicit relay list
06 10:26:38, mm2_libp2p::atomicdex_behaviour:762] INFO Dialed /ip4/79.228.173.231/tcp/42845
06 10:26:38, mm2_libp2p::atomicdex_behaviour:762] INFO Dialed /ip4/84.82.76.214/tcp/42845
06 10:26:38, mm2_libp2p::atomicdex_behaviour:762] INFO Dialed /ip4/69.178.128.39/tcp/42845
06 10:26:38, mm2_main::mm2::database:26] INFO Checking the current SQLite migration
06 10:26:38, mm2_main::mm2::database:30] INFO Current migration is 9, skipping the init, trying to migrate
06 10:26:38, mm2_main::mm2::database:119] INFO migrate_sqlite_database, current migration 9
06 10:26:38, mm2_main::mm2::database:135] INFO migrate_sqlite_database complete, migrated to 9
😉 2023-05-06 18:26:38 +0800 [] rpc:362] >>>>>>>>>> DEX stats 127.0.0.1:7783 DEX stats API enabled at unixtime.1683368798  <<<<<<<<<

```

If you see something similar, the Komodo DeFi Framework API is up and running!

When using the Komodo DeFi Framework API on a VPS without accompanying tools such as `tmux` or `screen`, it is recommended to use [`nohup`](https://www.digitalocean.com/community/tutorials/nohup-command-in-linux). This will ensure that the Komodo DeFi Framework API instance is not shutdown when the user logs out.

```bash
stdbuf -oL nohup ./mm2 "{\"gui\":\"Docs_Walkthru\",\"netid\":8762, \"passphrase\":\"YOUR_PASSPHRASE_HERE\", \"rpc_password\":\"YOUR_PASSWORD_HERE\"}" &
```

### Setting `userpass` Environment Variable

Create a new file in the `~/komodo-defi-framework/target/debug` folder called `userpass`, then enter the following text using the same `rpc_password` as is in your MM2.json file or runtime configuration string:

```bash
export userpass="RPC_UserP@SSW0RD"
```

Save it, and then in the terminal execute:

```bash
source userpass
```

Test it by executing:

```bash
echo $userpass
```

You should now see your userpass printed to the console.

The `userpass` environment variable will remain in memory until the session is
closed. When you open up a new session later, you'll need to create the
`userpass` environment variable again. Additional environment variables for
the Komodo DeFi Framework API can be found in the [configure mm2
guide](/komodo-defi-framework/setup/configure-mm2-json/).

### Connect to the Selected Coin Networks

While we did set up the `coins` file for wach coin's configuration properties earlier, the Komodo DeFi Framework API doesn't to connect to their blockchain networks until we send a [coin activation request](/komodo-defi-framework/api/legacy/coin_activation/).

To activate DOC and MARTY, send the following requests to the Komodo DeFi Framework API:

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "electrum",
  "coin": "MARTY",
  "servers": [
    {
      "url": "electrum1.cipig.net:10021"
    },
    {
      "url": "electrum2.cipig.net:10021"
    },
    {
      "url": "electrum3.cipig.net:10021"
    }
  ]
}
```

```json
{
  "address": "RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE",
  "coin": "MARTY",
  "balance": 16.95595733,
  "result": "success"
}
```

You are now connected to the MARTY test-blockchain network!

Let's connect to DOC (note it uses a different Electrum port).

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "electrum",
  "coin": "DOC",
  "servers": [
    {
      "url": "electrum1.cipig.net:10020"
    },
    {
      "url": "electrum2.cipig.net:10020"
    },
    {
      "url": "electrum3.cipig.net:10020"
    }
  ]
}
```

```json
{"address": "RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE","coin": "DOC","balance": 11.27710708,"result": "success"}
```

You are now connected to the DOC test-blockchain network!

### Get MARTY from the Faucet

Note that in the examples the address, `RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE`, is present in both returned responses. You will see a different address in your returned responses - your address is unique to to your `passphrase`.

To get free DOC and MARTY coins, use the Flux-Bot faucet in the [KomodoPlatform Discord](https://komodoplatform.com/discord) with the slash command below:

```bash
/faucet-drip MARTY RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE
```

In a minute or so a few MARTY coins will arrive in your address. You can [check your balance](/komodo-defi-framework/api/legacy/my_balance/) with the request below:

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_balance",
  "coin": "MARTY"
}
```

```json
{"address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ","balance": 77.7,"coin": "MARTY"}
```

Now you are ready to trade!

### The Komodo DeFi Framework Orderbook

Komodo DeFi Framework uses a decentralized, peer-to-peer orderbook empowering users to trade without having to rely on a centralized service.

This avoids some serious problems which can affect centralized exchanges, such as:

*   Security risks: There's always a chance [hackers](https://www.wired.com/2014/03/bitcoin-exchange/), [founders](https://www.youtube.com/watch?v=20BEJouWBgY) or other [bad actors](https://www.youtube.com/watch?v=P14nZqx2ZdY) could steal a users assets or [personal information](https://www.bitdegree.org/crypto/news/crypto-exchange-coinsquare-suffers-from-user-data-breach) because everything is stored on the exchange's servers.
*   Lack of transparency: It's difficult to know if the exchange is playing fair, which can lead to [market manipulation](https://www.youtube.com/watch?v=TRXdxiot5JM) or insider trading.
*   Limited user control: Users don't have complete control over their funds, as they are held by the exchange. Remember: [**Not your keys, not your coins!**](https://www.youtube.com/watch?v=dnC5mFaIW3Q)
*   Limited asset offerings: Centralized exchanges may not have as diverse a range of cryptocurrencies available for trading.
*   High exit fees: Users might have to pay a lot of money just to withdraw their funds. If some cases, [withdrawals are suspended](https://www.youtube.com/shorts/LFOCppNHnds) altogether!

To see the orders listed on the Komodo DeFi Framework orderbook, use the [`orderbook`](/komodo-defi-framework/api/legacy/orderbook/) method:

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook",
  "base": "DOC",
  "rel": "MARTY"
}
```

The response below shows a list of users willing to send DOC in exchange for MARTY.

```json
{"bids": [],"numbids": 0,"biddepth": 0,"asks": [{"coin": "DOC","address": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh","price": "0.89999998","price_rat": [[1, [813957463, 471859]],[1, [0, 524288]]],"price_fraction": {"numer": "2026619787280727","denom": "2251799813685248"},"maxvolume": "10855.85028615","max_volume_rat": [[1, [3593286463, 1389548]],[1, [0, 128]]],"max_volume_fraction": {"numer": "5968066809508671","denom": "549755813888"},"pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12","age": 5,"uuid": "5bff6021-b086-477e-b874-f45d898933fe","is_mine": false}],"numasks": 1,"askdepth": 0,"base": "DOC","rel": "MARTY","timestamp": 1549319941,"netid": 8762}
```

Notice that the output is not easily readable in the terminal. This is where
we start using `jq`. You may remember that we installed software called `jq`
during the setup process. `jq` is optional, but it is recommended as it makes
reading the output in the terminal easier. To use `jq`, simply add the
following to the end of any command: `| jq`.

Try again this time adding ` | jq` to the end of the `bash` example below:

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook",
  "base": "DOC",
  "rel": "MARTY"
}
```

```json
{
	"bids": [],
	"numbids": 0,
	"biddepth": 0,
	"asks": [{
		"coin": "DOC",
		"address": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
		"price": "2",
		"maxvolume": "10855.85028615",
		"price_rat": [
			[1, [2]],
			[1, [1]]
		],
		"price_fraction": {
			"numer": "2",
			"denom": "1"
		},
		"max_volume_rat": [
			[1, [3593286463, 1389548]],
			[1, [0, 128]]
		],
		"max_volume_fraction": {
			"numer": "5968066809508671",
			"denom": "549755813888"
		},
		"pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
		"age": 9,
		"zcredits": 0,
		"uuid": "5bff6021-b086-477e-b874-f45d898933fe",
		"is_mine": false
	}],
	"numasks": 1,
	"askdepth": 0,
	"base": "DOC",
	"rel": "MARTY",
	"timestamp": 1549320152,
	"netid": 8762
}
```

That's much easier to read. We can easily see someone with the address `RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh` is willing to swap DOC for MARTY.

```bash
"base": "DOC",
"rel": "MARTY",
```

They are asking `2` MARTY for every `1` DOC and have a total of `10855.85028615` available to trade.

```bash
"price": 2,
"maxvolume": 10855.85028615,
```

### Initiate a Swap

Let's create a DOC/MARTY [`buy`](/komodo-defi-framework/api/legacy/buy/) order

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "buy",
  "base": "DOC",
  "rel": "MARTY",
  "volume": "1",
  "price": "2"
}
```

```json
{
  "result": {
    "action": "Buy",
    "base": "DOC",
    "base_amount": "1",
    "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
    "method": "request",
    "rel": "MARTY",
    "rel_amount": "2",
    "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
    "uuid": "288743e2-92a5-471e-92d5-bb828a2303c3"
  }
}
```

If you see order data in the response, the order was successfully submitted to the network.

Your swap is not yet started, however.

From here, everything is automated.

If your order is matched you will see something similar in terminal output as the steps of the swap are completed:

```bash
· 2023-05-06 22:05:31 +0800 [] lp_ordermatch:3094] Entering the taker_swap_loop DOC/MARTY with uuid: a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a
06 14:05:31, atomicdex_gossipsub::behaviour:189] INFO Subscribed to topic: swap/a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a
· 2023-05-06 22:05:33 +0800 [] taker_swap:756] Taker swap a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a has successfully started
+--- 06 14:05:33 -------
| (0:00) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Started...
+--- 06 14:05:49 -------
| (0:16) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Negotiated...
06 14:05:50, mm2_main::mm2::lp_swap::taker_swap:1245] INFO Taker fee tx hash 11da01de79647552cc541ce2e1c32680e664530c70e940247d2d275405438cab
06 14:05:51, mm2_main::mm2::lp_swap::taker_swap:1325] INFO Got maker payment c55fcdd5be98761cb181296a3dd76ac9b1b80b269a5236887c9f8d0fa46a8ffc
06 14:05:51, mm2_main::mm2::lp_swap::taker_swap:1338] INFO Before wait confirm
06 14:05:51, coins::utxo::rpc_clients:175] INFO Waiting for tx c55fcdd5be98761cb181296a3dd76ac9b1b80b269a5236887c9f8d0fa46a8ffc confirmations, now 0, required 1, requires_notarization false
+--- 06 14:07:10 -------
| (1:37) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Maker payment wait confirm started...
06 14:07:23, coins::utxo::rpc_clients:175] INFO Waiting for tx c55fcdd5be98761cb181296a3dd76ac9b1b80b269a5236887c9f8d0fa46a8ffc confirmations, now 0, required 1, requires_notarization false
+--- 06 14:07:34 -------
| (2:01) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Maker payment wait confirm started...
06 14:07:38, mm2_main::mm2::lp_swap::taker_swap:1356] INFO After wait confirm
06 14:07:40, mm2_main::mm2::lp_swap::taker_swap:1508] INFO Taker payment tx hash 431c28bcf749b90f035b6ec613fe07e3faac3191e2a7650c78dd6309e7724e7b
+--- 06 14:07:43 -------
| (2:09) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Taker payment sent...
06 14:07:52, mm2_main::mm2::lp_swap::taker_swap:1662] INFO Taker payment spend tx 1a8023d27231a00929b39f78ec919fe6ddd8195e76f846e26cdbc1bc18dd4b50
+--- 06 14:07:52 -------
| (2:19) [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Taker payment spent...
06 14:07:53, mm2_main::mm2::lp_swap::taker_swap:1734] INFO Maker payment spend tx a8f735e53996631049d7e0d9b79c6a5c776a94b684205c8539d8690dffe7fa86
· 2023-05-06 22:07:58 +0800 [swap uuid=a8122ae2-2f20-4c19-b2f7-c4fa53d9e52a] Finished
```

When you see that last line, you know that your swap went through! Let's check by checking our DOC [balance](/komodo-defi-framework/api/legacy/my_balance/) again.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_balance",
  "coin": "DOC"
}
```

```json
{
    "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
    "balance": 0.99999,
    "coin": "DOC"
}
```

Congratulations! You have successfully completed your first atomic swap!

Once you are finished using the Komodo DeFi Framework API, you can exit using the [`stop`](/komodo-defi-framework/api/legacy/stop/) method:

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "stop"
}
```

Don't forget to reach out to us [on Discord](https://komodoplatform.com/discord) or [Twitter](https://twitter.com/komodoplatform) tell us about your experience and ask any questions you may have!
export const title = "Coins File Update";
export const description = "This guide describes how to update a coins file in a older format to work with the latest Komodo DeFi Framework.";

# How to update the coins file to work with the latest Komodo DeFi Framework

## Instructions

*   Compile the latest `mm2` binary following [these instructions](/komodo-defi-framework/setup/)
*   Place the `coins` file in the old format in the same directory as the compiled `mm2` binary
*   Open a terminal and navigate to the directory with both the files
*   Run the following command `./mm2 update_config coins coins_new`

`mm2` can accept any valid paths as the arguments for the source and destination files

*   Output similar to the following will be shown. The "Success" message indicates that the conversion was successful

```bash
03 09:13:56, mm2:169] AtomicDEX MarketMaker f48b4ad DT 2020-07-28T17:25:18+07:00
Success
```

*   You will find a new file named `coins_new` in the same directory with the new format expected by Komodo DeFi Framework
*   Rename the file named `coins` to `coins_old` and then `coins_new` to `coins`
*   `mm2` will use the `coins` file in the new format the next time it is launched

## Examples

### UTXO coin

#### Old Format

```json
{
  "coin": "KMD",
  "name": "komodo",
  "fname": "Komodo",
  "rpcport": 7771,
  "pubtype": 60,
  "p2shtype": 85,
  "wiftype": 188,
  "txversion": 4,
  "overwintered": 1,
  "txfee": 1000,
  "mm2": 1,
  "required_confirmations": 2,
  "requires_notarization": true
}
```

#### New Format

```json
{
  "coin": "KMD",
  "name": "komodo",
  "fname": "Komodo",
  "rpcport": 7771,
  "pubtype": 60,
  "p2shtype": 85,
  "wiftype": 188,
  "txversion": 4,
  "overwintered": 1,
  "txfee": 1000,
  "mm2": 1,
  "required_confirmations": 2,
  "requires_notarization": true,
  "protocol": {
    "type": "UTXO"
  }
}
```

### ERC20 Token

#### Old Format

```json
{
  "coin": "MKR",
  "name": "maker",
  "fname": "Maker",
  "etomic": "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
  "rpcport": 80,
  "mm2": 1,
  "required_confirmations": 3
}
```

#### New Format

```json
{
  "coin": "MKR",
  "name": "maker",
  "fname": "Maker",
  "required_confirmations": 3,
  "rpcport": 80,
  "mm2": 1,
  "protocol": {
    "type": "ERC20",
    "protocol_data": {
      "platform": "ETH",
      "contract_address": "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2"
    }
  }
}
```
export const title = "Liquidity Provider";
export const description = "This guide describes how to become a liquidity provider using the Komodo DeFi Framework.";

# How To Become a Liquidity Provider on Komodo DeFi Framework

The following tutorial introduces the reader to a simple method to become a liquidity provider on the main network of the Komodo DeFi Framework software.

## Requirements

#### Virtual Private Server (Recommended)

We recommend that the user [have a Virtual Private Server (VPS)](/smart-chains/tutorials/basic-environment-setup-for-linux-vps/) with *at least* the following specifications.

*   2 vCPU
*   4GB RAM
*   OS: Ubuntu 18.04 (Preferably a clean installation)

#### Home-Based Connection

If the user prefers to use computer hardware at home, instead of a VPS, we recommend that the user have a very strong Internet connection. We also recommend that the user have a competitive hardware setup running on Ubuntu 18.04.

*   Internet speed - *at least* 1 MBPS
*   RAM - *at least* 4 GB
*   Processor - *at least* i5 or equivalent

## Get the Komodo DeFi Framework API and Coins Configuration File

#### Step 1: Get the Komodo DeFi Framework API binary

You can get the Komodo DeFi Framework API binary by downloading pre-compiled versions from the official repository or by building from source.

##### Downloading from the Official Repository (Option 1)

We will create `~/komodo-defi-framework/target/debug` directory for compatibility with building from source method.

You can get the latest release of the Komodo DeFi Framework API binary from the [komodo-defi-framework/releases](https://github.com/KomodoPlatform/komodo-defi-framework/releases) page on Github. Download and extract it to `~/komodo-defi-framework/target/debug`.

For example:

```bash
mkdir -p ~/komodo-defi-framework/target/debug
cd ~/komodo-defi-framework/target/debug
wget https://github.com/KomodoPlatform/komodo-defi-framework/releases/download/beta-2.1.4315/mm2-9fe6e9402-Linux-Release.zip
unzip mm2-9fe6e9402-Linux-Release.zip
```

Then you can proceed to [download the coins configuration file](/komodo-defi-framework/tutorials/how-to-become-a-liquidity-provider/#step-2-download-the-coins-configuration-file).

##### Building from Source (Option 2)

If you decide to build from source, please follow the [Build Komodo DeFi Framework API from source guide](/komodo-defi-framework/tutorials/how-to-compile-mm2-from-source/)

#### Step 2: Download the Coins Configuration File

##### Command

```bash
cd ~/komodo-defi-framework/target/debug ; wget https://raw.githubusercontent.com/KomodoPlatform/coins/master/coins
```

```bash
$ cd ~/komodo-defi-framework/target/debug; wget https://raw.githubusercontent.com/KomodoPlatform/coins/master/coins
--2019-07-20 05:27:50--  https://raw.githubusercontent.com/KomodoPlatform/coins/master/coins
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.8.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.8.133|:443... connected.
HTTP request sent, awaiting response...
200 OK
Length: 58974 (58K) [text/plain]
Saving to: ‘coins’

coins 100%[=================================================================================================================================================>] 57.59K --.-KB/s in 0.002s

2019-07-20 05:27:50 (37.2 MB/s) - ‘coins’ saved [58974/58974]

```

## Running the Komodo DeFi Framework API

#### Step 1: Download and Edit Scripts to Provide Liquidity for the KMD/LTC Pair

Navigate to the directory: `~/komodo-defi-framework/target/debug`

```bash
cd ~/komodo-defi-framework/target/debug
```

Download the scripts used to start and interact with the Komodo DeFi Framework API.

```bash
git clone https://github.com/gcharang/mm2scripts
```

Copy those scripts to the current directory.

```bash
cp mm2scripts/* .
```

#### Create a Secure Seed Phrase

The user must create a seed phrase that will serve as a type of password for accessing all coins in the user's digital wallet.

Various tools are available in the cryptocurrency community to create a secure seed phrase. One available method is to use the automated procedure that is included in the [Komodo Desktop Wallet](https://komodoplatform.com/en/wallets.html).

Backup these 24 words carefully. They provide access to the coins that are stored in the addresses created by the Komodo DeFi Framework API.

To learn more about creating secure phrases, [read this linked content on the Bitcoin wiki.](https://en.bitcoin.it/wiki/Seed_phrase)

#### Edit the start.sh File

We are about to place the seed phrase in the `start.sh` file. Failure to properly execute this step can lead to a loss of your funds.

Open the `start.sh` file in the current directory using the `nano` text-editor.

```bash
nano start.sh
```

Replace the value `REPLACE_TRADING_WALLET_PASSPHRASE` in the file with the seed phrase.

#### Create an RPC Control User Password

Keep the nano software and `start.sh` file open.

Separately, create an additional password for Remote Procedure Call (RPC) access.

This should be a simple password that is sufficiently random, has at least eight digits, and is based on numbers and letters.

#### Place the User Password into the start.sh File

Replace the text `"RPC_UserP@SSW0RD"` with your RPC user password.

##### Example

The below example shows how to launch the Komodo DeFi Framework API software with a 24-word passphrase. This is provided for demonstration purposes only. You should NOT copy/paste this example. Type this command in manually to your terminal, and MAKE SURE TO CHANGE THE PASSPHRASE TO YOUR OWN.

Failure to properly manage your passphrase can (and likely will) result in lost funds.

Hit `Ctrl + X` to save and exit.

Observe the bottom of the terminal for any prompts. Hit `y` when asked to save. When the file name is shown, hit `Enter` if the name matches `start.sh`.

#### Edit the userpass File

Replace the text `RPC_UserP@SSW0RD` with the same password used in the `start.sh` file.

```bash
userpass=GlHjhvYlev8fh8xZgSB
```

We now have basic scripts to use the Komodo DeFi Framework API as a liquidity provider.

#### Step 2: Start the Komodo DeFi Framework API

##### Command

```bash
./start.sh
```

```bash
 nohup: appending output to 'nohup.out'
```

Starting the Komodo DeFi Framework API in the above manner causes the passphrase to be visible to other programs such as `htop`.

To avoid this issue, there is an alternate method that uses a json file to replace the command line parameters

To use it:

```bash
cp MM2_sample.json MM2.json
nano MM2.json
```

Edit the values of the keys `"rpc_password"` and `"passphrase"` with the same values used in the `start.sh` file. Save and close the file.

To start the Komodo DeFi Framework API:

```bash
stdbuf -oL nohup ./mm2
```

#### Step 3: Connect to the Coin Networks (KMD & LTC)

Open a new terminal and navigate to the directory: `~/komodo-defi-framework/target/debug`

```bash
cd ~/komodo-defi-framework/target/debug
```

#### Connect to the KMD network

##### Command

```bash
./KMDconnect.sh
```

##### Response

```js
{"address":"RG1yR8UGqyHmRBcrwAakUEi8u1AC5jNABY","balance":"0","coin":"KMD","result":"success"}
```

Take note of the address.

We recommend here that you make sure that the public address above matches the address generated by the same passphrase, when entered into the Komodo wallet or the Verus Desktop wallet.

A sample response of the terminal output after the `start.sh` file is executed.

```js
2019-07-20 08:07:13, lp_coins:669] ticker = "KMD", block_count = 1450741
```

#### Connect to the LTC network

##### Command

```bash
./LTCconnect.sh
```

##### Response

```js
{"address":"LRxjbptpKojFbywpe8avejShLx4sYvKSBZ","balance":"0","coin":"LTC","result":"success"}
```

Again, a best practice here is to ensure that the public address above matches with the address in the Komodo Wallet or Verus Desktop wallets.

```js
2019-07-20 08:08:11, lp_coins:669] ticker = "LTC", block_count = 1670767
```

#### Connecting to a Network Other Than KMD or LTC

To connect to a coin network other than KMD or LTC, first make sure that the coin's details are present in the `coins` file you downloaded. Also make sure that the file has the property `"mm2": 1`.

Next, create a new file named "COINNAMEconnect.sh" and add the following contents; replace the characters `<` and `>` and all text between them with values from your `coins` file. (For example: `<text where 7771 should be inserted>` becomes `7771`.)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "electrum",
  "coin": "<COIN TICKER>",
  "servers": [
    {
      "url": "<url of electrum server 1>"
    },
    {
      "url": "<url of electrum server 2>"
    }
  ]
}
```

Make the file executable

```bash
cd ~/komodo-defi-framework/target/debug
chmod +x COINNAMEconnect.sh
```

Execute the command `./COINNAMEconnect.sh` to instruct your Komodo DeFi Framework API instance to connect to the coin's electrum server.

## Trading

#### Step 0: Query the Current Orderbooks

Display the KMD/LTC Orderbook.

See this [linked document](/komodo-defi-framework/api/legacy/orderbook/) for an explanation of the output.

##### Command

```bash
./orderbook.sh KMD LTC | jq '.'
```

```js
{
 "askdepth": 0,
 "asks": [
   {
     "coin": "KMD",
     "address": "RT9MpMyucqXiX8bZLimXBnrrn2ofmdGNKd",
     "price": "0.013215470000000002",
     "price_rat": [
       [1, [1536963325, 1773750]],
       [1, [0, 134217728]]
     ],
     "price_fraction": {
       "numer": "7618199778243325",
       "denom": "576460752303423488"
     },
     "maxvolume": "485.99773485000003",
     "max_volume_rat": [
       [1, [1550366371, 995323]],
       [1, [0, 2048]]
     ],
     "max_volume_fraction": {
       "numer": "4274881284322979",
       "denom": "8796093022208"
     },
     "pubkey": "1bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
     "age": 10,
     "zcredits": 0,
     "uuid": "ac058b00-24e0-40e1-82f0-0ec4131450c5",
     "is_mine": false
   }
 ],
 "base": "KMD",
 "biddepth": 0,
 "bids": [
   {
     "coin": "LTC",
     "address": "Ld6814QT6fyChvvX3gmhNHbRDyiMBvPr9s",
     "price": "0.011956849349654498",
     "price_rat": [
       [1, [1238828453, 401205]],
       [1, [0, 33554432]]
     ],
     "price_fraction": {
       "numer": "1723163592820133",
       "denom": "144115188075855872"
     },
     "maxvolume": "1.03403044",
     "max_volume_rat": [
       [1, [3226923691, 542129]],
       [1, [0, 524288]]
     ],
     "max_volume_fraction": {
       "numer": "2328429552136875",
       "denom": "2251799813685248"
     },
     "depth": 0,
     "pubkey": "1bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
     "age": 11,
     "zcredits": 0,
     "uuid": "80019ae0-5a42-40db-bc49-18975987e45b",
     "is_mine": false
   }
 ],
 "netid": 8762,
 "numasks": 1,
 "numbids": 1,
 "rel": "LTC",
 "timestamp": 1563610320
}
```

Display the LTC/KMD Orderbook.

##### Command

```bash
./orderbook.sh LTC KMD | jq '.'
```

```js
{
 "askdepth": 0,
 "asks": [
   {
     "coin": "LTC",
     "address": "Ld6814QT6fyChvvX3gmhNHbRDyiMBvPr9s",
     "price": "83.19879514",
     "price_rat": [
       [1, [255867351, 1363129]],
       [1, [0, 16384]]
     ],
     "price_fraction": {
       "numer": "5854594731096535",
       "denom": "70368744177664"
     },
     "maxvolume": "1.03403044",
     "max_volume_rat": [
       [1, [3226923691, 542129]],
       [1, [0, 524288]]
     ],
     "max_volume_fraction": {
       "numer": "2328429552136875",
       "denom": "2251799813685248"
     },
     "pubkey": "1bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
     "age": 9,
     "zcredits": 0,
     "uuid": "80019ae0-5a42-40db-bc49-18975987e45b",
     "is_mine": false
   }
 ],
 "base": "LTC",
 "biddepth": 0,
 "bids": [
   {
     "coin": "KMD",
     "address": "RT9MpMyucqXiX8bZLimXBnrrn2ofmdGNKd",
     "price": "75.27507393894138",
     "price_rat": [
       [1, [3018734531, 308326]],
       [1, [0, 4096]]
     ],
     "price_fraction": {
       "numer": "1324253105241027",
       "denom": "17592186044416"
     },
     "maxvolume": "485.99773485000003",
     "max_volume_rat": [
       [1, [1550366371, 995323]],
       [1, [0, 2048]]
     ],
     "max_volume_fraction": {
       "numer": "4274881284322979",
       "denom": "8796093022208"
     },
     "pubkey": "1bb83b58ec130e28e0a6d5d2acf2eb01b0d3f1670e021d47d31db8a858219da8",
     "age": 10,
     "zcredits": 0,
     "uuid": "ac058b00-24e0-40e1-82f0-0ec4131450c5",
     "is_mine": false
   }
 ],
 "netid": 8762,
 "numasks": 1,
 "numbids": 1,
 "rel": "KMD",
 "timestamp": 1563610443
}
```

#### Step 1: Fund the Address

In this example, we sell KMD for LTC.

To achieve this, we first fund the KMD address created by the Komodo DeFi Framework API.

Use the following command to find the address and check the balance.

```bash
./mybalance.sh KMD
```

##### Response

```js
{"address":"RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb","balance":"2.98","coin":"KMD"}
```

#### Step 2: Place an Order

Execute the following command to sell 2 KMD at the price of `1 KMD = 0.013 LTC`.

##### Command

```bash
./place_order.sh KMD LTC 0.013 2 | jq '.'
```

##### Response

```js
{
  "result": {
    "base": "KMD",
    "created_at": 1563800688606,
    "matches": {},
    "max_base_vol": "2",
    "min_base_vol": "0",
    "price": "0.013",
    "rel": "LTC",
    "started_swaps": [],
    "uuid": "d375fce0-5d7c-4d1d-9cfa-6177c78df44a"
  }
}
```

#### Step 3: Check the Status of an Order

Check the status of an order by referring to its `uuid`.

##### Command

```bash
./order_status.sh 6621efd5-72dd-422c-89a8-7b655b744ead | jq '.'
```

##### Response

```js
{
  "order": {
    "available_amount": "2",
    "base": "KMD",
    "cancellable": true,
    "created_at": 1563800688606,
    "matches": {},
    "max_base_vol": "2",
    "min_base_vol": "0",
    "price": "0.013",
    "rel": "LTC",
    "started_swaps": [],
    "uuid": "d375fce0-5d7c-4d1d-9cfa-6177c78df44a"
  },
  "type": "Maker"
}
```

#### Step 4: Withdrawal of Coins

After someone accepts the order and your trade is finished, the coins received (LTC) and the coins leftover (KMD) can be withdrawn.

Execute the following command to withdraw `0.97` KMD to the address `RUFf4de7gZE7sp5vPcxaAsvv6j79ZbQgAu`.

##### Command

```bash
./withdraw.sh KMD RUFf4de7gZE7sp5vPcxaAsvv6j79ZbQgAu 0.97 | jq '.'
```

##### Response

```json
{
  "tx_hex": "0400008085202f8901c25ecb12f5fc17120bf92ed18ff71754b5f58e6eece2fba44fc114f14176df04010000006a4730440220732047807944afcb062f5dc7af87fe5b9979e447cd235ef1b130e50008c3d51a02201b232814bcee9c0b5a29aa24d453e493cd121a0e21d94c0e84476de0a15e74a101210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff02401ac805000000001976a914d020156e7d0fead249cfb5a458952ae941ac9f9e88ac5800fb0b000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac06a5355d000000000000000000000000000000",
  "tx_hash": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
  "from": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb"],
  "to": ["RUFf4de7gZE7sp5vPcxaAsvv6j79ZbQgAu"],
  "total_amount": 2.98,
  "spent_by_me": 2.98,
  "received_by_me": 2.00999,
  "my_balance_change": -0.97001,
  "block_height": 0,
  "timestamp": 1563798788,
  "fee_details": {
    "type": "Utxo",
    "amount": 1e-5
  },
  "coin": "KMD",
  "internal_id": ""
}
```

Copy the `"tx_hex"` value from the above response and send it to the network using the `sendrawtransaction.sh` script.

##### Command

```bash
./sendrawtransaction.sh KMD 0400008085202f8901c25ecb12f5fc17120bf92ed18ff71754b5f58e6eece2fba44fc114f14176df04010000006a4730440220732047807944afcb062f5dc7af87fe5b9979e447cd235ef1b130e50008c3d51a02201b232814bcee9c0b5a29aa24d453e493cd121a0e21d94c0e84476de0a15e74a101210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff02401ac805000000001976a914d020156e7d0fead249cfb5a458952ae941ac9f9e88ac5800fb0b000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac06a5355d000000000000000000000000000000
```

##### Response

```json
{
  "tx_hash": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855"
}
```

The above `tx_hash` can be searched for in an explorer to check the status of the withdraw.

## Miscellaneous

#### Stop

To stop the Komodo DeFi Framework API, use the `stop.sh` script.

##### Command

```bash
./stop.sh
```

##### Response

```js
{
  "result": "success"
}
```

#### View All the Orders Placed by Our Node

##### Command

```bash
./myorders.sh  | jq .
```

##### Response

```js
{
  "result": {
    "maker_orders": {
      "d82357c5-22c9-483d-bf3d-1d09d0d921bf": {
        "available_amount": "2",
        "base": "KMD",
        "cancellable": true,
        "created_at": 1563797287088,
        "matches": {},
        "max_base_vol": "2",
        "min_base_vol": "0",
        "price": "0.013",
        "rel": "LTC",
        "started_swaps": [],
        "uuid": "d82357c5-22c9-483d-bf3d-1d09d0d921bf"
      }
    },
    "taker_orders": {}
  }
}
```

#### Cancel an Order

Cancel an order by referring to its `uuid`.

##### Command

```bash
./cancel_order.sh 6621efd5-72dd-422c-89a8-7b655b744ead
```

##### Response

```js
{
  "result": "success"
}
```
export const title = "Compile MM2 from Source";
export const description = "This guide describes a simple method to build the Komodo DeFi Framework API from source.";

# How To Compile Komodo DeFi Framework API from Source

The following tutorial introduces the reader to a simple method to build the Komodo DeFi Framework API from source.

## Installing Dependencies

#### Step 1: OS Packages

##### Command

```bash
sudo apt update
sudo apt-get install build-essential git jq llvm-3.9-dev libclang-3.9-dev clang-3.9 cmake libssl-dev pkg-config
```

If you are using Ubuntu 20.04, run:

```bash
sudo apt update
sudo apt-get install build-essential git jq llvm-dev libclang-dev clang cmake libssl-dev pkg-config
```

For rpm-based distributions:

```bash
sudo dnf groupinstall "Development Tools"
sudo dnf install jq clang cmake openssl-devel clang-devel libzstd systemd-devel  # systemd-devel is used for libudev dep instead of pkg-config
```

#### Step 2: Install Rust

##### Command

```bash
curl https://sh.rustup.rs -sSf | sh
```

When asked to select an installation type, select the following option: `2) Customize installation`

Choose default host triple and toolchain, then select minimal profile.

```json
$ curl https://sh.rustup.rs -sSf | sh
info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust programming
language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to Cargo's bin
directory, located at:

  /home/mylo/.cargo/bin

This path will then be added to your PATH environment variable by modifying the
profile file located at:

  /home/mylo/.profile

You can uninstall at any time with rustup self uninstall and these changes will
be reverted.

Current installation options:

   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
>2

I'm going to ask you the value of each of these installation options.
You may simply press the Enter key to leave unchanged.

Default host triple?


Default toolchain? (stable/beta/nightly/none)


Profile (which tools and data to install)? (minimal/default/complete)
minimal

info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
info: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)
info: downloading component 'rustc'
info: downloading component 'rust-std'
info: downloading component 'cargo'
...
...
info: downloading component 'rust-docs'
info: installing component 'rustc'
 91.1 MiB /  91.1 MiB (100 %)  17.7 MiB/s in  5s ETA:  0s
info: installing component 'rust-std'
....
...
 stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)


Rust is installed now. Great!

To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH
environment variable. Next time you log in this will be done automatically.

To configure your current shell run source $HOME/.cargo/env

```

Once the installation is complete, enter `Logout` and then `Login` again.

Alternatively, you may execute the following command in each active shell until you reach the `Login` again.

```bash
source $HOME/.cargo/env
```

#### Step 3: Install Rust components

##### Command

```bash
rustup install nightly-2022-02-01
```

```bash
$ rustup install nightly-2022-02-01
info: syncing channel updates for 'nightly-2022-02-01-x86_64-unknown-linux-gnu'
696.1 KiB / 696.1 KiB (100 %) 567.6 KiB/s in  2s ETA:  0s
info: latest update on 2022-02-01, rust version 1.49.0-nightly (ffa2e7ae8 2020-10-24)
info: downloading component 'cargo'
  5.3 MiB /   5.3 MiB (100 %) 426.6 KiB/s in  3s ETA:  0s
info: downloading component 'clippy'
  2.4 MiB /   2.4 MiB (100 %) 527.6 KiB/s in  2s ETA:  0s
info: downloading component 'rust-docs'
 13.6 MiB /  13.6 MiB (100 %)   4.3 MiB/s in  3s ETA:  0s
info: downloading component 'rust-std'
 22.3 MiB /  22.3 MiB (100 %)   7.1 MiB/s in  4s ETA:  0s
info: downloading component 'rustc'
 55.1 MiB /  55.1 MiB (100 %)  10.7 MiB/s in  7s ETA:  0s
info: downloading component 'rustfmt'
  3.6 MiB /   3.6 MiB (100 %) 289.6 KiB/s in  2s ETA:  0s
info: installing component 'cargo'
info: Defaulting to 500.0 MiB unpack ram
  5.3 MiB /   5.3 MiB (100 %)   4.4 MiB/s in  1s ETA:  0s
info: installing component 'clippy'
info: installing component 'rust-docs'
 13.6 MiB /  13.6 MiB (100 %)   3.8 MiB/s in  3s ETA:  0s
info: installing component 'rust-std'
 22.3 MiB /  22.3 MiB (100 %)   4.0 MiB/s in  5s ETA:  0s
info: installing component 'rustc'
 55.1 MiB /  55.1 MiB (100 %)   4.6 MiB/s in 12s ETA:  0s
info: installing component 'rustfmt'

  nightly-2022-02-01-x86_64-unknown-linux-gnu installed - rustc 1.49.0-nightly (ffa2e7ae8 2020-10-24)

info: checking for self-updates
info: downloading self-update

```

##### Command

```bash
rustup default nightly-2022-02-01
```

```bash
$ rustup default nightly-2022-02-01
info: using existing install for 'nightly-2022-02-01-x86_64-unknown-linux-gnu'
info: default toolchain set to 'nightly-2022-02-01-x86_64-unknown-linux-gnu'

  nightly-2022-02-01-x86_64-unknown-linux-gnu unchanged - rustc 1.49.0-nightly (ffa2e7ae8 2020-10-24)
```

##### Command (Optional, skip this step if it fails)

```bash
rustup component add rustfmt-preview
```

```bash
$ rustup component add rustfmt-preview
info: downloading component 'rustfmt'
  2.9 MiB /   2.9 MiB (100 %) 928.6 KiB/s in  1s ETA:  0s
info: installing component 'rustfmt'
```

## Install the Komodo DeFi Framework API

#### Step 1: Download source code

```bash
cd ~ ; git clone https://github.com/KomodoPlatform/komodo-defi-framework --branch mm2.1 --single-branch && cd komodo-defi-framework
```

```bash
$cd ~ ; git clone https://github.com/KomodoPlatform/komodo-defi-framework --branch mm2.1 --single-branch && cd komodo-defi-framework
Cloning into 'komodo-defi-framework'...
remote: Enumerating objects: 34, done.
remote: Counting objects: 100% (34/34), done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 107436 (delta 14), reused 21 (delta 11), pack-reused 107402
Receiving objects: 100% (107436/107436), 194.19 MiB | 9.59 MiB/s, done.
Resolving deltas: 100% (84045/84045), done.
```

#### Step 2: Compile Source Code

##### Command

```bash
cargo build --features native -vv
```

```bash
…
…
    Finished dev [optimized + debuginfo] target(s) in 6m 40s
```
export const title = "Introduction to Komodo DeFi Framework";
export const description = "One of Komodo's blockchain tools is an atomic-swap powered, decentralized exchange (DEX), called Komodo DeFi Framework.";

# Introduction to Komodo DeFi Framework

One of Komodo's blockchain tools is an atomic-swap powered, decentralized exchange (DEX), called Komodo DeFi Framework.

Komodo DeFi Framework software is entirely separate from the `komodod` software that powers the rest of Komodo.

Because Komodo DeFi Framework is built on atomic swaps, developers and users can rely on it to exchange cryptocurrencies at will, and without any middleman involvement. Users of this software maintain full control over the private keys of their assets at all times. This dramatically increases the security of the exchange process.

This software is capable of facilitating atomic-swap exchanges between approximately 99% of the coins listed on [coinmarketcap.com](https://coinmarketcap.com). All coins were listed without charge.

## Why is Komodo DeFi Framework Special?

When it comes to DEX technology, Komodo has a remarkable story.

In April 2014, Komodo’s lead developer experimented with his first atomic-swap prototypes. By August of 2017, Komodo released version 1.0 of the atomic-swap DEX software, allowing anonymous Internet users to perform over 100,000 atomic swaps via automation. These are but two examples of how Komodo has led the way in atomic-swap DEX technology since the beginning.

To understand Komodo DeFi Framework, one must first understand what a decentralized exchange is, why it is important, and how atomic swaps come into play.

This discussion requires a small amount of foundational knowledge. The reader should be generally familiar with blockchain technology and should understand the basic ideas of the Komodo project.

For a broad overview of Komodo, head to the [About Komodo Platform section](/start-here/about-komodo-platform/) For a more thorough understanding of general blockchain technology, check out [the Delayed Proof of Work section of the Core Technology Discussions.](/start-here/core-technology-discussions/delayed-proof-of-work/) This section gives an overview of how a blockchain works and why it matters.

After reading the above articles, the following discussion should be attainable.

## Understanding the Most Common Method of Cryptocurrency Exchange

In the world of cryptocurrency, the goods we are trading are our digital assets. These can be coins, tokens, or other forms of digital rights and property. By nature, each digital asset is bound to the individual blockchain that secures its transaction history.

### Trading Between Blockchains is a Challenge

So long as a user exchanges these assets within their parent blockchains the normal methods of conducting transactions are sufficient for trading. However, questions arise once the user wants to exchange assets on one blockchain for assets on an entirely separate blockchain.

Typically, separate blockchains have separate demographics of miners and stakers securing the history. When a user trades value between the two blockchains, by default there is no inter-chain security mechanism that can ensure that the user's trading partner does not cheat, and that technical difficulties do not destroy the user's assets.

### The Centralized Exchange as a Method

The simplest solution is to abandon decentralization during this process and trust a third party. This describes a normal "centralized exchange" (CEX), such as Coinbase, Kraken, and Binance.

To conduct an exchange using a CEX the user must entrust their digital assets to the CEX's care during the process. The user sends their digital assets to the CEX, and the CEX then issues the user "I Owe You" (IOU) tokens that represent the user's ownership of these assets.

The user is then within a single environment that is controlled by a centralized authority. This grants all the benefits of the old system to the trading process, including greater speed of development and design.

Throughout this experience the user relies on the security of a centralized third party to ensure that their purchases and sales are conducted honestly and accurately. When the user is finished exchanging, they hand back their IOUs and tell the CEX the address where they would like to export their purchases.

Once the user receives their digital assets back into an address which they control, they are again truly the "owner" of these assets.

### Problems with Centralized Exchanges

Assuming all goes as intended, a CEX is an efficient and effective tool for trading cryptocurrencies. However, reliable CEX's readily state that this model carries great risk. Many of the highest quality CEX's are looking to change their model to mitigate these dangers.

The primary concern for a CEX is security. When a user places their assets on a centralized exchange, the private keys to these assets are held in a database that, by nature, must have some kind of connection to the public Internet. As the database must always be available online, an attacker can penetrate an individual user's account and gain control over the IOUs even when the user is offline. The attacker can then trade these IOUs at malicious prices into an account the attacker controls and withdraw the true assets.

Furthermore, this database holds the assets of thousands of other users. Having a large amount of vulnerable funds on the Internet is an additional incentive for attackers. [As reported by IG Group studies,](https://www.group-ib.com/resources/research-hub/) from 2017 to 2018, nearly 1 billion US dollar's worth of digital assets were stolen from major exchanges around the world.

A CEX has several challenges to consider as a result of this danger. From a legal perspective, [the infamous Mt. Gox case](https://www.coindesk.com/markets/2018/01/15/mississippi-doctors-sued-mt-gox-for-bitcoin-loss-now-worth-133-million/) illustrates how users may attempt to hold the CEX liable in the event of a theft. A CEX may struggle to find an insurance provider that will protect them. Also, compared to fiat currency, government authorities can do little to assist in recovering stolen funds.

### Pros and Cons of the Centralized Exchange

| Perspective    | Pros                                                                                 | Cons                                                                                                                                                      |
| -------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| User           | The IOU exchange process is high-speed, simple, and often has a pleasant interface   | Compromising the user's individual account is achievable for a determined hacker, and there are effectively no methods to recover funds stolen from a CEX |
| User           | Because the CEX model has many users, a CEX is more likely to achieve high liquidity | The high user population motivates sophisticated attackers to compromise the entire site                                                                  |
| User           | A large CEX can handle the complexities of holding and using cryptocurrencies        | Once a user gives up control over their funds to the CEX, the user can only trust that the funds will be returned                                         |
| Exchange Owner | Without decentralization, business development is often faster                       | In holding thousands of user's personal funds, the exchange owners assume an enormous amount of liability                                                 |
| Exchange Owner | The automated aspect of cryptocurrency allows for fast profits through small fees    | The owner must be wary of thieves even among their own employees                                                                                          |

In light of these concerns, many reputable and established CEX's are turning to decentralized technologies. For example, Binance, one of the most popular CEX's on the Internet, [is moving swiftly into DEX technology](https://www.theblockcrypto.com/2019/02/07/binance-moves-away-from-ethereum-as-it-prepares-to-launch-dex/) to enhance both security and functionality for their users.

## A Decentralized Exchange Can Bring Greater Safety

To understand why a CEX may wish to implement decentralized technologies, one must first understand how a typical decentralized exchange (DEX) works. There are many types of DEXs, each having a unique technical structure. Perhaps the most popular DEX format is a decentralized gateway.

### Types of Decentralized Exchanges

| Type                    | Summary                                                                                                                                                                                                      | Examples                           |
| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------- |
| Decentralized Gateway   | A decentralized network of gateway keepers hold user funds in escrow and issue IOUs for trading                                                                                                              | InstantDEX, Bitshares, Binance DEX |
| On-Chain Token Exchange | Tokens created on the parent blockchain are traded within the consensus rules; by adding gateway nodes, this can also extend to become a decentralized gateway                                               | EtherDelta, 0x                     |
| Non-Custodial Exchange  | A centralized website arranges for a moderately secure, but non-decentralized trade between liquidity providers and purchasers; there is no order book and the exchange's control over user funds is limited | ShapeShift, Changelly              |

A decentralized gateway can be thought of as a cryptocurrency holding station that is owned and controlled by several different parties. The gateway performs two functions: it holds the assets that users send to it, and it issues IOUs.

The IOUs issued to the user do not derive from a centralized database. Rather, they are managed through a blockchain. The user maintains control over the private keys to their IOUs at all times. While this method is not as secure as having access to the private keys to the true digital assets, the method does provide some protection. Assuming the user knows how to secure their private keys, when the user is offline their IOUs are not vulnerable to attackers. This is one improvement over the CEX model.

The user trades their IOUs with other users in much the same way as on a CEX. When a user is finished trading, they send their IOUs back to the gateway, and with this transaction they include an external address to which they would like their funds withdrawn.

Now comes another key difference. The actual assets that the gateway is holding are contained in a special type of blockchain address. It is special because it is owned and controlled not by one person or central authority, but rather by several people or parties working together. This address can collect funds from anywhere and from anyone. However, it can only release funds when several of the address’s owners grant permission. This special type of blockchain address is called a “multi-signature” address.

Because a multi-signature address requires several different parties to sign the release of funds, the gateway is able to provide an improved measure of security. For an attacker to succeed, they must compromise several different parties, rather than a central authority.

In many ways, this popular DEX model is an improvement over the CEX model, and this is why many CEX's are expanding into this territory. Users have control over their IOUs, making them responsible for individual attacks, rather than the exchange owners. The risk of an exchange-wide attack is also shared across multiple parties.

### The Decentralized Gateway

| Pros                                                                                      | Cons                                                                                                                                                               |
| ----------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Tokens can be issued for any asset, including both cryptocurrency and fiat                | This method requires a wide network of trustworthy and technically proficient business partners                                                                    |
| Users maintain ownership over their IOUs at all times, limiting attackers' capabilities   | All true assets are still in the ownership of a small group of people, albeit somewhat decentralized, and therefore susceptible to attacks, errors, and corruption |
| IOUs are on-chain, and therefore buying and selling funds can be performed at high speeds | Maintenance and improvements to the DEX are highly technical, time consuming, and cost prohibitive                                                                 |

For a developer and entrepreneur, the DEX method is more secure than the CEX model, but there remain many difficulties on technical and political levels. The entrepreneur must find trustworthy partners to be co-owners of the multi-signature address. The developer must ensure that their partners' infrastructure and other technical contributions are secure, as a failure by the partners can reflect poorly on the developer and entrepreneur's own brand.

Furthermore, from the user's perspective, the primary danger persists in this DEX model. Once the user sends their assets to the gateway, the user loses control and responsibility over their true assets.

## Atomic Swaps are a Significantly Superior Basis for Exchange

What if there was a way to trade different types of cryptocurrencies without the user ever transferring control until the trade is complete? Could a user keep the private keys to their assets, and only deal directly with their trading partner and not with a third party?

This is the idea of an atomic swap. It is simply a trade of assets between two users where, assuming both behave honestly, ownership over the assets is not released until both sides are secure in receiving a fair outcome. If one side tries to cheat or makes any kind of mistake, they cannot receive a financial reward from it, and the non-offending side cannot be penalized or lose their funds.

An atomic swap can do everything else that both the DEX and CEX models can do. Atomic swaps can be conducted quickly; users may form networks of high liquidity trading; nearly all types of cryptocurrencies can be exchanged.

However, the nature of an atomic swap is unique in comparison with the opposing models, as an atomic swap does not require third-party intervention. This can provide simplicity for both the user, the entrepreneur, and even the developer. Depending on the application, the cost may also be dramatically cheaper, as far less infrastructure and manpower is required.

### Technical Comparisons

| Capability                                                         | Atomic Swap                                                                                                                       | Decentralized Gateway                                                                                               | Centralized Exchange                                                                                       |
| ------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |
| Third party is not required                                        | Yes: The entire exchange happens between two users; no third party is required                                                    | No: The exchange relies on a decentralized network of gateway nodes, who must be trusted                            | No: Users depend on a centralized company to maintain and secure their funds                               |
| An exchange can be set up by anyone                                | Yes: Requires only two users and an Internet connection                                                                           | No: Requires sufficient technical knowledge, funding, and committed business partners to serve as gateway nodes     | No: Requires sufficient technical knowledge, funding, and a higher level of business and legal knowledge   |
| Users maintain control over the funds throughout the process       | Yes: Users maintain control over their funds until the trade is completed, at which point ownership is swapped atomically         | No: Users relinquish ownership to the gateway nodes, although users do hold private keys to IOUs                    | No: Once the user sends funds to the CEX, they only own their funds in theory until the funds are returned |
| User funds remain distributed and decentralized throughout process | Yes: As users maintain ownership over their funds at all times, all funds in the exchange process are never in a central location | No: User funds are held in a collection of multi-signature addresses that are maintained by a small group of people | No: User funds are held in a centralized database, managed by company employees                            |

This is probably enough to get the basic idea. If the reader desires a more thorough understanding of the atomic swap process, read the [Komodo DeFi Framework and Atomic Swaps section of the Core Technology Disucssions.](/start-here/core-technology-discussions/komodo-defi-framework/)

The underlying ideas of atomic swaps were invented by Tier Nolan in 2013. He posted his ideas on an online community forum where Komodo's lead developer and primary visionary, JL777, or "James" for short, was also exploring blockchain technology. Here’s where Komodo enters the picture.

### Komodo's Leadership in Atomic-Swap Technology

Upon reading Nolan’s discussion, James began experimenting. In April 2014 he wrote his first experimental software for allowing anonymous users on the Internet to conduct on-chain atomic swaps between two assets on the NXT blockchain.

In September 2015, James performed an experimental atomic swap between Bitcoin and NXT. Like all Bitcoin-based atomic swaps performed during this time period, James's atomic swap could not be considered secure as Bitcoin software lacked a feature called "Check Lock Time Verify." This feature was added in November 2015, and James performed a secure atomic swap shortly thereafter.

At this time, James also began the creation of his current endeavor, the Komodo ecosystem. Additional team members were hired, money was raised, and large-scale software and company development began.

From its foundation, the Komodo ecosystem is designed to facilitate blockchain interoperability and scalability, and our atomic-swap software plays a key role. In August 2017, Komodo released version 1.0 of the first atomic-swap based DEX to the public. Releasing this entirely new DEX software to the masses was an endeavor many years in the making, and countless volunteer developers and other dreamers contributed.

Upon release of Komodo’s DEX 1.0, hundreds of members of the Komodo open-source community collectively performed over 100,000 atomic swaps. It was the first time in history that users with no coding knowledge could trade assets without either a third-party acting as an arbiter, or even without any public knowledge of who was trading with whom.

Another point to mention is that while Komodo DeFi Framework is built upon atomic swaps, other software in the Komodo ecosystem is able to perform the rest of the functionality necessary to run other types of decentralized exchanges. As all Komodo software is natively integrated, this provides the Komodo entrepreneur with perhaps the widest range of DEX software packages in existence.

### Capabilities of Komodo Software

| Atomic Swaps | Decentralized Gateway | On-Chain Token Exchange | Cross-Chain Asset Transfers | ... and more! |
| ------------ | --------------------- | ----------------------- | --------------------------- | ------------- |
| Check!       | Check!                | Check!                  | Check!                      | Check!        |

Today, Komodo developers took what they learned from version 1.0 and rewrote the code from the ground up to enhance essentially all aspects of the user experience. This is the Komodo DeFi Framework 2.0 software.

Recently, yet again Komodo forged into new territory with atomic swaps. In February of 2019, the Komodo team performed the first mobile-based atomic swap. The mobile version of Komodo DeFi Framework is available for Android and iOS devices, and the software interfaces seamlessly with our desktop software.

While the code behind Komodo's technology is complex, the good news is, the code takes care of itself. A developer and entrepreneur building on Komodo can simply fire up the software and access its functionalities through the API.

## Komodo DeFi Framework Software is an Industry-Wide Invitation

Komodo DeFi Framework is open source, meaning that we do not keep the software's source code private. Also, the Komodo team is creating a network that is open to other financially motivated businesses and organizations seeking profit in the cryptocurrency-exchange industry.

Many opportunities are available for cryptocurrency-exchange entrepreneurs to build their own audiences and businesses using Komodo software. Entrepreneurs can create their own market places on the main Komodo network for trading, or they can create their own private and public networks. Developers can use Komodo's back-end software API to feature atomic-swap DEX functionality in their existing or upcoming software innovations, including mobile software. Enterprise and other large-scale companies can reach out to Komodo for integration with Komodo technology, or even for consulting services.

[Please reach out to the Komodo team for further information.](https://komodoplatform.com/en/contact.html)
export const title = "Adding a new coin to the Komodo DeFi Framework ";
export const description =
  "This guide describes how to add a new coin to the Komodo DeFi Framework ";

import geckoapi from "@/public/images/docs/api-images/gecko_api.png";
import paprikaapi from "@/public/images/docs/api-images/paprika_api.png";
import nomicsapi from "@/public/images/docs/api-images/nomics_api.png";
import qtum from "@/public/images/docs/api-images/qtum.png";

# Prerequisites for a coin to be compatible with Komodo DeFi Framework

Before a coin can be listed in Komodo DeFi Framework, it needs to be confirmed for compatibility, and present within the [Komodo Platform coins repository](https://github.com/KomodoPlatform/coins).

The information below details the requirements for creating a working coins configuration file and submitting a successful pull request to the [coins repository](https://github.com/KomodoPlatform/coins/#readme). Please contact our support team in the `#dev-support` channel on the [Komodo Platorm Discord](https://komodoplatform.com/discord) if you have any questions or need assistance with performing a [test swap](https://github.com/KomodoPlatform/coins/tree/master/swaps).

## 1. Coins JSON config (required)

## 1a. General parameters for all coins

Different platforms & protocols vary slightly in what data is required. Review the parameter descriptions and examples below to understand what information is needed to list your coin.

| Parameter               | Type    | Description|
| ----------------------- | ------- ||
| coin                    | string  | Ticker of the coin/token. If the coin is a token, please use `COIN-PROTOCOL` as ticker, eg `USDC-BEP20`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| name                    | string  | This is the value which is expected to be default data directory name for that coin - e.g. if coin's name is `litecoin` then it's expected data directory on `~/.litecoin/` on Linux, `~/Library/Applications Support/Litecoin/` on Mac, `%AppData%\Litecoin` on Windows. Please keep this key's value in small letters only.                                                                                                                                                                                                                                                               |
| fname                   | string  | The full name of the coin/token|
| mm2                     | integer | Indicates trading compatibility with Komodo DeFi Framework API. `1` is compatible, `0` is not compatible. Non-compatible coins may still be listed as `wallet only` in Komodo DeFi Framework apps.                                                                                                                                                                                                                                                                                                                                                                                          |
| required\_confirmations | integer | Defaults to `1`. The number of confirmations Komodo DeFi Framework will wait for during the swap. WARNING, this setting affects the security of the atomic swap. 51% attacks (double spending) are a threat and have been succesfully conducted in the past. You can find a collection of coins and the theoretical cost of a 51% attack [here](https://www.crypto51.app/). Please be aware that some of the coins supported by Komodo DeFi Framework may be vulnerable to such attacks, so consider using higher confirmation values for them, especially when dealing with large amounts. |
| requires\_notarization  | boolean | Defaults to `false`. For coins protected by [dPoW](https://komodoplatform.com/en/blog/51-attack-how-komodo-can-help-prevent-one/) can be set to `true` wait for a notarization when sending transactions during a swap. If `true`, `"required_confirmations"` must be set to `2` or higher.                                                                                                                                                                                                                                                                                                 |
| decimals                | integer | Defines the number of digits after the decimal point that should be used to display the orderbook amounts, balance, and the value of inputs to be used in the case of order creation or a `withdraw` transaction. The default value used for a UTXO type coin (Bitcoin Protocol) is `8` and the default value used for a ERC20 Token is `18`. It is **very important** for this value to be set correctly. For example, if this value was set as `9` for BTC, a command to withdraw `1 BTC` tries to withdraw `10^9` satoshis of Bitcoin, i.e., `10 BTC`                                    |
| protocol                | string  | Contains the coin protocol `"type"` (UTXO, ETH, etc.) and specific protocol configuration - `"protocol_data"` object that can have arbitrary format.                                                                                                                                                                                                                                                                                                                                                                                                                                        |
| orderbook\_ticker       | string  | If set, coins with the same value will share the same orderbook. For example, if `BTC-Segwit` and `BTC-BEP20` are set with `"orderbook_ticker":"BTC"` the same orderbook is returned for KMD/BTC, KMD/BTC-BEP20 and KMD/BTC-Segwit pairs.                                                                                                                                                                                                                                                                                                                                                   |
| sign\_message\_prefix   | string  | Optional, required to allow for message signing in Komodo DeFi Framework API. Can normally be found within a projects github repository \[[example](https://github.com/KomodoPlatform/komodo/blob/master/src/main.cpp#L146)] and follows a standard format like `"Komodo Signed Message:\n"`                                                                                                                                                                                                                                                                                                |

## 1b. UTXO coins (BTC, LTC, KMD, ZEC, DASH, DOGE, DGB)

The following rpc methods should be available.

```bash
estimatefee
getblock
getblockhash
getinfo
getrawtransaction
gettxout
importaddress
listunspent
listreceivedbyaddress
listtransactions
sendrawtransaction
```

| Parameter              | Type    | Description|
| ---------------------- | ------- ||
| name                   | string  | This is the value which is expected to be default data directory name for that coin - e.g. if coin's name is `litecoin` then it's expected data directory on `~/.litecoin/` on Linux, `~/Library/Applications Support/Litecoin/` on Mac, `%AppData%\Litecoin` on Windows. Please keep this key's value in small letters only.                                                                                                                                                                                                                                                           |
| rpcport                | integer | The coin's default RPC port. It is expected that it doesn't conflict with any existing coin in the coins db.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| pubtype                | integer | This information can be found in source code of a coin project in files like `src/init.cpp`, `src/base58.h`, and `src/chainparamsbase.h` if the project is following the **bitcoin** source code directory/files structure. If unsure, then please have these confirmed by that coin/project's developers to ensure it is correct.                                                                                                                                                                                                                                                      |
| p2shtype               | integer | This information can be found in source code of a coin project in files like `src/init.cpp`, `src/base58.h`, and `src/chainparamsbase.h` if the project is following the **bitcoin** source code directory/files structure. If unsure, then please have these confirmed by that coin/project's developers to ensure it is correct.                                                                                                                                                                                                                                                      |
| wiftype                | integer | This information can be found in source code of a coin project in files like `src/init.cpp`, `src/base58.h`, and `src/chainparamsbase.h` if the project is following the **bitcoin** source code directory/files structure. If unsure, then please have these confirmed by that coin/project's developers to ensure it is correct.                                                                                                                                                                                                                                                      |
| txfee                  | integer | The default transaction fee (in satoshi). Komodo DeFi Framework uses this as the default transaction fee value when making atomic swap transactions. If set to `0`, Komodo DeFi Framework will use a dynamic fee based on output from `estimatesmartfee`.                                                                                                                                                                                                                                                                                                                               |
| overwintered           | integer | Must be `1` if Overwinter upgrade was activated for the coin. Defaults to `0`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| taddr                  | integer | Optional. Is only relevant for coins that forked the Zcash protocol and have both transparent addresses and z-addresses. The value to be set for this key can be found from the file `src/chainparams.cpp` of the coin's source code and it is the first value present in both `base58Prefixes[PUBKEY_ADDRESS]` and `base58Prefixes[SCRIPT_ADDRESS]`. But it has to be converted to decimal from HEX. So if `base58Prefixes[PUBKEY_ADDRESS]` = `{0x1C,0xB8}` , the `taddr` is `0x1C` coverted to decimal. As 0x1C in HEX = 28 in decimal, the entry in the json would be `"taddr" : 28` |
| force\_min\_relay\_fee | boolean | If `true` for coins with dynamic fees, when a new transaction is generated, Komodo DeFi Framework  will check whether the total fee set (`sat * tx size`) is lower than relay fee and will use the relay fee instead. Defaults to `false`                                                                                                                                                                                                                                                                                                                                               |
| mtp\_block\_count      | integer | Optional. Number of blocks to be used for the calculation of `median time past`. Must be greater than `0`. Default value is `11`. While this parameter is applicable only in the case of KMD reward calculation for now, it will be used for calculating locktimes to be set for the atomic swap refund transactions.                                                                                                                                                                                                                                                                   |
| estimate\_fee\_mode    | string  | Sets the fee mode for the `estimatesmartfee` call. Supported values are: `ECONOMICAL`,`CONSERVATIVE`, `UNSET`. Please note that some coins may not support some of these modes. Makes no effect for coins that do not have the `estimatesmartfee` RPC.                                                                                                                                                                                                                                                                                                                                  |
| address\_format        | object  | Optional. Overwrites the address format from coins file, if set. A standard [AddressFormat](/komodo-defi-framework/api/common_structures/#address-format) object.                                                                                                                                                                                                                                                                                                                                                                                                                       |
| isPoS                  | integer | Optional, defaults to `0`. A value of `1` indicates the coin uses proof of stake, so transactions created will have the `nTime` field.                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| segwit                 | Boolean | If `true`, Komodo DeFi Framework  will use to `P2SH` segwit addresses.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| version\_group\_id     | integer | Optional, used by Zcash (and its forks') transactions|
| consensus\_branch\_id  | integer | Optional, used in Zcash (and its forks') transactions' signature hash calculation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| mature\_confirmations  | integer | Number of blockchain confirmations required for coinbase output to be considered mature (spendable).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |

### UTXO coin example

```json
{
  "coin": "LTC",
  "name": "litecoin",
  "fname": "Litecoin",
  "rpcport": 9332,
  "pubtype": 48,
  "p2shtype": 50,
  "wiftype": 176,
  "txfee": 0,
  "dust": 5460,
  "segwit": true,
  "mm2": 1,
  "required_confirmations": 2,
  "avg_blocktime": 2.5,
  "protocol": {
    "type": "UTXO"
  }
}
```

### Antara smartchain example

```json
{
  "coin": "MCL",
  "asset": "MCL",
  "fname": "MarmaraCreditLoops",
  "rpcport": 33825,
  "txversion": 4,
  "overwintered": 1,
  "mm2": 1,
  "required_confirmations": 5,
  "requires_notarization": false,
  "avg_blocktime": 1,
  "protocol": {
    "type": "UTXO"
  }
}
```

## 1c. EVM-like tokens (ETH/ERC20, MATIC/PLG20, BNB/BEP20)

The token's contract **must** have `approve` and `transferFrom` methods. Additionally, the `transfer` and `transferFrom` methods must return a boolean value (`true/false`) indicating whether a transfer was successful. This requirement is actually a part of the ERC20 standard, but many tokens seem to not follow it.

*   `chain_id` - ID of the chain, see [Chainlist](https://chainlist.org/)
*   Protocol `"type"` field: `"ETH"` or `"ERC20"`
*   Protocol `"protocol_data"` field (ERC20 only): `"platform"` - `"ETH"`, `"ETC"` or other Ethereum forks. `"contract_address"` - ERC20 token [checksummed](https://coincodex.com/article/2078/ethereum-address-checksum-explained/) smart contract address.

| Parameter                                 | Type    | Description                                                                                                                                                                                                                                                                                                                             |
| ----------------------------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain\_id                                 | integer | To find the EVM chain ID, see [Chainlist](https://chainlist.org/)                                                                                                                                                                                                                                                                       |
| gas\_limit                                | object  | Optional, required for tokens only. Defines more precise gas prices for swap or transaction operations. Some tokens are called over proxy contracts which often require more gas, though users may be able to choose higher/lower values than the default where required. See the `Gas Limit Options` table below for more information. |
| protocol.type                             | string  | Platform / protocol - e.g `ETH` for Ethereum, `ERC20` for ERC20 tokens on the Ethereum network                                                                                                                                                                                                                                          |
| protocol.protocol\_data                   | object  | Required for tokens only.                                                                                                                                                                                                                                                                                                               |
| protocol.protocol\_data.platform          | string  | The parent coin of the token's platform - e.g `MATIC` for PLG20 tokens                                                                                                                                                                                                                                                                  |
| protocol.protocol\_data.contract\_address | string  | **Must be mixed case** The identifying hex string for the token's contract. Can be found on sites like [EthScan](https://etherscan.io/), [BscScan](https://bscscan.com/) & [PolygonScan](https://polygonscan.com/)                                                                                                                      |

### Gas Limit Options

| Parameter              | Type    | Description                                             |
| ---------------------- | ------- | ------------------------------------------------------- |
| eth\_send\_coins       | integer | Gas limit for sending coins.                            |
| eth\_send\_erc20       | integer | Gas limit for sending ERC20 tokens.                     |
| eth\_payment           | integer | Gas limit for swap payment tx with coins.               |
| erc20\_payment         | integer | Gas limit for swap payment tx with ERC20 tokens.        |
| eth\_receiver\_spend   | integer | Gas limit for swap receiver spend tx with coins.        |
| erc20\_receiver\_spend | integer | Gas limit for swap receiver spend tx with ERC20 tokens. |
| eth\_sender\_refund    | integer | Gas limit for swap refund tx with coins.                |
| erc20\_sender\_refund  | integer | Gas limit for swap refund tx with with ERC20 tokens.    |
| eth\_max\_trade\_gas   | integer | Gas limit for other operations.                         |

### ERC20 token example

```json
{
  "coin": "USDC-ERC20",
  "name": "usdc_erc20",
  "fname": "USD Coin",
  "rpcport": 80,
  "mm2": 1,
  "chain_id": 1,
  "required_confirmations": 3,
  "avg_blocktime": 0.25,
  "protocol": {
    "type": "ERC20",
    "protocol_data": {
      "platform": "ETH",
      "contract_address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    }
  },
  "gas_limit": {
    "eth_send_coins": 21000,
    "eth_send_erc20": 65000,
    "eth_payment": 75000,
    "erc20_payment": 120000,
    "eth_receiver_spend": 55000,
    "erc20_receiver_spend": 130000,
    "eth_sender_refund": 110000,
    "erc20_sender_refund": 110000,
    "eth_max_trade_gas": 150000
  }
}
```

### BEP20 token example

```json
        {
                "coin": "USDC-BEP20",
                "name": "usdc_bep20",
                "fname": "USD Coin",
                "rpcport": 80,
                "mm2": 1,
                "chain_id": 56,
                "avg_blocktime": 0.05,
                "required_confirmations": 3,
                "protocol": {
                        "type": "ERC20",
                        "protocol_data": {
                                "platform": "BNB",
                                "contract_address": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d"
                        }
                }
        },
```

## 1d. QRC20 tokens

QTUM & QRC20 tokens are a special case which also support all fields of UTXO specific config.

```json
{
  "coin": "QC-QRC20",
  "name": "qtum",
  "fname": "Qcash",
  "rpcport": 3889,
  "pubtype": 58,
  "p2shtype": 50,
  "wiftype": 128,
  "segwit": true,
  "txfee": 0,
  "mm2": 1,
  "required_confirmations": 3,
  "mature_confirmations": 500,
  "avg_blocktime": 2.133,
  "protocol": {
    "type": "QRC20",
    "protocol_data": {
      "platform": "QTUM",
      "contract_address": "0xf2033ede578e17fa6231047265010445bca8cf1c"
    }
  }
}
```

## 2. Icon file (required)

*   The icon file is required.
*   Icon must be a .png format file.
*   Dimensions of icon file is at least 128x128 pixels.
*   Icon file name MUST be the coin/token ticker in **small letters** without protocl suffix - e.g. for KMD or KMD-BEP20, use `kmd.png`.
*   Icon file location is [icons\_original](https://github.com/KomodoPlatform/coins/tree/master/icons_original) folder.

## 3. Explorer URL (required, excluding tokens)

*   Tokens do not need this data, they will use the values for their parent coin.
*   Explorer file name must be coin's ticker name in all **capital** letters.
*   Explorer file name must not have any file extension. It is a file without any `.` extension.
*   It must have a valid JSON array with at least one Explorer URL in it. Multiple explorer URLs are recommended - e.g. `["https://komodod.com/","https://kmd.explorer.dexstats.info/"]`
*   Add the path suffixes for the explorer's address and transaction URLs in [explorer\_paths.json](https://github.com/KomodoPlatform/coins/blob/master/explorers/explorer_paths.json)

## 4. Electrum Servers (required)

*   Electrum file name must be coin's ticker name in all **capital** letters.
*   Electrum file name must not have any file extension. It is a file without any `.` extension.
*   It must be a valid JSON format as shown in the following example:
*   Details of at least 2 Electrum servers must be provided.
*   The address and port of electrum server are required. The address of electrum server can either be a DNS or an IP address.
*   Protocol can be "SSL" or "TCP". For WebDEX (wasm) listings, SSL is required.
*   Contact information must be provided in case the server admin needs to be contacted in emergency situations. Failing servers will result in an automatic delisting of your coin upon the next release of the Komodo DeFi Framework apps.
*   The status of currently listed [ElectrumX](https://electrumx.readthedocs.io/en/latest/) servers is monitored via a public [API](https://electrum-status.dragonhound.info/api/v1/electrums_status) and [Dashboard](https://stats.kmd.io/atomicdex/electrum_status/). For help setting up Telegram or Discord alerts for your servers, join the `#dev-support` channel in the [Komodo Platform Discord](https://komodoplatform.com/discord).

```json
[
  {
    "url": "nmc.bitcoins.sk:50002",
    "protocol": "SSL",
    "disable_cert_verification": true,
    "contact": [
      { "email": "electrum1_admin_email@example.com" },
      { "matrix": "@electrum1_admin:matrix.org" },
      { "skype": "example_username" },
      { "twitter": "example_username" },
      { "reddit": "example_username" },
      { "github": "example_username" },
      { "keybaseio": "example_username" }
    ]
  },
  {
    "url": "electrum-nmc.le-space.de:50002",
    "protocol": "SSL",
    "disable_cert_verification": false,
    "contact": [{ "email": "electrum2_admin_email@example.com" }]
  }
]
```

The `disable_cert_verification` field is optional and defaults to `false`. If set to `true`, the SSL certificate verification will be disabled.
This can be used when the server has a self-signed certificate, but it is not recommended for production use.
**To avoid SSL certificate validation issues, it is highly recommended to use [EFF's Certbot](https://certbot.eff.org/) to generate SSL certificates for ElectrumX servers.**

## 5. Ethereum info file (Required for EVM-like platforms)

*   Ethereum file name must be coin's ticker name in all **capital** letters.
*   Ethereum file name must not have any file extension. It is a file without any `.` extension.
*   Swap contract address must be the address of [etomic swap smart contract](https://github.com/artemii235/etomic-swap) deployed to ETH network, [example](https://etherscan.io/address/0x8500afc0bc5214728082163326c2ff0c73f4a871).
*   At least minimum 2 or more URLs of RPC nodes must be provided.
*   Contact information must be provided in case the server admin needs to be contacted in urgent cases. It can be any contact information out of the examples provided.
*   The RPC node URL can either be a DNS or an IP address with port.
*   It must be a valid JSON format as shown in the following example:

```json
{
  "swap_contract_address": "0x8500AFc0bc5214728082163326C2FF0C73f4a871",
  "rpc_nodes": [
    {
      "url": "http://ethnode.com:8545",
      "contact": [
        { "email": "ethnode_admin_email@example.com" },
        { "matrix": "@ethnode_admin:matrix.org" },
        { "skype": "example_username" },
        { "twitter": "example_username" },
        { "reddit": "example_username" },
        { "github": "example_username" },
        { "keybaseio": "example_username" }
      ]
    },
    {
      "url": "http://ethnode2.com:8545",
      "contact": [{ "email": "ethnode2_admin_email@example.com" }]
    }
  ]
}
```

## 5. Forex, Nomics, CoinGecko & CoinPaprika Price IDs (optional)

The API IDs are stored in json files within the `/api_ids` folder, and used to source price and chart date in Komodo DeFi Framework apps.

For [CoinGecko](https://www.coingecko.com/en/coins/komodo) it is conveniently displayed on the right had side of a coins page as below -

For [CoinPaprika](https://coinpaprika.com/coin/kmd-komodo/) it is the same as displayed in a coin's URL -

Nomics was shutdown
For `[Nomics](https://nomics.com/assets/kmd-komodo/widget)` you can find it under the "widget" tab for a coin.

For For Forex the API ID is the same as the [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217).

Add these IDs to their respective json file within the `/api_ids` folder in the format `"TICKER": "API_ID"`

## 6. Derivation Path

The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) is now required to ensure Hierarchical deterministic wallet functionality. The best source for this data is via [Satoshi Labs SLP-044](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)

## 7. Trezor coin name (optional)

For Trezor compatibility, this field is required. You can find this value at [https://trezor.io/coins](https://trezor.io/coins). Not all coins are listed on this page by default, but if compatible can be found by searching the supported coins. The value is the name of the coin in larger black text (not the grey text in brackets). E.g. for the image below, the Trezor coin name would be `Qtum`.

## 8. Successful swap confirmation

The coin must have participated in a successful Atomic Swap using [Komodo DeFi Framework ](https://github.com/KomodoPlatform/komodo-defi-framework/)

When submitting your coin addition request, please submit the URLs of the 5 transactions (`takerfee sent`, `maker payment`, `taker payment` and `taker payment spent`, `maker payment spent`) produced by successful swap in a new file inside the swaps directory- here's an [example for KMD-ETH](https://github.com/KomodoPlatform/coins/blob/master/swaps/KMD-ETH.md). This means that, before going through the further steps and submitting the information to this coins database repo, you would have performed a successful atomic swap. The further steps explain the expected files/values to be submitted.

You can learn about performing an atomic swap from our documentation at [this link](/komodo-defi-framework/tutorials/)

Activating a coin at [this link](/komodo-defi-framework/api/legacy/coin_activation/)

Walkthrough at [this link](/komodo-defi-framework/tutorials/api-walkthrough/)

If you have any questions, please ask in the `#support` channel in [our Discord server](https://komodoplatform.com/discord) or you can get help from the team at [coinintegration@komodoplatform.com](mailto:coinintegration@komodoplatform.com) or [partners@komodplatform.com](mailto:partners@komodplatform.com) .
export const title = "Query the MM2 SQLite Database";
export const description = "This guide describes how to query the MM2 SQLite database.";

# How to Query the MM2 SQLite Database

The Komodo DeFi Framework API stores historical information such as swaps and orders within an SQLite database, located under the DB user data folder (e.g. {'{folder continaing mm2 binary}'}/DB/{'{wallet identifying hex string}'}/MM2.db').

There are a variety of methods to query sqlite databases. Examples below show how to do a sqlite query in Linux terminal, but first you might need to install sqlite with `sudo apt install sqlite3`.

The tables and columns available to query are as follows:

## my\_swaps

This table keeps a record of all swaps successfully performed in this pubkey's MM2.db

| ID | Name        | Type         | Description   |
| -- | ----------- | ------------ | ------------- |
| 0  | id          | INTEGER      | Primary Key   |
| 1  | my\_coin    | VARCHAR(255) | Coin sent     |
| 2  | other\_coin | VARCHAR(255) | Coin received |
| 3  | uuid        | VARCHAR(255) | Swap UUID     |
| 4  | started\_at | INTEGER      | Timestamp     |

#### Query:

`sqlite3 ${PATH_TO_MM2_DB_FILE} "SELECT * FROM my_swaps WHERE id=2 LIMIT 1"`

#### Response:

`2|MARTY|DOC|7086bc8e-bdaa-44b0-ac9b-01aa8760b62b|1636956829`

## stats\_swaps

This table keeps a detailed record of all swaps performed (including failed) in this pubkey's MM2.db

| ID | Name                    | Type         | Description                                     |
| -- | ----------------------- | ------------ | ----------------------------------------------- |
| 0  | id                      | INTEGER      | Primary key                                     |
| 1  | maker\_coin             | VARCHAR(255) | Maker coin                                      |
| 2  | taker\_coin             | VARCHAR(255) | Taker coin                                      |
| 3  | uuid                    | VARCHAR(255) | Swap UUID                                       |
| 4  | started\_at             | INTEGER      | Timestamp                                       |
| 5  | finished\_at            | INTEGER      | Timestamp                                       |
| 6  | maker\_amount           | DECIMAL      | Maker coin                                      |
| 7  | taker\_amount           | DECIMAL      | Taker coin                                      |
| 8  | is\_success             | INTEGER      | `1` for successful, `0` for failed              |
| 9  | maker\_coin\_ticker     | VARCHAR(255) | Maker coin ticker                               |
| 10 | maker\_coin\_platform   | VARCHAR(255) | Maker coin platform                             |
| 11 | taker\_coin\_ticker     | VARCHAR(255) | Taker coin ticker                               |
| 12 | taker\_coin\_platform   | VARCHAR(255) | Taker coin platform                             |
| 13 | maker\_coin\_usd\_price | DECIMAL      | USD price of maker coin at the time of the swap |
| 14 | taker\_coin\_usd\_price | DECIMAL      | USD price of taker coin at the time of the swap |
| 15 | taker\_pubkey           | DECIMAL      | Taker pubkey                                    |
| 16 | maker\_pubkey           | DECIMAL      | Maker pubkey                                    |

#### Query:

`sqlite3 ${PATH_TO_MM2_DB_FILE} "SELECT * FROM stats_swaps WHERE taker_coin = 'DOGE' and maker_coin = 'DGB' ORDER BY finished_at DESC LIMIT 1;"`

#### Response:

```bash
8|DGB|DOGE|c9515636-f5a4-4767-a0af-c69e59086899|1678815183|1678815631|200|28|1|DGB||DOGE||0.0108|0.07673|02d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2|03a93f666b9030958f282edd2904f0a33278c0c676ae132d2094840fe722f011c3
```

## my\_orders

This table keeps a detailed record of all orders placed in this pubkey's MM2.db

| ID | Name            | Type         | Description                                       |
| -- | --------------- | ------------ | ------------------------------------------------- |
| 0  | id              | INTEGER      | Primary Key                                       |
| 1  | uuid            | VARCHAR(255) | Order UUID                                        |
| 2  | type            | VARCHAR(255) | Order Type                                        |
| 3  | initial\_action | VARCHAR(255) | `Buy` or `Sell`. Setprice maker orders are `Sell` |
| 4  | base            | VARCHAR(255) | Base Coin                                         |
| 5  | rel             | VARCHAR(255) | Rel Coin                                          |
| 6  | price           | DECIMAL      | Order Price                                       |
| 7  | volume          | DECIMAL      | Order Volume                                      |
| 8  | created\_at     | INTEGER      | Timestamp                                         |
| 9  | last\_updated   | INTEGER      | Timestamp                                         |
| 10 | was\_taker      | INTEGER      | `1` if taker, `2` if maker                        |
| 11 | status          | VARCHAR(255) | Order status                                      |

#### Query:

`sqlite3 ${PATH_TO_MM2_DB_FILE} "SELECT * FROM my_orders WHERE base = 'DOC' and rel= 'MARTY' LIMIT 6"`

#### Response:

```bash
154|6053016b-e1ba-490f-9501-eafb69b4d3a7|Taker|Buy|DOC|MARTY|0.03|1|1640159991278|1640160021808|0|TimedOut
266|77d79265-da87-48bb-aee3-7cc87f442a55|Maker|Buy|DOC|MARTY|0.0505|3|1640857934304|1640874662778|1|InsufficientBalance
267|4c6341d6-1e89-4c3b-8612-a930754701f2|Taker|Sell|DOC|MARTY|1|2|1640872463330|1640872467129|0|Fulfilled
290|57c2b270-ee73-4a21-8fa4-4b8c2d76fc02|Maker|Buy|DOC|MARTY|0.1|0.1|1641539601576|1641539631823|1|ToMaker
291|9cba3b40-2426-4fbf-80c8-2a65c8661eed|Maker|Sell|DOC|MARTY|1|1|1641539652421|1641539813001|0|Cancelled
294|fedcc1e0-a059-47c6-bbfc-3a61454f1208|Maker|Sell|DOC|MARTY|1|12|1641546891912|1641546891912|0|Created
```

## nodes

This table stores a record of all nodes [added for stats collection](/komodo-defi-framework/api/v20/add_node_to_version_stat/) in this pubkey's MM2.db

| ID | Name     | Type         | Description |
| -- | -------- | ------------ | ----------- |
| 0  | id       | INTEGER      | Primary Key |
| 1  | name     | VARCHAR(255) | Node name   |
| 2  | address  | VARCHAR(255) | Node IP     |
| 3  | peer\_id | VARCHAR(255) | Node PeerID |

#### Query:

`sqlite3 ${PATH_TO_MM2_DB_FILE} "SELECT * FROM nodes WHERE name = 'dragonhound_DEV'"`

#### Respose:

`37|dragonhound_DEV|104.238.221.61|12D3KooWEnrvbqvtTowYMR8FnBeKtryTj9RcXGx8EPpFZHou2ruP`

## stats\_nodes

This table stores a record of results returned by registered nodes [tracked for node stats collection](/komodo-defi-framework/api/v20/start_version_stat_collection/) in this pubkey's MM2.db

| ID | Name      | Type         | Description                                  |
| -- | --------- | ------------ | -------------------------------------------- |
| 0  | id        | INTEGER      | Primary Key                                  |
| 1  | name      | VARCHAR(255) | Node name                                    |
| 2  | version   | VARCHAR(255) | Node Komodo DeFi Framework API (mm2) version |
| 3  | timestamp | INTEGER      | Timestamp                                    |
| 4  | error     | VARCHAR(255) | Error details                                |

#### Query:

`sqlite3 ${PATH_TO_MM2_DB_FILE} "SELECT * FROM stats_nodes WHERE name = 'dragonhound_DEV'" LIMIT 3`

#### Response:

```bash
540|dragonhound_DEV||1638542507|DialFailure
70638|dragonhound_DEV|2.1.4401_mm2.1_87837cb54_Linux_Release|1640270702|
70692|dragonhound_DEV||1640271615|Error on request the peer PeerId("12D3KooWEnrvbqvtTowYMR8FnBeKtryTj9RcXGx8EPpFZHou2ruP"): "Canceled". Request next peer
```
export const title = "Setup Komodo DeFi Framework on AWS";
export const description = "Learn how to set up and use the Komodo DeFi Framework API on an AWS EC2 instance.";

# How to Setup and use the Komodo DeFi Framework API on an AWS EC2 instance

## Create the Komodo DeFi Framework setup script

*   Create a file named `komodo_defi_framework_setup.txt`
*   Copy the code below into the file
*   In the code, find the text, `SEED_WORDS_PLEASE_REPLACE`, and replace it with custom seed words of your own
    *   These seed words are used to generate new blockchain addresses, and therefore the seed words should be treated like a unique password
*   Find the text, `RPC_PASS_PLEASE_REPLACE`, and replace this also with a strong password
    *   This is used to authenticate yourself while communicating with the Komodo DeFi Framework API

```bash
#!/bin/bash
apt-get update
apt-get install -y unzip jq curl
wget $(curl --silent https://api.github.com/repos/KomodoPlatform/komodo-defi-framework/releases | jq -r '.[0].assets[] | select(.name | endswith("Linux-Release.zip")).browser_download_url')
wget https://raw.githubusercontent.com/KomodoPlatform/coins/master/coins
unzip *Linux-Release.zip
./mm2 "{\"netid\":8762,\"gui\":\"aws_cli\",\"passphrase\":\"SEED_WORDS_PLEASE_REPLACE\",\"rpc_password\":\"RPC_PASS_PLEASE_REPLACE\",\"myipaddr\":\"0.0.0.0\"}"
```

## Install AWS CLI , get AWS access credentials

#### Installation

```bash
sudo apt-get install awscli
```

To obtain access credentials, log in to your AWS account and create an IAM user as described in this linked post [https://tntdrive.com/where-do-i-get-my-access-keys.aspx#create-iam-user-and-keys.](https://tntdrive.com/where-do-i-get-my-access-keys.aspx#create-iam-user-and-keys) While following the post, make sure to select the policy `AmazonEC2FullAccess` instead of `AmazonS3FullAccess`. Copy the "Access key ID" and "Secret access key" to another location while completing the post's instructions; these are necessary later.

Make sure the SSH directory exists.

```bash
mkdir -p ~/.ssh/
```

## Create an EC2 Instance

Open a terminal, navigate to the directory where the file `komodo_defi_framework_setup.txt` is located, and issue the following commands.

In the terminal commands below, note that you must first change the texts `REPLACE_ACCESS_KEY_ID` and `REPLACE_SECRET_ACCESS_KEY` with your "Access key ID" and "Secret access key" obtained during the setup procedure. If necessary, also change the region where the EC2 instance is hosted by changing all instances of `us-east-1` in the commands.

```bash
export AWS_ACCESS_KEY_ID=REPLACE_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=REPLACE_SECRET_ACCESS_KEY
aws ec2 create-key-pair --region us-east-1 --key-name mm2Keypair | jq -r .KeyMaterial > ~/.ssh/mm2.pem
chmod 400 ~/.ssh/mm2.pem
sgID=$(aws ec2 create-security-group --region us-east-1 --group-name sgMM2 --description "sg-mm2"| jq -r '.GroupId')
aws ec2 authorize-security-group-ingress --region us-east-1 --group-name sgMM2 --protocol all --cidr 0.0.0.0/0
aws ec2 run-instances --region us-east-1 --image-id ami-083d24fb90054e5f0 --count 1 --instance-type t3.micro --key-name mm2Keypair --security-group-ids $sgID --user-data file://komodo_defi_framework_setup.txt
```

If you see an error similar to the following, click the link that is found in the error. On the page to which your browser is directed click the button "Continue to Subscribe" and then click the button "Accept Terms".

```bash
An error occurred (OptInRequired) when calling the RunInstances operation: In order to use this AWS Marketplace product you need to accept terms and subscribe. To do so please visit https://aws.amazon.com/marketplace/pp?sku=auhljmclkudu651zy27rih2x2

```

Wait for the Subscription to be processed and issue the last command again.

Verify that the instance launched successfully by visiting [this linked page.](https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1)

From the linked page above, copy the "IPv4 Public IP" of the instance and use it to replace the text `REPLACE_PUBLIC_IP` in the following command.

```bash
nodeIp=REPLACE_PUBLIC_IP
ssh -o IdentitiesOnly=yes -i ~/.ssh/mm2.pem admin@$nodeIp 'curl -s --url "http://127.0.0.1:7783" --data "{\"userpass\":\"RPC_UserP@SSW0RD\",\"method\":\"version\"}"'
```

Edit the command above as necessary to exchange one curl command for another from [the Komodo DeFi Framework API.](/komodo-defi-framework/api/)
export const title = "Using Komodo DeFi Framework CLI in Console";
export const description = "This guide details the configuration and usage of the komodefi-cli binary.";

# Using Komodo DeFi Framework CLI in Console

For convenience, the  standalone `komodefi-cli` binary is provided to be used for interacting with the Komodo DeFi Framework network from the command line.

## Building Komodo DeFi Framework CLI

Refer to [https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source](https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source) for instructions on installing dependencies and preparing your build environment.

Once it is ready, you can build the komodefi-cli binary by running the following command from the root folder of the project repository:

```bash
cargo build --manifest-path ./mm2src/komodefi_cli/Cargo.toml --out-dir $(pwd)/bin -Z unstable-options
```

We also add the `bin` directory to the `PATH` environment variable so that the `komodefi-cli` binary can be executed from any location.

```bash
export PATH=${PATH}:$(pwd)/bin
```

## Configuration

#### Setting Default CLI Root Path

You can customize the default root directory for `komodefi-cli` by setting the `KOMODEFI_CLI_ROOT` environment variable. This allows you to specify a location for saving configuration files, binaries, and other related data.

```bash
export KOMODEFI_CLI_ROOT=$HOME/komodefi-cli
```

#### Downloading the Core API binary

Before using the `komodefi-cli` binary, you need to download the Core API binary. Running the following command to download the latest release:

```bash
komodefi-cli mm2 download
```

#### Configuring the Core API

For the `komodefi-cli` to work, you need to configure the Core API by setting the `coins` data and the information required for an [MM2.json](/komodo-defi-framework/tutorials/api-walkthrough/#launching-the-komodo-de-fi-framework-api) file. For more information, run the following command:

```bash
komodefi-cli init --help
```

Which will return

```bash
Config is not set
Initialize a predefined coin set and configuration to start mm2 instance with

Usage: komodefi-cli init [OPTIONS]

Options:
      --mm-coins-path <MM_COINS_PATH>  Coin set file path [default: coins] [aliases: coins]
      --mm-conf-path <MM_CONF_PATH>    mm2 configuration file path [default: MM2.json] [aliases: conf]
  -h, --help                           Print help
```

If you have an existing coins file and/or MM2.json file, you can use the `--mm-coins-path` and `--mm-conf-path` options to specify the file paths, as below.

```bash
komodefi-cli init --mm-coins-path /path/to/coins --mm-conf-path /path/to/MM2.json
```

Alternatively, run `komodefi-cli init` without any options to create the `coins` and `MM2.json` files interactively. Pressing enter for each option will use the default values. In the case of the mnemonic phrase, you can enter your own mnemonic phrase or press enter to use a newly generated one.

```bash
$ komodefi-cli init 
    Config is not set
    Start collecting mm2_cfg into: /home/smk762/komodefi-cli/MM2.json
    > gui is set by default: komodefi-cli
    > What is the network `mm2` is going to be a part, netid: 8762
    > What is the seed phrase: before device quantum scan agent gift sauce flame devote tiny ripple west
    > Allow weak password: No
    > What is the rpc_password: <tb+UD32
    > What is dbdir None
    > Use secure connection for rpc: No
    > What is rpcip: None
    > What is the rpcport: 7783
    > What is rpc_local_only: 
    > What is i_am_seed: 
    Reading seed nodes until tap enter is met
    > What is the next seednode: None
    > What is enable_hd: 
    mm2_cfg has been writen into: /home/smk762/komodefi-cli/MM2.json
    Getting coin set from: https://raw.githubusercontent.com/KomodoPlatform/coins/master/coins
    Got coins data, written into: /home/smk762/komodefi-cli/coins
    Start getting activation_scheme from: "/home/smk762/komodefi-cli/activation_scheme.json"
    Download activation_scheme from: https://stats.kmd.io/api/table/coin_activation/
    Initialization done
```

#### Starting the Core API

After the configuration is set, you can start the Core API by running `komodefi-cli mm2 start`. You can also use the `--help` option to see the available options for this command:

```bash
komodefi-cli mm2 start -help  
Start mm2 instance  
  
Usage: komodefi-cli mm2 start [OPTIONS]  
  
Options:  
     --mm-conf-path <MM_CONF_PATH>    mm2 configuration file path [aliases: conf]  
     --mm-coins-path <MM_COINS_PATH>  Coin set file path [aliases: coins]  
     --mm-log <MM_LOG>                Log file path [aliases: log]  
 -h, --help                           Print help
```

For example, to start the Core API and save its runtime logs to \~/logs/mm2.log, you can run the following command:

```bash
$ komodefi-cli mm2 start --mm-log ~/logs/mm2.log  
> Set env MM_LOG as: ~/logs/mm2.log  
> Started child process: "mm2", pid: 459264
```

## Usage

From here, you are ready to use the `komodefi-cli` binary to interact with the Komodo DeFi Framework network. You can use the `--help` option to see the available commands and options.

```bash
komodefi-cli --help 
Config is not set
Provides a CLI interface and facilitates interoperating to komodo defi platform through the mm2 service

Usage: komodefi-cli <COMMAND>

Commands:
  init                Initialize a predefined coin set and configuration to start mm2 instance with
  config              Manage rpc_password and mm2 RPC URL
  mm2                 Manage mm2 instance commands
  coin                Coin commands: enable, disable etc.
  wallet              Wallet commands: balance, withdraw etc.
  sell                Put a selling request
  buy                 Put a buying request
  set-price           Place an order on the orderbook. The setprice order is always considered a sell
  update-maker-order  Update order on the orderbook [aliases: update]
  order               Order listing commands: book, history, depth etc. [aliases: orders]
  swaps               Swap related commands [aliases: swap]
  cancel              Cancel one or many orders
  utility             Utility commands [aliases: util, pubkeys, pubkey]
  message             Message signing commands: sign, verify)
  network             Network commands
  version-stat        Version statistic commands [aliases: stat, vstat]
  task                Tracking the status of long-running commands
  help                Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version
```

For more details and examples of commands available in `komodefi-cli`, refer to the [komodefi-cli documentation](https://github.com/KomodoPlatform/komodo-defi-framework/blob/1799-swap-commands/mm2src/komodefi_cli/src/doc/CLI_REFERENCE.md) within the [Komodo DeFi Framework](https://github.com/KomodoPlatform/komodo-defi-framework) repository.
