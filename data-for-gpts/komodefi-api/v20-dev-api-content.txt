export const title = "Komodo DeFi Framework Method: Get Current MTP";
export const description = "The get_current_mtp method returns the Median Time Past (MTP) from electrum servers for UTXO coins.";

# get\_current\_mtp

The `get_current_mtp` method returns the Median Time Past (MTP) from electrum servers for UTXO coins. This information is useful for debugging, specifically in cases where an electrum server has been misconfigured.

## Arguments

| Parameter | Type    | Description                                                                             |
| --------- | ------- | --------------------------------------------------------------------------------------- |
| coin      | string  | A compatible (UTXO) coin's ticker                                                       |
| id        | integer | Optional. Identifies a request to allow matching it with a response. Defaults to `null` |

#### Response

| Parameter | Type    | Description                                                                                                   |
| --------- | ------- | ------------------------------------------------------------------------------------------------------------- |
| mtp       | integer | Unix timestamp                                                                                                |
| id        | integer | Identifies a response to allow matching it with a request. Defaults to `null` if `id` not provided in request |

#### üìå Examples

#### Command

```json
{
  "method": "get_current_mtp",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 42,
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "mtp": 1658746383
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Get Locked Amount";
export const description = "The get_locked_amount method returns the amount of a coin which is currently locked by a swap which is in progress.";

# get\_locked\_amount

The `get_locked_amount` method returns the amount of a coin which is currently locked by a swap which is in progress. If the coin is not activated, a `NoSuchCoin` error will be returned.

## Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter               | Type            | Description                                                                                      |
| ----------------------- | --------------- | ------------------------------------------------------------------------------------------------ |
| coin                    | string          | The ticker of the coin you queried.                                                              |
| locked\_amount          | object          | An object cointaining the locked amount in decimal, fraction and rational formats.               |
| locked\_amount.decimal  | numeric string  | The locked amount in [decimal format](https://www.mathsisfun.com/definitions/decimal.html).      |
| locked\_amount.rational | rational object | The locked amount in [rational format](/komodo-defi-framework/api/legacy/rational_number_note/). |
| locked\_amount.fraction | fraction object | The locked amount in [fraction format](https://www.mathsisfun.com/definitions/fraction.html).    |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_locked_amount",
  "params": {
    "coin": "DOC"
  },
  "id": 42
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "DOC",
    "locked_amount": {
      "decimal": "0.77803",
      "rational": [
        [1, [77803]],
        [1, [100000]]
      ],
      "fraction": {
        "numer": "77803",
        "denom": "100000"
      }
    }
  },
  "id": 42
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin: TIME",
  "error_path": "lp_swap.lp_coins",
  "error_trace": "lp_swap:486] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: HD Address Management";
export const description = "The methods in this document allow generation of HD addresses on Komodo DeFi Framework.";

# Hierarchical Deterministic Address Management

A hierarchical-deterministic (HD) wallet generates a new key pair from a master key pair, allowing for multiple addresses to be generated from the same seed so that change from transactions go to a previously unused address, enhancing privacy and security. The hierarchical structure resembles that of a tree, with the master key ‚Äúdetermining‚Äù the key pairs that follow it in the hierarchy. If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, you can use the methods below to generate new addresses.

## get\_new\_address

If we don't already have too many unused addresses, we can use the `get_new_address` method to generate a new address. The generated address will be shown in account\_balance and init\_account\_balance RPCs and on the next coin activation.

#### Arguments

| Parameter   | Type    | Description                                                                                                                                                                                                                                                                                                                 |
| ----------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to get a new address for                                                                                                                                                                                                                                                                    |
| account\_id | integer | Generally this will be `0` unless you have multiple accounts registered on your Trezor                                                                                                                                                                                                                                      |
| chain       | string  | `Internal`, or `External`. Defaults to `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided                                                                                                                                                                                       |

#### Response

| Parameter    | Type   | Description                                                                           |
| ------------ | ------ | ------------------------------------------------------------------------------------- |
| new\_address | object | A standard [NewAddressInfo](/komodo-defi-framework/api/v20/#new-address-info) object. |

Some reasons you might not be able to get a new address are:

*   `EmptyAddressesLimitReached` - Last gap\_limit addresses are still unused.
*   `AddressLimitReached` - Addresses limit reached. Currently, the limit is [2^31](https://www.wolframalpha.com/input?i=2%5E%2832%29)

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_new_address",
  "params": {
    "coin": "DOC",
    "account_id": 0,
    "chain": "External",
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "new_address": {
            "address": "RDKyU11wFTa8kYETaDbr4YuJZG8C4e6JUm",
            "derivation_path": "m/44'/141'/0'/0/3",
            "chain": "External",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

## task\_scan\_for\_new\_addresses\_init

#### Arguments

| Parameter   | Type    | Description                                                                                                                           |
| ----------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to scan addresses for                                                                                 |
| account\_id | integer | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                  |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::init",
  "params": {
    "coin": "DGB",
    "account_index": 0,
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "task_id": 3
  },
  "id": null
}
```

## task\_scan\_for\_new\_addresses\_status

Use the `task::scan_for_new_addresses::status` method to query the status of a HD address scanning task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                         |
| details   | string or object | Once complete, a standard [ScanAddressesInfo](/komodo-defi-framework/api/v20/#scan-addresses-info) object. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::status",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success, no new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": []
      }
  },
  "id": null
}
```

#### Response (success, new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": [
              {
                  "address": "RXaMK6RtvwPiy67oramBfFXCgMobBofMWv",
                  "derivation_path": "m/44'/141'/0'/0/3",
                  "chain": "External",
                  "balance": {
                      "spendable": "0",
                      "unspendable": "0"
                  }
              },
              {
                  "address": "RJkjq4DeQ5vTNJxa1gHoS4y31ZU9F3aisu",
                  "derivation_path": "m/44'/141'/0'/0/4",
                  "chain": "External",
                  "balance": {
                      "spendable": "0.444",
                      "unspendable": "0"
                  }
              }
          ]
      }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework: HD Wallets Overview";
export const description =
  "This document provides and overview of functionality available using the Komodo DeFi Framework API in Hierarchical Deterministic (HD) mode.";

# HD Wallets Overview

[Hierarchical Deterministic (HD) Wallets](https://atomicdex.io/en/blog/hd-wallet/) are different to other wallets, as they use a key pair management system that allows generating multiple new addresses from a single seed phrase or private key.

`Hierarchical` refers to the structure of HD wallets, which resembles a tree, where parent keys can produce children keys, which can produce grandchildren keys, and so on, all from the same root seed.
`Deterministic` means that the addresses generated in this tree will always be the same for the same root seed phrase.

HD wallets offer several advantages over traditional wallets:

*   Convenience: HD wallets allow users to generate multiple public and private keys from a single seed phrase, making it easier to manage multiple addresses in one place.
*   Privacy: HD wallets can generate new addresses for each transaction, making it more difficult for malicious parties to track a user‚Äôs transaction history.
*   Access Control: A user who controls the root seed can create new addresses & keypairs which can be shared with a 3rd party, providing limited or regulated access to funds held under specific pairs.

To use HD wallet functionality with the Komodo DeFi Framework API, you must include `"enable_hd":true` in your `MM2.json` file.
Hardware wallets like [Trezor](https://trezor.io/) are always in HD mode, and this parameter **must** to be set to `true`.

In some cases, the methods used to interact with HD wallets are the same as those used with legacy wallets. However, there are some differences, which are detailed in the links below.

## Initialisation and authentication (Hardware wallets only):

*   Initialise connection with your Trezor with [task::init\_trezor::init](/komodo-defi-framework/api/v20-dev/task_init_trezor/#init)
*   Check the status of the connecton with [task::init\_trezor::status](/komodo-defi-framework/api/v20-dev/task_init_trezor/#status)
*   Cancel authentication process with [task::init\_trezor::cancel](/komodo-defi-framework/api/v20-dev/task_init_trezor/#cancel)
*   Authenticate using PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action)

These methods (and others with a `task::` prefix) will be linked to a numeric
`task_id` value which is used to query the status or outcome of the task.

## UTXO & QTUM Coin Activation in HD Mode:

As HD mode activation performs address scanning to return addresses and balances for enabled accounts, we use `task` methods because fetching this data can take some time.

*   Use [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) for UTXO coins like KMD, BTC and DOGE.
*   Check the activation status with [task::enable\_utxo::status](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#status)
*   Authenticate the activation with [task::enable\_utxo::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#user-action) (hardware wallet only)
*   Use [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) for QTUM Ecosystem coins.
*   Check the activation status with [task::enable\_qtum::status](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#status)
*   Authenticate the activation with [task::enable\_qtum::user\_action](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#user-action) (hardware wallet only)

When using the activation methods with a Trezor, `"priv_key_policy": "Trezor"` needs to be included in the request.

## Withdrawing your Funds:

*   Prepare a transaction with [withdraw (v2)](/komodo-defi-framework/api/v20/withdraw/#withdraw)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)
*   Prepare a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20-dev/task_withdraw/#init)
*   Check the status of the transaction preparation with [task::withdraw::status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status)
*   Cancel the transaction preparation with [task::withdraw::cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel)

Not sure if these are still active?

## Viewing Hardware Wallet Coin Balances:

*   Initialise the balance request with [task::account\_balance::init](/komodo-defi-framework/api/v20-dev/task_account_balance/#init)
*   Check the status of the balance request with [task::account\_balance::status](/komodo-defi-framework/api/v20-dev/task_account_balance/#status)

## Creating New Addresses:

# TODO: add this item back after the method is redocumented

{/* *   Use [can\_get\_new\_address](/komodo-defi-framework/api/v20-dev/hd_address_management/#can-get-new-address) to determine if your current address has been used, or should be updated. */}

*   Use [get\_new\_address](/komodo-defi-framework/api/v20-dev/hd_address_management/#get-new-address) to generate a new address

## Viewing Transaction History:

*   Transaction history using an `account_id` [my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/)
*   Transaction history using an `address_id` [my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/)

# TODO: Add hashlinks to the above methods
export const title = "Komodo DeFi Framework API RPC Protocol v2.0 (Dev)";
export const description = "Komodo DeFi Framework API now supports mmrpc 2.0 protocol format, providing a standardized format for requests, successful responses, and error responses.";

# Komodo DeFi Framework API RPC Protocol v2.0 (Dev)

Starting with version [beta-2.1.3434](https://github.com/KomodoPlatform/komodo-defi-framework/releases/tag/beta-2.1.3434), the Komodo DeFi Framework API supports the standardized protocol format called `mmrpc 2.0`.

It includes a uniform request, successful and error response formats. At the moment, only a few RPC methods support the `mmrpc 2.0` protocol.

## Request

| Structure | Type              | Description                                                                                                                                                               |
| --------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol. Must be exactly "2.0"                                                                    |
| userpass  | string (optional) | your password for protected RPC methods. Skip this field if the specified `method` is public                                                                              |
| method    | string            | the name of the method to be invoked                                                                                                                                      |
| params    | object (optional) | a structured value that holds the parameter values to be used during the invocation of the method. This field may be omitted if the method doesn't take arguments         |
| id        | number (optional) | the identifier is established by the client. Komodo DeFi Framework API will reply with the same value in the Response object if the `id` field is included and not `NULL` |

### Response (Success)

| Structure | Type              | Description                                                                                 |
| --------- | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol             |
| result    | object            | the value of this field is determined by the method invoked on Komodo DeFi Framework API    |
| id        | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### Response (Error)

| Structure    | Type              | Description                                                                                 |
| ------------ | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc        | string            | the string specifying the version of the Komodo DeFi Framework API RPC protocol             |
| error        | string            | the common error description                                                                |
| error\_path  | string            | the error path consisting of file names separated by a dot similar to JSON path notation    |
| error\_trace | string            | the error path consisting of file and line number pairs separated by ']'                    |
| error\_type  | string            | the string error identifier used to determine the cause of the error                        |
| error\_data  | object            | an object containing the error data of the corresponding `error_type`                       |
| id           | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### üìå Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "The amount 0.000005 is too small",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:301]",
  "error_type": "AmountIsTooSmall",
  "error_data": {
    "amount": "0.000005"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Initialization Tasks";
export const description = "The methods in this document allow initialization of Lightning Network on Komodo DeFi Framework.";

# Lightning Network Initialization Tasks

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Initialize Lightning {{label : 'task::enable_lightning::init', tag : 'API-v2'}}

The `task::enable_lightning::init` request a task to run a lightning node. Use the returned `task_id` as an input to check the status of the lightning node (i.e, running or still initiating). An error will be returned if a lightning node was already running for the requested ticker.

Any methods with a `task::` prefix will be linked to a numeric `task_id` value which is used to query the status or outcome of the task.

### Request Parameters

| Parameter          | Type   | Description                                                                                                                         |
| ------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                                          |
| activation\_params | object | A standard [LightningActivationParams](/komodo-defi-framework/api/common_structures/lightning/#lightning-activation-params) object. |

#### üìå Example

```json
{
  "method": "task::enable_lightning::init",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "ticker": "tBTC-lightning",
    "activation_params": {
      "name": "KomoDeFi-Docs-Node-1",
      "listening_port": 9735,
      "color": "000000",
      "payment_retries": 5
    }
  },
  "id": 2
}
```

### Response Parameters

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "task_id": 1
    },
    "id": null
}
```

#### L2ConfigIsNotFound Error

Coin is not in `coins` file. Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20-dev/lightning/#lightning-coin-config-parameters) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Layer 2 tBTC-lightning config is not found",
	"error_path": "init_l2.prelude",
	"error_trace": "init_l2:82] prelude:82]",
	"error_type": "L2ConfigIsNotFound",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

#### InvalidRequest Error

A parameter is incorrect.

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string "9735", expected u16",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:110]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string "9735", expected u16",
	"id": 762
}
```

#### UnexpectedL2Protocol Error

Coin is wrong protocol type.

```json
{
	"mmrpc": "2.0",
	"error": "Unexpected layer 2 protocol UTXO for tBTC-segwit",
	"error_path": "init_l2.prelude.lightning_activation",
	"error_trace": "init_l2:82] prelude:93] lightning_activation:92]",
	"error_type": "UnexpectedL2Protocol",
	"error_data": {
		"ticker": "tBTC-segwit",
		"protocol": {
			"type": "UTXO"
		}
	},
	"id": 2
}
```

#### Internal Error

Address already in use.

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Error",
        "details": {
            "error": "I/O error Address already in use (os error 48)",
            "error_path": "lib.lightning_activation.ln_p2p",
            "error_trace": "lib:103] lightning_activation:280] ln_p2p:196]",
            "error_type": "Internal",
            "error_data": "I/O error Address already in use (os error 48)"
        }
    },
    "id": null
}
```

#### PlatformCoinIsNotActivated Error

The selected coin is not activated. It needs to be activated before the lightning node can be initialized.

```json
{
	"mmrpc": "2.0",
	"error": "Platform coin tBTC-lightning is not activated",
	"error_path": "init_l2.lp_coins",
	"error_trace": "init_l2:87] lp_coins:3087]",
	"error_type": "PlatformCoinIsNotActivated",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1197550229](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1197550229)
Another bug found, will fix it in an upcoming PR. Platform coin should be tBTC-segwit. You can leave as it is in docs until I fix it.

#### InvalidPlatformConfiguration Error

Coin's configuration is missing a required parameter.  Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20-dev/lightning/#lightning-network-coins-file-configuration) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Invalid config for platform coin: tBTC-segwit, error: 'avg_blocktime' field is not found in platform coin config",
	"error_path": "init_l2.lightning_activation",
	"error_trace": "init_l2:95] lightning_activation:254]",
	"error_type": "InvalidPlatformConfiguration",
	"error_data": {
		"platform_coin_ticker": "tBTC-segwit",
		"err": "'avg_blocktime' field is not found in platform coin config"
	},
	"id": 2
}
```

## Initialization Status {{label : 'task::enable_lightning::status', tag : 'API-v2'}}

The `task::enable_lightning::status` request checks the status of lightning node initialization.

### Request Parameters

| Parameter            | Type    | Description                                                                                                                 |
| -------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------- |
| task\_id             | integer | The task id returned from `task::enable_lightning::init`                                                                    |
| forget\_if\_finished | boolean | Optional, defaults to `true`. If `false`, the status of the `task_id` will still be available after the task has completed. |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::status",
  "params": {
    "task_id": 1,
    "forget_if_finished": false
  },
  "id": 2
}
```

### Response Parameters

| Parameter      | Type   | Description                                                                    |
| -------------- | ------ | ------------------------------------------------------------------------------ |
| platform\_coin | string | The coin ticker for which the lightning node is being intitialized.            |
| address        | string | This node's address for the activated coin.                                    |
| balance        | object | A standard [BalanceInfo](/komodo-defi-framework/api/v20/#balance-info) object. |

The unspendable balance for lightning is different to a layer-1 unspendable balance. The channel reserve is part of the unspendable balance in lightning - the user will get this part of the balance on chain when closing the channel, but it can't be spent on layer 2 (lightning) because it's part of the security mechanism to prevent channel breaches and ensure that both parties fulfill their obligations within the channel.

#### Response (ready, success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "platform_coin": "BTC-segwit",
            "address": "0321937a095229510bd2b02a930d7b7eb273147e348ef1086b22e8790e3c609804",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

In the above response spendable will always be 0 since the balance is unspendable until connections with lightning channels counterparties are established.
Using the [my\_balance](/komodo-defi-framework/api/legacy/my_balance/) method after the coin is activated will get the spendable balance depending on how many channel counterparties are online.
For exact channels balances and which channels are usable, use [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-open-channels-by-filter).

#### Response (in progress state)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "InProgress",
        "details": "ReadingNetworkGraphFromFile"
    },
    "id": null
}
```

Possible in progress statuses:

*   ActivatingCoin
*   GettingFeesFromRPC
*   ReadingNetworkGraphFromFile
*   InitializingChannelManager
*   InitializingPeerManager
*   ReadingScorerFromFile
*   InitializingBackgroundProcessor
*   ReadingChannelsAddressesFromFile

## Cancel Initialization {{label : 'task::enable_lightning::cancel', tag : 'API-v2'}}

The `task::enable_lightning::cancel` request cancels lightning node initialization.

### Request Parameters

| Parameter | Type    | Description                                              |
| --------- | ------- | -------------------------------------------------------- |
| task\_id  | integer | The task id returned from `task::enable_lightning::init` |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::cancel",
  "params": {
    "task_id": 1
  },
  "id": 1
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": "success",
    "id": null
}
```

#### TaskFinished Error

Task has already been completed.

```json
{
    "mmrpc": "2.0",
    "error": "Task is finished already",
    "error_path": "init_l2.manager",
    "error_trace": "init_l2:157] manager:104]",
    "error_type": "TaskFinished",
    "error_data": 3,
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Channels";
export const description = "The methods in this document allow management of Lightning Network Channels on Komodo DeFi Framework.";

# Lightning Network Channels

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Open Channel {{label : 'lightning::channels::open_channel', tag : 'API-v2'}}

The `lightning::channels::open_channel` method opens a new channel with a remote node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                                                                                                                                                                                                                                           |
| ---------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | The ticker of the coin you would like to open a channel for.                                                                                                                                                                                                                                                                                                                          |
| node\_address    | string  | Lightning node addresses always have a format of `node_pubkey`@`ip_address`:`port`.                                                                                                                                                                                                                                                                                                   |
| amount           | object  | A standard [LightningChannelAmount](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-amount) object.                                                                                                                                                                                                                                                         |
| push\_msat       | integer | Optional. The amount in millisatoshi to push to the counterparty while openning, to create inbound liquidity for the channel. Using the `push_msat` parameter avoids having to send funds in a separate request later. Please note that the funds given using push\_msat is given unconditionally, meaning that there is no proof of payment in a preimage as with paying an invoice. |
| channel\_options | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                                                             |
| channel\_configs | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                                                               |

#### üìå Example using an exact amount

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Exact",
      "value": 0.004
    }
  },
  "id": 22
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@233.112.95.142:9735"
	},
	"id": 22
}
```

#### üìå Example using max available with channel options and configs

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Max"
    },
    "push_msat": 0,
    "channel_options": {
      "proportional_fee_in_millionths_sats": 0,
      "base_fee_msat": 1000,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    },
    "channel_configs": {
      "counterparty_locktime": 144,
      "our_htlc_minimum_msat": 1,
      "negotiate_scid_privacy": false,
      "max_inbound_in_flight_htlc_percent": 10,
      "commit_upfront_shutdown_pubkey": true,
      "inbound_channels_confirmations": 3,
      "their_channel_reserve_sats": 10000
    }
  },
  "id": null
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
	},
	"id": null
}
```

## Close Channel {{label : 'lightning::channels::close_channel', tag : 'API-v2'}}

The `lightning::channels::close_channel` method closes a channel with a remote node.

### Request Parameters

| Parameter    | Type    | Description                                                                  |
| ------------ | ------- | ---------------------------------------------------------------------------- |
| coin         | string  | The ticker of the coin you would like to close a channel for.                |
| uuid         | string  | Unique channel identifier.                                                   |
| force\_close | boolean | Optional, defaults to `false`. If `true`, will force closure of the channel. |

It is not recommended to force close a channel unless the counterparty is offline or unreachable for a long time.
Force closure of a channel will makeresult in the party who initiates the force closure to wait for a number of blocks (equal to the `force_close_spend_delay` value returned by [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details)) before they can get their funds on chain.

#### üìå Example to force closing a channel

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::close_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
    "force_close": true
  },
  "id": 8
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": "Initiated closing of channel with uuid: 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

To see if the channel is closed or not, use the [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details) method.

Already added this message to the response in this upcoming PR KomodoPlatform/komodo-defi-framework#1814, also added force\_close\_spend\_delay to the close channel response. No need to change the docs now until this PR is merged KomodoPlatform/komodo-defi-framework#1814, I will write a comment about all the changes when opening the PR for review.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1202462310](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1202462310)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `uuid`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `uuid`",
	"id": 8
}
```

#### NoSuchChannel Error

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"error_path": "close_channel",
	"error_trace": "close_channel:55]",
	"error_type": "NoSuchChannel",
	"error_data": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

## Update Channel {{label : 'lightning::channels::update_channel', tag : 'API-v2'}}

The `lightning::channels::update_channel` method updates channel options.

### Request Parameters

| Parameter        | Type   | Description                                                                                                                     |
| ---------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string | The ticker of the coin you would like to update channel configuration options for.                                              |
| uuid             | string | Unique channel identifier.                                                                                                      |
| channel\_options | object | A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object. |

#### üìå Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::update_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
    "channel_options": {
      "proportional_fee_in_millionths_sats": 1,
      "base_fee_msat": 1100,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    }
  },
  "id": 2
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"channel_options": {
			"proportional_fee_in_millionths_sats": 1,
			"base_fee_msat": 1100,
			"cltv_expiry_delta": 72,
			"max_dust_htlc_exposure_msat": 5000000,
			"force_close_avoidance_max_fee_sats": null
		}
	},
	"id": 2
}
```

#### NoSuchChannel Error

Channel with the given uuid is not foun on the lightning network.

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid dc33b998-8589-44fd-a246-256a582e8942",
	"error_path": "update_channel",
	"error_trace": "update_channel:61]",
	"error_type": "NoSuchChannel",
	"error_data": "dc33b998-8589-44fd-a246-256a582e8942",
	"id": 2
}
```

## Get Channel Details {{label : 'lightning::channels::get_channel_details', tag : 'API-v2'}}

The `lightning::channels::get_channel_details` method returns details about a channel.

### Request Parameters

| Parameter | Type   | Description                                                        |
| --------- | ------ | ------------------------------------------------------------------ |
| coin      | string | The ticker of the coin you would like to view channel details for. |
| uuid      | string | Unique channel identifier.                                         |

#### üìå Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_channel_details",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92"
  },
  "id": 54
}
```

The response will vary depending on whether the channel status is `open` or `closed`.

#### Response (opened channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 959722,
			"is_outbound": true,
			"balance_msat": 959722000,
			"outbound_capacity_msat": 950125000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": 3,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}
	},
	"id": 54
}
```

`force_close_spend_delay` is not currently available in get\_channel\_details response, but should be added soon.
It's configured by the other side using counterparty\_locktime where we are the counterparty to the other side, the other side gets to set it since it's part of their security considerations since they have to be online at least once during this period if we tried to steal funds by broadcasting an old commitment transaction. We set our own too in our configs where it shows in the channel details of the other side as force\_close\_spend\_delay. The other side can't set counterparty\_locktime to any value when opening the channel though, since they can set it to a very long time and our funds will be locked for a very long time if we force closed the channel, this is where counterparty\_channel\_config\_limits::our\_locktime\_limit comes in as the other side can't make counterparty\_locktime larger than this limit otherwise the channel gets rejected and is never opened in the first place.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206109172](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206109172)

#### Response (closed channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_value": "98982",
			"closing_tx": "f1591864ad0e2c0bad060425a94b8288646e6d24f56b6d2db42d4636aba64612",
			"closure_reason": "null",
			"claiming_tx": "null",
			"claimed_balance": "null",
			"funding_generated_in_block": "null",
			"is_outbound": false,
			"is_public": true,
			"is_closed": true,
			"created_at": 167273496966,
			"closed_at": 171069595935
		}
	},
	"id": 54
}
```

The closed response above was spoofed, so the values are not accurate. Once code is finalised we should generate a real one.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206150595](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206150595)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `coin`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `coin`",
	"id": 54
}
```

## Get Claimable Balances {{label : 'lightning::channels::get_claimable_balances', tag : 'API-v2'}}

The `lightning::channels::get_claimable_balances` method returns a list of claimable balances for a coin.

### Request Parameters

| Parameter                         | Type    | Description                                                                     |
| --------------------------------- | ------- | ------------------------------------------------------------------------------- |
| coin                              | string  | The ticker of the coin you would like to view claimable balances for.           |
| include\_open\_channels\_balances | integer | Optional, defaults to `false`. If `true`, includes balances from open channels. |

#### üìå Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_claimable_balances",
  "params": {
    "coin": "tBTC-lightning",
    "include_open_channels_balances": true
  },
  "id": 762
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": [{
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 0
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 38815
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 959539
		}
	}],
	"id": 762
}
```

This response may include additional information in future.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206152132](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206152132)

## List Open Channels by Filter  {{label : 'lightning::channels::list_open_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_open_channels_by_filter` method returns a list of open channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                              |
| --------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view open channels for.                                                                         |
| filter          | object  | A standard [LightningOpenChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-open-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                      |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                         |

#### üìå Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": null,
			"funding_tx_output_index": null,
			"funding_tx_value_sats": 4000,
			"is_outbound": true,
			"balance_msat": 4000000,
			"outbound_capacity_msat": 4000000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": null,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### üìå Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "is_outbound": false
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### üìå Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1"
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### üìå Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 1000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}, {
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 2,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

## List Closed Channels by Filter  {{label : 'lightning::channels::list_closed_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_closed_channels_by_filter` method returns a list of closed channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                                  |
| --------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view closed channels for.                                                                           |
| filter          | object  | A standard [LightningClosedChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-closed-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                          |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                             |

#### üìå Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		},
        {
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": true,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### üìå Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "channel_type": "Inbound"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": false,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### üìå Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### üìå Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 100000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "f901b604-54f7-4094-80f7-86aa9e362343",
			"channel_id": "20aae008973fad5a59559ac0650143ec5b53aba1c6584d3d92177491a8284d00",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "3807d9353557d15ad46e90a68dab8e4cd3a68a4af6b61bc7414bf81e29bc0517",
			"funding_value": 40000,
			"closing_tx": "61575237132b78aa5d1b4d62137da316bc67d09804b0bee53ab50f5d7cd0337c",
			"closure_reason": "Channel closed because the channel was cooperatively closed",
			"funding_generated_in_block": 2433122,
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1684083341,
			"closed_at": 1684146940
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 762
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Methods";
export const description =
  "This document describes all the available methods for the Lightning Network on Komodo DeFi Framework.";

import lightningflowchart from "@/public/images/docs/api-images/lightning-methods.png";

# Lightning Network Methods

Lightning methods are currently only available using the native Komodo DeFi Framework.
WASM support should be available in late 2023.

## Lightning Network Initialization Tasks

*   Initialise your lightning node with [task::enable\_lightning::init](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialize-lightning)
*   Check the initialization status of the lightning node with [task::enable\_lightning::status](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialization-status)
*   Cancel initialization process of the lightning node with [task::enable\_lightning::cancel](/komodo-defi-framework/api/v20-dev/lightning/activation/#cancel-initialization)

Any methods with a `task::` prefix will be linked to a numeric `task_id` value
which is used to query the status or outcome of the task.

## Lightning Network Nodes Methods

*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#connect-to-node)
*   Add a trusted node with [lightning::nodes::add\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#add-trusted-node)
*   Remove a trusted node with [lightning::nodes::remove\_trusted\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#remove-trusted-node)
*   List your trusted lightning nodes with [lightning::nodes::list\_trusted\_nodes](/komodo-defi-framework/api/v20-dev/lightning/nodes/#list-trusted-nodes)

## Lightning Network Channels Methods

*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel)
*   Close a lightning channel [lightning::channels::close\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#close-channel)
*   Update a lightning channel [lightning::channels::update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel)
*   Get details about a lightning channel [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-channel-details)
*   Get claimable balances from lightning channels [lightning::channels::get\_claimable\_balances](/komodo-defi-framework/api/v20-dev/lightning/channels/#get-claimable-balances)
*   List open lightning channels matching a filter [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-open-channels-by-filter)
*   List closed lightning channels matching a filter [lightning::channels::list\_closed\_channels\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/channels/#list-closed-channels-by-filter)

## Lightning Network Payments Methods

*   Generate lightning invoices with [lightning::payments::generate\_invoice](/komodo-defi-framework/api/v20-dev/lightning/payments/#generate-invoice)
*   Send lightning payments with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20-dev/lightning/payments/#send-payment)
*   Get details about a lightning payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20-dev/lightning/payments/#get-payment-details)
*   Get a filtered list of lightning payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/payments/#list-payments-by-filter)

## Lightning Network Flowchart

Once you:

*   Enable lightning with [task::enable\_lightning::init](/komodo-defi-framework/api/v20-dev/lightning/activation/#initialize-lightning)
*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20-dev/lightning/nodes/#connect-to-node)
*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel)

You can get an invoice for a coffee from [https://starblocks.acinq.co](https://starblocks.acinq.co)!

Then you can:

*   Pay the invoice with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20-dev/lightning/payments/#send-payment)
*   View details about the payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20-dev/lightning/payments/#get-payment-details)
*   List your payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20-dev/lightning/payments/#list-payments-by-filter)

Follow the flowchart below to visualize the process:

## Lightning Network Coins File Configuration

Some configurations are set per coin, and some are set per channel. The
[counterparty\_channel\_config\_limits](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config)
param must be set in the `coins` configuration file, and aplies to all
channels opened by counterparty nodes. The
[our\_channels\_config](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) and
[channel\_options](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) parameters
are set per channel. These can be defined in the `coins` configuration file to
act as the default for all opened channels, and optionally overwritten or
updated using the
[open\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#open-channel) or
[update\_channel](/komodo-defi-framework/api/v20-dev/lightning/channels/#update-channel)
methods.

### Lightning Coin Config Parameters

| Parameter                             | Type    | Description                                                                                                                                                                                                                                                                                                                                    |
| ------------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                                  | object  | The ticker of the coin you will use lightning network with, suffixed with `-lightning`                                                                                                                                                                                                                                                         |
| mm2                                   | integer | Defaults to `0`. A value of `1`, indicates the coin is atomic swap compatible.                                                                                                                                                                                                                                                                 |
| decimals                              | integer | The decimal precision of the coin you will use the lightning network with.                                                                                                                                                                                                                                                                     |
| protocol                              | object  | A standard [CoinProtocol](/komodo-defi-framework/api/common_structures/activation/#coin-protocol) object.                                                                                                                                                                                                                                      |
| accept\_inbound\_channels             | boolean | Optional, defaults to `true`. If this is set to false, we do not accept inbound requests to open a new channel.                                                                                                                                                                                                                                |
| accept\_forwards\_to\_priv\_channels  | boolean | Optional, defaults to `false`. When set to `false`, any HTLCs which were to be forwarded over private channels will be rejected. This prevents us from taking on HTLC-forwarding risk when we intend to run as a node which is not online reliably (e.g. GUI wallet apps). Generally, private channels are used for non-routing purposes only. |
| counterparty\_channel\_config\_limits | object  | Optional. A standard [CounterpartyChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config) object.                                                                                                                                                                                                  |
| channel\_options                      | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                      |
| our\_channels\_config                 | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                        |

For GUIs and wallet apps, it is recommended to set
`accept_forwards_to_priv_channels` to `false`. This prevents users from taking
on HTLC-forwarding risk when a node is expected to not be reliably online.
[our\_channels\_config::announced\_channel](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options)
should also be set to `false` for GUIs and wallet apps.

```json
  {
    "coin": "BTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_config": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90
    },
    "counterparty_channel_config_limits": {
        "outbound_channels_confirmations": 3,
        "force_announced_channel_preference": false
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "BTC-segwit",
            "network": "mainnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
  {
    "coin": "tBTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_configs": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90,
        "their_channel_reserve_sats": 10000
    },
    "counterparty_channel_config_limits": { 
        "outbound_channels_confirmations": 3
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "tBTC-segwit",
            "network": "testnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
```
export const title = "Komodo DeFi Framework Method: Lightning Network Nodes";
export const description = "The methods in this document allow management of connections to Lightning Network Nodes on Komodo DeFi Framework.";

# Lightning Network Nodes

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Connect to Node {{label : 'lightning::nodes::connect_to_node', tag : 'API-v2'}}

The `lightning::nodes::connect_to_node` method allows you to connect to a lightning node.

### Request Parameters

| Parameter     | Type   | Description                                                                         |
| ------------- | ------ | ----------------------------------------------------------------------------------- |
| coin          | string | The coin ticker you would like to connect to a node on.                             |
| node\_address | string | Lightning nodes addresses always have a format of `node_pubkey`@`ip_address`:`port` |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::connect_to_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
  },
  "id": 1
}
```

The node address in the above request is for the WalletOfSatoshi lightning node, which is one of the most connected lightning nodes.
Other node addresses can be retrieved from any lightning explorer, such as:

*   [https://1ml.com/](https://1ml.com/)
*   [https://mempool.space/lightning/](https://mempool.space/lightning/)

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": "Connected successfully to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### Response (already connected)

```json
{
    "mmrpc": "2.0",
    "result": "Already connected to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### InvalidRequest Error (Invalid node\_address)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: Could not parse node address from str rgjhk3",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "Could not parse node address from str rgjhk3",
	"id": 762
}
```

#### ConnectionError Error (Timed out waiting to connect to node\_address)

```json
{
    "mmrpc": "2.0",
    "error": "Error connecting to node: Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "error_path": "connect_to_node",
    "error_trace": "connect_to_node:78]",
    "error_type": "ConnectionError",
    "error_data": "Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "id": null
}
```

## List Trusted Nodes {{label : 'lightning::nodes::list_trusted_nodes', tag : 'API-v2'}}

The `lightning::nodes::list_trusted_nodes` method allows you to list all nodes in your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to view your trusted nodes to. |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::list_trusted_nodes",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"trusted_nodes": ["038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"]
	},
	"id": 1
}
```

## Add Trusted Node {{label : 'lightning::nodes::add_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::add_trusted_node` method allows you to add a node to your trusted list.

### Request Parameters

| Parameter | Type   | Description                                               |
| --------- | ------ | --------------------------------------------------------- |
| coin      | string | The coin ticker you would like to add a trusted node for. |
| node\_id  | string | ID of node you would like to add to your trusted list.    |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::add_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"added_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```

## Remove Trusted Node {{label : 'lightning::nodes::remove_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::remove_trusted_node` method allows you to remove a node from your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to remove a trusted node from. |
| node\_id  | string | ID of node you would like to remove from your trusted list.   |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::remove_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"removed_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Payments";
export const description = "The methods in this document allow management of Lightning Network Payments on Komodo DeFi Framework.";

# Lightning Network Payments

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Generate invoice {{label : 'lightning::payments::generate_invoice', tag : 'API-v2'}}

The `lightning::payments::generate_invoice` method generates an invoice to be paid by another node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                |
| ---------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | Ticker of coin to generate invoice for.                                                                                                                    |
| description      | string  | A note to indicate the purpose of the invoice.                                                                                                             |
| amount\_in\_msat | integer | Amount to be paid, in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter) (A thousandth of a satoshi; the same as 0.00000000001 bitcoin.) |
| expiry           | integer | Optional, defaults to `3600`. Seconds until the invoice expires.                                                                                           |

#### üìå Example

```json
{
  "method": "lightning::payments::generate_invoice",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "description": "For the burger on Tuesday",
    "amount_in_msat": 10000,
    "expiry": 600
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
		"invoice": "lntb100n1pj9aq73dpggehhygr5dpjjqcn4wfnk2u3qdahzq4r4v4ekgctenp4qf3dqylh55jd8m5x5hh0g5q82h9p86yghwhl2s0t826nlyp8zdgjzpp58leevp0jzjjtg9vln385fj2duw388ucqqsk2rzmuk0tz7fc2n67qsp5k33rvvq46xtuppl22ggcq5q7qqywyekcemhzazt4m6vulwsarcrq9qyysgqcqpcxqzjcrzjqwyx8nu2hygyvgc02cwdtvuxe0lcxz06qt3lpsldzcdr46my5epmjfgaasqqqvqqqqqqqqlgqqqqqqgq9qpwesnhre7xmdg6tajvp939vl72vxm8csecy6hfcah9fzgazd5eyzjskgtt7u9xshj7gq2vkejjcquem08tqfrc2pj78xa95teazzf0qq7pnyqj"
	},
	"id": 1
}
```

### InvalidRequest (invalid paramater value)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string '56', expected u64",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string '56', expected u64",
	"id": 762
}
```

## Send Payment {{label : 'lightning::payments::send_payment', tag : 'API-v2'}}

The `lightning::payments::send_payment` method sends a payment to another node.

Used to pay an invoice or send a payment via pubkey/address.

### Request Parameters

| Parameter | Type   | Description                                                                                                      |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------- |
| type      | string | Ticker of the coin to query.                                                                                     |
| payment   | object | A standard [LightningPayment](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment) object. |

#### üìå Example using `invoice`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "invoice",
      "invoice": "lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y"
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb"
	},
	"id": 762
}
```

#### üìå Example using `keysend`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "keysend",
      "destination": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
      "amount_in_msat": 1000,
      "expiry": 24
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "2620d47033fd366bff40cfe0879c47f683ef66c3882d0fab88a9bc72b5499655"
	},
	"id": 762
}
```

### PaymentError (attempt to pay self)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:231]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"id": 6
}
```

### PaymentError (no outbound routes)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"id": 762
}
```

### PaymentError (keysend - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:107] lightning:256]",
	"error_type": "PaymentError",
	"error_data": "Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"id": 762
}
```

### PaymentError (invoice - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"id": 762
}
```

### InvalidRequest (request is missing a required field)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `payment`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `payment`",
	"id": 762
}
```

### InvalidRequest (A required field is invalid)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: ParseError(Bech32Error(MissingSeparator))",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "ParseError(Bech32Error(MissingSeparator))",
	"id": 762
}
```

## Get Payment Details {{label : 'lightning::payments::get_payment_details', tag : 'API-v2'}}

The `lightning::payments::get_payment_details` method returns details about a lightning payment from a given `payment_hash`.

### Request Parameters

| Parameter     | Type   | Description                                                                                                                                                                                                                                                                          |
| ------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin          | string | Ticker of the coin to query.                                                                                                                                                                                                                                                         |
| payment\_hash | string | The hexidecimal string which identifies a invoice. The payment\_hash is returned from a `lightning::payments::send_payment` request if the payment was sent by us, or from a `lightning::payments::generate_invoice` request if the payment is received (or will be received) by us. |

#### üìå Example

```json
{
  "method": "lightning::payments::get_payment_details",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "payment_hash": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e"
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_details": {
			"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb",
			"payment_type": {
				"type": "Outbound Payment",
				"destination": "0348cc1a9479697cd52db445ea74149ad40bb01bb2045a3e8acba21b70f94ab7cf"
			},
			"description": "1 Blokaccino",
			"amount_in_msat": 1000000,
			"fee_paid_msat": 1803,
			"status": "succeeded",
			"created_at": 1684081413,
			"last_updated": 1684081419
		}
	},
	"id": 762
}
```

### NoSuchPayment (payment hash not found)

```json
{
	"mmrpc": "2.0",
	"error": "Payment with hash: 414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e is not found",
	"error_path": "get_payment_details",
	"error_trace": "get_payment_details:75]",
	"error_type": "NoSuchPayment",
	"error_data": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e",
	"id": 762
}
```

### InvalidRequest (payment\_hash not a hash string)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid value: string '', expected a hash string",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid value: string '', expected a hash string",
	"id": 762
}
```

## List Payments by Filter {{label : 'lightning::payments::list_payments_by_filter', tag : 'API-v2'}}

The `lightning::payments::list_payments_by_filter` method returns a list of payments (sent and/or received) for a coin which match the given filter.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                             |
| --------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | Ticker of the coin to query.                                                                                                            |
| filter          | object  | Optional. A standard [LightningPaymentFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                     |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                        |

#### üìå Example without filter

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "59175643db24fc79c77da073994d596444b6909fb2d452bde662ae386115c758",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683917593,
			"last_updated": 1683917593
		}, {
			"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "A 1:24 scale model of a 1981 DeLorean DMC-12",
			"amount_in_msat": 88000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1683714225,
			"last_updated": 1683805721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "ACME shrink ray",
			"amount_in_msat": 4000012,
			"status": "succeeded",
			"created_at": 1683814625,
			"last_updated": 1683815321
		}],
		"limit": 10,
		"skipped": 0,
		"total": 6,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### üìå Example for Inbound Payment `payment_type`, `limit` and `pagination`

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "payment_type": {
        "type": "Inbound Payment"
      }
    },
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}, {
			"payment_hash": "605f214a4b4b159f9c4f44c94de3a273f3ff39300042ca18b7cbb4159f3d62f2",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "14 pallets of frozen spinach",
			"amount_in_msat": 56005000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}],
		"limit": 2,
		"skipped": 2,
		"total": 7,
		"total_pages": 4,
		"paging_options": {
			"PageNumber": 2
		}
	},
	"id": 1
}
```

#### üìå Example for `pending` payments between 10000 and 40000 millisatoshis

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "pending",
      "from_amount_msat": 10000,
      "to_amount_msat": 40000
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### üìå Example for successful payments on the 20th of April 2023

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "succeeded",
      "from_timestamp": 1681948800,
      "to_timestamp": 1682035199
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1681998480,
			"last_updated": 1682008491
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Max Maker Vol";
export const description =
  "The max_maker_vol method returns the maximum volume of a coin which can be used to create a maker order.";

# max\_maker\_vol

The `max_maker_vol` method returns the maximum volume of a coin which can be used to create a maker order (taking into account estimated fees). If the coin is not activated, a `NoSuchCoin` error will be returned.

#### Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter         | Type   | Description                                                                                                                                                                                    |
| ----------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin              | string | The ticker of the coin you queried.                                                                                                                                                            |
| volume            | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable maker volume.                                           |
| balance           | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable taker balance.                                          |
| locked\_by\_swaps | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the volume of a coin's balance which is locked by swaps in progress. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "max_maker_vol",
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "MARTY",
    "volume": {
      "decimal": "4.489763268712998712998712998712998712998712998712998712998712998712998712998712998712998712998712999",
      "rational": [
        [1, [962255003, 81]],
        [1, [390588672, 18]]
      ],
      "fraction": {
        "numer": "348854605979",
        "denom": "77700000000"
      }
    },
    "balance": {
      "decimal": "5.49110027",
      "rational": [
        [1, [549110027]],
        [1, [100000000]]
      ],
      "fraction": {
        "numer": "549110027",
        "denom": "100000000"
      }
    },
    "locked_by_swaps": {
      "decimal": "1.001317001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001",
      "rational": [
        [1, [77802331]],
        [1, [77700000]]
      ],
      "fraction": {
        "numer": "77802331",
        "denom": "77700000"
      }
    }
  },
  "id": null
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin TIME",
  "error_path": "max_maker_vol_rpc.lp_coins",
  "error_trace": "max_maker_vol_rpc:140] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": null
}
```

#### Response (balance too low)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough QTUM for swap: available 0, required at least 0.000728, locked by swaps None",
  "error_path": "max_maker_vol_rpc.maker_swap.utxo_common",
  "error_trace": "max_maker_vol_rpc:148] maker_swap:2203] utxo_common:3327] utxo_common:892]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "QTUM",
    "available": "0",
    "required": "0.000728"
  },
  "id": null
}
```

#### Response (Transport error)

```json
{
  "mmrpc": "2.0",
  "error": "Transport error: JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "error_path": "taker_swap.utxo_common",
  "error_trace": "taker_swap:1599] utxo_common:1990] utxo_common:166]",
  "error_type": "Transport",
  "error_data": "JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the clear_nft_db method Komodo DeFi Framework  provides to clear NFT data from your local database";

# Clear NFT Database {{label : 'clear_nft_db', tag : 'API-v2'}}

This method will clear the NFT database data stored in the local database for selected (or all) networks.

### Request Parameters

| Parameter  | Type    | Description                                                                                                        |
| ---------- | ------- | ------------------------------------------------------------------------------------------------------------------ |
| clear\_all | boolean | Defaults to `false`. If `true` all NFT data for all networks will be purged.                                       |
| chains     | array   | Optional. List of networks to remove NFT data for. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`. |

You can confirm the NFT database has been cleared by querying the `KOMODEFI.db` database file.
For more information, refer to the [Query NFT Database Tables](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/query_nft_database_tables/) documentation.

#### üìå Example to clear Binance Smart chain and Polygon NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON",
      "BSC"
    ]
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

#### üìå Example to clear all NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "clear_all": true
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

### Error responses

#### UnsupportedChainType

Returned when the `chains` parameter contains an unsupported network.

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: UnsupportedChainType",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:110]",
    "error_type": "InvalidRequest",
    "error_data": "UnsupportedChainType",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Get NFT List";
export const description =
  "This document describes all the get_nft_list method Komodo DeFi Framework  provides to get a list of your wallets NFTs";

# Get a list of NFTs {{label : 'get_nft_list', tag : 'API-v2'}}

Returns a list of the NFTs owned by the user, shown in descending order of the `block_number` value (the block height when the amount or owner changed). If the request is for NFTs on more than one chain, this means that the order may not be chronological. In the case of ERC1155 tokens, the `block_number` will update when additional NFTs are received or when all NFTs are withdrawn, but will generally remain the same if only some NFTs are withdrawn.

Before using this method, you must first call the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                      |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFTs without pagination, and will ignore the `limit` and `page_number` values.                       |
| limit               | integer | Optional, defaults to `10`. The number of NFTs displayed per page in response.                                                                                          |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-filter) object.                                                                 |

### Response Parameters

| Parameter | Type            | Description                                                                                        |
| --------- | --------------- | -------------------------------------------------------------------------------------------------- |
| nfts      | list of objects | A list of standard [NftInfo](/komodo-defi-framework/api/common_structures/nfts/#nft-info) objects. |
| skipped   | integer         | The number of NFTs in your wallet excluded by the request filters.                                 |
| total     | integer         | The total number of NFTs in your wallet matching the request filters.                              |

#### üìå Example with no optional params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ]
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "BSC",
        "token_address": "0x5c7d6712dfaf0cb079d48981781c8705e8417ca0",
        "token_id": "0",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "b34ddf294013d20a6d70691027625839",
        "block_number_minted": 25465916,
        "block_number": 25919780,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://tikimetadata.s3.amazonaws.com/tiki_box.json",
        "token_domain": "tikimetadata.s3.amazonaws.com",
        "metadata": "{\"name\":\"Tiki box\",\"description\":\"Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!\",\"external_url\":\"\",\"image\":\"https://tikimetadata.s3.amazonaws.com/tiki_box.png\",\"attributes\":[{\"trait_type\":\"Crypto Logo\",\"value\":\"TIKI NFT CRYPTOLOGO SCAR\"}],\"properties\":{\"category\":\"image\",\"creators\":[]}}",
        "last_token_uri_sync": "2023-02-07T17:10:08.402Z",
        "last_metadata_sync": "2023-02-07T17:10:16.858Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_url": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_domain": "tikimetadata.s3.amazonaws.com",
          "name": "Tiki box",
          "description": "Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!",
          "attributes": [
            {
              "trait_type": "Crypto Logo",
              "value": "TIKI NFT CRYPTOLOGO SCAR"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "",
          "external_domain": null,
          "image_details": null
        }
      },
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 2
  },
  "id": null
}
```

#### üìå Example with optional limit & page\_number params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "limit": 1,
    "page_number": 2
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 1,
    "total": 1
  },
  "id": null
}
```

#### üìå Example with optional spam protection

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "protect_from_spam": true,
    "filters": {
      "exclude_spam": true,
      "exclude_phishing": true
    }
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```

### üìå Error responses

#### Unsupported Chain Type

The supported chains are

```json
{
  "mmrpc":"2.0",
  "error":"Error parsing request: UnsupportedChainType",
  "error_path":"dispatcher",
  "error_trace":"dispatcher:109]",
  "error_type":"InvalidRequest",
  "error_data":"UnsupportedChainType",
  "id":null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_metadata method Komodo DeFi Framework  provides to get metadata for your NFTs";

# Get NFT Metadata {{label : 'get_nft_metadata', tag : 'API-v2'}}

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain               | string  | The token chain.                                                                                                                                                        |
| token\_address      | string  | The token address.                                                                                                                                                      |
| token\_id           | string  | Token ID.                                                                                                                                                               |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |

### Response Parameters

| Parameter              | Type    | Description                                                                                                                                                           |
| ---------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount                 | string  | The amount of this NFT the user owns (used by `ERC1155`).                                                                                                             |
| block\_number\_minted  | integer | The block height when the NFT was minted. May be `null`.                                                                                                              |
| block\_number          | integer | The block height when the amount or owner changed.                                                                                                                    |
| chain                  | string  | Chain name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| name                   | string  | May be `null`. An NFT collection name.                                                                                                                                |
| contract\_type         | string  | The type of NFT contract standard. One of `ERC721` or `ERC1155`.                                                                                                      |
| last\_token\_uri\_sync | string  | When the token\_uri was last updated.                                                                                                                                 |
| last\_metadata\_sync   | string  | When the metadata was last updated.                                                                                                                                   |
| metadata               | string  | The metadata of the token. May be `null`.                                                                                                                             |
| minter\_address        | string  | Minter address. May be `null`.                                                                                                                                        |
| owner\_of              | string  | The wallet address of the owner of the NFT.                                                                                                                           |
| possible\_spam         | boolean | If `true`, the contract address has [been identified](https://docs.moralis.io/web3-data-api/evm/nft-spam-detection) as associated with spam or suspicious activities. |
| possible\_phishing     | boolean | If `true`, the token has been identified as associated with phishing, as at least one of domain fields is found in database with phishing domains.                    |
| symbol                 | string  | May be `null`. The symbol of the NFT contract.                                                                                                                        |
| token\_address         | string  | The address of the NFT contract.                                                                                                                                      |
| token\_id              | string  | The token ID of the NFT.                                                                                                                                              |
| token\_hash            | string  | The token hash. May be `null`.                                                                                                                                        |
| token\_uri             | string  | The URI to the metadata of the token. May be `null`.                                                                                                                  |
| token\_domain          | string  | Token domain. May be `null`.                                                                                                                                          |
| uri\_meta              | object  | A standard [NftMetadata](/komodo-defi-framework/api/common_structures/nfts/#nft-metadata) object.                                                                     |

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
    "token_id": "214300044414",
    "chain": "BSC"
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "amount": "1",
      "owner_of": "0xab95d01bc8214e4d993043e8ca1b68db2c946498",
      "token_hash": "af811b641bccbdc10c444ba4f3a2ffb5",
      "name": "OpenSea Collections",
      "symbol": "OPENSTORE",
      "token_uri": "https://api.opensea.io/api/v2/metadata/matic/0x2953399124F0cBB46d2CbACD8A89cF0599974963/0xf43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710",
      "token_domain": "api.opensea.io",
      "metadata": "{\"image\":\"https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format\",\"name\":\"Doge Napoleon\",\"description\":null,\"external_link\":null,\"animation_url\":\"https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4\",\"traits\":[]}",
      "last_token_uri_sync": "2023-09-01T04:04:30.867Z",
      "last_metadata_sync": "2023-09-01T04:35:01.128Z",
      "minter_address": "ERC1155 tokens don't have a single minter",
      "possible_spam": true,
      "chain": "POLYGON",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "block_number_minted": 19645247,
      "block_number": 45776404,
      "contract_type": "ERC1155",
      "possible_phishing": false,
      "uri_meta": {
          "image": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_url": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_domain": "i.seadn.io",
          "name": "Doge Napoleon",
          "description": null,
          "attributes": null,
          "animation_url": "https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4",
          "animation_domain": "openseauserdata.com",
          "external_url": null,
          "external_domain": null,
          "image_details": null
      }
  },
  "id": null
}
```

## Error responses

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f81, token_id 214300044414 was not found in wallet",
    "error_path": "nft",
    "error_trace": "nft:123]",
    "error_type": "TokenNotFoundInWallet",
    "error_data": {
        "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
        "token_id": "214300044414"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_transfers method Komodo DeFi Framework  provides to get information about your NFT transactions";

# Get a list of NFT transfers {{label : 'get_nft_transfers', tag : 'API-v2'}}

Returns a list of the NFT transfers involving the user, shown in descending order of the `block_timestamp` value of the NFT's last transfer.

To view NFT transactions, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of chains to scan for NFTs.                                                                                                                                        |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFT transfers without pagination, and will ignore the `limit` and `page_number` values.              |
| limit               | integer | Optional, defaults to `10`. The number of NFT transfers displayed per page in response.                                                                                 |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftTransferFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer-filter) object.                                                |

### Response Parameters

| Parameter         | Type            | Description                                                                                                |
| ----------------- | --------------- | ---------------------------------------------------------------------------------------------------------- |
| transfer\_history | list of objects | A list of standard [NftTransfer](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer) objects. |
| total             | integer         | The total number of NFT transfers in your wallet matching the request filters.                             |
| skipped           | integer         | The number of NFT transfers in your wallet excluded by the request filters.                                |

#### üìå Example with date and `send` filters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_transfers",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON"
    ],
    "max": true,
    "filters": {
      "receive": true,
      "from_date": 1678233600
    },
    "protect_from_spam": true
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "transfer_history": [
      {
        "block_hash": "0xfd012e9dc2c7fa652ae3c0923599a9e6196520ac46e55f0f467d3a1ce84b8580",
        "transaction_hash": "0x4063c4ae3e56a06b6c8768ad76e0cb1523e671cf06e4325517106497778ede9e",
        "transaction_index": 87,
        "log_index": 468,
        "value": "0",
        "transaction_type": "Single",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "from_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "to_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "amount": "2",
        "verified": 1,
        "operator": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "possible_spam": false,
        "chain": "POLYGON",
        "token_id": "5",
        "block_number": 44506464,
        "block_timestamp": 1688107346,
        "contract_type": "ERC1155",
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "collection_name": null,
        "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
        "image_domain": "metadata.thesmurfssociety.com",
        "token_name": "Forest Mushrooms",
        "status": "Receive",
        "possible_phishing": false,
        "fee_details": {
          "coin": "MATIC",
          "gas": 40249,
          "gas_price": "0.000000153160317706",
          "total_fee": "0.006164549627348794"
        },
        "confirmations": 5775855
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the methods Komodo DeFi Framework  provides to get information and transact with NFTs";

# Non Fungible Tokens (NFTs)

The Komodo DeFi Framework API supports [ERC1155](https://www.nftstandards.wtf/Standards/ERC1155+Multi+token) and [ERC721](https://www.nftstandards.wtf/Standards/ERC721+Non+Fungible+Standard) NFTs via the [Moralis API](https://docs.moralis.io/) on the Avalanche (AVAX), BNB Smart Chain (BNB), Ethereum (ETH), Fantom (FTM), Polygon (MATIC) networks.

Before using other NFT methods, you should first call the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

## NFT Information Methods

*   Get a list of your tokens with [get\_nft\_list](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_list/)
*   Get a list of token transfers with [get\_nft\_transfers](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_transfers/)
*   Get token metadata with [get\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_metadata/)
*   Update NFT [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/)
*   Refresh NFT metadata with [refresh\_nft\_metadata](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/refresh_nft_metadata/)

## NFT Transaction Methods

*   Withdraw ERC721 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/#erc-721-withdraw-example)
*   Withdraw ERC1155 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/withdraw_nft/#erc-1155-withdraw-example)

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Query NFT database tables";
export const description =
  "This document describes how to query the local NFT database tables.";

# Query NFT database tables

After using the [update\_nft](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/update_nft/#update-nft) method to initialise your local NFT database,
the following tables are available in `DB/KOMODEFI.db`:

*   AVAX\_nft\_list
*   AVAX\_nft\_transfer\_history
*   BNB\_nft\_list
*   BNB\_nft\_transfer\_history
*   ETH\_nft\_list
*   ETH\_nft\_transfer\_history
*   FTM\_nft\_list
*   FTM\_nft\_transfer\_history
*   MATIC\_nft\_list
*   MATIC\_nft\_transfer\_history
*   scanned\_nft\_blocks

## NFT List tables

The COIN\_nft\_list tables contain the NFTs that you own
It has the following columns, though not all columns are populated for all NFTs:

| ID | Name                   | Type         | Description                                                                    |
| -- | ---------------------- | ------------ | ------------------------------------------------------------------------------ |
| 0  | token\_address         | VARCHAR(256) | The address of the token contract.                                             |
| 1  | token\_id              | VARCHAR(256) | The id of the token.                                                           |
| 2  | chain                  | TEXT         | The coin network which the NFT is on.                                          |
| 3  | amount                 | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 4  | block\_number          | INTEGER      | The block height of this transaction.                                          |
| 5  | contract\_type         | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | possible\_spam         | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 7  | possible\_phishing     | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 8  | collection\_name       | TEXT         | The collection name which includes the token.                                  |
| 9  | symbol                 | TEXT         | An arbitrary symbol for the NFT                                                |
| 10 | token\_uri             | TEXT         | A link to the token's metadata.                                                |
| 11 | token\_domain          | TEXT         | The domain the token metadata is hosted on.                                    |
| 12 | metadata               | TEXT         | The token's metadata in JSON format.                                           |
| 13 | last\_token\_uri\_sync | TEXT         | Date and time when the token uri was last syncronised.                         |
| 14 | last\_metadata\_sync   | TEXT         | Date and time when the token metadata was last syncronised.                    |
| 15 | raw\_image\_url        | TEXT         | The raw URL for the token image.                                               |
| 16 | image\_url             | TEXT         | A link for the token's image (or other media).                                 |
| 17 | image\_domain          | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 18 | token\_name            | TEXT         | The name of the token.                                                         |
| 19 | description            | TEXT         | An arbitrary description of the NFT.                                           |
| 20 | attributes             | TEXT         | Additional attribute data for the NFT in JSON format.                          |
| 21 | animation\_url         | TEXT         | If NFT is animated, the URL of the animation.                                  |
| 22 | animation\_domain      | TEXT         | If NFT is animated, the domain of the animation.                               |
| 23 | external\_url          | TEXT         | Additional URL related to the NFT                                              |
| 24 | external\_domain       | TEXT         | Domain of the additional URL related to the NFT                                |
| 25 | image\_details         | TEXT         | Additional details about the NFT's image.                                      |
| 26 | details\_json          | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_list table query

> SELECT chain, token\_name, token\_address, token\_id, possible\_spam, possible\_phishing FROM MATIC\_nft\_list LIMIT 5;

| chain   | token\_name            | token\_address                             | token\_id | possible\_spam | possible\_phishing |
| ------- | ---------------------- | ------------------------------------------ | --------- | -------------- | ------------------ |
| POLYGON | $2000 USDT AirdropüéÅ   | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         | 1              | 0                  |
| POLYGON | $1000 USDC VoucherüéÅ   | 0xb092b5eb5c653e915880dfc1f606be2ffe6fae8c | 1         | 1              | 0                  |
| POLYGON | 1000 BLUR Reward       | 0xeaa3c52052b809c8d8072187efc134def2dd5b13 | 0         | 1              | 0                  |
| POLYGON | SHIB Voucher 66 of 100 | 0xc46e36339ebd8bed48b1bdb6bd815e4b72103949 | 0         | 1              | 0                  |
| POLYGON | $1000 Rewards          | 0x6e0b84421388ad635f2a1167e39aff2dc742da2a | 0         | 1              | 0                  |

The NFTs listed above are all spam, and will be ignored by the [get\_nft\_list](/komodo-defi-framework/api/v20-dev/non_fungible_tokens/get_nft_list/) method.

## NFT Transfer table

The COIN\_nft\_transfer\_history tables contain the history of transfers of your NFTs, and have the following columns:

| ID | Name               | Type         | Description                                                                    |
| -- | ------------------ | ------------ | ------------------------------------------------------------------------------ |
| 0  | transaction\_hash  | VARCHAR(256) | Hex string, representing the transaction.                                      |
| 1  | log\_index         | INTEGER      | Simply a table index.                                                          |
| 2  | chain              | TEXT         | The coin network which the NFT is on.                                          |
| 3  | block\_number      | INTEGER      | The block height of this transaction.                                          |
| 4  | block\_timestamp   | INTEGER      | The block time of this transaction.                                            |
| 5  | contract\_type     | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | token\_address     | VARCHAR(256) | The address of the token contract.                                             |
| 7  | token\_id          | VARCHAR(256) | The id of the token.                                                           |
| 8  | status             | TEXT         | The transaction type: `Recieve` or `Send`                                      |
| 9  | amount             | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 10 | possible\_spam     | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 11 | possible\_phishing | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 12 | token\_uri         | TEXT         | A link to the token's metadata.                                                |
| 13 | token\_domain      | TEXT         | The domain the token metadata is hosted on.                                    |
| 14 | collection\_name   | TEXT         | The collection name which includes the token.                                  |
| 15 | image\_url         | TEXT         | A link for the token's image (or other media).                                 |
| 16 | image\_domain      | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 17 | token\_name        | TEXT         | The name of the token.                                                         |
| 18 | details\_json      | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_transfer\_history table query

> SELECT transaction\_hash, token\_name, token\_address, token\_id,  FROM MATIC\_nft\_transfer\_history WHERE block\_timestamp > 1701519320;

| transaction\_hash                                                  | token\_name          | token\_address                             | token\_id |
| ------------------------------------------------------------------ | -------------------- | ------------------------------------------ | --------- |
| 0x7b57303bcc2c68808b460490e984adcd18567a80660a18b7a151b62015247cda | $2000 USDT AirdropüéÅ | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         |

## NFT Last Scanned Block table

The scanned\_nft\_blocks table contains the last block that was scanned for each chain.
It has the following columns:

| ID | Name                 | Type    | Description                                                            |
| -- | -------------------- | ------- | ---------------------------------------------------------------------- |
| 2  | chain                | TEXT    | The coin network which the NFT is on.                                  |
| 1  | last\_scanned\_block | INTEGER | The block height when the last scan for NFTs was performed on a chain. |

### Example scanned\_nft\_blocks table query

> SELECT \* FROM scanned\_nft\_blocks;

| chain | last\_scanned\_block |
| ----- | -------------------- |
| MATIC | 50651981             |
| FTM   | 66512090             |
| ETH   | 0                    |
| BNB   | 0                    |
| AVAX  | 0                    |
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the refresh_nft_metadata method Komodo DeFi Framework  provides to refresh an NFT's metadata";

# Refresh NFT Metadata {{label : 'refresh_nft_metadata', tag : 'API-v2'}}

This method refreshes metadata of one NFT and metadata of related transactions with the same token\_address and token\_id.

### Request Parameters

| Parameter      | Type    | Description                                                                                                                                                                                                       |
| -------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain          | string  | Chains which holds the NFT you would like to updated metadata for.                                                                                                                                                |
| token\_address | string  | Token address.                                                                                                                                                                                                    |
| token\_id      | string  | Token ID.                                                                                                                                                                                                         |
| proxy\_auth    | boolean | Indicates whether authentication is required for accessing the proxy URLs (true if authentication is necessary, otherwise false).                                                                                 |
| url            | string  | URL link to the Moralis API proxy base url ([https://moralis-proxy.komodo.earth](https://moralis-proxy.komodo.earth)) or equivalent (if proxy\_auth is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam  | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent. [docs](https://nft.antispam.dragonhound.info/docs).                                                           |

If there are no errors, this request will return an empty response.

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "refresh_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
    "token_id": "5",
    "chain": "POLYGON",
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info"
  }
}
```

If there are no errors, this request will return an empty response.

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

Need to add some error responses here.
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the update_nft method Komodo DeFi Framework  provides to update NFT information in your local database";

# Update NFT {{label : 'update_nft', tag : 'API-v2'}}

This method will scan selected networks to update NFT information stored in the local database.
To interact with your NFTs, you will first need to activate the coin for the network the NFT is on.

See below for which coin to activate for each network:

| Network   | Coin  |
| --------- | ----- |
| AVALANCHE | AVAX  |
| BSC       | BNB   |
| ETH       | ETH   |
| FANTOM    | FTM   |
| POLYGON   | MATIC |

These coins can be activated using the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/enable_eth_with_tokens/) or method.

### Request Parameters

| Parameter     | Type    | Description                                                                                                                                                                  |
| ------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains        | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                           |
| proxy\_auth   | boolean | Indicates whether authentication is required for accessing the proxy URLs (true if necessary, false otherwise).                                                              |
| url           | string  | URL link to the [Moralis API proxy base url](https://moralis-proxy.komodo.earth) or equivalent (if proxy\_auth is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent.                                                                          |

If there are no errors, this request will return an empty response.
When updating multiple networks, or wallets with numerous NFTs, this request may take a while to complete.

#### üìå Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_nft",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON"
    ],
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info",
    "proxy_auth": false
  }
}
```

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

Need to add some error responses here.
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the withdraw_nft method Komodo DeFi Framework  provides to send NFTs to an address";

# Withdraw NFTs {{label : 'withdraw_nft', tag : 'API-v2'}}

To withdraw NFTs, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.
The `withdraw_nft` method will return signed raw transaction hex which must be broadcast using the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) method to complete the withdrawal.

### Request Parameters

| Parameter      | Type   | Description                                                                                                |
| -------------- | ------ | ---------------------------------------------------------------------------------------------------------- |
| type           | string | The contract type of the NFT to withdraw. Either `withdraw_erc721` or `withdraw_erc1155`                   |
| withdraw\_data | object | A standard [WithdrawNftData](/komodo-defi-framework/api/common_structures/nfts/#withdraw-nft-data) object. |

### Response Parameters

| Parameter         | Type    | Description                                                                                                                                                          |
| ----------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount            | string  | Amount of tokens to withdraw.                                                                                                                                        |
| tx\_hex           | string  | Raw hex of signed transaction. Use this with the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) RPC to broadcast the transaction. |
| tx\_hash          | string  | Transaction ID of the withdrawl.                                                                                                                                     |
| from              | array   | List of source addresses.                                                                                                                                            |
| to                | array   | List of destination addresses.                                                                                                                                       |
| contract\_type    | string  | Contract type. `ERC721` or `ERC1155`.                                                                                                                                |
| token\_address    | string  | Token address.                                                                                                                                                       |
| token\_id         | string  | Token ID.                                                                                                                                                            |
| fee\_details      | object  | A standard [WithdrawFee](/komodo-defi-framework/api/common_structures/#withdraw-fee) object.                                                                         |
| coin              | string  | Coin name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| block\_height     | integer | Block height of the transaction. If the value is `0`, the transaction is unconfirmed.                                                                                |
| timestamp         | integer | Timestamp of the block containing the withdrawl transaction in [unix epoch format](https://www.epochconverter.com/).                                                 |
| internal\_id      | integer | Used for internal transaction identification, for some coins it may be equal to transaction hash.                                                                    |
| transaction\_type | string  | This will always be `NftTransfer`.                                                                                                                                   |

#### üìå ERC721 Withdraw Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc721",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8509818733db8289929473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c9464980000000000000000000000000000000000000000000000000000000000000001820136a0564b5c9c8309a3f8f6cc007ca957e4c411259026d68c2c34419158aff4d3ebf8a007afaa0590da01a2ce36c7edb5380f41235168f3633ed459b1fc8a750fecd38d",
        "tx_hash": "bb030f618702715eb39035dccd218355f78ae5379ff6d0691f0f3c0db3c03789",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 35218,
            "gas_price": "0.000000040827827163",
            "total_fee": "0.001437874417026534"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732198,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### üìå ERC1155 Withdraw Example

If you are sending 2 or more NFTs, you must use the `withdraw_erc1155` withdraw type.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8502dffe7b4682f3a09473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa5395656600000000000000000000000000000000000000000000000000000000000000001820135a0476a4623c9df31cecbd319e0571c62d14a6dcedd5a760ced945ffa2e39fb12c5a03293f3c10d115edcc3795e414670f070c04ad936e2e87001da12f961df5962a7",
        "tx_hash": "d6b46e70bf755617366a5c10875eb639d55586bb568010ea82ef42e8d68c6523",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 62368,
            "gas_price": "0.000000012347931462",
            "total_fee": "0.000770115789422016"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732805,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### üìå ERC1155 Withdraw Max Example

If you would like to withdraw all NFTs from a token\_address, you must use the `withdraw_erc1155` withdraw type and set `max` to `true`.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0x27Ad1F808c1ef82626277Ae38998AfA539565660",
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "max": true
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f9014b2a8508d579565282ea3b942953399124f0cbb46d2cbacd8a89cf059997496380b8e4f242432a000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa539565660f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000820135a0feb67607bd5e5c58f7533c8d2c88ef0ba3beac7fea29bfe11c3ce9bd10641f2ca02f1045b9f87536e45fe63556805734293e534284efecd9210f614316a3e8dca7",
        "tx_hash": "9dce8e555d388532bdafd42dd44cd6a2bdcbf74bdda079e15f71b808c8395bcc",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC1155",
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "amount": "7",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 59963,
            "gas_price": "0.00000003794123733",
            "total_fee": "0.00227507041401879"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732937,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

### üìå Withdraw NFTs Error Responses

#### InvalidRequest (missing field)

```json
  {
      "mmrpc": "2.0",
      "error": "Error parsing request: missing field `type`",
      "error_path": "dispatcher",
      "error_trace": "dispatcher:109]",
      "error_type": "InvalidRequest",
      "error_data": "missing field `type`",
      "id": null
  }
```

#### InvalidRequest (wrong withdraw type)

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "id": null
}
```

#### TokenNotFoundInWallet (trying to send NFT you dont own)

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f82, token_id 110473361632261669912565539602449606788298723469812631769659886404530570536722 was not found in wallet",
    "error_path": "eth.nft",
    "error_trace": "eth:883] nft:1177]",
    "error_type": "GetNftInfoError",
    "error_data": {
        "error_type": "TokenNotFoundInWallet",
        "error_data": {
            "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f82",
            "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536722"
        }
    },
    "id": null
}
```

#### TransportError (unable to estimate gas)

```json
{
    "mmrpc": "2.0",
    "error": "Transport error: request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "error_path": "eth",
    "error_trace": "eth:1004] eth:5792]",
    "error_type": "Transport",
    "error_data": "request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "id": null
}
```

#### NotEnoughNftsAmount (trying to send more NFTs than you have)

```json
{
    "mmrpc": "2.0",
    "error": "Not enough NFTs amount with token_address: 0x2953399124f0cbb46d2cbacd8a89cf0599974963 and token_id 110473361632261669912565539602449606788298723469812631769659886404530570536720. Available 1, required 2",
    "error_path": "eth",
    "error_trace": "eth:897]",
    "error_type": "NotEnoughNftsAmount",
    "error_data": {
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "available": "1",
        "required": "2"
    },
    "id": null
}
```

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Account Balance Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# Account Balance Tasks

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'task::account_balance::init', tag : 'API-v2'}}

Use the `task::account_balance::init` method to initialise an account balance request.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                     |
| -------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| coin           | string | Ticker of activated coin you want to see addresses and balance for                                                                              |
| account\_index | string | For GUIs, this will be zero. In CLI you can use other values if you [know what you are doing](https://learnmeabitcoin.com/technical/hd-wallets) |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::init",
  "params": {
    "coin": "COIN_NAME",
    "account_index": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'task::account_balance::status', tag : 'API-v2'}}

Use the `task::account_balance::status` method to view the status / response of an account balance request.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter           | Type            | Description                                                                                                                                                                                                                                                                  |
| ------------------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result              | object          | Object containing status and details of the task                                                                                                                                                                                                                             |
| .status             | string          | Status of the task (`Ok` or `Error`)                                                                                                                                                                                                                                         |
| ..account\_index    | integer         | For GUIs, this will return `0`. In CLI it will return the same as the user request input                                                                                                                                                                                     |
| ..derivation\_path  | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the wallet.                                                                                                                                                               |
| ..total\_balance    | object          | Contains the spendable and unspendable balance for the wallet                                                                                                                                                                                                                |
| ...spendable        | string(numeric) | Spendable balance for this wallet                                                                                                                                                                                                                                            |
| ...unspendable      | string(numeric) | Unspendable balance for this wallet (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                            |
| ..addresses         | list            | Contains information about current active addresses in the wallet                                                                                                                                                                                                            |
| ...address          | string          | Spendable balance for this address                                                                                                                                                                                                                                           |
| ...derivation\_path | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of an address.                                                                                                                                                               |
| ...chain            | string(numeric) | `Internal` or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ...balance          | object          | Contains the spendable and unspendable balance for this address                                                                                                                                                                                                              |
| ....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                           |
| ....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                           |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "account_index": 0,
      "derivation_path": "m/44'/20'/0'",
      "total_balance": {
        "spendable": "99.999",
        "unspendable": "0"
      },
      "addresses": [
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/0",
          "chain": "External",
          "balance": {
            "spendable": "49.999",
            "unspendable": "0"
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/1",
          "chain": "External",
          "balance": {
            "spendable": "50",
            "unspendable": "0"
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/2",
          "chain": "External",
          "balance": {
            "spendable": "0",
            "unspendable": "0"
          }
        }
      ]
    }
  },
  "id": null
}
```

## cancel {{label : 'task::account_balance::cancel', tag : 'API-v2'}}

Use the `task::account_balance::cancel` method to cancel an account balance request.

#### Arguments

| Parameter | Type    | Description                                                             |
| --------- | ------- | ----------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdrawal process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::cancel",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_account_balance.manager",
  "error_trace": "init_account_balance:113] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 2,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: HD Account Management Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# task\_create\_new\_account

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init) and are using `HD Mode`, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'init', tag : 'API-v2'}}

Use the `task::create_new_account::init` method to initialise a HD account.

#### Arguments

| Parameter   | Type   | Description                                                                                                                             |
| ----------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string | Ticker of coin you would like to initialise a HD account for.                                                                           |
| account\_id | string | Optional. If not defined, will increment to the next unused account id in the wallet.                                                   |
| scan        | string | Optional. If `true`, will scan the account for funded addresses. Defaults to `true`.                                                    |
| gap\_limit  | string | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation, or 20 if no value was provided. |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::init",
  "params": {
    "coin": "KMD",
    "account_id": 77,
    "scan": true,
    "gap_limit": 20
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'status', tag : 'API-v2'}}

Use the `task::create_new_account::status` method to query the status of a HD account creation task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                                                                                  |
| --------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                                                                                           |
| details   | string or object | If in progress, either `Preparing` or `RequestingAccountBalance`. Once complete, a standard [WalletAccountInfo](/komodo-defi-framework/api/v20/#wallet-account-info) object. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::status",
  "params": {
    "task_id": 1
  }
}
```

#### Response (ready, successful)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "account_index": 77,
            "derivation_path": "m/44'/141'/77'",
            "total_balance": {
                "spendable": "7.777",
                "unspendable": "0"
            },
            "addresses": [
                {
                    "address": "RMsnNdVfZbxWwDxJafc6scbaN1xYVoR7Gx",
                    "derivation_path": "m/44'/141'/77'/0/4",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "R9roM4acnrrp1BL73MXd9EWdF5biRcSJ5X",
                    "derivation_path": "m/44'/141'/77'/0/5",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "RLNu8gszQ8ENUrY3VSyBS2714CNVwn1f7P",
                    "derivation_path": "m/44'/141'/77'/0/7",
                    "chain": "External",
                    "balance": {
                        "spendable": "7.777",
                        "unspendable": "0"
                    }
                }
            ]
        }
    },
    "id": null
}
```

#### Response (in progress)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "InProgress",
      "details": "Preparing"
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework: QTUM Activation Tasks";
export const description =
  "The methods in this document allow activation of QTUM.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_qtum

## init {{label : 'task::enable_qtum::init', tag : 'API-v2'}}

QTUM coins are activated using this method. For UTXO coins, refer to [task::enable\_utxo::init](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::init",
  "params": {
    "ticker": "QTUM",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10050"
            },
            {
              "url": "electrum3.cipig.net:20050",
              "ws_url": "electrum3.cipig.net:30050",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_qtum::status', tag : 'API-v2'}}

After running the `task::enable_qtum::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

The response formats for this method are the same as the [task::enable\_utxo::status](/komodo-defi-framework/api/v20-dev/task_enable_utxo/#status) responses.

## user\_action {{label : 'task::enable_qtum::user_action', tag : 'API-v2'}}

If the `task::enable_qtum::status` returns `UserActionRequired`, we need to use the `task::enable_qtum::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Error Cases

`CoinCreationError`: Returned when a coin is not supported.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin QTUM creation: Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config",
      "error_path": "lib.init_qtum_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_qtum_activation:71] utxo_coin_builder:234]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "QTUM",
        "error": "Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config"
      }
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: UTXO Coin Activation Tasks";
export const description =
  "The methods in this document allow activation of UTXO coins.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_utxo

## init {{label : 'task::enable_utxo::init', tag : 'API-v2'}}

UTXO coins are activated using this method. For QTUM coins, refer to [task::enable\_qtum::init](/komodo-defi-framework/api/v20-dev/task_enable_qtum/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Activation in Trezor mode

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::init",
  "params": {
    "ticker": "KMD",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10001"
            },
            {
              "url": "electrum3.cipig.net:20001",
              "ws_url": "electrum3.cipig.net:30001",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_utxo::status', tag : 'API-v2'}}

After running the `task::enable_utxo::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful, Trezor mode)

| Parameter            | Type            | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| -------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| status               | string          | A short indication of how the requested process is progressing.                                                                                                                                                                                                                                                                                                                                                                                              |
| details.result       | object          | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                                                                                                                                                                                                                                                                                                          |
| .ticker              | string          | The ticker of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                       |
| .current\_block      | integer         | The block height of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                 |
| .wallet\_balance     | object          | Information about the addresses of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                  |
| ..wallet\_type       | string          | In Trezor mode, this will return `HD`                                                                                                                                                                                                                                                                                                                                                                                                                        |
| ..accounts           | list            | A list of addresses and related information for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                     |
| ...account\_index    | integer         | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with mm2 global Iguana/HD/HW account.**                                                                                                                                                                                                                                                                                                   |
| ...derivation\_path  | string          | Derivation path up to the `COIN` child. E.g. `"m/44'/141'/0'"`                                                                                                                                                                                                                                                                                                                                                                                               |
| ...total\_balance    | object          | Combined total spendable and unconfirmed balances of all account addresses                                                                                                                                                                                                                                                                                                                                                                                   |
| ....spendable        | string(numeric) | Combined total spendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                   |
| ....unspendable      | string(numeric) | Combined total unspendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                 |
| ...addresses         | list            | A list of addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                              |
| ....address          | string          | One of the addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                             |
| ....derivation\_path | string          | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address.                                                                                                                                                                                                                                                                                                                                                  |
| ....chain            | string          | Returns `External` when `CHAIN=0` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. Returns `Internal` when `CHAIN=1` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ....balance          | object          | Contains the spendable and unspendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                              |
| .....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                                                           |
| .....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                                                                                                                                                                                                           |

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "ticker": "DOC",
        "current_block": 1529989,
        "wallet_balance": {
          "wallet_type": "HD",
          "accounts": [
            {
              "account_index": 0,
              "derivation_path": "m/44'/141'/0'",
              "total_balance": {
                "spendable": "7.74199",
                "unspendable": "0"
              },
              "addresses": [
                {
                  "address": "RFarfkYdmMVv9q4dHTmHUgS5j6nBy6qate",
                  "derivation_path": "m/44'/141'/0'/0/0",
                  "chain": "External",
                  "balance": {
                    "spendable": "0",
                    "unspendable": "0"
                  }
                },
                {
                  "address": "RUu1JYSAYVmSLL2Nb5eLNdenp1JtHcReYZ",
                  "derivation_path": "m/44'/141'/0'/0/1",
                  "chain": "External",
                  "balance": {
                    "spendable": "7.74199",
                    "unspendable": "0"
                  }
                },
                {
                  "address": "RTnduXSuRJegfMXf7nQM6C5gS68sbpL7AY",
                  "derivation_path": "m/44'/141'/0'/1/0",
                  "chain": "Internal",
                  "balance": {
                    "spendable": "0",
                    "unspendable": "0"
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  "id": null
}
```

#### Response (ready, successful, Iguana mode)

| Parameter        | Type            | Description                                                                                                         |
| ---------------- | --------------- | ------------------------------------------------------------------------------------------------------------------- |
| status           | string          | A short indication of how the requested process is progressing.                                                     |
| details.result   | object          | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .ticker          | string          | The ticker of the coin being activated                                                                              |
| .current\_block  | integer         | The block height of the coin being activated                                                                        |
| .wallet\_balance | object          | Information about the addresses of the coin being activated                                                         |
| ..wallet\_type   | string          | In Trezor mode, this will return `HD`                                                                               |
| ..address        | string          | One of the addresses in the account for the coin being activated                                                    |
| ..balance        | object          | Contains the spendable and unspendable balance for this address                                                     |
| ...spendable     | string(numeric) | Spendable balance for this address                                                                                  |
| ...unspendable   | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                  |

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "current_block": 1531669,
        "wallet_balance": {
          "wallet_type": "Iguana",
          "address": "RKK5UzcZnXBZNGvS5RqrnycHRiFfnL8fMq",
          "balance": {
            "spendable": "0",
            "unspendable": "0"
          }
        }
      }
    }
  },
  "id": null
}
```

#### Response (in progress)

| Parameter | Type   | Description                                                 |
| --------- | ------ | ----------------------------------------------------------- |
| status    | string | Will return `InProgress` if task is not yet comepleted      |
| details   | string | An indication of the current step of the activation process |

Possible In Progress Cases:

*   `ActivatingCoin`: The first step of activation. It does not require any action from the user.
*   `RequestingWalletBalance`: The first step of activation, while initial balances info is being requested. It does not require any action from the user.
*   `Finishing`: Activation process completed
*   `WaitingForTrezorToConnect`: Waiting for the user to plugin a Trezor device
*   `FollowHwDeviceInstructions`: Waiting for the user to follow the instructions on the device

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "RequestingWalletBalance"
  },
  "id": null
}
```

#### Response (ready, error)

| Parameter      | Type   | Description                                                                                                         |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------- |
| status         | string | A short indication of how the requested process is progressing.                                                     |
| details.result | object | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .error         | string | The ticker of the coin being activated                                                                              |
| .error\_path   | string | Used for debugging. A reference to the function in code base which returned the error                               |
| .error\_trace  | string | Used for debugging. A trace of lines of code which led to the returned error                                        |
| .error\_type   | string | An enumerated error identifier to indicate the category of error                                                    |
| .error\_data   | string | Additonal context for the error type                                                                                |

Possible Error Cases:

*   `TaskTimedOut` - Timed out waiting for coin activation, connecting to the device trezor or for user to confirm pubkey)
*   `CoinCreationError` - Error during activation. E.g. incorrect or inactive electrum servers.
*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20-dev/task_init_trezor/#details-for-hw-error-error-type) for more info.

## user\_action {{label : 'task::enable_utxo::user_action', tag : 'API-v2'}}

If the `task::enable_utxo::status` returns `UserActionRequired`, we need to use the `task::enable_utxo::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```
export const title = "Komodo DeFi Framework: Trezor Initialisation";
export const description = "Prepare your Trezor device for use in the Komodo DeFi Framework API, and authenticate using your PIN or phrase.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# Trezor Initialisation

The methods below prepare your Trezor device for use within the Komodo DeFi Framework API. Once completed, you can authenticate using your PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action).

Methods with a `task::` prefix will be linked to a numeric
`task_id` value which can be used to query the status or outcome of a task.

## init {{label : 'task::init_trezor::init', tag : 'API-v2'}}

Before using this method, launch the Komodo DeFi Framework API, and plug in your Trezor.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                                          |
| -------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| device\_pubkey | string | Optional. If known, you can specify the device pubkey. If not known, this will be part of the `task::init_trezor::status` response which you can save for future use |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command (without device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {}
}
```

#### Command (with device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {
    "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status {{label : 'task::init_trezor::status', tag : 'API-v2'}}

After running the `task::init_trezor::init` method, we can query the status of device initialisation to check its progress.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter              | Type         | Description                                                                                                                                                         |
| ---------------------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                 | string       | A short indication of how the requested process is progressing.                                                                                                     |
| details                | object       | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                 |
| details.type           | string       | Type of hardware wallet device (e.g. `Trezor`)                                                                                                                      |
| details.model          | string       | The model of the hardware wallet device (e.g. `One` or `T`)                                                                                                         |
| details.device\_name   | string       | The name of the device as defned by user in Trezor Suite or another wallet application.                                                                             |
| details.device\_id     | string (hex) | An unique identifier of the device, set during manufacturing.                                                                                                       |
| details.device\_pubkey | string (hex) | The hardware wallet device's pubkey. If included in the `task::init_trezor::init` request, it wll be the same as input. If not, it should be stored for future use. |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (in progress)

Possible "In progress" Cases:

*   `Initializing` - This is the normal task state. It does not require any action from the user.

*   `WaitingForTrezorToConnect` - The Komodo DeFi Framework API is waiting for the user to plugin a Trezor device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForTrezorToConnect"
  },
  "id": null
}
```

*   `FollowHwDeviceInstructions` - The Komodo DeFi Framework API is waiting for the user to follow instructions displayed on the device (e.g. clicking a button to confirm).

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "FollowHwDeviceInstructions"
  },
  "id": null
}
```

*   `UserActionRequired` - This will either be `EnterTrezorPin` or `EnterTrezorPassphrase`. Refer to the [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20-dev/task_init_trezor/#user-action) section for more information.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "UserActionRequired",
    "details": "EnterTrezorPin"
  },
  "id": null
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "type": "Trezor",
        "model": "One",
        "device_name": "Fitzchivalry Farseer",
        "device_id": "A1CCF11243A795A84111955E",
        "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
      }
    }
  },
  "id": null
}
```

#### Error Responses (by `error_type`)

:

*   `HwContextInitializingAlready` - Returned if user calls `task::init_trezor::init` before the previous `task::init_trezor::init` task has been completed.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Hardware Wallet context is initializing already",
      "error_path": "init_hw.crypto_ctx",
      "error_trace": "init_hw:151] crypto_ctx:235]",
      "error_type": "HwContextInitializingAlready"
    }
  },
  "id": null
}
```

*   `Timeout` - Task timed out while trying to connect to a device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "RPC timed out 300s",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:156]",
      "error_type": "Timeout",
      "error_data": {
        "secs": 300,
        "nanos": 0
      }
    }
  },
  "id": null
}
```

*   `NoSuchTask` - Something went wrong or `task::init_trezor::init` was not called. Refer to the [task::init\_trezor::init](/komodo-defi-framework/api/v20-dev/task_init_trezor/#init) section for more information.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '0'",
  "error_path": "init_hw",
  "error_trace": "init_hw:184]",
  "error_type": "NoSuchTask",
  "error_data": 0,
  "id": null
}
```

*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20-dev/task_init_trezor/#details-for-hw-error-error-type) for more info.

## cancel {{label : 'task::init_trezor::cancel', tag : 'API-v2'}}

Use the `task::init_trezor::cancel` method to cancel the initialisation task.

#### Arguments

| Parameter | Type    | Description                                                                 |
| --------- | ------- | --------------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the initialisation process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::cancel",
  "params": {
    "task_id": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_hw.manager",
  "error_trace": "init_hw:209] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

## user\_action {{label : 'task::init_trezor::user_action', tag : 'API-v2'}}

When you see the pin grid on your device, or it asks for a passphrase word, use this method.

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                                                          |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                                                          |
| user\_action              | object          | Object containing the params below                                                                                                                                                                                                   |
| user\_action.action\_type | string          | Either `TrezorPin` or `TrezorPassphrase`, depending on which is requested by responses from related methods returning `"status": "UserActionRequired"`                                                                               |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information.                                     |
| user\_action.passphrase   | string          | The [passphrase](https://trezor.io/learn/a/passphrases-and-hidden-wallets) functions like an extra word added to your recovery seed, and it used to access hidden wallets. To access the default wallet, input an empty string here. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

Even an incorrect PIN will return `success`. This doesn't mean the PIN was accepted, just that it was communicated without errors. If the PIN was incorrect, you will see an error like below in the next response for a method that requires authentication.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin KMD creation: Hardware Wallet context is not initialized",
      "error_path": "lib.init_utxo_standard_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_utxo_standard_activation:79] utxo_coin_builder:317]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "KMD",
        "error": "Hardware Wallet context is not initialized"
      }
    }
  },
  "id": null
}
```

#### üìå Examples

#### Command (for TrezorPin)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Command (for TrezorPassphrase)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPassphrase",
      "passphrase": "breakfast"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Details for `HwError` error type

When requesting the status of a task, if an `error_type` of `HwError` is returned, the GUI / User should check the details in `error_data` field to know which action is required (as detailed below).

### FoundUnexpectedDevice

The connected Trezor device has a different pubkey value than what was specified in the `device_pubkey` parameter

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found unexpected device. Please re-initialize Hardware wallet",
      "error_path": "lib.common_impl.coin_balance.utxo_common.hd_pubkey.hw_ctx",
      "error_trace": "lib:93] common_impl:46] coin_balance:304] utxo_common:163] hd_pubkey:176] hw_ctx:149]",
      "error_type": "HwError",
      "error_data": "FoundUnexpectedDevice"
    }
  },
  "id": null
}
```

### FoundMultipleDevices

Multiple Trezor devices are plugged in. Remove the additional devices, and keep the one you want to use plugged in.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found multiple devices. Please unplug unused devices",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:152] hw_client:126]",
      "error_type": "HwError",
      "error_data": "FoundMultipleDevices"
    }
  },
  "id": null
}
```

### NoTrezorDeviceAvailable

No Trezor device detected by the Komodo DeFi Framework API. Make sure it is plugged in, or try a different USB cable / port.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "No Trezor device available",
      "error_path": "init_hw.crypto_ctx.hw_ctx.response.usb.libusb",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_ctx:120] response:136] usb:46] libusb:195]",
      "error_type": "HwError",
      "error_data": "NoTrezorDeviceAvailable"
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Withdraw Tasks";
export const description = "The methods in this document allow withdrawal of coins from Komodo DeFi Framework.";

# Withdraw Tasks

## init {{label : 'task::withdraw::init', tag : 'API-v2'}}

The `task::withdraw::init` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument. The status of this method can be queried via the [withdraw\_status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status) method.

It will return the transaction hex (via `task::withdraw::status`), which then needs to be broadcast with the [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the withdrawal. This method is uses the same input fields as the [standard v2 withdraw method](/komodo-defi-framework/api/v20/withdraw/), with additional optional fields to specify the `from` address when using a hardware or HD wallet. There are two way to indicate which HD address to send funds from:

*   Using `derivation_path` as a single input. E.g `m/44'/20'/0'/0/2`
*   Using `account_id` (0), `chain` (External) & `address_id` (2) inputs. The bracketed values are the equavalent of the derivation path above.

To cancel the transaction generation, use the [withdraw\_cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel) method.

When used for ZHTLC coins like ARRR or ZOMBIE, it may take some time to
complete.

### Arguments

| Structure             | Type             | Description                                                                                                                                                                                                                                                                                                                      |
| --------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                  | string           | The name of the coin the user desires to withdraw                                                                                                                                                                                                                                                                                |
| to                    | string           | Coins are withdrawn to this address                                                                                                                                                                                                                                                                                              |
| amount                | string (numeric) | The amount the user desires to withdraw, ignored when `max=true`                                                                                                                                                                                                                                                                 |
| memo                  | string           | Optional, used for ZHTLC and Tendermint coins only. Attaches a memo to the transaction.                                                                                                                                                                                                                                          |
| from                  | string           | Optional, used only for transactions using a hardware wallet. For more information, see the [Trezor Integration guide](/komodo-defi-framework/api/v20-dev/task_init_trezor/)                                                                                                                                                     |
| from.derivation\_path | string           | Optional, HD wallets only. Follows the format `m/44'/COIN_ID'/ACCOUNT_ID'/CHAIN/ADDRESS_ID`                                                                                                                                                                                                                                      |
| from.account\_id      | integer          | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                                                                                                                                                                                                             |
| from.chain            | string           | Optional, HD wallets only. `Internal`, or `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). `Internal` is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| from.address\_id      | integer          | Optional, HD wallets only. Check the output from coin activation to find the ID of an address with balance.                                                                                                                                                                                                                      |
| max                   | bool             | Optional. Withdraw the maximum available amount. Defaults to `false`                                                                                                                                                                                                                                                             |
| fee                   | object           | Optional. Used only to set a custom fee, otherwise fee value will be derived from a deamon's `estimatefee` (or similar) RPC method                                                                                                                                                                                               |
| fee.type              | string           | Type of transaction fee; possible values: `UtxoFixed` or `UtxoPerKbyte`                                                                                                                                                                                                                                                          |
| fee.amount            | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte)                                                                                                                                                                                        |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT"
  },
  "id": 0
}
```

#### Command (max = true)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "max": true
  },
  "id": 0
}
```

#### Command (custom UtxoFixed fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoFixed",
      "amount": "0.001"
    }
  },
  "id": 0
}
```

#### Command (custom UtxoPerKbyte fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoPerKbyte",
      "amount": "0.00097"
    }
  },
  "id": 0
}
```

#### Command (HD wallet: derivation path option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "derivation_path": "DERIVATION_PATH"
    }
  }
}
```

#### Command (HD wallet: account\_id, chain & address\_id option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "account_id": 0,
      "chain": "External",
      "address_id": "ADDRESS_ID"
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status  {{label : 'task::withdraw::status', tag : 'API-v2'}}

To get the status of your withdrawal transaction generation, use the `task::withdraw::status` method. Once ready, it will provide the raw hex used to broadcast your transaction with [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/). The response returned is the same as what is returned from the [standard v2 withdraw method](/komodo-defi-framework/api/v20/withdraw/#response)

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure                            | Type                       | Description                                                                                                                                                                                             |
| ------------------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                               | string                     | A short indication of how the withdrawal is progressing.                                                                                                                                                |
| details                              | object                     | Depending on the state of withdrawal progress, this will contain different information as shown in the responses below.                                                                                 |
| details.to                           | array of strings           | Coins are withdrawn to these addresses; this may contain the `my_address` address, where change from UTXO coins is sent.                                                                                |
| details.from                         | array of strings           | Coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| details.my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| details.received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| details.spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| details.total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| details.fee\_details                 | object                     | the fee details of the generated transaction; `fee_details.type` is "Utxo" for Z coins. `fee_details.coin` will be the same as `details.coin`, and `fee_details.amount` will be a numeric value.        |
| details.tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| details.tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/)                                              |
| details.coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| details.transaction\_type            | string                     | Transaction type will be `StandardTransfer` for Z coin transactions.                                                                                                                                    |
| details.kmd\_rewards                 | object (optional)          | If supported (e.g. when withdrawing `KMD`), an object containing information about accrued rewards.                                                                                                     |
| details.kmd\_rewards.amount          | string (numeric, optional) | The amount of accrued rewards                                                                                                                                                                           |
| details.kmd\_rewards.claimed\_by\_me | bool (optional)            | Whether or not the rewards been claimed by me.                                                                                                                                                          |

#### üìå Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  },
  "id": 0
}
```

#### Response (Generating transaction)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "GeneratingTransaction"
  },
  "id": 0
}
```

#### Response (Generating transaction complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f8900000000000056390400e803000000000000017aef9bb6fda6cff496046976f57dea0848fc05a46ce948dd1dab7d551a5e5a5cdc41b3409adec489e1c4ffb33bfca7a949833fadfb7cc93546aab96a8bffca469bbd435682f5af367ab07dbbbecc448010e056103fa236251b2b74d4f43d031d43df8e32672e99dae0ee51ece01c523b7ce7fb9aa8682e23e122d732a67664d3822b04edd1a12ed586b1e7dcef08c4f870792eccc2ad74a48da134a9368adb5967b01681fd1d617c2ce972f5860f976cb828363b9501f167d99e8ac17422a54e055cbfc7fce40e95b4de7bb0c8fa9e61f8a0ec07f23a28a7c4897fa6fe372a2e0fb8a2706b71db38648782eac18529d7bbcb5fe42b9da26fb2adf050538bd21c42aecbad0626ad4f4094c337ff3e9cf19292c1f0cc37b0e506231647573fb9ba479675ed99471b7fad4e54213c98facb47af6851e182ee7142a86cfd80a7741bdbeab8a1a6b093c1c093599165c8a8e7ae43c47b87b97fb7363bebc34df4fc2a045c04f850d5bc693f481ab0028706c673fad02a93c3e8e170e08f438034a600027a2974f846c278dce35d564e4c0d5de17c341fbe97d0048b4129c7dc81c4a0172e0986a5568d240fb50c9dc746e5398603aaec588835165e17162f218b71e55bf1403e4d1b81a8c745c7e87571f6c62966154a10ae908293bc66270d8ebc8d835498c7bfd379f87a57babe18db1e379a2fdb4c7413915015b23a54cf6ea2344bbd4f7abbaaec007427c69be51ea7f696ac94741305860ced9cfe96a1cf6bfbbaa182769bc6c8a74169c52990ee27accb51835766397183f408cd6679ccb04ddfc957bedea7fd2dd81103425f886566658b99baf9e0b7c353c5b19a84fece3f35d3902406b1757149f89cab9fe1301bd03d6e3994f617d0bb8b7706b946a15deb2afa0e42e2b8f15f758c6909a51d3ace11fb465e1ed34986f728568088ca75b20b29e924f561534dd38a54ca79ddc318b06f4d2d9a107ecd7601caa3b766d435ad7099e1aff7a0e64f3dbf9500c4f8274b16a1a76858187cebcbde43c8fc30955ff09f0d2930fbcc54f2b931d76e7924f58dbe181a04c22dc8729cf04d0b939206b62f8abbb07bdeedc65086b0c1703570130f928427ff0b6d605c1760be7d32f6343d0c871575f88785c36db39133cf7ce40a712681baaa299706a69d816a24bb8009c4a900021e91530a952eb4dbf036f29cb7e7788665d7318e9486ae99c9ca0d108134fb79588e73bca79cf34cb50ccfdcfef6154f8a399c87dc212eb29961b7bb61454f455b0ff03b3a57cfaacafb437a9341c0fa1c107c27a065716c9de69c129557e35f6af63312f25138174c020c9754d57c45066e28b0d70d77ceef1f69a4c55ce7a33a4120924fb08207018da848bdc4f4e44fbfe0889ba9cd3741ca565516e34cbb260b3870927310d99059c2651ee645b7d9f755e59a9c3821a4d576d7f5b5db22a9befa3163189b09124789897bde57d662d3c7e25d99d709ffdc803acbb8fde2a93dca1525bb1123ed661f8c58113a7e6d1eeb04f738f31bf80ef687804c32de4ca82ae0c3100533e498d9551618b91424489d31526ea46f78d93aa8eef2a25cf53b83cad226d17ba92dc55366a011c494c7f7b9a9c4e1ac6c41fa96f03a66a402d6e6b1b864e8b640ec44bcaf0c00f5ed093823f0a10749708f69377cab25b393a4251f2b605e8022bbfc8c9832c31a5e98d7730042644b56507e00bc24ecf4979fa22e1b40bed2246f38baf715d25a38e400386847997adaf71fe50d29da6995bd50760b08faeec9360147d68175c7cc81be238b406b1e1d414f142a8053e119b2d1ee508fe510d2adad21bd4dff33f6400f17ef88055992b3335fb2a19836b1df3c7ac5ef1a342c9eadb69202d06bfe25ee84625cec62cf507caa2f5b7de8ccdc85921dbdc09e885ad2a7b1f86a6963086073d33f25fd5281f879e1b01d4422048a9a11d6fb6da1d457dd0f9583e38edc4cb4d0c7a7049fd7821c6ccf86160c3d2e4afba86cf154cabf3e8766607d017e348a15b576347e2fdc6742093b8635c0cb0a22835df10f93859875b36cffd1dcb23c6ea95542c9f3c9b5afe613438347b753af37d955dbbe169733beaaff57f1fc685e8c43abb3aaa4bbc4af0211677d87c7d7bcb69631acecd93110b572f3508ff49a0d64f3bd7c01c60cdfd45b01165e3682e8d68f614b523cc73d1a402d650bca867e5bc09c9a920ac8adf8c502db88da0579087e93125836b6398790dc3cba5c1dcfec974d58bf22a9fbc10ca63d5116da35e15eb149d85aa58de15784cfc2574cbc8c7cf81c0f44ea250925e176d2010f7864a393e43da8349dcaf26d7814d7da07d2069a1ee7bd6184351dfc8ae28757d65d15347eae69e9fac8453e1dc6506f4db9aa22db3f35b1782f7b43b1b85e6e0f8ac772712a044e5ef90235eb79ff83a7723ff78a7bba1381ada81507480ac1f0eca939061891b41c1b25aba3172916c3bab939d9f3baec391b2d503be7f63b44dd0fefd5ba769f2f699923531a7bf3a50079133dba31ff3c13b925e6e678b45e217c7ed0c328c15e36ebc56f2cd8c5e7961dadc99f42fe9a0a7d13e849308bcbd760f9570e821db1ea13d3f65ade8b50d3b9b95d2c0eb3e6b8b9796daa4ad0e1ab9dc6585a2dcf1d189e86c7698657f2684df36f31b5e955f9dd044dd3fd174fafcb814da305d15bfed40b4746875abe999bbfc97c58a24ba383dc7c4bb098e09df55f1ed05bbc3f3e0ea510d7dcfc01b1386a6e376c41879a77427e16cb7a0263b635c99713cfa95794cf7b5717836be632c1434970875f9b5c7886d0237f88c509b08a55981259fa08823bd455febd12ee3e5c6e41f66057a3039946052545694ada38babc3f421a531d90cd80461674e4b8efc0ada6a349e56fd12a60f083cce4169170e4a3bb1aeb7193c8b7f686f88240bda72e8fe682c1ad955689a9de678e143e67e04eefd18d86020829eb7603e4449c92189ddb9e41a63a59920d697f8a1a16f26697f31bd34faf02299e8b99a17523ccfa81ed72c6b7e4edd5d128432d353a8f53e0e6c76835d914e8c7348050f48ec68ddd44e6601502952b3d23afd7621ac7174223b7bbc59da87273fbb82f086df2669825de92e456c00734b072b28574a4fc2f4fba13618980f32df91a34bea01ecfeb619ee4ed52d4885f68f636427ca8fda56a9c4b716814bb9074002e18f369666b6fcef7c0008dd8863ea028f8b7c89575b23a871196846857b7f85bd0532503991342d9ab34dd6d9c7700cfb8e991f660a81f2b110740bec308d67d39998bf89d3d667b240e",
      "tx_hash": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "from": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "to": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "total_amount": "29.99989008",
      "spent_by_me": "29.99989008",
      "received_by_me": "29.99988008",
      "my_balance_change": "-0.00001000",
      "block_height": 0,
      "timestamp": 0,
      "fee_details": {
        "type": "Utxo",
        "coin": "ZOMBIE",
        "amount": "0.00001"
      },
      "coin": "ZOMBIE",
      "internal_id": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "transaction_type": "StandardTransfer"
    }
  },
  "id": 0
}
```

#### Response (Generating KMD transaction complete with rewards info)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f89051f43676aa53f06aaf67cfe76b4995a80c204aee630bf1909c37e2efc03c8ceac000000006b48304502210084c8d5345794b6bc78557a7aab71668020a6decf2537e9854044969f0125579202207d059c5cb465ffdd5920ddcca2760da49ce03252b4b3fd4b58605adbbc4d3ec1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2fffffffffc4ba9e537032043caba0982f4b0d46b029ecb261edf9b22fd84a665158cc3d6000000006a47304402207d720393347252195c09b16b9e23a0da7e00979521a9277daa297cd2f5d6d5b902204a8b35f7088ba7e7e7327c2c4fb30de300c26ba1527f3979cf1ed7a85bd70a58012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff19723c4dd6e57edbf623625370ffc8fbeef1ec367e4514491e3da333896f01260000000069463043021f488fa0fc7c8e1f2dbcff589c72f33d4354bc065b4d0e0c69592df293a81fb40220224e7cf3ec63dbbb6f9a2929baed7328af286b6b5f53c1ac0a9bc8156163d6e5012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff59c28f535d6b73c7f622f7aade547ef1db2277d3a43207b289cf56afa5e37f6b010000006a473044022017fbc3310ce3ae66caaf6782cba58a6065af43052e0a97db93d0fa9f6a5eb59e02207d3f766a230bf5159333104f773e2c45daa91828ac53da9f87b6c7dcd255370c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffcdbbc54aabaa6d0f5984c444f4317500c2f2b2b77e70f310b1940987b5ce9d3c010000006a4730440220793808739a53e3eedec7aef12b833fdd0e1d789e5211170331f492250757cac002207a3b748b674cb875bdf0cce87d61da10ca2eb24788afe5b061dba01972d9cdb1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0200e40b54020000001976a914e6d49471e6e83b5b69c0bee93caa4dc880205d9a88ac5856bb5b000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac095cbe63000000000000000000000000000000",
      "tx_hash": "7c201920db65b134a99c8405d84456bed7456bc29451c5bdcc92f30db62a4279",
      "from": ["RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d"],
      "to": ["RWKi9wkqMH4C9h4psPKjcKQaYNq5vsL89F"],
      "total_amount": "115.39004992",
      "spent_by_me": "115.39004992",
      "received_by_me": "15.39003992",
      "my_balance_change": "-100.00001",
      "block_height": 0,
      "timestamp": 1673421831,
      "fee_details": {
        "type": "Utxo",
        "coin": "KMD",
        "amount": "0.00001"
      },
      "coin": "KMD",
      "internal_id": "",
      "kmd_rewards": {
        "amount": "5.64955481",
        "claimed_by_me": true
      },
      "transaction_type": "StandardTransfer",
      "memo": null
    }
  },
  "id": 0
}
```

#### Response (No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw",
  "error_trace": "init_withdraw:57]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (error, waiting for user to confirm signing on hardware wallet device)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForUserToConfirmSigning"
  },
  "id": null
}
```

## cancel {{label : 'task::withdraw::cancel', tag : 'API-v2'}}

Use the `task::withdraw::cancel` method to cancel the withdrawal preparation task.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdraw process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 6
  }
}
```

#### Response (Success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (Error: No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:92] manager:97]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (Error: Task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:94] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 4,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Activation";
export const description =
  "The methods in this document allow activation of ZHTLC coins like ARRR & ZOMBIE.";

# Initialize ZHTLC Coin Activation {{label : 'task::enable_z_coin::init', tag : 'API-v2'}}

To enable Z coins you also need to [install some Zcash
Params](https://forum.komodoplatform.com/t/installing-zcash-params/603)

#### Arguments

| Structure          | Type   | Description                                                                                                          |
| ------------------ | ------ | -------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                           |
| activation\_params | object | A standard [ActivationRpcData](/komodo-defi-framework/api/common_structures/activation/#activation-rpc-data) object. |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### üìå Examples

#### Enable Z coin without any optional parameters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            },
            {
              "url": "zombie.dragonhound.info:20033",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30058"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ]
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from block 2528700, with custom `.zcash-params` path and scan params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": {
            "height": 2528700
          }
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from sapling activation height (earliest)

The Z coin lightwallet client only supports blocks that are post-sapling. The sapling activation height for Z coins can be found in the [coins file](https://github.com/KomodoPlatform/coins/blob/master/coins)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10033"
            },
            {
              "url": "zombie.dragonhound.info:20033",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30058"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": "earliest"
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Using websockets to sync from Proof of Keys Day, 2023.

[About proof of Keys Day](https://hackernoon.com/not-your-keys-not-your-bitcoin-jan3bitcoin-z6k3ktb)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "protocol": "SSL",
              "url": "zombie.dragonhound.info:20133",
              "ws_url": "zombie.dragonhound.info:30059"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:443"
          ],
          "sync_params": {
            "date": 1672704000
          }
        }
      }
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## Activation Status {{label : 'task::enable_z_coin::status', tag : 'API-v2'}}

Z coins need to build sync a local block cache and wallet database before they can be used. Using `task_id` as an input, this method will return the current status of the activation process.

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure | Type   | Description                                                                                                           |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------- |
| status    | string | A short indication of how the enabling is progressing.                                                                |
| details   | object | Depending on the state of enabling progress, this will contain different information as shown in the responses below. |

#### üìå Examples

#### Status of Z coin activation

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::status",
  "mmrpc": "2.0",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ActivatingCoin - enabling has started)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "ActivatingCoin"
  },
  "id": null
}
```

#### Response (UpdatingBlocksCache)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "UpdatingBlocksCache": {
        "current_scanned_block": 265930,
        "latest_block": 269656
      }
    }
  },
  "id": null
}
```

#### Response (BuildingWalletDb)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "BuildingWalletDb": {
        "current_scanned_block": 265311,
        "latest_block": 269656
      }
    }
  },
"id": null
}
```

#### Response (CoinCreationError - no Zcash Params)

```json
{
	"error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
	"error_path": "lib.z_coin_activation.z_coin",
	"error_trace": "lib:104] z_coin_activation:218] z_coin:1007]",
	"error_type": "CoinCreationError",
	"error_data": {
		"ticker": "ZOMBIE",
		"error": "ZCashParamsNotFound"
	}
}
```

#### Response (error - NoSuchTask)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

#### Response (error - InvalidRequest)

```json
{
  "mmrpc": "2.0",
  "error": "Error parsing request: invalid value: integer `-205`, expected u64",
  "error_path": "dispatcher",
  "error_trace": "dispatcher:109]",
  "error_type": "InvalidRequest",
  "error_data": "invalid value: integer `-205`, expected u64",
  "id": 42
}
```

#### Response (Enabling complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "ticker": "ZOMBIE",
      "current_block": 269657,
      "wallet_balance": {
        "wallet_type": "Iguana",
        "address": "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj",
        "balance": {
          "spendable": "29.99989008",
          "unspendable": "0"
        }
      }
    }
  },
  "id": null
}
```

#### Response (no Zcash Params)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
      "error_path": "lib.z_coin_activation.z_coin",
      "error_trace": "lib:103] z_coin_activation:192] z_coin:761]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "ZOMBIE",
        "error": "ZCashParamsNotFound"
      }
    }
  },
  "id": null
}
```

#### Response (error - no such task)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

## Cancel Activation {{label : 'task::enable_z_coin::cancel', tag : 'API-v2'}}

If you want to cancel the enabling process before it has completed, you can use this method.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the enabling process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### üìå Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (success - already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_standalone_coin.manager",
  "error_trace": "init_standalone_coin:144] manager:101]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

#### Response (error - no such task)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Methods";
export const description =
  "The methods in this document allow activation and management of ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Methods

ZHTLC coins, like Pirate (ARRR) and the test coin ZOMBIE take a little longer to enable, and use a new two step method to enable.
Activation can take a little while the first time, as we need to download some block cache data, and build a wallet database.
Subsequent enabling will be faster, but still take a bit longer than other coins. The second step for activation is optional, but allows us to check the status of the activation process.

To activate ZHTLC coins, you need to use the [task::enable\_z\_coin](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods:

*   Initialize activation with with [task::enable\_z\_coin::init](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#initialize-zhtlc-coin-activation)
*   Query activation status with [task::enable\_z\_coin::status](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#activation-status)
*   Cancel activation with [task::enable\_z\_coin::cancel](/komodo-defi-framework/api/v20-dev/zhtlc_coins/activation/#cancel-activation)

To withdraw ZHTLC coins, you need to use the [task::withdraw](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods:

*   Generate a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20-dev/task_withdraw/#init)
*   Query its status with [task::withdraw::status](/komodo-defi-framework/api/v20-dev/task_withdraw/#status)
*   Cancel generating the transaction with [task::withdraw::cancel](/komodo-defi-framework/api/v20-dev/task_withdraw/#cancel)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)

ZHTLC coins are not compatible with the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods.
To get the transaction history for ZHTLC coins, you need to use the [z\_coin\_tx\_history](/komodo-defi-framework/api/v20-dev/zhtlc_coins/transaction_history/) method.
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Transaction History";
export const description =
  "The methods in this document allow querying the transaction history ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Transaction History {{label : 'z_coin_tx_history', tag : 'API-v2'}}

To get the transaction history for ZHTLC coins, you need to use this special method - the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods are not compatible with ZHTLC coins. Currently trasaction memos will not be displayed in output, though they can be added to outgoing transactions with the [task::withdraw](/komodo-defi-framework/api/v20-dev/task_withdraw/#withdraw-tasks) methods.

#### Arguments

| Structure                  | Type    | Description                                                                                                                                                                                                               |
| -------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                       | string  | Ticker of the coin to get history for.                                                                                                                                                                                    |
| limit                      | integer | Optional. Limits the number of returned transactions. Defaults to `10`. Ignored if `max = true`.                                                                                                                          |
| paging\_options.FromId     | string  | Optional. Komodo DeFi Framework API will skip records until it reaches this ID, skipping the from\_id as well; track the internal\_id of the last displayed transaction to find the value of this field for the next page |
| paging\_options.PageNumber | integer | Optional. Komodo DeFi Framework API will return limit swaps from the selected page. Ignored if `FromId` .                                                                                                                 |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

#### üìå Examples

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "z_coin_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "ARRR",
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "ARRR",
    "target": {
      "type": "iguana"
    },
    "current_block": 2228711,
    "transactions": [
      {
        "tx_hash": "b7e8307778d7d61ebb2ebc7a130661ef6fbeb66ee5d15d0f84a3bfce3ebad5a1",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "17.65495855",
        "received_by_me": "17.65494855",
        "my_balance_change": "-0.00001000",
        "block_height": 2224011,
        "confirmations": 4701,
        "timestamp": 1673018341,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 26
      },
      {
        "tx_hash": "967deb0a8cbce0c1f0ba20deee7a955e1a82bd1173bb3dd15cc95f03738ca65c",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs10ah73fpudlecg678jmqjdyeym5fgccvjytqry533rq2w04dekenxe8ekt349s3lelmlss3j4u9q",
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "20.65496855",
        "received_by_me": "17.65495855",
        "my_balance_change": "-3.00001000",
        "block_height": 2196913,
        "confirmations": 31799,
        "timestamp": 1671100306,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 25
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 2,
    "skipped": 2,
    "total": 28,
    "total_pages": 14,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": null
}
```

#### Response (error - coin not supported)

```json
{
  "mmrpc": "2.0",
  "error": "TKL",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:523]",
  "error_type": "NotSupportedFor",
  "error_data": "TKL",
  "id": null
}
```

#### Response (error - coin not active)

```json
{
  "mmrpc": "2.0",
  "error": "ZOMBIE",
  "error_path": "my_tx_history_v2.lp_coins",
  "error_trace": "my_tx_history_v2:521] lp_coins:2849]",
  "error_type": "CoinIsNotActive",
  "error_data": "ZOMBIE",
  "id": null
}
```
