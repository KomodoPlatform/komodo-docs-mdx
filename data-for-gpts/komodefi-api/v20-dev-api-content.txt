export const title = "Komodo DeFi Framework Method: Approve Token (v2)";
export const description =
  "The approve_token method approves token spending for address";

# approve\_token

The `approve_token` method grants permission for a given smart contract to spend a defined amount of your tokens.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure | Type   | Description                                       |
| --------- | ------ | ------------------------------------------------- |
| coin      | string | Token ticker                                      |
| spender   | string | Address of smart contract to approve for spending |
| amount    | float  | Approved amount to spend (in coins units)         |

## Response

| Structure | Type   | Description             |
| --------- | ------ | ----------------------- |
| result    | string | Approval transaction id |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "approve_token",
  "params": {
    "coin": "USDT-ERC20",
    "spender": "0x1234567890123456789",
    "amount": 1.23
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": "0x1234567890abcdef01234567890abcdef0",
  "id": "null"
}
```

#### Error: Token config not activated

```json
{
    "mmrpc": "2.0",
    "error": "No such coin USDT-ERC20",
    "error_path": "tokens",
    "error_trace": "tokens:171]",
    "error_type": "NoSuchCoin",
    "error_data": {
        "coin": "USDT-ERC20"
    },
    "id": null
}
```

#### Error: Insufficient funds

```json
{
    "mmrpc": "2.0",
    "error": "Transaction error mm2src/coins/eth.rs:4834] eth:4720] Transport(\"request MethodCall(MethodCall { jsonrpc: Some(V2), method: \\\"eth_estimateGas\\\", params: Array([Object({\\\"from\\\": String(\\\"0x083c32b38e8050473f6999e22f670d1404235592\\\"), \\\"to\\\": String(\\\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\\\"), \\\"gasPrice\\\": String(\\\"0x6fc23a56a\\\"), \\\"value\\\": String(\\\"0x0\\\"), \\\"data\\\": String(\\\"0x095ea7b3000000000000000000000000083c32b38e8050473f6999e22f670d14042355920000000000000000000000000000000000000000000000001111d67bb1bb0000\\\")})]), id: Num(1) }) failed: Invalid response: Server: 'https://electrum3.cipig.net:18755/', error: RPC error: Error { code: ServerError(-32000), message: \\\"insufficient funds for transfer\\\", data: None }\")",
    "error_path": "tokens",
    "error_trace": "tokens:161]",
    "error_type": "TransactionError",
    "error_data": "mm2src/coins/eth.rs:4834] eth:4720] Transport(\"request MethodCall(MethodCall { jsonrpc: Some(V2), method: \\\"eth_estimateGas\\\", params: Array([Object({\\\"from\\\": String(\\\"0x083c32b38e8050473f6999e22f670d1404235592\\\"), \\\"to\\\": String(\\\"0xd6df932a45c0f255f85145f286ea0b292b21c90b\\\"), \\\"gasPrice\\\": String(\\\"0x6fc23a56a\\\"), \\\"value\\\": String(\\\"0x0\\\"), \\\"data\\\": String(\\\"0x095ea7b3000000000000000000000000083c32b38e8050473f6999e22f670d14042355920000000000000000000000000000000000000000000000001111d67bb1bb0000\\\")})]), id: Num(1) }) failed: Invalid response: Server: 'https://electrum3.cipig.net:18755/', error: RPC error: Error { code: ServerError(-32000), message: \\\"insufficient funds for transfer\\\", data: None }\")",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Get Token Allowance (v2)";
export const description =
  "The get_token_allowance method returns token allowance for address";

# get\_token\_allowance

The `get_token_allowance` method returns token allowance for address.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure | Type   | Description                                                                   |
| --------- | ------ | ----------------------------------------------------------------------------- |
| coin      | string | Token ticker                                                                  |
| spender   | string | Smart contract address to query spendable coins amount granted prior approval |

## Response

| Structure | Type  | Description                                                                    |
| --------- | ----- | ------------------------------------------------------------------------------ |
| result    | float | Amount of coins approved for spending via the smart contract (in coins units). |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_token_allowance",
  "params": {
    "coin": "AAVE-PLG20",
    "spender": "0x083C32B38e8050473f6999e22f670d1404235592"
  }
}
```

#### Response: Success

```json
{
  "mmrpc": "2.0",
  "result": "1.23",
  "id": null
}
```

#### Error: Token config not activated

```json
{
    "mmrpc": "2.0",
    "error": "No such coin USDT-ERC20",
    "error_path": "tokens",
    "error_trace": "tokens:171]",
    "error_type": "NoSuchCoin",
    "error_data": {
        "coin": "USDT-ERC20"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework API RPC Protocol v2.0 (Dev)";
export const description = "Komodo DeFi Framework API now supports mmrpc 2.0 protocol format, providing a standardized format for requests, successful responses, and error responses.";

# Komodo DeFi Framework API RPC Protocol v2.0 (Dev)

The methods in this section are still undergoing testing and enhancement. To use these methods, you will need to run a version of `kdf` from the dev branch or a feature specific branch with an active pull request to the dev branch.

## Common Komodo DeFi SDK Request / Response Objects

There are some [common objects](/komodo-defi-framework/api/common_structures/) that are used in the Komodo DeFi SDK RPC protocol. These standard objects have been collected and grouped into the following sections:

*   [Activation](/komodo-defi-framework/api/common_structures/activation/)
*   [Lightning Network](/komodo-defi-framework/api/common_structures/lightning/)
*   [Non-fungible Tokens](/komodo-defi-framework/api/common_structures/nfts/)
*   [Orders](/komodo-defi-framework/api/common_structures/orders/)
*   [Swaps](/komodo-defi-framework/api/common_structures/swaps/)
*   [Wallet](/komodo-defi-framework/api/common_structures/wallet/)
export const title = "Komodo DeFi Framework Method: 1inch v6.0 Classic Swap Create (v2)";
export const description =
  "The 1inch_v6_0_classic_swap_create method returns transaction data for classic swap from 1inch API version 6.0.";

# 1inch\_v6\_0\_classic\_swap\_create

The `1inch_v6_0_classic_swap_create` method returns transaction data for classic swap from 1inch API version 6.0.

To use methods which interface with the 1inch API, you need to set the `1inch_api` url in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).
You'll also need to set your 1inch API key as an environment variable called `ONE_INCH_API_TEST_AUTH`, e.g. `ONE_INCH_API_TEST_AUTH="Bearer YourAPIkey"`.

As this feature is still experimental, you will need to [build KDF from source](https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source) on the dev branch with a build flag, e.g. `cargo build --features test-ext-api`.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure             | Type                       | Description                                                                                                                                                        |
| --------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| base                  | string                     | Base coin name                                                                                                                                                     |
| rel                   | string                     | Rel coin name (must be from the same EVM chain as the base coin)                                                                                                   |
| amount                | numeric string or rational | Swap amount (in coins units)                                                                                                                                       |
| slippage              | float                      | Allowed slippage, min: 0; max: 50                                                                                                                                  |
| fee                   | float                      | Optional. Partner fee, percentage of src token amount will be sent to referrer address, min: 0; max: 3. Should be the same for quote and swap rpc. Default is 0    |
| protocols             | string                     | Optional. Specify liquidity sources e.g.: \&protocols=WETH,CURVE,BALANCER,...,ZRX (by default - all used)                                                          |
| gas\_price            | numeric string             | Optional. Network price per gas, in Gwei. 1inch takes in account gas expenses to determine exchange route. Should be the same for a quote and swap                 |
| complexity\_level     | numeric                    | Optional. Maximum number of token-connectors to be used in a transaction, min: 0; max: 3; default: 2                                                               |
| parts                 | numeric                    | Optional. Limit maximum number of parts each main route parts can be split into. Should be the same for a quote and swap. Default: 20; max: 100                    |
| main\_route\_parts    | numeric                    | Optional. Limit maximum number of main route parts. Should be the same for a quote and swap. Default: 20; max: 50                                                  |
| gas\_limit            | numeric                    | Optional. Maximum amount of gas for a swap. Should be the same for a quote and swap. Default: 11500000; max: 11500000                                              |
| include\_tokens\_info | boolean                    | Optional. Return fromToken and toToken info in response (default is true)                                                                                          |
| include\_protocols    | boolean                    | Optional. Return used swap protocols in response (default is true)                                                                                                 |
| include\_gas          | boolean                    | Optional. Include estimated gas in return value (default is true)                                                                                                  |
| connector\_tokens     | string                     | Optional. Token-connectors can be specified via this parameter. If not set, default token-connectors will be used                                                  |
| excluded\_protocols   | string                     | Optional. Excluded supported liquidity sources. Should be the same for a quote and swap, max: 5                                                                    |
| permit                | string                     | Optional. Used according [https://eips.ethereum.org/EIPS/eip-2612](https://eips.ethereum.org/EIPS/eip-2612)                                                        |
| compatibility         | bool                       | Optional. Exclude the Unoswap method                                                                                                                               |
| receiver              | bool                       | Optional. This address will receive funds after the swap. By default same address as 'my address'                                                                  |
| referrer              | bool                       | Optional. Address to receive the partner fee. Must be set explicitly if fee is also set                                                                            |
| disable\_estimate     | bool                       | Optional. if true, disable most of the checks, default: false                                                                                                      |
| allow\_partial\_fill  | bool                       | Optional. if true, the algorithm can cancel part of the route, if the rate has become less attractive. Unswapped tokens will return to 'my address'. Default: true |
| use\_permit2          | bool                       | Optional. Enable this flag for auto approval by Permit2 contract if you did an approval to Uniswap Permit2 smart contract for this token. Default is false         |

## Response

| Structure   | Type   | Description                                                                                                                                                                        |
| ----------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| dst\_amount | number | Destination token amount, in coins units.                                                                                                                                          |
| src\_token  | object | Source (base) token information. A standard [1inchTokenInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-token-info) object.                                        |
| dst\_token  | object | Destination (rel) token info. A standard [1inchTokenInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-token-info) object.                                           |
| protocols   | list   | Optional. A list of standard [1inchProtocolInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-protocol-info) objects, used as liquidity sources used to route trade. |
| tx          | object | A standard [1inchTxFields](/komodo-defi-framework/api/common_structures/orders/#1inch-tx-fields) object.                                                                           |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "1inch_v6_0_classic_swap_create",
  "params": {
    "base": "ETH",
    "rel": "USDC-ERC20",
    "amount": 0.1,
    "slippage": 1,
    "include_tokens_info": true,
    "include_protocols": true,
    "include_gas": true,
    "fee": 0,
    "complexity_level": 3,
    "gas_limit": 11500000,
    "main_route_parts": 50,
    "parts": 100,
    "protocols": ""
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "dst_amount": {
      "amount": "0.000000000035136197",
      "amount_fraction": {
          "numer": "35136197",
          "denom": "1000000000000000000"
      },
      "amount_rat": [
          [
          1,
          [
              35136197
          ]
          ],
          [
          1,
          [
              2808348672,
              232830643
          ]
          ]
      ]
      },
      "src_token": {
      "address": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
      "symbol": "ETH",
      "name": "Ether",
      "decimals": 18,
      "eip2612": false,
      "isFoT": false,
      "logoURI": "https://tokens.1inch.io/0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.png",
      "tags": [
          "crosschain",
          "GROUP:ETH",
          "native",
          "PEG:ETH"
      ]
      },
      "dst_token": {
      "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "symbol": "USDT",
      "name": "Tether USD",
      "decimals": 6,
      "eip2612": false,
      "isFoT": false,
      "logoURI": "https://tokens-data.1inch.io/images/1/0xdac17f958d2ee523a2206206994597c13d831ec7.webp",
      "tags": [
          "crosschain",
          "GROUP:USDT",
          "PEG:USD",
          "tokens"
      ]
      },
      "protocols": [
      [
          [
          {
              "name": "PMM15",
              "part": 100,
              "fromTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
              "toTokenAddress": "0xdac17f958d2ee523a2206206994597c13d831ec7"
          }
          ]
      ]
      ],
      "tx": {
      "from": "0x590559f6fb7720f24ff3e2fccf6015b466e9c92c",
      "to": "0x111111125421ca6dc452d289314280a0f8842a65",
      "data": "07ed2379000000000000000000000000f313b370d28760b98a2e935e56be92feb2c4ec04000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000f313b370d28760b98a2e935e56be92feb2c4ec04000000000000000000000000590559f6fb7720f24ff3e2fccf6015b466e9c92c000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000212c64300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000033c64b2acd3506aded3c1dafdb6fcac91b7a3b6b42a3fe374c25fdd3df2e1f837ca466cb20f8da0c6fa46d937b90bf8a3fc3c68614b3a94c667999d026a40e1de9d0000000000000000000000000000000000000002de00006e00005400004e802026678dcd0000000000000000000000000000000000000000590559f6fb7720f24ff3e2fccf6015b466e9c92c000000000000000000000000000000000000000000000000000000e8d4a5100000206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db05120111111125421ca6dc452d289314280a0f8842a65c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2012456a75868e8eb936a05227576bce26784ccdc8d75e0db817d687734fcf4c1c3d1d15ee296000000000000000000000000807cf9a772d5a3f9cefbc1192e939d62f0d9bd380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000002182199000000000000000000000000000000000000000000000000002386099b1bf000000000000000000000000000000001915c00674734b400000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000419709bee012bcde5380cd388d52134750a9dd29efd835b9ad7a8792b0da1149e00d9aa573ae0f4b7b6365536e846bc792f8ec1452de4fb7b53a39abfc0e2c901c1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000c095c0a2",
      "value": "0.01",
      "gas_price": "22.078218982",
      "gas": 228890
      },
      "gas": null
  },
  "id": null
  }
```

#### Error: Configuration missing

The `1inch_api` url not set in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).

```json
{
    "mmrpc": "2.0",
    "error": "No API config param",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:137] client:105]",
    "error_type": "InvalidParam",
    "error_data": "No API config param",
    "id": null
}
```

#### Error: Authentication failure

`ONE_INCH_API_TEST_AUTH` environment variable not set, or incorrect.

```json
{
    "mmrpc": "2.0",
    "error": "1inch API error: General API error: Unauthorized description: ",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:140] client:152]",
    "error_type": "OneInchError",
    "error_data": {
        "GeneralApiError": {
            "error_msg": "Unauthorized",
            "description": "",
            "status_code": 401
        }
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: 1inch v6.0 Classic Swap Liquidity Sources (v2)";
export const description =
  "The 1inch_v6_0_classic_swap_liquidity_sources method returns liquidity sources for classic swaps from 1inch API version 6.0.";

# 1inch\_v6\_0\_classic\_swap\_liquidity\_sources

The `1inch_v6_0_classic_swap_liquidity_sources` method returns liquidity sources for classic swaps from 1inch API version 6.0.

To use methods which interface with the 1inch API, you need to set the `1inch_api` url in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).
You'll also need to set your 1inch API key as an environment variable called `ONE_INCH_API_TEST_AUTH`, e.g. `ONE_INCH_API_TEST_AUTH="Bearer YourAPIkey"`.

As this feature is still experimental, you will need to [build KDF from source](https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source) on the dev branch with a build flag, e.g. `cargo build --features test-ext-api`.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure | Type    | Description |
| --------- | ------- | ----------- |
| chain\_id | numeric | Chain id    |

## Response

| Structure   | Type            | Description                                                                                                                           |
| ----------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| dst\_amount | rational number | Destination token amount, in coins units.                                                                                             |
| protocols   | list            | Optional. A list of standard [1inchProtocolImage](/komodo-defi-framework/api/common_structures/orders/#1inch-protocol-image) objects. |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "1inch_v6_0_classic_swap_liquidity_sources",
  "params": {
    "chain_id": 1
  }
}
```

#### Response

```json
{
"mmrpc": "2.0",
"result": {
  "protocols": [
    {
      "id": "UNISWAP_V1",
      "title": "Uniswap V1",
      "img": "https://cdn.1inch.io/liquidity-sources-logo/uniswap.png",
      "img_color": "https://cdn.1inch.io/liquidity-sources-logo/uniswap_color.png"
    },
    {
      "id": "UNISWAP_V2",
      "title": "Uniswap V2",
      "img": "https://cdn.1inch.io/liquidity-sources-logo/uniswap.png",
      "img_color": "https://cdn.1inch.io/liquidity-sources-logo/uniswap_color.png"
    },
    {
      "id": "SUSHI",
      "title": "SushiSwap",
      "img": "https://cdn.1inch.io/liquidity-sources-logo/sushiswap.png",
      "img_color": "https://cdn.1inch.io/liquidity-sources-logo/sushiswap_color.png"
    }
  ]
}
}
```

#### Error: Configuration missing

The `1inch_api` url not set in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).

```json
{
    "mmrpc": "2.0",
    "error": "No API config param",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:137] client:105]",
    "error_type": "InvalidParam",
    "error_data": "No API config param",
    "id": null
}
```

#### Error: Authentication failure

`ONE_INCH_API_TEST_AUTH` environment variable not set, or incorrect.

```json
{
    "mmrpc": "2.0",
    "error": "1inch API error: General API error: Unauthorized description: ",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:140] client:152]",
    "error_type": "OneInchError",
    "error_data": {
        "GeneralApiError": {
            "error_msg": "Unauthorized",
            "description": "",
            "status_code": 401
        }
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: 1inch v6.0 Classic Swap Quote (v2)";
export const description =
  "The 1inch_v6_0_classic_swap_quote method returns best quote from 1inch classic swap API version 6.0.";

# 1inch\_v6\_0\_classic\_swap\_quote

The `1inch_v6_0_classic_swap_quote` method returns best quote from 1inch classic swap API version 6.0.

To use methods which interface with the 1inch API, you need to set the `1inch_api` url in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).
You'll also need to set your 1inch API key as an environment variable called `ONE_INCH_API_TEST_AUTH`, e.g. `ONE_INCH_API_TEST_AUTH="Bearer YourAPIkey"`.

As this feature is still experimental, you will need to [build KDF from source](https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source) on the dev branch with a build flag, e.g. `cargo build --features test-ext-api`.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure             | Type                       | Description                                                                                                                                                     |
| --------------------- | -------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base                  | string                     | Base coin name                                                                                                                                                  |
| rel                   | string                     | Rel coin name (must be from the same EVM chain as the base coin)                                                                                                |
| amount                | numeric string or rational | Swap amount (in coins units)                                                                                                                                    |
| fee                   | Float                      | Optional. Partner fee, percentage of src token amount will be sent to referrer address, min: 0; max: 3. Should be the same for quote and swap rpc. Default is 0 |
| protocols             | string                     | Optional. Specify liquidity sources e.g.: \&protocols=WETH,CURVE,BALANCER,...,ZRX (by default - all used)                                                       |
| gas\_price            | numeric string             | Optional. Network price per gas, in Gwei. 1inch takes in account gas expenses to determine exchange route. Should be the same for a quote and swap              |
| complexity\_level     | numeric                    | Optional. Maximum number of token-connectors to be used in a transaction, min: 0; max: 3; default: 2                                                            |
| parts                 | numeric                    | Optional. Limit maximum number of parts each main route parts can be split into. Should be the same for a quote and swap. Default: 20; max: 100                 |
| main\_route\_parts    | numeric                    | Optional. Limit maximum number of main route parts. Should be the same for a quote and swap. Default: 20; max: 50                                               |
| gas\_limit            | numeric                    | Optional. Maximum amount of gas for a swap. Should be the same for a quote and swap. Default: 11500000; max: 11500000                                           |
| include\_tokens\_info | boolean                    | Optional. Return fromToken and toToken info in response (default is true)                                                                                       |
| include\_protocols    | boolean                    | Optional. Return used swap protocols in response (default is true)                                                                                              |
| include\_gas          | boolean                    | Optional. Include estimated gas in return value (default is true)                                                                                               |
| connector\_tokens     | boolean                    | Optional. Token-connectors can be specified via this parameter. If not set, default token-connectors will be used                                               |

## Response

| Structure   | Type            | Description                                                                                                                                                                        |
| ----------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| dst\_amount | rational number | Destination token amount, in coins units.                                                                                                                                          |
| src\_token  | object          | Source (base) token information. A standard [1inchTokenInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-token-info) object.                                        |
| dst\_token  | object          | Destination (rel) token info. A standard [1inchTokenInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-token-info) object.                                           |
| protocols   | list            | Optional. A list of standard [1inchProtocolInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-protocol-info) objects, used as liquidity sources used to route trade. |
| gas         | numeric         | Optional. Estimated gas.                                                                                                                                                           |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "1inch_v6_0_classic_swap_quote",
  "params": {
    "base": "ETH",
    "rel": "USDC-ERC20",
    "amount": 0.1,
    "include_tokens_info": true,
    "include_protocols": true,
    "include_gas": true,
    "fee": 0,
    "complexity_level": 3,
    "gas_limit": 11500000,
    "main_route_parts": 50,
    "parts": 100,
    "protocols": ""
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "dst_amount": {
      "amount": "347.810213",
      "amount_fraction": {
        "numer": "347810213",
        "denom": "1000000"
      },
      "amount_rat": [
        [
          1,
          [
            347810213
          ]
        ],
        [
          1,
          [
            1000000
          ]
        ]
      ]
    },
    "src_token": {
      "address": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
      "symbol": "ETH",
      "name": "Ether",
      "decimals": 18,
      "eip2612": false,
      "isFoT": false,
      "logoURI": "https://tokens.1inch.io/0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.png",
      "tags": [
        "crosschain",
        "GROUP:ETH",
        "native",
        "PEG:ETH"
      ]
    },
    "dst_token": {
      "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "symbol": "USDT",
      "name": "Tether USD",
      "decimals": 6,
      "eip2612": false,
      "isFoT": false,
      "logoURI": "https://tokens-data.1inch.io/images/1/0xdac17f958d2ee523a2206206994597c13d831ec7.webp",
      "tags": [
        "crosschain",
        "GROUP:USDT",
        "PEG:USD",
        "tokens"
      ]
    },
    "protocols": [
      [
        [
          {
            "name": "PMM15",
            "part": 100,
            "fromTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
            "toTokenAddress": "0xdac17f958d2ee523a2206206994597c13d831ec7"
          }
        ]
      ]
    ],
    "gas": 174132
  },
  "id": null
}
```

#### Error: Configuration missing

The `1inch_api` url not set in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).

```json
{
    "mmrpc": "2.0",
    "error": "No API config param",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:137] client:105]",
    "error_type": "InvalidParam",
    "error_data": "No API config param",
    "id": null
}
```

#### Error: Authentication failure

`ONE_INCH_API_TEST_AUTH` environment variable not set, or incorrect.

```json
{
    "mmrpc": "2.0",
    "error": "1inch API error: General API error: Unauthorized description: ",
    "error_path": "rpcs.client",
    "error_trace": "rpcs:140] client:152]",
    "error_type": "OneInchError",
    "error_data": {
        "GeneralApiError": {
            "error_msg": "Unauthorized",
            "description": "",
            "status_code": 401
        }
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: 1inch v6.0 Classic Swap Tokens (v2)";
export const description =
  "The 1inch_v6_0_classic_swap_tokens method returns tokens for classic swaps from 1inch API version 6.0.";

# 1inch\_v6\_0\_classic\_swap\_tokens

The `1inch_v6_0_classic_swap_tokens` method returns tokens for classic swaps from 1inch API version 6.0.

To use methods which interface with the 1inch API, you need to set the `1inch_api` url in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).
You'll also need to set your 1inch API key as an environment variable called `ONE_INCH_API_TEST_AUTH`, e.g. `ONE_INCH_API_TEST_AUTH="Bearer YourAPIkey"`.

As this feature is still experimental, you will need to [build KDF from source](https://github.com/KomodoPlatform/komodo-defi-framework?tab=readme-ov-file#building-from-source) on the dev branch with a build flag, e.g. `cargo build --features test-ext-api`.

Refer to the [1inch Classic Swap documentation](https://portal.1inch.dev/documentation/apis/swap/classic-swap/quick-start) for more information.

## Arguments

| Structure | Type    | Description |
| --------- | ------- | ----------- |
| chain\_id | numeric | Chain id    |

## Response

| Structure   | Type   | Description                                                                                                                                                      |
| ----------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| dst\_amount | number | Destination token amount, in coins units.                                                                                                                        |
| tokens      | list   | Optional. A list of standard [1inchTokenInfo](/komodo-defi-framework/api/common_structures/orders/#1inch-token-info) objects showing available tokens for trade. |

### TokenInfo

| Structure | Type    | Description                                                |
| --------- | ------- | ---------------------------------------------------------- |
| address   | string  | Token contract address.                                    |
| symbol    | string  | Token symbol.                                              |
| name      | string  | Token name.                                                |
| decimals  | numeric | Number of digits after decimal point for the token amount. |
| eip2612   | boolean | Is Eip-2612 supported.                                     |
| is\_fot   | boolean | Is FoT token.                                              |
| logo\_uri | string  | Token logo uri.                                            |
| tags      | list    | Token tags.                                                |

#### ðŸ“Œ Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "1inch_v6_0_classic_swap_tokens",
  "params": {
    "chain_id": 1
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "tokens": {
      "0x328c4c80bc7aca0834db37e6600a6c49e12da4de": {
        "address": "0x328c4c80bc7aca0834db37e6600a6c49e12da4de",
        "symbol": "aSNXv1",
        "name": "Aave Interest bearing SNX",
        "decimals": 18,
        "eip2612": false,
        "isFoT": false,
        "logoURI": "https://tokens.1inch.io/0x328c4c80bc7aca0834db37e6600a6c49e12da4de.png",
        "tags": [
          "crosschain",
          "tokens"
        ]
      },
      "0x5165d24277cd063f5ac44efd447b27025e888f37": {
        "address": "0x5165d24277cd063f5ac44efd447b27025e888f37",
        "symbol": "aYFI",
        "name": "Aave interest bearing YFI",
        "decimals": 18,
        "eip2612": true,
        "isFoT": false,
        "logoURI": "https://tokens.1inch.io/0x5165d24277cd063f5ac44efd447b27025e888f37.png",
        "tags": [
          "crosschain",
          "tokens"
        ]
      },
      "0xce111a198eb04f388aceb78c40ced6daf1b0514a": {
        "address": "0xce111a198eb04f388aceb78c40ced6daf1b0514a",
        "symbol": "REALTOKEN-272-NE42nd-COURT-DEERFIELDBEACH-FL",
        "name": "RealToken S 272 N.E. 42nd Court Deerfield Beach FL",
        "decimals": 18,
        "eip2612": false,
        "isFoT": false,
        "logoURI": "https://tokens.1inch.io/0xe5f7ef61443fc36ae040650aa585b0395aef77c8.png",
        "tags": [
          "crosschain",
          "tokens"
        ]
      }
    }
  }
}
```
export const title = "Komodo DeFi Framework Method: Walletconnect: Delete session";
export const description =
  "The wc_delete_session method closes the specified WalletConnect session.";

# wc\_delete\_session

The `wc_delete_session` method closes the specified WalletConnect session.
For details on a full list of active WalletConnect sessions, use the [wc\_get\_sessions](/komodo-defi-framework/api/v20-dev/wc_get_sessions/#wc-get-sessions) method.

## Arguments

| Structure | Type   | Description                                            |
| --------- | ------ | ------------------------------------------------------ |
| topic     | string | An active session topic (or pairing topic) hex string. |

## Response

| Structure | Type   | Description                                                                              |
| --------- | ------ | ---------------------------------------------------------------------------------------- |
| session   | object | A standard [WcSession](/komodo-defi-framework/api/common_structures/#wc-session) object. |

#### ðŸ“Œ Examples

#### Command

```json
{
  "method": "wc_delete_session",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "with_pairing_topic": false,
    "topic": "008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95"
  }
}
```

Both of the above queries return the same result.

#### Response

```json
```
export const title = "Komodo DeFi Framework Method: Walletconnect: Get session";
export const description =
  "The wc_get_session method returns details for a specific WalletConnect session.";

# wc\_get\_session

The `wc_get_session` method returns details for a specific WalletConnect session.
For details on a full list of active WalletConnect sessions, use the [wc\_get\_sessions](/komodo-defi-framework/api/v20-dev/wc_get_sessions/#wc-get-sessions) method instead.

## Arguments

| Structure            | Type   | Description                                                                                                                                                                                     |
| -------------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| with\_pairing\_topic | bool   | Defaults to `false`. If `true`, allows using the pairing\_topic hex string in the `topic` param to fetch session details. If `false`, expects `topic` param to be the session topic hex string. |
| topic                | string | An active session topic (or pairing topic) hex string.                                                                                                                                          |

## Response

| Structure | Type   | Description                                                                              |
| --------- | ------ | ---------------------------------------------------------------------------------------- |
| session   | object | A standard [WcSession](/komodo-defi-framework/api/common_structures/#wc-session) object. |

#### ðŸ“Œ Examples

#### Command via pairing topic

```json
{
  "method": "wc_get_session",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "with_pairing_topic": true,
    "topic": "ad2fbcc28d410158431a3dc181d4365462df5cef6c90402b3e415c9d75f7c6f1"
  }
}
```

#### Command via session topic

```json
{
  "method": "wc_get_session",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "with_pairing_topic": false,
    "topic": "008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95"
  }
}
```

Both of the above queries return the same result.

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "session": {
          "topic": "008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95",
          "metadata": {
              "description": "Trust Wallet is a secure and easy-to-use mobile wallet",
              "url": "https://trustwallet.com",
              "icons": [
                  "https://trustwallet.com/assets/images/media/assets/TWT.png"
              ],
              "name": "Trust Wallet"
          },
          "pairing_topic": "ad2fbcc28d410158431a3dc181d4365462df5cef6c90402b3e415c9d75f7c6f1",
          "namespaces": {
              "cosmos": {
                  "chains": [
                      "cosmos:cosmoshub-4"
                  ],
                  "accounts": [
                      "cosmos:cosmoshub-4:cosmos1r5expjvu46u4s9yd4d2lpmss22p848lw2a7wa8"
                  ],
                  "methods": [
                      "cosmos_getAccounts",
                      "cosmos_signAmino",
                      "cosmos_signDirect"
                  ],
                  "events": []
              },
              "eip155": {
                  "chains": [
                      "eip155:43114"
                  ],
                  "accounts": [
                      "eip155:43114:0x85ed99633e9d03a30ed60209079944e1f4272048"
                  ],
                  "methods": [
                      "eth_sendTransaction",
                      "eth_signTransaction",
                      "personal_sign"
                  ],
                  "events": [
                      "accountsChanged",
                      "chainChanged"
                  ]
              }
          },
          "expiry": 1742187410
      }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Walletconnect: Get sessions";
export const description =
  "The wc_get_sessions method returns a list of active WalletConnect sessions.";

# wc\_get\_sessions

The `wc_get_sessions` method returns a list of active WalletConnect sessions. For details on a specific connection only, use the [wc\_get\_session](/komodo-defi-framework/api/v20-dev/wc_get_session/#wc-get-session) method instead.

## Arguments

| Structure | Type | Description                            |
| --------- | ---- | -------------------------------------- |
| None      | N/A  | This method takes no input parameters. |

## Response

| Structure | Type            | Description                                                                                       |
| --------- | --------------- | ------------------------------------------------------------------------------------------------- |
| sessions  | list of objects | A list of standard [WcSession](/komodo-defi-framework/api/common_structures/#wc-session) objects. |

#### ðŸ“Œ Examples

#### Command

```json
{
  "method": "wc_get_sessions",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {}
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "sessions": [
            {
                "topic": "feeabbad7ac1f1ba720d4441c299eab2b239f0deefb050fe50dbc7a350d55f75",
                "metadata": {
                    "description": "Trust Wallet is a secure and easy-to-use mobile wallet",
                    "url": "https://trustwallet.com",
                    "icons": [
                        "https://trustwallet.com/assets/images/media/assets/TWT.png"
                    ],
                    "name": "Trust Wallet"
                },
                "pairing_topic": "ad604cd186f5dc9498343fbd763f6d6963ea511de0e5d557a33a8e3790d6d4d5",
                "namespaces": {
                    "cosmos": {
                        "chains": [
                            "cosmos:cosmoshub-4"
                        ],
                        "accounts": [
                            "cosmos:cosmoshub-4:cosmos1r5expjvu46u4s9yd4d2lpmss22p848lw2a7wa8"
                        ],
                        "methods": [
                            "cosmos_getAccounts",
                            "cosmos_signAmino",
                            "cosmos_signDirect"
                        ],
                        "events": []
                    },
                    "eip155": {
                        "chains": [
                            "eip155:1"
                        ],
                        "accounts": [
                            "eip155:1:0x85ed99633e9d03a30ed60209079944e1f4272048"
                        ],
                        "methods": [
                            "eth_sendTransaction",
                            "eth_signTransaction",
                            "personal_sign"
                        ],
                        "events": [
                            "accountsChanged",
                            "chainChanged"
                        ]
                    }
                },
                "expiry": 1741952829
            },
            {
                "topic": "ed6c18e392b5d944f46b189be4403beaf8553279dfab946c333cc6d45ddb60a5",
                "metadata": {
                    "description": "Trust Wallet is a secure and easy-to-use mobile wallet",
                    "url": "https://trustwallet.com",
                    "icons": [
                        "https://trustwallet.com/assets/images/media/assets/TWT.png"
                    ],
                    "name": "Trust Wallet"
                },
                "pairing_topic": "5686b8065981fafca63bb4b2e7e9384bf348612981e69ac99fb8a698204aaed4",
                "namespaces": {
                    "cosmos": {
                        "chains": [
                            "cosmos:cosmoshub-4"
                        ],
                        "accounts": [
                            "cosmos:cosmoshub-4:cosmos1r5expjvu46u4s9yd4d2lpmss22p848lw2a7wa8"
                        ],
                        "methods": [
                            "cosmos_getAccounts",
                            "cosmos_signAmino",
                            "cosmos_signDirect"
                        ],
                        "events": []
                    },
                    "eip155": {
                        "chains": [
                            "eip155:1"
                        ],
                        "accounts": [
                            "eip155:1:0x85ed99633e9d03a30ed60209079944e1f4272048"
                        ],
                        "methods": [
                            "eth_sendTransaction",
                            "eth_signTransaction",
                            "personal_sign"
                        ],
                        "events": [
                            "accountsChanged",
                            "chainChanged"
                        ]
                    }
                },
                "expiry": 1741952162
            },
            {
                "topic": "24880ee97c56b95491e63d45aa7c743da4ea10bdffa73de7420ed91450c79c09",
                "metadata": {
                    "description": "Trust Wallet is a secure and easy-to-use mobile wallet",
                    "url": "https://trustwallet.com",
                    "icons": [
                        "https://trustwallet.com/assets/images/media/assets/TWT.png"
                    ],
                    "name": "Trust Wallet"
                },
                "pairing_topic": "2e6e4a25f2d55c26bba9c7c8dbb4979ff6eff30adac83fbc67110d67399f6023",
                "namespaces": {
                    "cosmos": {
                        "chains": [
                            "cosmos:cosmoshub-4"
                        ],
                        "accounts": [
                            "cosmos:cosmoshub-4:cosmos1r5expjvu46u4s9yd4d2lpmss22p848lw2a7wa8"
                        ],
                        "methods": [
                            "cosmos_getAccounts",
                            "cosmos_signAmino",
                            "cosmos_signDirect"
                        ],
                        "events": []
                    },
                    "eip155": {
                        "chains": [
                            "eip155:1",
                            "eip155:137",
                            "eip155:43114",
                            "eip155:56"
                        ],
                        "accounts": [
                            "eip155:137:0x85ed99633e9d03a30ed60209079944e1f4272048",
                            "eip155:1:0x85ed99633e9d03a30ed60209079944e1f4272048",
                            "eip155:43114:0x85ed99633e9d03a30ed60209079944e1f4272048",
                            "eip155:56:0x85ed99633e9d03a30ed60209079944e1f4272048"
                        ],
                        "methods": [
                            "eth_sendTransaction",
                            "eth_signTransaction",
                            "personal_sign"
                        ],
                        "events": [
                            "accountsChanged",
                            "chainChanged"
                        ]
                    }
                },
                "expiry": 1742183855
            },
            {
                "topic": "bdff85bde684f2f90237d37515177e21d8fa90297c0bf254393629bd9a134a92",
                "metadata": {
                    "description": "Trust Wallet is a secure and easy-to-use mobile wallet",
                    "url": "https://trustwallet.com",
                    "icons": [
                        "https://trustwallet.com/assets/images/media/assets/TWT.png"
                    ],
                    "name": "Trust Wallet"
                },
                "pairing_topic": "f8aedf596dde182559ed75ea6358db9f49cf5a8757c0f32551fca8062d613191",
                "namespaces": {
                    "cosmos": {
                        "chains": [
                            "cosmos:cosmoshub-4"
                        ],
                        "accounts": [
                            "cosmos:cosmoshub-4:cosmos1r5expjvu46u4s9yd4d2lpmss22p848lw2a7wa8"
                        ],
                        "methods": [
                            "cosmos_getAccounts",
                            "cosmos_signAmino",
                            "cosmos_signDirect"
                        ],
                        "events": []
                    },
                    "eip155": {
                        "chains": [
                            "eip155:1",
                            "eip155:137"
                        ],
                        "accounts": [
                            "eip155:137:0x85ed99633e9d03a30ed60209079944e1f4272048",
                            "eip155:1:0x85ed99633e9d03a30ed60209079944e1f4272048"
                        ],
                        "methods": [
                            "eth_sendTransaction",
                            "eth_signTransaction",
                            "personal_sign"
                        ],
                        "events": [
                            "accountsChanged",
                            "chainChanged"
                        ]
                    }
                },
                "expiry": 1741955363
            }
        ]
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Walletconnect: new connection";
export const description =
  "The wc_new_connection method returns a connection string which can be scanned as a QR code.";

# wc\_new\_connection

The `wc_new_connection` method returns a connection string which can be scanned as a QR code.
Once the connection has been established, you can activate EVM and Tendermint coins/tokens with WalletConnect via the [`priv_key_policy`](/komodo-defi-framework/api/common_structures/wallet/#priv-key-policy) parameter in [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/#enable-eth-with-tokens) and [enable\_tendermint\_with\_assets](/komodo-defi-framework/api/v20/coin_activation/enable_tendermint_with_assets/#enable-tendermint-with-assets).

EIP155 chain IDs are listed at [https://chainid.network/](https://chainid.network/).
Cosmos chain IDs are listed at [https://cosmos.directory/](https://cosmos.directory/).
For more detailed technical information, check out the [Walletconnect documentation](https://specs.walletconnect.com/2.0).

## Arguments

| Structure            | Type   | Description                                                                                                                                                                                                   |
| -------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| required\_namespaces | object | Contains two [WcConnNs](/komodo-defi-framework/api/common_structures/#wc-conn-ns) objects under the keys `eip155` and `cosmos`, which contain details of approved chains, methods and events while connected. |

## Response

| Structure | Type   | Description                                                                                                                               |
| --------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------- |
| url       | string | A WalletConnect URI address ([EIP-1328](https://eips.ethereum.org/EIPS/eip-1328)) used to send a connection request to the bridge server. |

Generally, this WalletConnect URI will be converted into a scanable [QR code](https://www.qr-code-generator.com/) in graphic user interfaces, so mobile dapps can easily request a connection.

When connecting with Metamask, only the network currently active in the mobile app should be included under the `required_namespaces.eip155.chains` parameter. The Metamask app will handle any subsequent coin network changes.
When connecting to Tendermint chains with Keplr, all coins intended to activate should be included under the `required_namespaces.cosmos.chains` parameter. The Keplr app will not handle subsequent coin network changes on the fly - they must be preapproved.

#### ðŸ“Œ Examples

#### Command

```json
{
  "method": "wc_new_connection",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "required_namespaces": {
      "eip155": {
        "chains": [
          "eip155:1",
          "eip155:56",
          "eip155:137",
          "eip155:43114"
        ],
        "methods": [
          "eth_sendTransaction",
          "eth_signTransaction",
          "personal_sign"
        ],
        "events": [
          "accountsChanged",
          "chainChanged"
        ]
      },
      "cosmos": {
        "chains": [
          "cosmos:cosmoshub-4"
        ],
        "methods": [
          "cosmos_signDirect",
          "cosmos_signAmino",
          "cosmos_getAccounts"
        ],
        "events": []
      }
    }
  }
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "url": "wc:31ad8ac6f21312e01ef7ff656ed5507eb9fdf435662fd86331e00b301e3627bfc14@2?symKey=589807f2063d237adfacc18d9443232785b532eaabe7838162c3d78cc3a9060f&relay-protocol=irn&expiryTimestamp=1741584419"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Walletconnect: Ping session";
export const description =
  "The wc_ping_session method pings a specific WalletConnect session.";

# wc\_ping\_session

The `wc_ping_session` pings the bridge server to check if specific WalletConnect session is responsive.
For details on a full list of active WalletConnect sessions, use the [wc\_get\_sessions](/komodo-defi-framework/api/v20-dev/wc_get_sessions/#wc-get-sessions) method.

## Arguments

| Structure            | Type | Description                                                                                                                                                                                     |
| -------------------- | ---- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| with\_pairing\_topic | bool | Defaults to `false`. If `true`, allows using the pairing\_topic hex string in the `topic` param to fetch session details. If `false`, expects `topic` param to be the session topic hex string. |

## Response

| Structure | Type   | Description                                                                              |
| --------- | ------ | ---------------------------------------------------------------------------------------- |
| session   | object | A standard [WcSession](/komodo-defi-framework/api/common_structures/#wc-session) object. |

#### ðŸ“Œ Examples

#### Command via pairing topic

#### Command via session topic

```json
{
  "method": "wc_ping_session",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "topic": "008bb50bc495f768d74d1a0c558fc3ca32ef35f5c507790ea27d01983421ed95"
  }
}
```

Both of the above queries return the same result.

#### Response

```json
```
