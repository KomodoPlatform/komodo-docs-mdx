export const title = "Komodo DeFi Framework Method: Enable BCH with Tokens";
export const description = "Using this method, you can enable BCH/tBCH along with multiple SLP tokens in a single command.";

# enable\_bch\_with\_tokens

The Komodo DeFi Framework supports Bitcoin Cash SLP tokens. Using this method, you can enable BCH/tBCH along with multiple SLP tokens in a single command.

### Request Parameters

| Parameter                | Type             | Description                                                                                                                                                                                                                                               |
| ------------------------ | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                   | string           | Ticker of the platform protocol coin. Options: `BCH` or `tBCH`                                                                                                                                                                                            |
| bchd\_urls               | array of strings | A list of BCHD gRPC API server URLs, used for  validation of SLP token transactions. It's recommended to add as many servers as possible. The URLs list can be found at [https://bchd.fountainhead.cash/](https://bchd.fountainhead.cash/).               |
| mode                     | object           | A standard [ActivationMode](/komodo-defi-framework/api/common_structures/activation/#activation-mode) object.                                                                                                                                             |
| tx\_history              | boolean          | If `true`, spawns a background loop to store the local cache of address(es) transactions. Defaults to `false`.                                                                                                                                            |
| slp\_tokens\_requests    | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                      |
| address\_format          | object           | Optional. Overwrites the address format from coins file, if set. A standard [AddressFormat](/komodo-defi-framework/api/common_structures/#address-format) object.                                                                                         |
| allow\_slp\_unsafe\_conf | boolean          | Optional, defaults to `false`. If `true`, allows bchd\_urls to be empty. **Warning:** it is highly unsafe to do so as it may lead to invalid SLP transactions generation and tokens burning.                                                              |
| get\_balances            | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                   |
| required\_confirmations  | integer          | Optional, defaults to value in the coins file, or `3` if not set. Confirmations to wait for steps in swap.                                                                                                                                                |
| requires\_notarization   | boolean          | Optional, defaults to `true`. Has no effect on BCH.                                                                                                                                                                                                       |
| tx\_history              | boolean          | Optional, defaults to `true`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method |
| utxo\_merge\_params      | object           | A standard [UtxoMergeParams](/komodo-defi-framework/api/common_structures/activation/#utxo-merge-params) object. Used to reduce a wallet's UTXO count in cases where it is causing significantly slower RPC responses.                                    |
|                          |                  |                                                                                                                                                                                                                                                           |

*   Go to: [https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums) for a full list of nodes/servers.

### Response Parameters

| Parameter             | Type    | Description                                                                                                                                                                              |
| --------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block        | integer | Block height of the coin being activated                                                                                                                                                 |
| bch\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/activation/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |
| slp\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/activation/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |

bch\_addresses\_infos and slp\_addresses\_infos are the same. This should be consolidated in the api.

### 📌 Examples

#### Request with tx\_history, cashaddress format, and automated utxo merging.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_bch_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BCH",
    "allow_slp_unsafe_conf": false,
    "bchd_urls": [
      "https://bchd.dragonhound.info"
    ],
    "mode": {
      "rpc": "Electrum",
      "rpc_data": {
        "servers": [
          {
            "url": "bch.imaginary.cash:50002",
            "protocol": "SSL"
          },
          {
            "url": "cashnode.bch.ninja:50002",
            "protocol": "SSL"
          },
          {
            "url": "electrum3.cipig.net:20055",
            "protocol": "SSL"
          }
        ]
      }
    },
    "tx_history": true,
    "slp_tokens_requests": [
      {
        "ticker": "ASLP-SLP",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false,
    "address_format": {
      "format": "cashaddress",
      "network": "bitcoincash"
    },
    "utxo_merge_params": {
      "merge_at": 50,
      "check_every": 10,
      "max_merge_at_once": 25
    }
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 1480481,
		"bch_addresses_infos": {
			"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
				"balances": {
					"spendable": "0.11398301",
					"unspendable": "0.00001"
				}
			}
		},
		"slp_addresses_infos": {
			"simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "036879df230663db4cd083c8eeb0f293f46abc460ad3c299b0089b72e6d472202c",
				"balances": {
					"ASLP": {
						"spendable": "5.2974",
						"unspendable": "0"
					}
				}
			}
		}
	},
	"id": null
}
```

#### Request with `get_balances` set to false

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_bch_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BCH",
    "allow_slp_unsafe_conf": false,
    "bchd_urls": [
      "https://bchd.dragonhound.info"
    ],
    "mode": {
      "rpc": "Electrum",
      "rpc_data": {
        "servers": [
          {
            "url": "bch.imaginary.cash:50002",
            "protocol": "SSL"
          },
          {
            "url": "cashnode.bch.ninja:50002",
            "protocol": "SSL"
          },
          {
            "url": "electrum3.cipig.net:20055",
            "protocol": "SSL"
          }
        ]
      }
    },
    "tx_history": true,
    "get_balances": false,
    "slp_tokens_requests": [
      {
        "ticker": "ASLP-SLP",
        "required_confirmations": 4
      }
    ]
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"current_block": 791267,
		"bch_addresses_infos": {
			"bitcoincash:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5qx64fztj": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2"
			}
		},
		"slp_addresses_infos": {
			"simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
				"derivation_method": {
					"type": "Iguana"
				},
				"pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
				"tickers": ["ASLP-SLP"]
			}
		}
	},
	"id": null
}
```

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformIsAlreadyActivated Error

In this case, you need to [disable](/komodo-defi-framework/api/legacy/disable_coin/) BCH and try again.

```json
{
    "mmrpc": "2.0",
    "error": "BCH",
    "error_path": "platform_coin_with_tokens",
    "error_trace": "platform_coin_with_tokens:281]",
    "error_type": "PlatformIsAlreadyActivated",
    "error_data": "BCH",
    "id": null
}
```

#### PlatformConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform BCH-wrong config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:286] prelude:56]",
    "error_type": "PlatformConfigIsNotFound",
    "error_data": "BCH-wrong",
    "id": null
}
```

#### UnexpectedPlatformProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected platform protocol UTXO for BTC",
    "error_path": "platform_coin_with_tokens.prelude.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:286] prelude:67] bch_with_tokens_activation:127]",
    "error_type": "UnexpectedPlatformProtocol",
    "error_data": {
        "ticker": "BTC",
        "protocol": {
            "type": "UTXO"
        }
    },
    "id": null
}
```

#### UnexpectedTokenProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected token protocol ERC20 { platform: \"ETH\", contract_address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\" } for USDT-ERC20",
    "error_path": "platform_coin_with_tokens.prelude.slp_token_activation",
    "error_trace": "platform_coin_with_tokens:301] platform_coin_with_tokens:114] prelude:67] slp_token_activation:47]",
    "error_type": "UnexpectedTokenProtocol",
    "error_data": {
        "ticker": "USDT-ERC20",
        "protocol": {
            "type": "ERC20",
            "protocol_data": {
                "platform": "ETH",
                "contract_address": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
            }
        }
    },
    "id": null
}
```

#### PlatformCoinCreationError Error

```json
{
    "mmrpc": "2.0",
    "error": "Error Using empty bchd_urls is unsafe for SLP users! on platform coin BCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "BCH",
        "error": "Using empty bchd_urls is unsafe for SLP users!"
    },
    "id": null
}
```

#### PlatformCoinCreationError Error (native)

```json
{
    "mmrpc": "2.0",
    "error": "Error bch:633] utxo:1704] utxo:995] Error parsing the native wallet configuration '/home/user/.Bitcoin Cash Testnet/Bitcoin Cash Testnet.conf': No such file or directory (os error 2) on platform coin tBCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "tBCH",
        "error": "bch:633] utxo:1704] utxo:995] Error parsing the native wallet configuration '/home/user/.Bitcoin Cash Testnet/Bitcoin Cash Testnet.conf': No such file or directory (os error 2)"
    },
    "id": null
}
```

#### PlatformCoinCreationError Error (Electrum server not responding)

```json
{
    "mmrpc": "2.0",
    "error": "Error bch:633] utxo:1667] Failed to connect to at least 1 of [ElectrumRpcRequest { url: \"bch0.kister.net:5100\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"testnet.imaginary.cash:5000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"blackie.c3-soft.com:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"tbch.loping.net:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"electroncash.de:5000\", protocol: TCP, disable_cert_verification: false }] in 5 seconds. on platform coin tBCH creation",
    "error_path": "platform_coin_with_tokens.bch_with_tokens_activation",
    "error_trace": "platform_coin_with_tokens:290] bch_with_tokens_activation:212]",
    "error_type": "PlatformCoinCreationError",
    "error_data": {
        "ticker": "tBCH",
        "error": "bch:633] utxo:1667] Failed to connect to at least 1 of [ElectrumRpcRequest { url: \"bch0.kister.net:5100\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"testnet.imaginary.cash:5000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"blackie.c3-soft.com:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"tbch.loping.net:6000\", protocol: TCP, disable_cert_verification: false }, ElectrumRpcRequest { url: \"electroncash.de:5000\", protocol: TCP, disable_cert_verification: false }] in 5 seconds."
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable ERC20";
export const description =
  "The enable_erc20 method allows you to activate additional ERC20 like tokens of a EVM type platform coin.";

# enable\_erc20

The `enable_erc20` method allows you to activate additional ERC20 like tokens of a EVM type platform coin. Before using this method, you first need to use the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the ERC20 like token coin.                                                               |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_erc20",
  "mmrpc": "2.0",
  "params": {
    "ticker": "BAT-ERC20",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "0x0d317904AF3BA3A993d557b6cba147FEA4DeB57E": {
        "spendable": "0",
        "unspendable": "0"
      }
    },
    "platform_coin": "ETH",
    "token_contract_address": "0x0d8775f648430679a709e98d2b0cb6250d2887ef",
    "required_confirmations": 3
  },
  "id": null
}
```

## Error - Platform coin is not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin ETH is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:126] lp_coins:2797]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "ETH",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token BAT-ERC20 is already activated",
  "error_path": "token",
  "error_trace": "token:119]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "BAT-ERC20",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token BATT-ERC20 config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:122] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "BATT-ERC20",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable ETH with Tokens";
export const description = "The enable_eth_with_tokens method allows you to enable a platform coin like ETH along with multiple ERC20 like tokens of the platform coin chain in a single command.";

# enable\_eth\_with\_tokens

The Komodo DeFi Framework supports ETH(Ethereum) and many other EVM type platform coins like AVAX(Avalanche), BNB(Binance), FTM(Fantom), MATIC(Polygon), ONE(Harmony), ETH-ARB20(Arbitrum).
Additionally, it supports ERC20 tokens on the ETH chain and associated ERC20 like tokens on the rest of the platform coin chains.Using this method, you can enable a platform coin along with multiple ERC20 like tokens of the platform coin chain in a single command.

### Request Parameters

| Parameter                   | Type             | Description                                                                                                                                                                                                                                                                                                                                  |
| --------------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                      | string           | Ticker of the platform protocol coin. Options: `ETH`, `AVAX`, `BNB`, `FTM`, `MATIC`, `ONE`, `ETH-ARB20`                                                                                                                                                                                                                                      |
| mm2                         | integer          | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                                                                                                                   |
| swap\_contract\_address     | string           | Address of etomic swap smart contract                                                                                                                                                                                                                                                                                                        |
| fallback\_swap\_contract    | string           | Address of backup etomic swap smart contract.                                                                                                                                                                                                                                                                                                |
| nodes                       | array of objects | A list of standard [CoinNode](/komodo-defi-framework/api/common_structures/activation/#coin-node) objects.                                                                                                                                                                                                                                   |
| erc20\_tokens\_requests     | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                                                                                                         |
| gas\_station\_decimals      | integer          | Optional, for ETH/ERC20 and other gas model chains. Defaults to `8`. Defines the decimals used to denominate the gas station response to gwei units. For example, the ETH gas station uses 8 decimals, which means that "average": 860 is equal to 86 gwei. While the Matic gas station uses 9 decimals, so 860 would mean 860 gwei exactly. |
| gas\_station\_policy.policy | string           | Optional, for ETH/ERC20 and other gas model chains. Defaults to `"MeanAverageFast"`. Defines the method of gas price calculation from the station response. `"MeanAverageFast"` will use the mean between average and fast fields. `"Average"` will return a simple average value.                                                           |
| get\_balances               | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                                                                                                      |
| priv\_key\_policy           | string           | Optional, defaults to `ContextPrivKey`. value can be `ContextPrivKey`,`Trezor` when Komodo DeFi Framework is built for native platforms. value can be `ContextPrivKey`, `Trezor`, `Metamask` when the Komodo DeFi Framework is built targeting `wasm`                                                                                        |
| required\_confirmations     | integer          | Optional, defaults to `3`. When the platform coin is involved, the number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap                                                                                                                                                          |
| requires\_notarization      | boolean          | Optional, defaults to `false`. If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step.                                                                    |
| rpc\_mode                   | string           | Optional, defaults to `Default`. Value can be `Metamask` only when the Komodo DeFi Framework is built targeting `wasm`.                                                                                                                                                                                                                      |
| tx\_history                 | boolean          | Optional, defaults to `false`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                                                                                   |
| nft\_req                    | object           | Optional, encapsulates the request parameters for NFT activation, including NFT provider configuration. A standard [NftProvider](/komodo-defi-framework/api/common_structures/nfts/#nft-provider) object.                                                                                                                                    |
| swap\_v2\_contracts         | object           | Optional, must be provided if "use\_trading\_proto\_v2" is true in [your configuration](/komodo-defi-framework/setup/configure-mm2-json/). A standard [SwapV2Contracts](/komodo-defi-framework/api/common_structures/activation/#swap-v2-contracts) object.                                                                                     |

When running in HD mode, do not use the `nft_req` object paramater when activating your NFT network coins. Instead, use the [enable\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/enable_nft/) method after activating.

### Response Parameters

| Parameter               | Type    | Description                                                                                                                                                                              |
| ----------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block          | integer | Block height of the coin being activated                                                                                                                                                 |
| eth\_addresses\_infos   | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/activation/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |
| erc20\_addresses\_infos | object  | A standard [AddressInfo](/komodo-defi-framework/api/common_structures/activation/#address-info) object. Note: the structure may vary based on the value of the `get_balances` parameter. |
| nfts\_infos             | list    | A list of standard [NftInfoBasic](/komodo-defi-framework/api/common_structures/nfts/#nft-info) objects.                                                                                  |

### 📌 Examples

#### Request including optional gas station parameters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_eth_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ETH",
    "gas_station_url": "https://ethgasstation.info/json/ethgasAPI.json",
    "gas_station_decimals": 8,
    "gas_station_policy": {
      "policy": "MeanAverageFast"
    },
    "mm2": 1,
    "priv_key_policy": "ContextPrivKey",
    "swap_contract_address": "0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80",
    "fallback_swap_contract": "0x8500AFc0bc5214728082163326C2FF0C73f4a871",
    "nodes": [
      {
        "url": "https://eth1.cipig.net:18555",
        "komodo_proxy": false
      },
      {
        "url": "https://eth2.cipig.net:18555",
        "komodo_proxy": false
      },
      {
        "url": "https://eth3.cipig.net:18555",
        "komodo_proxy": false
      }
    ],
    "tx_history": true,
    "erc20_tokens_requests": [
      {
        "ticker": "APE-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "BCH-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "MINDS-ERC20",
        "required_confirmations": 4
      },
      {
        "ticker": "BUSD-ERC20",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "current_block": 20590537,
      "eth_addresses_infos": {
          "0x083C32B38e8050473f6999e22f670d1404235592": {
              "derivation_method": {
                  "type": "Iguana"
              },
              "pubkey": "04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b",
              "balances": {
                  "spendable": "0",
                  "unspendable": "0"
              }
          }
      },
      "erc20_addresses_infos": {
          "0x083C32B38e8050473f6999e22f670d1404235592": {
              "derivation_method": {
                  "type": "Iguana"
              },
              "pubkey": "04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b",
              "balances": {
                  "BUSD-ERC20": {
                      "spendable": "0",
                      "unspendable": "0"
                  },
                  "MINDS-ERC20": {
                      "spendable": "0",
                      "unspendable": "0"
                  },
                  "APE-ERC20": {
                      "spendable": "0",
                      "unspendable": "0"
                  },
                  "BCH-ERC20": {
                      "spendable": "0",
                      "unspendable": "0"
                  }
              }
          }
      },
      "nfts_infos": {}
  },
  "id": null
}
```

#### Request with `get_balances` set to false

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_eth_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "MATIC",
    "get_balances": false,
    "tx_history": false,
    "gas_station_url": "https://gasstation-mainnet.matic.network/",
    "swap_contract_address": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "fallback_swap_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "swap_v2_contracts": {
      "maker_swap_v2_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
      "taker_swap_v2_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
      "nft_maker_swap_v2_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE"
    },
    "nodes": [
      {
        "url": "https://polygon-rpc.com"
      },
      {
        "url": "https://node.komodo.earth:8080/polygon"
      },
      {
        "url": "https://block-proxy.komodo.earth/rpc/matic"
      }
    ],
    "erc20_tokens_requests": [
      {
        "ticker": "PGX-PLG20",
        "required_confirmations": 4
      },
      {
        "ticker": "AAVE-PLG20",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false
  }
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "current_block": 60937035,
        "eth_addresses_infos": {
            "0x083C32B38e8050473f6999e22f670d1404235592": {
                "derivation_method": {
                    "type": "Iguana"
                },
                "pubkey": "04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b"
            }
        },
        "erc20_addresses_infos": {
            "0x083C32B38e8050473f6999e22f670d1404235592": {
                "derivation_method": {
                    "type": "Iguana"
                },
                "pubkey": "04ec603f83519cc2150bd99ed0ed6b3f7f029dedff2957cd22542e2504e3d2a7953c084f907cce2f0e26fb0cfc55e06925bf0f88a92b904224dba8ebafdf98ce7b",
                "tickers": [
                    "PGX-PLG20",
                    "AAVE-PLG20"
                ]
            }
        },
        "nfts_infos": {}
    },
    "id": null
}
```

#### Request including NFT initialization

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_eth_with_tokens",
  "mmrpc": "2.0",
  "params": {
    "ticker": "MATIC",
    "get_balances": false,
    "tx_history": false,
    "nft_req": {
      "type": "Moralis",
      "info": {
        "url": "https://moralis-proxy.komodo.earth"
      }
    },
    "gas_station_url": "https://gasstation-mainnet.matic.network/",
    "swap_contract_address": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "fallback_swap_contract": "0x9130b257D37A52E52F21054c4DA3450c72f595CE",
    "nodes": [
      {
        "url": "https://polygon-rpc.com"
      },
      {
        "url": "https://node.komodo.earth:8080/polygon"
      },
      {
        "url": "https://block-proxy.komodo.earth/rpc/matic"
      }
    ],
    "erc20_tokens_requests": [
      {
        "ticker": "PGX-PLG20",
        "required_confirmations": 4
      },
      {
        "ticker": "AAVE-PLG20",
        "required_confirmations": 4
      }
    ],
    "required_confirmations": 5,
    "requires_notarization": false
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "current_block": 61329162,
      "eth_addresses_infos": {
          "0x083C32B38e8050473f6999e22f670d1404235592": {
              "derivation_method": {
                  "type": "Iguana"
              },
              "pubkey": "04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b"
          }
      },
      "erc20_addresses_infos": {
          "0x083C32B38e8050473f6999e22f670d1404235592": {
              "derivation_method": {
                  "type": "Iguana"
              },
              "pubkey": "04d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2a91c9ce32b6fc5489c49e33b688423b655177168afee1b128be9b2fee67e3f3b",
              "tickers": [
                  "PGX-PLG20",
                  "AAVE-PLG20"
              ]
          }
      },
      "nfts_infos": {
          "0x73a5299824cd955af6377b56f5762dc3ca4cc078,1": {
              "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
              "token_id": "1",
              "chain": "POLYGON",
              "contract_type": "ERC721",
              "amount": "1"
          },
          "0x3987dfed574927e7a3309758ccf949ad2403fcbb,1": {
              "token_address": "0x3987dfed574927e7a3309758ccf949ad2403fcbb",
              "token_id": "1",
              "chain": "POLYGON",
              "contract_type": "ERC1155",
              "amount": "1"
          }
      }
  },
  "id": null
}
```

### Error Responses

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformIsAlreadyActivated Error

In this case, you need to [disable](/komodo-defi-framework/api/legacy/disable_coin/) the platform coin and try again.

```json
{
    "mmrpc": "2.0",
    "error": "ETH",
    "error_path": "platform_coin_with_tokens",
    "error_trace": "platform_coin_with_tokens:297]",
    "error_type": "PlatformIsAlreadyActivated",
    "error_data": "ETH",
    "id": null
}
```

#### PlatformConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform ETH config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:302] prelude:79]",
    "error_type": "PlatformConfigIsNotFound",
    "error_data": "ETH",
    "id": null
}
```

#### CoinProtocolParseError Error

```json
{
    "mmrpc": "2.0",
    "error": "Platform coin ETH protocol parsing failed: invalid type: null, expected adjacently tagged enum CoinProtocol",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:302] prelude:82]",
    "error_type": "CoinProtocolParseError",
    "error_data": {
        "ticker": "ETH",
        "error": "invalid type: null, expected adjacently tagged enum CoinProtocol"
    },
    "id": null
}
```

#### UnexpectedPlatformProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected platform protocol QTUM for ETH",
    "error_path": "platform_coin_with_tokens.prelude.eth_with_token_activation",
    "error_trace": "platform_coin_with_tokens:302] prelude:90] eth_with_token_activation:64]",
    "error_type": "UnexpectedPlatformProtocol",
    "error_data": { "ticker": "ETH", "protocol": { "type": "QTUM" } },
    "id": null
}
```

#### TokenConfigIsNotFound Error

```json
{
    "mmrpc": "2.0",
    "error": "Token BTUSD-ERC20 config is not found",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:79]",
    "error_type": "TokenConfigIsNotFound",
    "error_data": "BTUSD-ERC20",
    "id": null
}
```

#### TokenProtocolParseError Error

```json
{
    "mmrpc": "2.0",
    "error": "Token BUSD-ERC20 protocol parsing failed: unknown variant `TERC20`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`",
    "error_path": "platform_coin_with_tokens.prelude",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:82]",
    "error_type": "TokenProtocolParseError",
    "error_data": {
        "ticker": "BUSD-ERC20",
        "error": "unknown variant `TERC20`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`"
    },
    "id": null
}
```

#### UnexpectedTokenProtocol Error

```json
{
    "mmrpc": "2.0",
    "error": "Unexpected token protocol QRC20 { platform: \"ETH\", contract_address: \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\" } for BUSD-ERC20",
    "error_path": "platform_coin_with_tokens.prelude.erc20_token_activation",
    "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:90] erc20_token_activation:58]",
    "error_type": "UnexpectedTokenProtocol",
    "error_data": {
        "ticker": "BUSD-ERC20",
        "protocol": {
            "type": "QRC20",
            "protocol_data": {
                "platform": "ETH",
                "contract_address": "0x4Fabb145d64652a948d72533023f6E7A623C7C53"
            }
        }
    },
    "id": null
}
```

#### InvalidRequest Error

Returned when the `rpc_mode` parameter is set to `Metamask` but the Komodo DeFi Framework was not built targeting `wasm`.

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `Metamask`, expected `Default`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:118]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `Metamask`, expected `Default`",
    "id": null
}
```

#### Transport Error

Returned when coin nodes are unresponsive.

```json
{
    "mmrpc": "2.0",
    "error": "Failed to get client version for all nodes",
    "error_path": "platform_coin_with_tokens.mod",
    "error_trace": "platform_coin_with_tokens:454] mod:717]",
    "error_type": "Transport",
    "error_data": "Failed to get client version for all nodes",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable SLP";
export const description =
  "The enable_slp method allows you to activate additional SLP tokens.";

# enable\_slp

The `enable_slp` method allows you to activate additional SLP tokens. Before using this method, you first need to use the [enable\_bch\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_bch_with_tokens/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the SLP token.                                                                           |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_slp",
  "mmrpc": "2.0",
  "params": {
    "ticker": "SPICE-SLP",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v": {
        "spendable": "0",
        "unspendable": "0"
      }
    },
    "token_id": "7f8889682d57369ed0e32336f8b7e0ffec625a35cca183f4e81fde4e71a538a1",
    "platform_coin": "BCH",
    "required_confirmations": 3
  },
  "id": null
}
```

## Error - BCH not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin BCH is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:102] lp_coins:1924]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "BCH",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token SPICE-SLP is already activated",
  "error_path": "token",
  "error_trace": "token:95]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "SPICE-SLP",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token SPICE-SLP-WRONG config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:98] prelude:56]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "SPICE-SLP-WRONG",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable Tendermint Token";
export const description =
  "The enable_tendermint_token method allows you to activate additional Tendermint assets.";

# enable\_tendermint\_token

The `enable_tendermint_token` method allows you to activate additional Tendermint assets. Before using this method, you first need to use the [enable\_tendermint\_with\_assets](/komodo-defi-framework/api/v20/coin_activation/enable_tendermint_with_assets/) method.

| parameter                                  | Type    | Description                                                                                        |
| ------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------- |
| ticker                                     | string  | Ticker of the Tendermint asset.                                                                    |
| activation\_params.required\_confirmations | integer | Optional. Confirmations to wait for steps in swap. Defaults to value in the coins file if not set. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_tendermint_token",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ATOM-IBC_IRIS",
    "activation_params": {
      "required_confirmations": 3
    }
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "balances": {
      "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k": {
        "spendable": "0.028306",
        "unspendable": "0"
      }
    },
    "platform_coin": "IRIS"
  },
  "id": null
}
```

## Error - Platform coin is not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin IRIS is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:126] lp_coins:2847]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "IRIS",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token ATOM-IBC_IRIS is already activated",
  "error_path": "token",
  "error_trace": "token:119]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "ATOM-IBC_IRIS",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token UP-AND-ATOM config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:122] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "UP-AND-ATOM",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Enable Tendermint Token with Assets";
export const description = "Use this method to activate Tendermint coins (COSMOS/IRIS/OSMOSIS) and IBC assets in a single command.";

# enable\_tendermint\_with\_assets

Use this method to activate Tendermint coins (COSMOS/IRIS/OSMOSIS) and IBC assets in a single command.

### Request Parameters

| Parameter               | Type             | Description                                                                                                                                                                                                                                                               |
| ----------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                  | string           | Ticker of the platform protocol coin.  Options: `ATOM`, `IRIS`, `OSMOSIS`                                                                                                                                                                                                 |
| mm2                     | integer          | Required if not set in `coins` file. Informs the Komodo DeFi Framework API whether or not the coin is expected to function. Accepted values are `0` or `1`                                                                                                                |
| tokens\_params          | array of objects | A list of standard [TokensRequest](/komodo-defi-framework/api/common_structures/activation/#tokens-request) objects.                                                                                                                                                      |
| nodes                   | array of objects | A list of [CoinNode objects](/komodo-defi-framework/api/common_structures/activation/#coin-node).                                                                                                                                                                         |
| priv\_key\_policy       | string           | Optional, defaults to `ContextPrivKey`. value can be `ContextPrivKey`,`Trezor` when Komodo DeFi Framework is built for native platforms. value can be `ContextPrivKey`, `Trezor`, `Metamask` when the Komodo DeFi Framework is built targeting `wasm`                     |
| tx\_history             | boolean          | Optional, defaults to `false`. If `true` the Komodo DeFi Framework API will preload transaction history as a background process. Must be set to `true` to use the [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method                |
| required\_confirmations | integer          | Optional, defaults to `3`. When the platform coin is involved, the number of confirmations for the Komodo DeFi Framework API to wait during the transaction steps of an atomic swap                                                                                       |
| requires\_notarization  | boolean          | Optional, defaults to `false`. If `true`, coins protected by [Komodo Platform's dPoW security](https://satindergrewal.medium.com/delayed-proof-of-work-explained-9a74250dbb86) will wait for a notarization before progressing to the next atomic swap transactions step. |
| get\_balances           | boolean          | Optional, defaults to `true`. If `false`, coin and token balances will not be returned in the response, and the response will be returned more quickly.                                                                                                                   |

### Response Parameters

| Parameter        | Type             | Description                                                                                                                                                                       |
| ---------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| current\_block   | integer          | Block height of the coin being activated                                                                                                                                          |
| ticker           | string           | Ticker of the platform protocol coin, as input in the request.                                                                                                                    |
| address          | string           | An address for the activated coin                                                                                                                                                 |
| balance          | object           | Only returned when `get_balances` is `true`. A standard [BalanceInfo](/komodo-defi-framework/api/common_structures/#balance-info) object.                                         |
| tokens\_balances | array of objects | Only returned when `get_balances` is `true`. A list of standard [AddressInfo](/komodo-defi-framework/api/common_structures/activation/#address-info) objects, one for each token. |
| tokens\_tickers  | array            | Only returned when `get_balances` is `false`. A list of each token which was activated.                                                                                           |

### 📌 Examples

#### Request with `get_balances` set to `false`

```json
{
  "method": "enable_tendermint_with_assets",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "ticker": "IRIS",
    "tokens_params": [
      {
        "ticker": "ATOM-IBC_IRIS"
      }
    ],
    "nodes": [
      {
        "url": "https://iris-rpc.alpha.komodo.earth/",
        "api_url": "https://iris-api.alpha.komodo.earth/",
        "grpc_url": "https://iris-grpc.alpha.komodo.earth/",
        "ws_url": "wss://iris-rpc.alpha.komodo.earth/websocket"
      },
      {
        "url": "https://rpc.irishub-1.irisnet.org",
        "komodo_proxy": false
      }
    ],
    "tx_history": true,
    "get_balances": false
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"ticker": "IRIS",
		"address": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
		"current_block": 19769628,
		"tokens_tickers": ["ATOM-IBC_IRIS"]
	},
	"id": null
}
```

#### Request with `get_balances` as `true`

```json
{
  "method": "enable_tendermint_with_assets",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "ticker": "IRIS",
    "tokens_params": [
      {
        "ticker": "ATOM-IBC_IRIS"
      }
    ],
    "nodes": [
      {
        "url": "https://iris-rpc.alpha.komodo.earth/",
        "api_url": "https://iris-api.alpha.komodo.earth/",
        "grpc_url": "https://iris-grpc.alpha.komodo.earth/",
        "ws_url": "wss://iris-rpc.alpha.komodo.earth/websocket"
      },
      {
        "url": "https://rpc.irishub-1.irisnet.org",
        "komodo_proxy": false
      }
    ],
    "get_balances": true
  }
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"ticker": "IRIS",
		"address": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
		"current_block": 19769638,
		"balance": {
			"spendable": "44.147264",
			"unspendable": "0"
		},
		"tokens_balances": {
			"ATOM-IBC_IRIS": {
				"spendable": "0.028306",
				"unspendable": "0"
			}
		}
	},
	"id": null
}
```

### Error Types

| Structure                  | Type   | Description                                                                         |
| -------------------------- | ------ | ----------------------------------------------------------------------------------- |
| CoinProtocolParseError     | string | Parsing the protocol of the platform coin you are trying to activate failed         |
| InternalError              | string | The request was failed due to an Komodo DeFi Framework API internal error           |
| PlatformCoinCreationError  | string | There was an error when trying to activate the platform coin                        |
| PlatformConfigIsNotFound   | string | Config of the platform coin you are trying to activate is not found                 |
| PlatformIsAlreadyActivated | string | The platform coin you are trying to activate is already activated                   |
| PrivKeyNotAllowed          | string | The privkey is not allowed                                                          |
| TokenConfigIsNotFound      | string | Config of the token you are trying to activate is not found                         |
| TokenProtocolParseError    | string | Parsing the protocol of the token you are trying to activate failed                 |
| Transport                  | string | The request was failed due to a network error                                       |
| UnexpectedDerivationMethod | string | The derivation method used is unexpected                                            |
| UnexpectedPlatformProtocol | string | Unexpected platform protocol found for the platform coin you are trying to activate |
| UnexpectedTokenProtocol    | string | Unexpected protocol is found in the config of the token you are trying to activate  |

#### PlatformConfigIsNotFound Error

```json
{
  "mmrpc": "2.0",
  "error": "Platform WALDO config is not found",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:302] prelude:79]",
  "error_type": "PlatformConfigIsNotFound",
  "error_data": "WALDO",
  "id": null
}
```

#### PlatformIsAlreadyActivated Error

```json
{
  "mmrpc": "2.0",
  "error": "IRIS",
  "error_path": "platform_coin_with_tokens",
  "error_trace": "platform_coin_with_tokens:297]",
  "error_type": "PlatformIsAlreadyActivated",
  "error_data": "IRIS",
  "id": null
}
```

#### CoinProtocolParseError

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin IRIS protocol parsing failed: invalid type: null, expected adjacently tagged enum CoinProtocol",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:302] prelude:82]",
  "error_type": "CoinProtocolParseError",
  "error_data": {
    "ticker": "IRIS",
    "error": "invalid type: null, expected adjacently tagged enum CoinProtocol"
  },
  "id": null
}
```

### UnexpectedPlatformProtocol Error

```json
{
  "mmrpc": "2.0",
  "error": "Unexpected platform protocol BCH { slp_prefix: \"simpleledger\" } for BCH",
  "error_path": "platform_coin_with_tokens.prelude.tendermint_with_assets_activation",
  "error_trace": "platform_coin_with_tokens:302] prelude:90] tendermint_with_assets_activation:92]",
  "error_type": "UnexpectedPlatformProtocol",
  "error_data": {
    "ticker": "BCH",
    "protocol": {
      "type": "BCH",
      "protocol_data": {
        "slp_prefix": "simpleledger"
      }
    }
  },
  "id": null
}
```

### TokenConfigIsNotFound Error

```json
{
  "mmrpc": "2.0",
  "error": "Token GALT config is not found",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "GALT",
  "id": null
}
```

### TokenProtocolParseError Error

```json
{
  "mmrpc": "2.0",
  "error": "Token BABYDOGE-BEP20 protocol parsing failed: unknown variant `WOOF`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`",
  "error_path": "platform_coin_with_tokens.prelude",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:82]",
  "error_type": "TokenProtocolParseError",
  "error_data": {
    "ticker": "BABYDOGE-BEP20",
    "error": "unknown variant `WOOF`, expected one of `UTXO`, `QTUM`, `QRC20`, `ETH`, `ERC20`, `SLPTOKEN`, `BCH`, `TENDERMINT`, `TENDERMINTTOKEN`, `LIGHTNING`, `SOLANA`, `SPLTOKEN`, `ZHTLC`"
  },
  "id": null
}
```

### UnexpectedTokenProtocol Error

```json
{
  "mmrpc": "2.0",
  "error": "Unexpected token protocol UTXO for KMD",
  "error_path": "platform_coin_with_tokens.prelude.tendermint_with_assets_activation",
  "error_trace": "platform_coin_with_tokens:314] platform_coin_with_tokens:109] prelude:90] tendermint_with_assets_activation:101]",
  "error_type": "UnexpectedTokenProtocol",
  "error_data": {
    "ticker": "KMD",
    "protocol": {
      "type": "UTXO"
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Methods";
export const description =
  "The methods in this document allow activation and management of ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Methods

ZHTLC coins, like Pirate (ARRR) and the test coin ZOMBIE take a little longer to enable, and use a new two step method to enable.
Activation can take a little while the first time, as we need to download some block cache data, and build a wallet database.
Subsequent enabling will be faster, but still take a bit longer than other coins. The second step for activation is optional, but allows us to check the status of the activation process.

To activate ZHTLC coins, you need to use the [task::enable\_z\_coin](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#withdraw-tasks) methods:

*   Initialize activation with with [task::enable\_z\_coin::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_z_coin/#initialize-zhtlc-coin-activation)
*   Query activation status with [task::enable\_z\_coin::status](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_z_coin/#activation-status)
*   Cancel activation with [task::enable\_z\_coin::cancel](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_z_coin/#cancel-activation)

To withdraw ZHTLC coins, you need to use the [task::withdraw](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#withdraw-tasks) methods:

*   Generate a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#init)
*   Query its status with [task::withdraw::status](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#status)
*   Cancel generating the transaction with [task::withdraw::cancel](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#cancel)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)

ZHTLC coins are not compatible with the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods.
To get the transaction history for ZHTLC coins, you need to use the [z\_coin\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/zhtlc_tx_history/) method.

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: Task Managed Coin Activation";
export const description =
  "Komodo DeFi Framework Method: Task Managed Coin Activation";

# Task Managed Coin Activation

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework: QTUM Activation Tasks";
export const description =
  "The methods in this document allow activation of QTUM.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_qtum

## init {{label : 'task::enable_qtum::init', tag : 'API-v2'}}

QTUM coins are activated using this method. For UTXO coins, refer to [task::enable\_utxo::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::init",
  "params": {
    "ticker": "QTUM",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10050"
            },
            {
              "url": "electrum3.cipig.net:20050",
              "ws_url": "electrum3.cipig.net:30050",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_qtum::status', tag : 'API-v2'}}

After running the `task::enable_qtum::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful, Iguana mode)

| Parameter        | Type            | Description                                                                                                         |
| ---------------- | --------------- | ------------------------------------------------------------------------------------------------------------------- |
| status           | string          | A short indication of how the requested process is progressing.                                                     |
| details.result   | object          | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .ticker          | string          | The ticker of the coin being activated                                                                              |
| .current\_block  | integer         | The block height of the coin being activated                                                                        |
| .wallet\_balance | object          | Information about the addresses of the coin being activated                                                         |
| ..wallet\_type   | string          | In Trezor mode, this will return `HD`                                                                               |
| ..address        | string          | One of the addresses in the account for the coin being activated                                                    |
| ..balance        | object          | Contains the spendable and unspendable balance for this address                                                     |
| ...spendable     | string(numeric) | Spendable balance for this address                                                                                  |
| ...unspendable   | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                  |

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "ticker": "tQTUM",
            "current_block": 4619066,
            "wallet_balance": {
                "wallet_type": "Iguana",
                "address": "qcpVcxMBo9ZikpGiTaM8SFBV1W14QVmGzo",
                "balance": {
                    "tQTUM": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                }
            }
        }
    },
    "id": null
}
```

## user\_action {{label : 'task::enable_qtum::user_action', tag : 'API-v2'}}

If the `task::enable_qtum::status` returns `UserActionRequired`, we need to use the `task::enable_qtum::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_qtum::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Error Cases

`CoinCreationError`: Returned when a coin is not supported.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin QTUM creation: Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config",
      "error_path": "lib.init_qtum_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_qtum_activation:71] utxo_coin_builder:234]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "QTUM",
        "error": "Coin doesn't support Trezor hardware wallet. Please consider adding the 'trezor_coin' field to the coins config"
      }
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: UTXO Coin Activation Tasks";
export const description =
  "The methods in this document allow activation of UTXO coins.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# task::enable\_utxo

## init {{label : 'task::enable_utxo::init', tag : 'API-v2'}}

UTXO coins are activated using this method. For QTUM coins, refer to [task::enable\_qtum::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#init)

#### Arguments

| Parameter                       | Type    | Description                                                                                                                                                                                                      |
| ------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ticker                          | string  | The ticker of the coin you want to enable.                                                                                                                                                                       |
| activation\_params              | object  | An object containing the actvation parameters below.                                                                                                                                                             |
| .priv\_key\_policy              | string  | Defaults to `ContextPrivKey`. Set as `Trezor` to activate in Trezor mode.                                                                                                                                        |
| .min\_addresses\_number         | integer | How many additional addreesses to generate at a minimum.                                                                                                                                                         |
| .scan\_policy                   | string  | Whether or not to scan for new addresses. Select from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will result in multple requests to the Komodo DeFi Framework.                              |
| .gap\_limit                     | integer | The max number of empty addresses in a row. If transactions were sent to an address outside the `gap_limit`, they will not be identified when scanning.                                                          |
| .mode                           | object  | An object containing RPC type and data parameters as below.                                                                                                                                                      |
| ..rpc                           | string  | UTXO RPC mode. Options: `{ "rpc":"Native" }` if running a native blockchain node, or `"rpc":"Electrum"` to use electrum RPCs. If using electrum, a list of electrum servers is required under `rpc_data.servers` |
| ..rpc\_data                     | object  | An object containing electrum server information.                                                                                                                                                                |
| ...servers                      | list    | A list of electrum server URLs ([https://github.com/KomodoPlatform/coins/tree/master/electrums](https://github.com/KomodoPlatform/coins/tree/master/electrums))                                                  |
| ....url                         | object  | The url and port of a coins electrum server                                                                                                                                                                      |
| ....ws\_url                     | object  | Optional. Used to define electrum server url/port for websocket connections.                                                                                                                                     |
| ....protocol                    | object  | Defines electrum server protocol as `TCP` or `SSL`. Defaults to `TCP`                                                                                                                                            |
| ....disable\_cert\_verification | boolean | Optional. For `SSL` electrum connections, this will allow expired certificates.                                                                                                                                  |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Activation in Trezor mode

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::init",
  "params": {
    "ticker": "KMD",
    "activation_params": {
      "mode": {
        "rpc": "Electrum",
        "rpc_data": {
          "servers": [
            {
              "url": "electrum2.cipig.net:10001"
            },
            {
              "url": "electrum3.cipig.net:20001",
              "ws_url": "electrum3.cipig.net:30001",
              "protocol": "SSL"
            }
          ]
        }
      },
      "scan_policy": "scan_if_new_wallet",
      "priv_key_policy": "Trezor",
      "min_addresses_number": 3,
      "gap_limit": 20
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 1
  },
  "id": null
}
```

## status {{label : 'task::enable_utxo::status', tag : 'API-v2'}}

After running the `task::enable_utxo::init` method, we can query the status of activation to check its progress.
The response will return the following:

*   Result of the task (success or error)
*   Progress status (what state the task is in)
*   Required user action (what user should do before the task can continue)

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful, Trezor mode)

| Parameter            | Type            | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| -------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| status               | string          | A short indication of how the requested process is progressing.                                                                                                                                                                                                                                                                                                                                                                                              |
| details.result       | object          | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                                                                                                                                                                                                                                                                                                          |
| .ticker              | string          | The ticker of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                       |
| .current\_block      | integer         | The block height of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                                 |
| .wallet\_balance     | object          | Information about the addresses of the coin being activated                                                                                                                                                                                                                                                                                                                                                                                                  |
| ..wallet\_type       | string          | In Trezor mode, this will return `HD`                                                                                                                                                                                                                                                                                                                                                                                                                        |
| ..accounts           | list            | A list of addresses and related information for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                     |
| ...account\_index    | integer         | `ACCOUNT_ID` child in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` BIP44 derivation path. **Please don't confuse with kdf global Iguana/HD/HW account.**                                                                                                                                                                                                                                                                                                   |
| ...derivation\_path  | string          | Derivation path up to the `COIN` child. E.g. `"m/44'/141'/0'"`                                                                                                                                                                                                                                                                                                                                                                                               |
| ...total\_balance    | object          | Combined total spendable and unconfirmed balances of all account addresses                                                                                                                                                                                                                                                                                                                                                                                   |
| ....spendable        | string(numeric) | Combined total spendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                   |
| ....unspendable      | string(numeric) | Combined total unspendable balance of all account addreesses                                                                                                                                                                                                                                                                                                                                                                                                 |
| ...addresses         | list            | A list of addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                              |
| ....address          | string          | One of the addresses in the account for the coin being activated                                                                                                                                                                                                                                                                                                                                                                                             |
| ....derivation\_path | string          | The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the address.                                                                                                                                                                                                                                                                                                                                                  |
| ....chain            | string          | Returns `External` when `CHAIN=0` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. Returns `Internal` when `CHAIN=1` in the `m/44'/COIN'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` derivation path. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ....balance          | object          | Contains the spendable and unspendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                              |
| .....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                                                                                                                                                                                                           |
| .....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                                                                                                                                                                                                           |

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "ticker": "KMD",
          "current_block": 4230457,
          "wallet_balance": {
              "wallet_type": "HD",
              "accounts": [
                  {
                      "account_index": 0,
                      "derivation_path": "m/44'/141'/0'",
                      "total_balance": {
                          "KMD": {
                              "spendable": "20",
                              "unspendable": "0"
                          }
                      },
                      "addresses": [
                          {
                              "address": "RMC1cWXngQf2117apEKoLh3x27NoG88yzd",
                              "derivation_path": "m/44'/141'/0'/0/0",
                              "chain": "External",
                              "balance": {
                                  "KMD": {
                                      "spendable": "20",
                                      "unspendable": "0"
                                  }
                              }
                          }
                      ]
                  }
              ]
          }
      }
  },
  "id": null
}
```

#### Response (ready, successful, Iguana mode)

| Parameter        | Type            | Description                                                                                                         |
| ---------------- | --------------- | ------------------------------------------------------------------------------------------------------------------- |
| status           | string          | A short indication of how the requested process is progressing.                                                     |
| details.result   | object          | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .ticker          | string          | The ticker of the coin being activated                                                                              |
| .current\_block  | integer         | The block height of the coin being activated                                                                        |
| .wallet\_balance | object          | Information about the addresses of the coin being activated                                                         |
| ..wallet\_type   | string          | In Trezor mode, this will return `HD`                                                                               |
| ..address        | string          | One of the addresses in the account for the coin being activated                                                    |
| ..balance        | object          | Contains the spendable and unspendable balance for this address                                                     |
| ...spendable     | string(numeric) | Spendable balance for this address                                                                                  |
| ...unspendable   | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                  |

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "ticker": "KMD",
          "current_block": 4230467,
          "wallet_balance": {
              "wallet_type": "Iguana",
              "address": "RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d",
              "balance": {
                  "KMD": {
                      "spendable": "1718.15606485",
                      "unspendable": "0"
                  }
              }
          }
      }
  },
  "id": null
}
```

#### Response (in progress)

| Parameter | Type   | Description                                                 |
| --------- | ------ | ----------------------------------------------------------- |
| status    | string | Will return `InProgress` if task is not yet comepleted      |
| details   | string | An indication of the current step of the activation process |

Possible In Progress Cases:

*   `ActivatingCoin`: The first step of activation. It does not require any action from the user.
*   `RequestingWalletBalance`: The first step of activation, while initial balances info is being requested. It does not require any action from the user.
*   `Finishing`: Activation process completed
*   `WaitingForTrezorToConnect`: Waiting for the user to plugin a Trezor device
*   `FollowHwDeviceInstructions`: Waiting for the user to follow the instructions on the device

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "RequestingWalletBalance"
  },
  "id": null
}
```

#### Response (ready, error)

| Parameter      | Type   | Description                                                                                                         |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------- |
| status         | string | A short indication of how the requested process is progressing.                                                     |
| details.result | object | Depending on the state of process progress, this will contain different information as detailed in the items below. |
| .error         | string | The ticker of the coin being activated                                                                              |
| .error\_path   | string | Used for debugging. A reference to the function in code base which returned the error                               |
| .error\_trace  | string | Used for debugging. A trace of lines of code which led to the returned error                                        |
| .error\_type   | string | An enumerated error identifier to indicate the category of error                                                    |
| .error\_data   | string | Additonal context for the error type                                                                                |

Possible Error Cases:

*   `TaskTimedOut` - Timed out waiting for coin activation, connecting to the device trezor or for user to confirm pubkey)
*   `CoinCreationError` - Error during activation. E.g. incorrect or inactive electrum servers.
*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20/utils/task_init_trezor/#details-for-hw-error-error-type) for more info.

## user\_action {{label : 'task::enable_utxo::user_action', tag : 'API-v2'}}

If the `task::enable_utxo::status` returns `UserActionRequired`, we need to use the `task::enable_utxo::user_action` method to enter our PIN

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                      |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                      |
| user\_action              | object          | Object containing the params below                                                                                                                                                               |
| user\_action.action\_type | string          | Will be `TrezorPin` for this method                                                                                                                                                              |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_utxo::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Activation";
export const description =
  "The methods in this document allow activation of ZHTLC coins like ARRR & ZOMBIE.";

# Initialize ZHTLC Coin Activation {{label : 'task::enable_z_coin::init', tag : 'API-v2'}}

To enable Z coins you also need to [install some Zcash
Params](https://forum.komodoplatform.com/t/installing-zcash-params/603)

#### Arguments

| Structure          | Type   | Description                                                                                                          |
| ------------------ | ------ | -------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                           |
| activation\_params | object | A standard [ActivationRpcData](/komodo-defi-framework/api/common_structures/activation/#activation-rpc-data) object. |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Enable Z coin without any optional parameters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10133"
            },
            {
              "url": "zombie.dragonhound.info:20133",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30059"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:1443"
          ]
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from block 2528700, with custom `.zcash-params` path and scan params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10133"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:1443"
          ],
          "sync_params": {
            "height": 2528700
          }
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Sync from sapling activation height (earliest)

The Z coin lightwallet client only supports blocks that are post-sapling. The sapling activation height for Z coins can be found in the [coins file](https://github.com/KomodoPlatform/coins/blob/master/coins)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "url": "zombie.dragonhound.info:10133"
            },
            {
              "url": "zombie.dragonhound.info:20133",
              "protocol": "SSL",
              "ws_url": "zombie.dragonhound.info:30059"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:1443"
          ],
          "sync_params": "earliest"
        }
      },
      "zcash_params_path": "/home/username/path_to/.zcash-params",
      "scan_blocks_per_iteration": 100,
      "scan_interval_ms": 200
    }
  }
}
```

#### Using websockets to sync from Proof of Keys Day, 2023.

[About proof of Keys Day](https://hackernoon.com/not-your-keys-not-your-bitcoin-jan3bitcoin-z6k3ktb)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::init",
  "mmrpc": "2.0",
  "params": {
    "ticker": "ZOMBIE",
    "activation_params": {
      "mode": {
        "rpc": "Light",
        "rpc_data": {
          "electrum_servers": [
            {
              "protocol": "SSL",
              "url": "zombie.dragonhound.info:20133",
              "ws_url": "zombie.dragonhound.info:30059"
            }
          ],
          "light_wallet_d_servers": [
            "http://zombie.dragonhound.info:1443"
          ],
          "sync_params": {
            "date": 1672704000
          }
        }
      }
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## Activation Status {{label : 'task::enable_z_coin::status', tag : 'API-v2'}}

Z coins need to build sync a local block cache and wallet database before they can be used. Using `task_id` as an input, this method will return the current status of the activation process.

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure | Type   | Description                                                                                                           |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------- |
| status    | string | A short indication of how the enabling is progressing.                                                                |
| details   | object | Depending on the state of enabling progress, this will contain different information as shown in the responses below. |

#### 📌 Examples

#### Status of Z coin activation

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::status",
  "mmrpc": "2.0",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (ActivatingCoin - enabling has started)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "ActivatingCoin"
  },
  "id": null
}
```

#### Response (UpdatingBlocksCache)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "UpdatingBlocksCache": {
        "current_scanned_block": 265930,
        "latest_block": 269656
      }
    }
  },
  "id": null
}
```

#### Response (BuildingWalletDb)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": {
      "BuildingWalletDb": {
        "current_scanned_block": 265311,
        "latest_block": 269656
      }
    }
  },
"id": null
}
```

#### Response (Complete)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "ticker": "ZOMBIE",
          "current_block": 794431,
          "wallet_balance": {
              "wallet_type": "Iguana",
              "address": "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj",
              "balance": {
                  "spendable": "0",
                  "unspendable": "0"
              }
          },
          "first_sync_block": {
              "requested": 792991,
              "is_pre_sapling": false,
              "actual": 792991
          }
      }
  },
  "id": null
}
```

#### Response (CoinCreationError - no Zcash Params)

```json
{
	"error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
	"error_path": "lib.z_coin_activation.z_coin",
	"error_trace": "lib:104] z_coin_activation:218] z_coin:1007]",
	"error_type": "CoinCreationError",
	"error_data": {
		"ticker": "ZOMBIE",
		"error": "ZCashParamsNotFound"
	}
}
```

#### Response (error - NoSuchTask)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

#### Response (error - InvalidRequest)

```json
{
  "mmrpc": "2.0",
  "error": "Error parsing request: invalid value: integer `-205`, expected u64",
  "error_path": "dispatcher",
  "error_trace": "dispatcher:109]",
  "error_type": "InvalidRequest",
  "error_data": "invalid value: integer `-205`, expected u64",
  "id": 42
}
```

#### Response (Enabling complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "ticker": "ZOMBIE",
      "current_block": 269657,
      "wallet_balance": {
        "wallet_type": "Iguana",
        "address": "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj",
        "balance": {
          "spendable": "29.99989008",
          "unspendable": "0"
        }
      }
    }
  },
  "id": null
}
```

#### Response (no Zcash Params)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin ZOMBIE creation: ZCashParamsNotFound",
      "error_path": "lib.z_coin_activation.z_coin",
      "error_trace": "lib:103] z_coin_activation:192] z_coin:761]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "ZOMBIE",
        "error": "ZCashParamsNotFound"
      }
    }
  },
  "id": null
}
```

#### Response (error - no such task)

You'll see this if the task number does not exist, or the task has already completed.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```

## Cancel Activation {{label : 'task::enable_z_coin::cancel', tag : 'API-v2'}}

If you want to cancel the enabling process before it has completed, you can use this method.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the enabling process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::enable_z_coin::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (success - already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_standalone_coin.manager",
  "error_trace": "init_standalone_coin:144] manager:101]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

#### Response (error - no such task)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_standalone_coin",
  "error_trace": "init_standalone_coin:119]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": null
}
```
export const title = "Komodo DeFi SDK RPC Protocol v2.0";
export const description = "Starting with version beta-2.1.3434, the Komodo DeFi SDK supports the standardized protocol format called mmrpc 2.0.";

# Komodo DeFi SDK RPC Protocol v2.0

Starting with version [beta-2.1.3434](https://github.com/KomodoPlatform/komodo-defi-framework/releases/tag/beta-2.1.3434), the Komodo DeFi SDK supports the standardized protocol format called `mmrpc 2.0`.

It includes a uniform request, successful and error response formats. At the moment, only a few RPC methods support the `mmrpc 2.0` protocol.

## Request

| Structure | Type              | Description                                                                                                                                                       |
| --------- | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi SDK RPC protocol. Must be exactly "2.0"                                                                      |
| userpass  | string (optional) | your password for protected RPC methods. Skip this field if the specified `method` is public                                                                      |
| method    | string            | the name of the method to be invoked                                                                                                                              |
| params    | object (optional) | a structured value that holds the parameter values to be used during the invocation of the method. This field may be omitted if the method doesn't take arguments |
| id        | number (optional) | the identifier is established by the client. Komodo DeFi SDK will reply with the same value in the Response object if the `id` field is included and not `NULL`   |

### Response (Success)

| Structure | Type              | Description                                                                                 |
| --------- | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc     | string            | the string specifying the version of the Komodo DeFi SDK RPC protocol                       |
| result    | object            | the value of this field is determined by the method invoked on Komodo DeFi SDK              |
| id        | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### Response (Error)

| Structure    | Type              | Description                                                                                 |
| ------------ | ----------------- | ------------------------------------------------------------------------------------------- |
| mmrpc        | string            | the string specifying the version of the Komodo DeFi API RPC protocol                       |
| error        | string            | the common error description                                                                |
| error\_path  | string            | the error path consisting of file names separated by a dot similar to JSON path notation    |
| error\_trace | string            | the error path consisting of file and line number pairs separated by ']'                    |
| error\_type  | string            | the string error identifier used to determine the cause of the error                        |
| error\_data  | object            | an object containing the error data of the corresponding `error_type`                       |
| id           | number (optional) | the identifier established by the client. The same value as in the Request if it was passed |

### 📌 Examples

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "The amount 0.000005 is too small",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:301]",
  "error_type": "AmountIsTooSmall",
  "error_data": {
    "amount": "0.000005"
  },
  "id": 0
}
```

## Common Komodo DeFi SDK Request / Response Objects

The folowing objects are used in the request or response of multiple Komodo DeFi SDK methods.

## Error types

#### NotSufficientBalance

The `available` balance is not sufficient to transfer the specified amount.

| Structure | Type             | Description                                                                                                                                            |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin      | string           | the name of the coin which balance is not sufficient. This coin name may differ from the requested coin. For example, ERC20 fees are paid by ETH (gas) |
| available | string (numeric) | the balance available for transfer                                                                                                                     |
| required  | string (numeric) | the amount required to transfer the specified amount. This amount is necessary but may not be sufficient                                               |

#### Response (NotSufficientBalance error)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough DOC to withdraw: available 69.75066225, required at least 1000.00001",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1379] utxo_common:449]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "DOC",
    "available": "69.75066225",
    "required": "1000.00001"
  },
  "id": 0
}
```

#### ZeroBalanceToWithdrawMax

The available balance is zero.

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### AmountTooLow

The specified amount is too low. Required at least `threshold`.

| Structure | Type             | Description                                          |
| --------- | ---------------- | ---------------------------------------------------- |
| amount    | string (numeric) | the amount the user was willing to transfer          |
| threshold | string (numeric) | the `amount` has not to be less than the `threshold` |

#### InvalidAddress

The specified `to` address is not valid.

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| (none)    | string | the error description |

#### InvalidFeePolicy

The specified `fee` is not valid.

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| (none)    | string | the error description |

#### Response (InvalidFeePolicy error - attempt to use EthGas for UTXO coin)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1371]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "id": 0
}
```

#### Response (InvalidFeePolicy error - attempt to use UtxoFixed or UtxoPerKbyte for ETH coin)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'EthGas' fee type, found UtxoFixed",
  "error_path": "eth",
  "error_trace": "eth:535]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'EthGas' fee type, found UtxoFixed",
  "id": 0
}
```

#### NoSuchCoin

The specified coin was not found or is not activated yet.

| Structure | Type   | Description                                   |
| --------- | ------ | --------------------------------------------- |
| coin      | string | the not found `coin` specified in the Request |

#### Transport

The request was failed due to a network error.

| Structure | Type   | Description                     |
| --------- | ------ | ------------------------------- |
| (none)    | string | the transport error description |

#### InternalError

The request was failed due to an Komodo DeFi API internal error.

| Structure | Type   | Description                    |
| --------- | ------ | ------------------------------ |
| (none)    | string | the internal error description |

## Error cases

### Error - Coin not active

```json
{
  "mmrpc": "2.0",
  "error": "TTT-SLP",
  "error_path": "my_tx_history_v2.lp_coins",
  "error_trace": "my_tx_history_v2:389] lp_coins:2847]",
  "error_type": "CoinIsNotActive",
  "error_data": "TTT-SLP",
  "id": null
}
```

### Error - Coin not compatible

```json
{
  "mmrpc": "2.0",
  "error": "TTT-SLP",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:336]",
  "error_type": "NotSupportedFor",
  "error_data": "TTT-SLP",
  "id": null
}
```

### Error - Coin enabled without tx\_history = true

```json
{
  "mmrpc": "2.0",
  "error": "Storage is not initialized for TTT-SLP",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:343]",
  "error_type": "StorageIsNotInitialized",
  "error_data": "Storage is not initialized for TTT-SLP",
  "id": null
}
```

### Error - Local database failed

```json
{
  "mmrpc": "2.0",
  "error": "SqliteFailure(Error { code: Unknown, extended_code: 1 }, Some(\"no such column: block_height\"))",
  "error_path": "my_tx_history_v2.sql_tx_history_storage",
  "error_trace": "my_tx_history_v2:351] sql_tx_history_storage:472]",
  "error_type": "StorageError",
  "error_data": "SqliteFailure(Error { code: Unknown, extended_code: 1 }, Some(\"no such column: block_height\"))",
  "id": null
}
```

There are some common objects that are used in the Komodo DeFi SDK RPC protocol. These standard objects have been collected and grouped into the following sections:

*   [Activation](/komodo-defi-framework/api/common_structures/activation/)
*   [Swaps](/komodo-defi-framework/api/common_structures/swaps/)
*   [Lightning Network](/komodo-defi-framework/api/common_structures/lightning/)
*   [Non-fungible Tokens](/komodo-defi-framework/api/common_structures/nfts/)
export const title = "Komodo DeFi Framework Method: Lightning Network Initialization Tasks";
export const description = "The methods in this document allow initialization of Lightning Network on Komodo DeFi Framework.";

# Lightning Network Initialization Tasks

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Initialize Lightning {{label : 'task::enable_lightning::init', tag : 'API-v2'}}

The `task::enable_lightning::init` request a task to run a lightning node. Use the returned `task_id` as an input to check the status of the lightning node (i.e, running or still initiating). An error will be returned if a lightning node was already running for the requested ticker.

Any methods with a `task::` prefix will be linked to a numeric `task_id` value which is used to query the status or outcome of the task.

### Request Parameters

| Parameter          | Type   | Description                                                                                                                         |
| ------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------- |
| ticker             | string | Ticker of coin to activate                                                                                                          |
| activation\_params | object | A standard [LightningActivationParams](/komodo-defi-framework/api/common_structures/lightning/#lightning-activation-params) object. |

#### 📌 Example

```json
{
  "method": "task::enable_lightning::init",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "ticker": "tBTC-lightning",
    "activation_params": {
      "name": "KomoDeFi-Docs-Node-1",
      "listening_port": 9735,
      "color": "000000",
      "payment_retries": 5
    }
  },
  "id": 2
}
```

### Response Parameters

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "task_id": 1
    },
    "id": null
}
```

#### L2ConfigIsNotFound Error

Coin is not in `coins` file. Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20/lightning/#coin-config-parameters) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Layer 2 tBTC-lightning config is not found",
	"error_path": "init_l2.prelude",
	"error_trace": "init_l2:82] prelude:82]",
	"error_type": "L2ConfigIsNotFound",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

#### InvalidRequest Error

A parameter is incorrect.

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string "9735", expected u16",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:110]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string "9735", expected u16",
	"id": 762
}
```

#### UnexpectedL2Protocol Error

Coin is wrong protocol type.

```json
{
	"mmrpc": "2.0",
	"error": "Unexpected layer 2 protocol UTXO for tBTC-segwit",
	"error_path": "init_l2.prelude.lightning_activation",
	"error_trace": "init_l2:82] prelude:93] lightning_activation:92]",
	"error_type": "UnexpectedL2Protocol",
	"error_data": {
		"ticker": "tBTC-segwit",
		"protocol": {
			"type": "UTXO"
		}
	},
	"id": 2
}
```

#### Internal Error

Address already in use.

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Error",
        "details": {
            "error": "I/O error Address already in use (os error 48)",
            "error_path": "lib.lightning_activation.ln_p2p",
            "error_trace": "lib:103] lightning_activation:280] ln_p2p:196]",
            "error_type": "Internal",
            "error_data": "I/O error Address already in use (os error 48)"
        }
    },
    "id": null
}
```

#### PlatformCoinIsNotActivated Error

The selected coin is not activated. It needs to be activated before the lightning node can be initialized.

```json
{
	"mmrpc": "2.0",
	"error": "Platform coin tBTC-lightning is not activated",
	"error_path": "init_l2.lp_coins",
	"error_trace": "init_l2:87] lp_coins:3087]",
	"error_type": "PlatformCoinIsNotActivated",
	"error_data": "tBTC-lightning",
	"id": 2
}
```

[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1197550229](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1197550229)
Another bug found, will fix it in an upcoming PR. Platform coin should be tBTC-segwit. You can leave as it is in docs until I fix it.

#### InvalidPlatformConfiguration Error

Coin's configuration is missing a required parameter.  Refer to the [coins file configuration for lightning](/komodo-defi-framework/api/v20/lightning/#coin-configuration) for more information.

```json
{
	"mmrpc": "2.0",
	"error": "Invalid config for platform coin: tBTC-segwit, error: 'avg_blocktime' field is not found in platform coin config",
	"error_path": "init_l2.lightning_activation",
	"error_trace": "init_l2:95] lightning_activation:254]",
	"error_type": "InvalidPlatformConfiguration",
	"error_data": {
		"platform_coin_ticker": "tBTC-segwit",
		"err": "'avg_blocktime' field is not found in platform coin config"
	},
	"id": 2
}
```

## Initialization Status {{label : 'task::enable_lightning::status', tag : 'API-v2'}}

The `task::enable_lightning::status` request checks the status of lightning node initialization.

### Request Parameters

| Parameter            | Type    | Description                                                                                                                 |
| -------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------- |
| task\_id             | integer | The task id returned from `task::enable_lightning::init`                                                                    |
| forget\_if\_finished | boolean | Optional, defaults to `true`. If `false`, the status of the `task_id` will still be available after the task has completed. |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::status",
  "params": {
    "task_id": 1,
    "forget_if_finished": false
  },
  "id": 2
}
```

### Response Parameters

| Parameter      | Type   | Description                                                                                  |
| -------------- | ------ | -------------------------------------------------------------------------------------------- |
| platform\_coin | string | The coin ticker for which the lightning node is being intitialized.                          |
| address        | string | This node's address for the activated coin.                                                  |
| balance        | object | A standard [balanceInfo](/komodo-defi-framework/api/common_structures/#balance-info) object. |

The unspendable balance for lightning is different to a layer-1 unspendable balance. The channel reserve is part of the unspendable balance in lightning - the user will get this part of the balance on chain when closing the channel, but it can't be spent on layer 2 (lightning) because it's part of the security mechanism to prevent channel breaches and ensure that both parties fulfill their obligations within the channel.

#### Response (ready, success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "platform_coin": "BTC-segwit",
            "address": "0321937a095229510bd2b02a930d7b7eb273147e348ef1086b22e8790e3c609804",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

In the above response spendable will always be 0 since the balance is unspendable until connections with lightning channels counterparties are established.
Using the [my\_balance](/komodo-defi-framework/api/legacy/my_balance/) method after the coin is activated will get the spendable balance depending on how many channel counterparties are online.
For exact channels balances and which channels are usable, use [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20/lightning/channels/#list-open-channels-by-filter).

#### Response (in progress state)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "InProgress",
        "details": "ReadingNetworkGraphFromFile"
    },
    "id": null
}
```

Possible in progress statuses:

*   ActivatingCoin
*   GettingFeesFromRPC
*   ReadingNetworkGraphFromFile
*   InitializingChannelManager
*   InitializingPeerManager
*   ReadingScorerFromFile
*   InitializingBackgroundProcessor
*   ReadingChannelsAddressesFromFile

## Cancel Initialization {{label : 'task::enable_lightning::cancel', tag : 'API-v2'}}

The `task::enable_lightning::cancel` request cancels lightning node initialization.

### Request Parameters

| Parameter | Type    | Description                                              |
| --------- | ------- | -------------------------------------------------------- |
| task\_id  | integer | The task id returned from `task::enable_lightning::init` |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::enable_lightning::cancel",
  "params": {
    "task_id": 1
  },
  "id": 1
}
```

#### Response

```json
{
    "mmrpc": "2.0",
    "result": "success",
    "id": null
}
```

#### TaskFinished Error

Task has already been completed.

```json
{
    "mmrpc": "2.0",
    "error": "Task is finished already",
    "error_path": "init_l2.manager",
    "error_trace": "init_l2:157] manager:104]",
    "error_type": "TaskFinished",
    "error_data": 3,
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Channels";
export const description = "The methods in this document allow management of Lightning Network Channels on Komodo DeFi Framework.";

# Lightning Network Channels

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Open Channel {{label : 'lightning::channels::open_channel', tag : 'API-v2'}}

The `lightning::channels::open_channel` method opens a new channel with a remote node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                                                                                                                                                                                                                                           |
| ---------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | The ticker of the coin you would like to open a channel for.                                                                                                                                                                                                                                                                                                                          |
| node\_address    | string  | Lightning node addresses always have a format of `node_pubkey`@`ip_address`:`port`.                                                                                                                                                                                                                                                                                                   |
| amount           | object  | A standard [LightningChannelAmount](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-amount) object.                                                                                                                                                                                                                                                         |
| push\_msat       | integer | Optional. The amount in millisatoshi to push to the counterparty while openning, to create inbound liquidity for the channel. Using the `push_msat` parameter avoids having to send funds in a separate request later. Please note that the funds given using push\_msat is given unconditionally, meaning that there is no proof of payment in a preimage as with paying an invoice. |
| channel\_options | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                                                             |
| channel\_configs | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                                                               |

#### 📌 Example using an exact amount

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Exact",
      "value": 0.004
    }
  },
  "id": 22
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@233.112.95.142:9735"
	},
	"id": 22
}
```

#### 📌 Example using max available with channel options and configs

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::open_channel",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735",
    "amount": {
      "type": "Max"
    },
    "push_msat": 0,
    "channel_options": {
      "proportional_fee_in_millionths_sats": 0,
      "base_fee_msat": 1000,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    },
    "channel_configs": {
      "counterparty_locktime": 144,
      "our_htlc_minimum_msat": 1,
      "negotiate_scid_privacy": false,
      "max_inbound_in_flight_htlc_percent": 10,
      "commit_upfront_shutdown_pubkey": true,
      "inbound_channels_confirmations": 3,
      "their_channel_reserve_sats": 10000
    }
  },
  "id": null
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
		"node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
	},
	"id": null
}
```

## Close Channel {{label : 'lightning::channels::close_channel', tag : 'API-v2'}}

The `lightning::channels::close_channel` method closes a channel with a remote node.

### Request Parameters

| Parameter    | Type    | Description                                                                  |
| ------------ | ------- | ---------------------------------------------------------------------------- |
| coin         | string  | The ticker of the coin you would like to close a channel for.                |
| uuid         | string  | Unique channel identifier.                                                   |
| force\_close | boolean | Optional, defaults to `false`. If `true`, will force closure of the channel. |

It is not recommended to force close a channel unless the counterparty is offline or unreachable for a long time.
Force closure of a channel will makeresult in the party who initiates the force closure to wait for a number of blocks (equal to the `force_close_spend_delay` value returned by [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20/lightning/channels/#get-channel-details)) before they can get their funds on chain.

#### 📌 Example to force closing a channel

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::close_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
    "force_close": true
  },
  "id": 8
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": "Initiated closing of channel with uuid: 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

To see if the channel is closed or not, use the [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20/lightning/channels/#get-channel-details) method.

Already added this message to the response in this upcoming PR KomodoPlatform/komodo-defi-framework#1814, also added force\_close\_spend\_delay to the close channel response. No need to change the docs now until this PR is merged KomodoPlatform/komodo-defi-framework#1814, I will write a comment about all the changes when opening the PR for review.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1202462310](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1202462310)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `uuid`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `uuid`",
	"id": 8
}
```

#### NoSuchChannel Error

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid 2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"error_path": "close_channel",
	"error_trace": "close_channel:55]",
	"error_type": "NoSuchChannel",
	"error_data": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
	"id": 8
}
```

## Update Channel {{label : 'lightning::channels::update_channel', tag : 'API-v2'}}

The `lightning::channels::update_channel` method updates channel options.

### Request Parameters

| Parameter        | Type   | Description                                                                                                                     |
| ---------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string | The ticker of the coin you would like to update channel configuration options for.                                              |
| uuid             | string | Unique channel identifier.                                                                                                      |
| channel\_options | object | A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object. |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::update_channel",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
    "channel_options": {
      "proportional_fee_in_millionths_sats": 1,
      "base_fee_msat": 1100,
      "cltv_expiry_delta": 72,
      "max_dust_htlc_exposure_msat": 5000000,
      "force_close_avoidance_max_fee_satoshis": 1000
    }
  },
  "id": 2
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"channel_options": {
			"proportional_fee_in_millionths_sats": 1,
			"base_fee_msat": 1100,
			"cltv_expiry_delta": 72,
			"max_dust_htlc_exposure_msat": 5000000,
			"force_close_avoidance_max_fee_sats": null
		}
	},
	"id": 2
}
```

#### NoSuchChannel Error

Channel with the given uuid is not foun on the lightning network.

```json
{
	"mmrpc": "2.0",
	"error": "No such channel with uuid dc33b998-8589-44fd-a246-256a582e8942",
	"error_path": "update_channel",
	"error_trace": "update_channel:61]",
	"error_type": "NoSuchChannel",
	"error_data": "dc33b998-8589-44fd-a246-256a582e8942",
	"id": 2
}
```

## Get Channel Details {{label : 'lightning::channels::get_channel_details', tag : 'API-v2'}}

The `lightning::channels::get_channel_details` method returns details about a channel.

### Request Parameters

| Parameter | Type   | Description                                                        |
| --------- | ------ | ------------------------------------------------------------------ |
| coin      | string | The ticker of the coin you would like to view channel details for. |
| uuid      | string | Unique channel identifier.                                         |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_channel_details",
  "params": {
    "coin": "tBTC-lightning",
    "uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92"
  },
  "id": 54
}
```

The response will vary depending on whether the channel status is `open` or `closed`.

#### Response (opened channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 959722,
			"is_outbound": true,
			"balance_msat": 959722000,
			"outbound_capacity_msat": 950125000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": 3,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}
	},
	"id": 54
}
```

`force_close_spend_delay` is not currently available in get\_channel\_details response, but should be added soon.
It's configured by the other side using counterparty\_locktime where we are the counterparty to the other side, the other side gets to set it since it's part of their security considerations since they have to be online at least once during this period if we tried to steal funds by broadcasting an old commitment transaction. We set our own too in our configs where it shows in the channel details of the other side as force\_close\_spend\_delay. The other side can't set counterparty\_locktime to any value when opening the channel though, since they can set it to a very long time and our funds will be locked for a very long time if we force closed the channel, this is where counterparty\_channel\_config\_limits::our\_locktime\_limit comes in as the other side can't make counterparty\_locktime larger than this limit otherwise the channel gets rejected and is never opened in the first place.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206109172](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206109172)

#### Response (closed channel)

```json
{
	"mmrpc": "2.0",
	"result": {
		"status": "Open",
		"details": {
			"uuid": "2b50e274-c173-4fa1-95f3-97f9f82ace92",
			"channel_id": "4a869115dfd260d0925a1266f544a6ab36666448d4bbc0e2a028d8426b2b6d4e",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": "4e6d2b6b42d828a0e2c0bbd448646636aba644f566125a92d060d2df1591864a",
			"funding_value": "98982",
			"closing_tx": "f1591864ad0e2c0bad060425a94b8288646e6d24f56b6d2db42d4636aba64612",
			"closure_reason": "null",
			"claiming_tx": "null",
			"claimed_balance": "null",
			"funding_generated_in_block": "null",
			"is_outbound": false,
			"is_public": true,
			"is_closed": true,
			"created_at": 167273496966,
			"closed_at": 171069595935
		}
	},
	"id": 54
}
```

The closed response above was spoofed, so the values are not accurate. Once code is finalised we should generate a real one.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206150595](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206150595)

#### InvalidRequest Error

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `coin`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `coin`",
	"id": 54
}
```

## Get Claimable Balances {{label : 'lightning::channels::get_claimable_balances', tag : 'API-v2'}}

The `lightning::channels::get_claimable_balances` method returns a list of claimable balances for a coin.

### Request Parameters

| Parameter                         | Type    | Description                                                                     |
| --------------------------------- | ------- | ------------------------------------------------------------------------------- |
| coin                              | string  | The ticker of the coin you would like to view claimable balances for.           |
| include\_open\_channels\_balances | integer | Optional, defaults to `false`. If `true`, includes balances from open channels. |

#### 📌 Example to update all available channel options

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::get_claimable_balances",
  "params": {
    "coin": "tBTC-lightning",
    "include_open_channels_balances": true
  },
  "id": 762
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": [{
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 0
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 38815
		}
	}, {
		"ClaimableOnChannelClose": {
			"claimable_amount_satoshis": 959539
		}
	}],
	"id": 762
}
```

This response may include additional information in future.
[https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\\_r1206152132](https://github.com/KomodoPlatform/komodo-docs-mdx/pull/31#discussion\\_r1206152132)

## List Open Channels by Filter  {{label : 'lightning::channels::list_open_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_open_channels_by_filter` method returns a list of open channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                              |
| --------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view open channels for.                                                                         |
| filter          | object  | A standard [LightningOpenChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-open-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                      |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                         |

#### 📌 Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"funding_tx": null,
			"funding_tx_output_index": null,
			"funding_tx_value_sats": 4000,
			"is_outbound": true,
			"balance_msat": 4000000,
			"outbound_capacity_msat": 4000000,
			"inbound_capacity_msat": 0,
			"current_confirmations": 0,
			"required_confirmations": null,
			"is_ready": false,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "is_outbound": false
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "02eb0b178576857b6990ba57d56aa08f651a05a8098496004f42df5e7440b0a9c1"
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 215,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

#### 📌 Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_open_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 1000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"open_channels": [{
			"uuid": "adde8899-ba11-435a-9433-d180e2f5af6b",
			"channel_id": "4cde288dd1ec1691b51cac8890a867a58fcfc98670e32ed7a112402b819a01f1",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "f1019a812b4012a1d72ee37086c9cf8fa567a89088ac1cb59116ecd18d28de4c",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": true,
			"balance_msat": 38998197,
			"outbound_capacity_msat": 38598197,
			"inbound_capacity_msat": 1803,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": true,
			"is_public": false
		}, {
			"uuid": "f86dbfae-898a-4f49-8149-58d9dfa095a5",
			"channel_id": "143cd1fa265c4bed860ce81f369d5c4ee8ef80c5c91872176f524348c2c1fff4",
			"counterparty_node_id": "03cf982b1c16f7d3561d8bb17f7cf30057389d228756bce517c0f3cc111b38ecd0",
			"funding_tx": "f4ffc1c24843526f177218c9c580efe84e5c9d361fe80c86ed4b5c26fad13c14",
			"funding_tx_output_index": 0,
			"funding_tx_value_sats": 40000,
			"is_outbound": false,
			"balance_msat": 5211,
			"outbound_capacity_msat": 0,
			"inbound_capacity_msat": 38994789,
			"current_confirmations": 218,
			"required_confirmations": 3,
			"is_ready": true,
			"is_usable": false,
			"is_public": false
		}],
		"limit": 10,
		"skipped": 0,
		"total": 2,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 55
}
```

## List Closed Channels by Filter  {{label : 'lightning::channels::list_closed_channels_by_filter', tag : 'API-v2'}}

The `lightning::channels::list_closed_channels_by_filter` method returns a list of closed channels filtered by the provided filter object.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                                  |
| --------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | The ticker of the coin you would like to view closed channels for.                                                                           |
| filter          | object  | A standard [LightningClosedChannelsFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-closed-channels-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                          |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                             |

#### 📌 Example without using `filter` parameter

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 55
}
```

#### Response

```json
{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		},
        {
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": true,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for inbound channels only

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "channel_type": "Inbound"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
            "uuid": "de006b65-bd30-41e1-9b44-5e04518a3d98",
            "channel_id": "928a041767f23c461fe3b41a387bd3f91a10b284cd7f90fb04544eda4f38f967",
            "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
            "closure_reason": "Channel closed because of an exception: We consider the minimum depth to be unreasonably large. Expected minimum: (1). Actual: (3)",
            "is_outbound": false,
            "is_public": false,
            "is_closed": true,
            "created_at": 1683866505,
            "closed_at": 1683866505
        }],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for a specific `node_id`

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
    }
  },
  "id": 55
}
```

#### Response

```json

{"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "434681f8-95e5-484f-af49-fa80d8ae857b",
			"channel_id": "ebfbf19193ee26f25c6e236e863786e59818c11e136ce9c50dba63ec44b0c89a",
			"counterparty_node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
			"closure_reason": "Channel closed because counterparty force-closed with message chan size of 0.00004 BTC is below min chan size of 0.0002 BTC",
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1683864431,
			"closed_at": 1683864432
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	}, "id": 55
}
```

#### 📌 Example with `filter` for a node with between 100000 and 500000 satoshi funding value

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::channels::list_closed_channels_by_filter",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "from_funding_value_sats": 100000,
      "to_funding_value_sats": 500000
    }
  },
  "id": 55
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"closed_channels": [{
			"uuid": "f901b604-54f7-4094-80f7-86aa9e362343",
			"channel_id": "20aae008973fad5a59559ac0650143ec5b53aba1c6584d3d92177491a8284d00",
			"counterparty_node_id": "02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248",
			"funding_tx": "3807d9353557d15ad46e90a68dab8e4cd3a68a4af6b61bc7414bf81e29bc0517",
			"funding_value": 40000,
			"closing_tx": "61575237132b78aa5d1b4d62137da316bc67d09804b0bee53ab50f5d7cd0337c",
			"closure_reason": "Channel closed because the channel was cooperatively closed",
			"funding_generated_in_block": 2433122,
			"is_outbound": true,
			"is_public": false,
			"is_closed": true,
			"created_at": 1684083341,
			"closed_at": 1684146940
		}],
		"limit": 10,
		"skipped": 0,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 762
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Methods";
export const description =
  "This document describes all the available methods for the Lightning Network on Komodo DeFi Framework.";

import lightningflowchart from "@/public/images/docs/api-images/lightning-methods.png";

# Lightning Network Methods

Lightning methods are currently only available using the native Komodo DeFi Framework.
WASM support should be available in late 2023.

## Lightning Network Initialization Tasks

*   Initialise your lightning node with [task::enable\_lightning::init](/komodo-defi-framework/api/v20/lightning/activation/#initialize-lightning)
*   Check the initialization status of the lightning node with [task::enable\_lightning::status](/komodo-defi-framework/api/v20/lightning/activation/#initialization-status)
*   Cancel initialization process of the lightning node with [task::enable\_lightning::cancel](/komodo-defi-framework/api/v20/lightning/activation/#cancel-initialization)

Any methods with a `task::` prefix will be linked to a numeric `task_id` value
which is used to query the status or outcome of the task.

## Lightning Network Nodes Methods

*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20/lightning/nodes/#connect-to-node)
*   Add a trusted node with [lightning::nodes::add\_trusted\_node](/komodo-defi-framework/api/v20/lightning/nodes/#add-trusted-node)
*   Remove a trusted node with [lightning::nodes::remove\_trusted\_node](/komodo-defi-framework/api/v20/lightning/nodes/#remove-trusted-node)
*   List your trusted lightning nodes with [lightning::nodes::list\_trusted\_nodes](/komodo-defi-framework/api/v20/lightning/nodes/#list-trusted-nodes)

## Lightning Network Channels Methods

*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20/lightning/channels/#open-channel)
*   Close a lightning channel [lightning::channels::close\_channel](/komodo-defi-framework/api/v20/lightning/channels/#close-channel)
*   Update a lightning channel [lightning::channels::update\_channel](/komodo-defi-framework/api/v20/lightning/channels/#update-channel)
*   Get details about a lightning channel [lightning::channels::get\_channel\_details](/komodo-defi-framework/api/v20/lightning/channels/#get-channel-details)
*   Get claimable balances from lightning channels [lightning::channels::get\_claimable\_balances](/komodo-defi-framework/api/v20/lightning/channels/#get-claimable-balances)
*   List open lightning channels matching a filter [lightning::channels::list\_open\_channels\_by\_filter](/komodo-defi-framework/api/v20/lightning/channels/#list-open-channels-by-filter)
*   List closed lightning channels matching a filter [lightning::channels::list\_closed\_channels\_by\_filter](/komodo-defi-framework/api/v20/lightning/channels/#list-closed-channels-by-filter)

## Lightning Network Payments Methods

*   Generate lightning invoices with [lightning::payments::generate\_invoice](/komodo-defi-framework/api/v20/lightning/payments/#generate-invoice)
*   Send lightning payments with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20/lightning/payments/#send-payment)
*   Get details about a lightning payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20/lightning/payments/#get-payment-details)
*   Get a filtered list of lightning payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20/lightning/payments/#list-payments-by-filter)

## Lightning Network Flowchart

Once you:

*   Enable lightning with [task::enable\_lightning::init](/komodo-defi-framework/api/v20/lightning/activation/#initialize-lightning)
*   Connect to a lightning node with [lightning::nodes::connect\_to\_node](/komodo-defi-framework/api/v20/lightning/nodes/#connect-to-node)
*   Open a lightning channel [lightning::channels::open\_channel](/komodo-defi-framework/api/v20/lightning/channels/#open-channel)

You can get an invoice for a coffee from [https://starblocks.acinq.co](https://starblocks.acinq.co)!

Then you can:

*   Pay the invoice with [lightning::payments::send\_payment](/komodo-defi-framework/api/v20/lightning/payments/#send-payment)
*   View details about the payment with [lightning::payments::get\_payment\_details](/komodo-defi-framework/api/v20/lightning/payments/#get-payment-details)
*   List your payments with [lightning::payments::list\_payments\_by\_filter](/komodo-defi-framework/api/v20/lightning/payments/#list-payments-by-filter)

Follow the flowchart below to visualize the process:

## Lightning Network Coins File Configuration

Some configurations are set per coin, and some are set per channel. The
[counterparty\_channel\_config\_limits](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config)
param must be set in the `coins` configuration file, and aplies to all
channels opened by counterparty nodes. The
[our\_channels\_config](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) and
[channel\_options](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) parameters
are set per channel. These can be defined in the `coins` configuration file to
act as the default for all opened channels, and optionally overwritten or
updated using the
[open\_channel](/komodo-defi-framework/api/v20/lightning/channels/#open-channel) or
[update\_channel](/komodo-defi-framework/api/v20/lightning/channels/#update-channel)
methods.

### Lightning Coin Config Parameters

| Parameter                             | Type    | Description                                                                                                                                                                                                                                                                                                                                    |
| ------------------------------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                                  | object  | The ticker of the coin you will use lightning network with, suffixed with `-lightning`                                                                                                                                                                                                                                                         |
| mm2                                   | integer | Defaults to `0`. A value of `1`, indicates the coin is atomic swap compatible.                                                                                                                                                                                                                                                                 |
| decimals                              | integer | The decimal precision of the coin you will use the lightning network with.                                                                                                                                                                                                                                                                     |
| protocol                              | object  | A standard [CoinProtocol](/komodo-defi-framework/api/common_structures/activation/#coin-protocol) object.                                                                                                                                                                                                                                      |
| accept\_inbound\_channels             | boolean | Optional, defaults to `true`. If this is set to false, we do not accept inbound requests to open a new channel.                                                                                                                                                                                                                                |
| accept\_forwards\_to\_priv\_channels  | boolean | Optional, defaults to `false`. When set to `false`, any HTLCs which were to be forwarded over private channels will be rejected. This prevents us from taking on HTLC-forwarding risk when we intend to run as a node which is not online reliably (e.g. GUI wallet apps). Generally, private channels are used for non-routing purposes only. |
| counterparty\_channel\_config\_limits | object  | Optional. A standard [CounterpartyChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#counterparty-channel-config) object.                                                                                                                                                                                                  |
| channel\_options                      | object  | Optional. A standard [LightningChannelOptions](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options) object.                                                                                                                                                                                                      |
| our\_channels\_config                 | object  | Optional. A standard [LightningChannelConfig](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-config) object.                                                                                                                                                                                                        |

For GUIs and wallet apps, it is recommended to set
`accept_forwards_to_priv_channels` to `false`. This prevents users from taking
on HTLC-forwarding risk when a node is expected to not be reliably online.
[our\_channels\_config::announced\_channel](/komodo-defi-framework/api/common_structures/lightning/#lightning-channel-options)
should also be set to `false` for GUIs and wallet apps.

```json
  {
    "coin": "BTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_config": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90
    },
    "counterparty_channel_config_limits": {
        "outbound_channels_confirmations": 3,
        "force_announced_channel_preference": false
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "BTC-segwit",
            "network": "mainnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
  {
    "coin": "tBTC-lightning",
    "mm2": 1,
    "decimals": 11,
    "our_channels_configs": {
        "inbound_channels_confirmations": 3,
        "max_inbound_in_flight_htlc_percent": 90,
        "their_channel_reserve_sats": 10000
    },
    "counterparty_channel_config_limits": { 
        "outbound_channels_confirmations": 3
    },
    "protocol": {
        "type": "LIGHTNING",
        "protocol_data":{
            "platform": "tBTC-segwit",
            "network": "testnet",
            "confirmation_targets": {
                "background": 12,
                "normal": 6,
                "high_priority": 1
            }
        }
    }
  },
```
export const title = "Komodo DeFi Framework Method: Lightning Network Nodes";
export const description = "The methods in this document allow management of connections to Lightning Network Nodes on Komodo DeFi Framework.";

# Lightning Network Nodes

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Connect to Node {{label : 'lightning::nodes::connect_to_node', tag : 'API-v2'}}

The `lightning::nodes::connect_to_node` method allows you to connect to a lightning node.

### Request Parameters

| Parameter     | Type   | Description                                                                         |
| ------------- | ------ | ----------------------------------------------------------------------------------- |
| coin          | string | The coin ticker you would like to connect to a node on.                             |
| node\_address | string | Lightning nodes addresses always have a format of `node_pubkey`@`ip_address`:`port` |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::connect_to_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_address": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735"
  },
  "id": 1
}
```

The node address in the above request is for the WalletOfSatoshi lightning node, which is one of the most connected lightning nodes.
Other node addresses can be retrieved from any lightning explorer, such as:

*   [https://1ml.com/](https://1ml.com/)
*   [https://mempool.space/lightning/](https://mempool.space/lightning/)

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": "Connected successfully to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### Response (already connected)

```json
{
    "mmrpc": "2.0",
    "result": "Already connected to node : 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226@170.75.163.209:9735",
    "id": null
}
```

#### InvalidRequest Error (Invalid node\_address)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: Could not parse node address from str rgjhk3",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "Could not parse node address from str rgjhk3",
	"id": 762
}
```

#### ConnectionError Error (Timed out waiting to connect to node\_address)

```json
{
    "mmrpc": "2.0",
    "error": "Error connecting to node: Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "error_path": "connect_to_node",
    "error_trace": "connect_to_node:78]",
    "error_type": "ConnectionError",
    "error_data": "Timeout error: Failed to connect to node: 035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226",
    "id": null
}
```

## List Trusted Nodes {{label : 'lightning::nodes::list_trusted_nodes', tag : 'API-v2'}}

The `lightning::nodes::list_trusted_nodes` method allows you to list all nodes in your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to view your trusted nodes to. |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::list_trusted_nodes",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"trusted_nodes": ["038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"]
	},
	"id": 1
}
```

## Add Trusted Node {{label : 'lightning::nodes::add_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::add_trusted_node` method allows you to add a node to your trusted list.

### Request Parameters

| Parameter | Type   | Description                                               |
| --------- | ------ | --------------------------------------------------------- |
| coin      | string | The coin ticker you would like to add a trusted node for. |
| node\_id  | string | ID of node you would like to add to your trusted list.    |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::add_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"added_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```

## Remove Trusted Node {{label : 'lightning::nodes::remove_trusted_node', tag : 'API-v2'}}

The `lightning::nodes::remove_trusted_node` method allows you to remove a node from your trusted list.

### Request Parameters

| Parameter | Type   | Description                                                   |
| --------- | ------ | ------------------------------------------------------------- |
| coin      | string | The coin ticker you would like to remove a trusted node from. |
| node\_id  | string | ID of node you would like to remove from your trusted list.   |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::nodes::remove_trusted_node",
  "params": {
    "coin": "tBTC-lightning",
    "node_id": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"removed_node": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9"
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Lightning Network Payments";
export const description = "The methods in this document allow management of Lightning Network Payments on Komodo DeFi Framework.";

# Lightning Network Payments

Lightning methods are currently only available using the native Komodo DeFi Framework. WASM support should be available in late 2023.

## Generate invoice {{label : 'lightning::payments::generate_invoice', tag : 'API-v2'}}

The `lightning::payments::generate_invoice` method generates an invoice to be paid by another node.

### Request Parameters

| Parameter        | Type    | Description                                                                                                                                                |
| ---------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin             | string  | Ticker of coin to generate invoice for.                                                                                                                    |
| description      | string  | A note to indicate the purpose of the invoice.                                                                                                             |
| amount\_in\_msat | integer | Amount to be paid, in [millisatoshis](https://bitcoindata.science/bitcoin-units-converter) (A thousandth of a satoshi; the same as 0.00000000001 bitcoin.) |
| expiry           | integer | Optional, defaults to `3600`. Seconds until the invoice expires.                                                                                           |

#### 📌 Example

```json
{
  "method": "lightning::payments::generate_invoice",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "description": "For the burger on Tuesday",
    "amount_in_msat": 10000,
    "expiry": 600
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
		"invoice": "lntb100n1pj9aq73dpggehhygr5dpjjqcn4wfnk2u3qdahzq4r4v4ekgctenp4qf3dqylh55jd8m5x5hh0g5q82h9p86yghwhl2s0t826nlyp8zdgjzpp58leevp0jzjjtg9vln385fj2duw388ucqqsk2rzmuk0tz7fc2n67qsp5k33rvvq46xtuppl22ggcq5q7qqywyekcemhzazt4m6vulwsarcrq9qyysgqcqpcxqzjcrzjqwyx8nu2hygyvgc02cwdtvuxe0lcxz06qt3lpsldzcdr46my5epmjfgaasqqqvqqqqqqqqlgqqqqqqgq9qpwesnhre7xmdg6tajvp939vl72vxm8csecy6hfcah9fzgazd5eyzjskgtt7u9xshj7gq2vkejjcquem08tqfrc2pj78xa95teazzf0qq7pnyqj"
	},
	"id": 1
}
```

### InvalidRequest (invalid paramater value)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid type: string '56', expected u64",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid type: string '56', expected u64",
	"id": 762
}
```

## Send Payment {{label : 'lightning::payments::send_payment', tag : 'API-v2'}}

The `lightning::payments::send_payment` method sends a payment to another node.

Used to pay an invoice or send a payment via pubkey/address.

### Request Parameters

| Parameter | Type   | Description                                                                                                      |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------- |
| type      | string | Ticker of the coin to query.                                                                                     |
| payment   | object | A standard [LightningPayment](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment) object. |

#### 📌 Example using `invoice`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "invoice",
      "invoice": "lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y"
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb"
	},
	"id": 762
}
```

#### 📌 Example using `keysend`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "lightning::payments::send_payment",
  "params": {
    "coin": "tBTC-lightning",
    "payment": {
      "type": "keysend",
      "destination": "038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9",
      "amount_in_msat": 1000,
      "expiry": 24
    }
  },
  "id": 6
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_hash": "2620d47033fd366bff40cfe0879c47f683ef66c3882d0fab88a9bc72b5499655"
	},
	"id": 762
}
```

### PaymentError (attempt to pay self)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:231]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: "Cannot generate a route to ourselves", action: IgnoreError })",
	"id": 6
}
```

### PaymentError (no outbound routes)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Cannot route when there are no outbound routes away from us ', action: IgnoreError })",
	"id": 762
}
```

### PaymentError (keysend - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:107] lightning:256]",
	"error_type": "PaymentError",
	"error_data": "Keysend error: Routing(LightningError { err: "Failed to find a path to the given destination", action: IgnoreError })",
	"id": 762
}
```

### PaymentError (invoice - no path to destination)

```json
{
	"mmrpc": "2.0",
	"error": "Payment error: Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"error_path": "send_payment.lightning",
	"error_trace": "send_payment:102] lightning:232]",
	"error_type": "PaymentError",
	"error_data": "Error paying invoice: Routing(LightningError { err: 'Failed to find a path to the given destination', action: IgnoreError })",
	"id": 762
}
```

### InvalidRequest (request is missing a required field)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: missing field `payment`",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "missing field `payment`",
	"id": 762
}
```

### InvalidRequest (A required field is invalid)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: ParseError(Bech32Error(MissingSeparator))",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "ParseError(Bech32Error(MissingSeparator))",
	"id": 762
}
```

## Get Payment Details {{label : 'lightning::payments::get_payment_details', tag : 'API-v2'}}

The `lightning::payments::get_payment_details` method returns details about a lightning payment from a given `payment_hash`.

### Request Parameters

| Parameter     | Type   | Description                                                                                                                                                                                                                                                                          |
| ------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| coin          | string | Ticker of the coin to query.                                                                                                                                                                                                                                                         |
| payment\_hash | string | The hexadecimal string which identifies a invoice. The payment\_hash is returned from a `lightning::payments::send_payment` request if the payment was sent by us, or from a `lightning::payments::generate_invoice` request if the payment is received (or will be received) by us. |

#### 📌 Example

```json
{
  "method": "lightning::payments::get_payment_details",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "payment_hash": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e"
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payment_details": {
			"payment_hash": "c4e25cc10d77e3cd5f3d2af7b14ad72f123b2a5021bd6705c0b8ee8386bdeceb",
			"payment_type": {
				"type": "Outbound Payment",
				"destination": "0348cc1a9479697cd52db445ea74149ad40bb01bb2045a3e8acba21b70f94ab7cf"
			},
			"description": "1 Blokaccino",
			"amount_in_msat": 1000000,
			"fee_paid_msat": 1803,
			"status": "succeeded",
			"created_at": 1684081413,
			"last_updated": 1684081419
		}
	},
	"id": 762
}
```

### NoSuchPayment (payment hash not found)

```json
{
	"mmrpc": "2.0",
	"error": "Payment with hash: 414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e is not found",
	"error_path": "get_payment_details",
	"error_trace": "get_payment_details:75]",
	"error_type": "NoSuchPayment",
	"error_data": "414f9b3524fc4e48c99f2723952732d8bc2eba1b35ce3bf2a70f5144b40f599e",
	"id": 762
}
```

### InvalidRequest (payment\_hash not a hash string)

```json
{
	"mmrpc": "2.0",
	"error": "Error parsing request: invalid value: string '', expected a hash string",
	"error_path": "dispatcher",
	"error_trace": "dispatcher:109]",
	"error_type": "InvalidRequest",
	"error_data": "invalid value: string '', expected a hash string",
	"id": 762
}
```

## List Payments by Filter {{label : 'lightning::payments::list_payments_by_filter', tag : 'API-v2'}}

The `lightning::payments::list_payments_by_filter` method returns a list of payments (sent and/or received) for a coin which match the given filter.

### Request Parameters

| Parameter       | Type    | Description                                                                                                                             |
| --------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin            | string  | Ticker of the coin to query.                                                                                                            |
| filter          | object  | Optional. A standard [LightningPaymentFilter](/komodo-defi-framework/api/common_structures/lightning/#lightning-payment-filter) object. |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.                                     |
| limit           | integer | Optional, defaults to `10`. Maximum number of results to return.                                                                        |

#### 📌 Example without filter

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning"
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "59175643db24fc79c77da073994d596444b6909fb2d452bde662ae386115c758",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683917593,
			"last_updated": 1683917593
		}, {
			"payment_hash": "3ff39605f214a4b4159f9c4f44c94de3a273f300042ca18b7cb3d62f270a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "A 1:24 scale model of a 1981 DeLorean DMC-12",
			"amount_in_msat": 88000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1683714225,
			"last_updated": 1683805721
		}, {
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "ACME shrink ray",
			"amount_in_msat": 4000012,
			"status": "succeeded",
			"created_at": 1683814625,
			"last_updated": 1683815321
		}],
		"limit": 10,
		"skipped": 0,
		"total": 6,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### 📌 Example for Inbound Payment `payment_type`, `limit` and `pagination`

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "payment_type": {
        "type": "Inbound Payment"
      }
    },
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": 1
}
```

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}, {
			"payment_hash": "605f214a4b4b159f9c4f44c94de3a273f3ff39300042ca18b7cbb4159f3d62f2",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "14 pallets of frozen spinach",
			"amount_in_msat": 56005000,
			"status": "succeeded",
			"created_at": 1683815625,
			"last_updated": 1683815721
		}],
		"limit": 2,
		"skipped": 2,
		"total": 7,
		"total_pages": 4,
		"paging_options": {
			"PageNumber": 2
		}
	},
	"id": 1
}
```

#### 📌 Example for `pending` payments between 10000 and 40000 millisatoshis

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "pending",
      "from_amount_msat": 10000,
      "to_amount_msat": 40000
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "e51f1526d3322ddc0aaa0e893e5875418ddd12f206b7e1545c8e4375c97d0e31",
			"payment_type": {
				"type": "Inbound Payment"
			},
			"description": "For the burger on Tuesday",
			"amount_in_msat": 10000,
			"status": "pending",
			"created_at": 1683916900,
			"last_updated": 1683916900
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```

#### 📌 Example for successful payments on the 20th of April 2023

```json
{
  "method": "lightning::payments::list_payments_by_filter",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "params": {
    "coin": "tBTC-lightning",
    "filter": {
      "status": "succeeded",
      "from_timestamp": 1681948800,
      "to_timestamp": 1682035199
    }
  },
  "id": 1
}
```

#### Response

```json
{
	"mmrpc": "2.0",
	"result": {
		"payments": [{
			"payment_hash": "c4f44c94214a4b4159f9273f30de3a3ff39605f18b7c27b3d62f0a9ebc",
			"payment_type": {
				"type": "Outbound Payment"
			},
			"description": "Grays Sports Almanac, 1950-2000",
			"amount_in_msat": 1000000000,
			"status": "succeeded",
			"created_at": 1681998480,
			"last_updated": 1682008491
		}],
		"limit": 10,
		"skipped": 6,
		"total": 1,
		"total_pages": 1,
		"paging_options": {
			"PageNumber": 1
		}
	},
	"id": 1
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the clear_nft_db method Komodo DeFi Framework provides to clear NFT data from your local database";

# Clear NFT Database {{label : 'clear_nft_db', tag : 'API-v2'}}

This method will clear the NFT database data stored in the local database for selected (or all) networks.

### Request Parameters

| Parameter  | Type    | Description                                                                                                        |
| ---------- | ------- | ------------------------------------------------------------------------------------------------------------------ |
| clear\_all | boolean | Defaults to `false`. If `true` all NFT data for all networks will be purged.                                       |
| chains     | array   | Optional. List of networks to remove NFT data for. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`. |

You can confirm the NFT database has been cleared by querying the `KOMODEFI.db` database file.
For more information, refer to the [Query NFT Database Tables](/komodo-defi-framework/api/v20/non_fungible_tokens/query_nft_database_tables/) documentation.

#### 📌 Example to clear Binance Smart chain and Polygon NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON",
      "BSC"
    ]
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

#### 📌 Example to clear all NFT data

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "clear_nft_db",
  "mmrpc": "2.0",
  "params": {
    "clear_all": true
  }
}
```

```json
    {
        "mmrpc": "2.0",
        "result": null,
        "id": null
    }
```

### Error responses

#### UnsupportedChainType

Returned when the `chains` parameter contains an unsupported network.

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: UnsupportedChainType",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:110]",
    "error_type": "InvalidRequest",
    "error_data": "UnsupportedChainType",
    "id": null
}
```

#### InvalidRequest

Returned when neither the `chains` or `clear_all` parameters are present.

```json
{
    "mmrpc":"2.0",
    "error":"Invalid request: Nothing to clear was specified","error_path":"nft","error_trace":"nft:1512]",
    "error_type":"InvalidRequest",
    "error_data":"Nothing to clear was specified",
    "id":null
}
```
export const title = "Komodo DeFi Framework Method: Enable NFT";
export const description =
  "The enable_nft method allows you to activate NFT-like tokens on the platform.";

# enable\_nft

The 'enable\_nft' method activates NFT-like tokens on the platform, if the NFT network was already activated with the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/) method, but without the `nft_req` parameter.

| parameter          | Type   | Description                                                                                      |
| ------------------ | ------ | ------------------------------------------------------------------------------------------------ |
| ticker             | string | The ticker of the NFT network, with `NFT_` as a prefix.                                          |
| activation\_params | object | A standard [NftProvider](/komodo-defi-framework/api/common_structures/nfts/#nft-provider) object |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "enable_nft",
  "mmrpc": "2.0",
  "params": {
    "ticker": "NFT_MATIC",
    "activation_params": {
      "provider": {
        "type": "Moralis",
        "info": {
          "url": "https://moralis-proxy.komodo.earth",
          "komodo_proxy": true
        }
      }
    }
  }
}
```

## Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "nfts": {
            "0xc28a19e9a663d966cf99532bdb1229df1b0e344b,1": {
                "token_address": "0xc28a19e9a663d966cf99532bdb1229df1b0e344b",
                "token_id": "1",
                "chain": "POLYGON",
                "contract_type": "ERC1155",
                "amount": "1"
            },
            "0xd25f13e4ba534ef625c75b84934689194b7bd59e,14": {
                "token_address": "0xd25f13e4ba534ef625c75b84934689194b7bd59e",
                "token_id": "14",
                "chain": "POLYGON",
                "contract_type": "ERC721",
                "amount": "1"
            }
        },
        "platform_coin": "MATIC"
    },
    "id": null
}
```

## Error - Platform coin is not yet activated

```json
{
  "mmrpc": "2.0",
  "error": "Platform coin MATIC is not activated",
  "error_path": "token.lp_coins",
  "error_trace": "token:126] lp_coins:2797]",
  "error_type": "PlatformCoinIsNotActivated",
  "error_data": "MATIC",
  "id": null
}
```

## Error - Token already activated

```json
{
  "mmrpc": "2.0",
  "error": "Token NFT_MATIC is already activated",
  "error_path": "token",
  "error_trace": "token:119]",
  "error_type": "TokenIsAlreadyActivated",
  "error_data": "NFT_MATIC",
  "id": null
}
```

## Error - Token config not found in coins file

```json
{
  "mmrpc": "2.0",
  "error": "Token NFT_TESTTT config is not found",
  "error_path": "token.prelude",
  "error_trace": "token:122] prelude:79]",
  "error_type": "TokenConfigIsNotFound",
  "error_data": "NFT_TESTTT",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Get NFT List";
export const description =
  "This document describes all the get_nft_list method Komodo DeFi Framework provides to get a list of your wallets NFTs";

# Get a list of NFTs {{label : 'get_nft_list', tag : 'API-v2'}}

Returns a list of the NFTs owned by the user, shown in descending order of the `block_number` value (the block height when the amount or owner changed). If the request is for NFTs on more than one chain, this means that the order may not be chronological. In the case of ERC1155 tokens, the `block_number` will update when additional NFTs are received or when all NFTs are withdrawn, but will generally remain the same if only some NFTs are withdrawn.

Before using this method, you must first call the [update\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                      |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFTs without pagination, and will ignore the `limit` and `page_number` values.                       |
| limit               | integer | Optional, defaults to `10`. The number of NFTs displayed per page in response.                                                                                          |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-filter) object.                                                                 |

### Response Parameters

| Parameter | Type            | Description                                                                                        |
| --------- | --------------- | -------------------------------------------------------------------------------------------------- |
| nfts      | list of objects | A list of standard [NftInfo](/komodo-defi-framework/api/common_structures/nfts/#nft-info) objects. |
| skipped   | integer         | The number of NFTs in your wallet excluded by the request filters.                                 |
| total     | integer         | The total number of NFTs in your wallet matching the request filters.                              |

#### 📌 Example with no optional params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ]
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "BSC",
        "token_address": "0x5c7d6712dfaf0cb079d48981781c8705e8417ca0",
        "token_id": "0",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "b34ddf294013d20a6d70691027625839",
        "block_number_minted": 25465916,
        "block_number": 25919780,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://tikimetadata.s3.amazonaws.com/tiki_box.json",
        "token_domain": "tikimetadata.s3.amazonaws.com",
        "metadata": "{\"name\":\"Tiki box\",\"description\":\"Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!\",\"external_url\":\"\",\"image\":\"https://tikimetadata.s3.amazonaws.com/tiki_box.png\",\"attributes\":[{\"trait_type\":\"Crypto Logo\",\"value\":\"TIKI NFT CRYPTOLOGO SCAR\"}],\"properties\":{\"category\":\"image\",\"creators\":[]}}",
        "last_token_uri_sync": "2023-02-07T17:10:08.402Z",
        "last_metadata_sync": "2023-02-07T17:10:16.858Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_url": "https://tikimetadata.s3.amazonaws.com/tiki_box.png",
          "image_domain": "tikimetadata.s3.amazonaws.com",
          "name": "Tiki box",
          "description": "Born to usher in Bull markets. Tiki JumpStarters are crazed guardians that worship NGU technology. Tiki guardians attach themselves to their owners to guide and protect them from the evils of the crypto industry. Manifested by the power of community and infused with unlimited creativity, the Unlockable Road Map summons powerful gifts and surprises to all Tiki Holders. Booyaaah!!",
          "attributes": [
            {
              "trait_type": "Crypto Logo",
              "value": "TIKI NFT CRYPTOLOGO SCAR"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "",
          "external_domain": null,
          "image_details": null
        }
      },
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 2
  },
  "id": null
}
```

#### 📌 Example with optional limit & page\_number params

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "limit": 1,
    "page_number": 2
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 1,
    "total": 1
  },
  "id": null
}
```

#### 📌 Example with optional spam protection

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_list",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "protect_from_spam": true,
    "filters": {
      "exclude_spam": true,
      "exclude_phishing": true
    }
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "nfts": [
      {
        "chain": "POLYGON",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "token_id": "5",
        "amount": "1",
        "owner_of": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "token_hash": "28f970585fd743b056859a6e41f50a8e",
        "block_number_minted": 36781490,
        "block_number": 42491885,
        "contract_type": "ERC1155",
        "name": null,
        "symbol": null,
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "metadata": "{\"name\":\"Forest Mushrooms\",\"description\":\"Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.\",\"image\":\"https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg\",\"animation_url\":null,\"external_url\":\"https://app.thesmurfssociety.com/detail/ingredients/5\",\"attributes\":[{\"trait_type\":\"Type\",\"value\":\"Ingredient\"},{\"trait_type\":\"Category\",\"value\":\"COMMON\"}]}",
        "last_token_uri_sync": "2022-12-13T13:12:50.840Z",
        "last_metadata_sync": "2023-05-15T07:30:04.882Z",
        "minter_address": "ERC1155 tokens don't have a single minter",
        "possible_spam": false,
        "possible_phishing": false,
        "uri_meta": {
          "image": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
          "image_domain": "metadata.thesmurfssociety.com",
          "name": "Forest Mushrooms",
          "description": "Sweet and nutty with distinct earthy tones, these forest mushrooms will make a fine addition to all your soups, salads, and potions.",
          "attributes": [
            {
              "trait_type": "Type",
              "value": "Ingredient"
            },
            {
              "trait_type": "Category",
              "value": "COMMON"
            }
          ],
          "animation_url": null,
          "animation_domain": null,
          "external_url": "https://app.thesmurfssociety.com/detail/ingredients/5",
          "external_domain": "app.thesmurfssociety.com",
          "image_details": null
        }
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```

### 📌 Error responses

#### Unsupported Chain Type

The supported chains are

```json
{
  "mmrpc":"2.0",
  "error":"Error parsing request: UnsupportedChainType",
  "error_path":"dispatcher",
  "error_trace":"dispatcher:109]",
  "error_type":"InvalidRequest",
  "error_data":"UnsupportedChainType",
  "id":null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_metadata method Komodo DeFi Framework provides to get metadata for your NFTs";

# Get NFT Metadata {{label : 'get_nft_metadata', tag : 'API-v2'}}

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain               | string  | The token chain.                                                                                                                                                        |
| token\_address      | string  | The token address.                                                                                                                                                      |
| token\_id           | string  | Token ID.                                                                                                                                                               |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |

### Response Parameters

| Parameter              | Type    | Description                                                                                                                                                           |
| ---------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount                 | string  | The amount of this NFT the user owns (used by `ERC1155`).                                                                                                             |
| block\_number\_minted  | integer | The block height when the NFT was minted. May be `null`.                                                                                                              |
| block\_number          | integer | The block height when the amount or owner changed.                                                                                                                    |
| chain                  | string  | Chain name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| name                   | string  | May be `null`. An NFT collection name.                                                                                                                                |
| contract\_type         | string  | The type of NFT contract standard. One of `ERC721` or `ERC1155`.                                                                                                      |
| last\_token\_uri\_sync | string  | When the token\_uri was last updated.                                                                                                                                 |
| last\_metadata\_sync   | string  | When the metadata was last updated.                                                                                                                                   |
| metadata               | string  | The metadata of the token. May be `null`.                                                                                                                             |
| minter\_address        | string  | Minter address. May be `null`.                                                                                                                                        |
| owner\_of              | string  | The wallet address of the owner of the NFT.                                                                                                                           |
| possible\_spam         | boolean | If `true`, the contract address has [been identified](https://docs.moralis.io/web3-data-api/evm/nft-spam-detection) as associated with spam or suspicious activities. |
| possible\_phishing     | boolean | If `true`, the token has been identified as associated with phishing, as at least one of domain fields is found in database with phishing domains.                    |
| symbol                 | string  | May be `null`. The symbol of the NFT contract.                                                                                                                        |
| token\_address         | string  | The address of the NFT contract.                                                                                                                                      |
| token\_id              | string  | The token ID of the NFT.                                                                                                                                              |
| token\_hash            | string  | The token hash. May be `null`.                                                                                                                                        |
| token\_uri             | string  | The URI to the metadata of the token. May be `null`.                                                                                                                  |
| token\_domain          | string  | Token domain. May be `null`.                                                                                                                                          |
| uri\_meta              | object  | A standard [NftMetadata](/komodo-defi-framework/api/common_structures/nfts/#nft-metadata) object.                                                                     |

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
    "token_id": "214300044414",
    "chain": "BSC"
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "amount": "1",
      "owner_of": "0xab95d01bc8214e4d993043e8ca1b68db2c946498",
      "token_hash": "af811b641bccbdc10c444ba4f3a2ffb5",
      "name": "OpenSea Collections",
      "symbol": "OPENSTORE",
      "token_uri": "https://api.opensea.io/api/v2/metadata/matic/0x2953399124F0cBB46d2CbACD8A89cF0599974963/0xf43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710",
      "token_domain": "api.opensea.io",
      "metadata": "{\"image\":\"https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format\",\"name\":\"Doge Napoleon\",\"description\":null,\"external_link\":null,\"animation_url\":\"https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4\",\"traits\":[]}",
      "last_token_uri_sync": "2023-09-01T04:04:30.867Z",
      "last_metadata_sync": "2023-09-01T04:35:01.128Z",
      "minter_address": "ERC1155 tokens don't have a single minter",
      "possible_spam": true,
      "chain": "POLYGON",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "block_number_minted": 19645247,
      "block_number": 45776404,
      "contract_type": "ERC1155",
      "possible_phishing": false,
      "uri_meta": {
          "image": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_url": "https://i.seadn.io/gae/nY8wjVVQqDZBl-Bk3h9kwSqR1bXt16x_tESRAQmctEb0SCFCPtvtSsBtp98TFiUzP-LpMGt_kiqHDDOfkgbxOuWxkdH4aBNkmzrjZM0?w=500&amp;auto=format",
          "image_domain": "i.seadn.io",
          "name": "Doge Napoleon",
          "description": null,
          "attributes": null,
          "animation_url": "https://openseauserdata.com/files/df71203f48e54d027bb2c47b2840cacb.mp4",
          "animation_domain": "openseauserdata.com",
          "external_url": null,
          "external_domain": null,
          "image_details": null
      }
  },
  "id": null
}
```

## Error responses

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f81, token_id 214300044414 was not found in wallet",
    "error_path": "nft",
    "error_trace": "nft:123]",
    "error_type": "TokenNotFoundInWallet",
    "error_data": {
        "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f81",
        "token_id": "214300044414"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the get_nft_transfers method Komodo DeFi Framework provides to get information about your NFT transactions";

# Get a list of NFT transfers {{label : 'get_nft_transfers', tag : 'API-v2'}}

Returns a list of the NFT transfers involving the user, shown in descending order of the `block_timestamp` value of the NFT's last transfer.

To view NFT transactions, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.

### Request Parameters

| Parameter           | Type    | Description                                                                                                                                                             |
| ------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chains              | array   | List of chains to scan for NFTs.                                                                                                                                        |
| max                 | boolean | Optional, defaults to `false`. If `true`, response will return all NFT transfers without pagination, and will ignore the `limit` and `page_number` values.              |
| limit               | integer | Optional, defaults to `10`. The number of NFT transfers displayed per page in response.                                                                                 |
| page\_number        | integer | Optional, defaults to `1`. The page offset for items in response.                                                                                                       |
| protect\_from\_spam | boolean | Optional, defaults to `false`. If `true`, any potential spam link found in collection name, token name, symbol will be replaced with `URL redacted for user protection` |
| filters             | object  | Optional. A standard [NftTransferFilter](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer-filter) object.                                                |

### Response Parameters

| Parameter         | Type            | Description                                                                                                |
| ----------------- | --------------- | ---------------------------------------------------------------------------------------------------------- |
| transfer\_history | list of objects | A list of standard [NftTransfer](/komodo-defi-framework/api/common_structures/nfts/#nft-transfer) objects. |
| total             | integer         | The total number of NFT transfers in your wallet matching the request filters.                             |
| skipped           | integer         | The number of NFT transfers in your wallet excluded by the request filters.                                |

#### 📌 Example with date and `send` filters

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_nft_transfers",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "POLYGON"
    ],
    "max": true,
    "filters": {
      "receive": true,
      "from_date": 1678233600
    },
    "protect_from_spam": true
  }
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "transfer_history": [
      {
        "block_hash": "0xfd012e9dc2c7fa652ae3c0923599a9e6196520ac46e55f0f467d3a1ce84b8580",
        "transaction_hash": "0x4063c4ae3e56a06b6c8768ad76e0cb1523e671cf06e4325517106497778ede9e",
        "transaction_index": 87,
        "log_index": 468,
        "value": "0",
        "transaction_type": "Single",
        "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
        "from_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "to_address": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "amount": "2",
        "verified": 1,
        "operator": "0xf622a6c52c94b500542e2ae6bcad24c53bc5b6a2",
        "possible_spam": false,
        "chain": "POLYGON",
        "token_id": "5",
        "block_number": 44506464,
        "block_timestamp": 1688107346,
        "contract_type": "ERC1155",
        "token_uri": "https://app.thesmurfssociety.com/metadata/public/metadata/cauldron/5",
        "token_domain": "app.thesmurfssociety.com",
        "collection_name": null,
        "image_url": "https://metadata.thesmurfssociety.com/ingredients/nft/5.Forest_Mushrooms.jpg",
        "image_domain": "metadata.thesmurfssociety.com",
        "token_name": "Forest Mushrooms",
        "status": "Receive",
        "possible_phishing": false,
        "fee_details": {
          "coin": "MATIC",
          "gas": 40249,
          "gas_price": "0.000000153160317706",
          "total_fee": "0.006164549627348794"
        },
        "confirmations": 5775855
      }
    ],
    "skipped": 0,
    "total": 1
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the methods Komodo DeFi Framework provides to get information and transact with NFTs";

# Non Fungible Tokens (NFTs)

The Komodo DeFi Framework API supports [ERC1155](https://www.nftstandards.wtf/Standards/ERC1155+Multi+token) and [ERC721](https://www.nftstandards.wtf/Standards/ERC721+Non+Fungible+Standard) NFTs via the [Moralis API](https://docs.moralis.io/) on the Avalanche (AVAX), BNB Smart Chain (BNB), Ethereum (ETH), Fantom (FTM), Polygon (MATIC) networks.

To interact with NFTs, you will first need to activate the coin for the network the NFT is on, and initialise NFT support for the network.
This can be done with either the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/) method (if including the `nft_req` param) or the [enable\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/enable_nft/) method (if the network is already activated without NFT support).

Before using other NFT methods, you should first call the [update\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/)
method to populate/refresh the local database.

## NFT Information Methods

*   Get a list of your tokens with [get\_nft\_list](/komodo-defi-framework/api/v20/non_fungible_tokens/get_nft_list/)
*   Get a list of token transfers with [get\_nft\_transfers](/komodo-defi-framework/api/v20/non_fungible_tokens/get_nft_transfers/)
*   Get token metadata with [get\_nft\_metadata](/komodo-defi-framework/api/v20/non_fungible_tokens/get_nft_metadata/)
*   Update NFT [update\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/)
*   Refresh NFT metadata with [refresh\_nft\_metadata](/komodo-defi-framework/api/v20/non_fungible_tokens/refresh_nft_metadata/)

## NFT Transaction Methods

*   Withdraw ERC721 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/withdraw_nft/#erc-721-withdraw-example)
*   Withdraw ERC1155 tokens with [withdraw\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/withdraw_nft/#erc-1155-withdraw-example)

## NFT Utility Methods

*   Clear local NFT data with [clear\_nft\db](/komodo-defi-framework/api/v20/non_fungible_tokens/clear_nft_db/)

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens - Query NFT database tables";
export const description =
  "This document describes how to query the local NFT database tables.";

# Query NFT database tables

After using the [update\_nft](/komodo-defi-framework/api/v20/non_fungible_tokens/update_nft/#update-nft) method to initialise your local NFT database,
the following tables are available in `DB/KOMODEFI.db`:

*   AVAX\_nft\_list
*   AVAX\_nft\_transfer\_history
*   BNB\_nft\_list
*   BNB\_nft\_transfer\_history
*   ETH\_nft\_list
*   ETH\_nft\_transfer\_history
*   FTM\_nft\_list
*   FTM\_nft\_transfer\_history
*   MATIC\_nft\_list
*   MATIC\_nft\_transfer\_history
*   scanned\_nft\_blocks

This SQLite database is located under the DB user data folder with each wallet having its own subfolder represented by a hexadecimal string.
This string is shown in the runtime logs of the `kdf` binary as `Public key hash` when it starts up.

```bash
30 08:39:23, mm2:269] AtomicDEX API 2.1.0-beta_a81f2a101 DT 2024-07-26T23:24:52+03:00
30 08:39:23, mm2_main::mm2::lp_native_dex:500] INFO Version: 2.1.0-beta_a81f2a101 DT 2024-07-26T23:24:52+03:00
30 08:39:23, crypto::crypto_ctx:324] INFO Public key hash: 7d6cbdd91788df3b764247721fe12853ce36b03d
```

The default location of this folder for each operating system is:

```bash
- Linux: $HOME/.kdf/DB/{'{wallet identifying hex string}'}/MM2.db'
- MacOS: $HOME/.kdf/DB/{'{wallet identifying hex string}'}/MM2.db'
- Windows: %APPDATA%\kdf\DB\{'{wallet identifying hex string}'}\MM2.db'
```

You can define a different location for the DB folder via the [`dbdir` configuration parameter](/komodo-defi-framework/setup/configure-mm2-json/) in your MM2.json file.
There is also a sqlite database named `MM2.db` which [can be queried for information related to swaps, transactions and other information](/komodo-defi-framework/tutorials/query-the-mm2-database/).

There are a variety of methods to query sqlite databases. Examples below show how to do a sqlite query in Linux terminal, but first you might need to install sqlite with `sudo apt install sqlite3`.

The tables and columns available to query in KOMODEFI.db are as follows:

## NFT List tables

The COIN\_nft\_list tables contain the NFTs that you own
It has the following columns, though not all columns are populated for all NFTs:

| ID | Name                   | Type         | Description                                                                    |
| -- | ---------------------- | ------------ | ------------------------------------------------------------------------------ |
| 0  | token\_address         | VARCHAR(256) | The address of the token contract.                                             |
| 1  | token\_id              | VARCHAR(256) | The id of the token.                                                           |
| 2  | chain                  | TEXT         | The coin network which the NFT is on.                                          |
| 3  | amount                 | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 4  | block\_number          | INTEGER      | The block height of this transaction.                                          |
| 5  | contract\_type         | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | possible\_spam         | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 7  | possible\_phishing     | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 8  | collection\_name       | TEXT         | The collection name which includes the token.                                  |
| 9  | symbol                 | TEXT         | An arbitrary symbol for the NFT                                                |
| 10 | token\_uri             | TEXT         | A link to the token's metadata.                                                |
| 11 | token\_domain          | TEXT         | The domain the token metadata is hosted on.                                    |
| 12 | metadata               | TEXT         | The token's metadata in JSON format.                                           |
| 13 | last\_token\_uri\_sync | TEXT         | Date and time when the token uri was last syncronised.                         |
| 14 | last\_metadata\_sync   | TEXT         | Date and time when the token metadata was last syncronised.                    |
| 15 | raw\_image\_url        | TEXT         | The raw URL for the token image.                                               |
| 16 | image\_url             | TEXT         | A link for the token's image (or other media).                                 |
| 17 | image\_domain          | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 18 | token\_name            | TEXT         | The name of the token.                                                         |
| 19 | description            | TEXT         | An arbitrary description of the NFT.                                           |
| 20 | attributes             | TEXT         | Additional attribute data for the NFT in JSON format.                          |
| 21 | animation\_url         | TEXT         | If NFT is animated, the URL of the animation.                                  |
| 22 | animation\_domain      | TEXT         | If NFT is animated, the domain of the animation.                               |
| 23 | external\_url          | TEXT         | Additional URL related to the NFT                                              |
| 24 | external\_domain       | TEXT         | Domain of the additional URL related to the NFT                                |
| 25 | image\_details         | TEXT         | Additional details about the NFT's image.                                      |
| 26 | details\_json          | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_list table query

> SELECT chain, token\_name, token\_address, token\_id, possible\_spam, possible\_phishing FROM MATIC\_nft\_list LIMIT 5;

| chain   | token\_name            | token\_address                             | token\_id | possible\_spam | possible\_phishing |
| ------- | ---------------------- | ------------------------------------------ | --------- | -------------- | ------------------ |
| POLYGON | $2000 USDT Airdrop🎁   | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         | 1              | 0                  |
| POLYGON | $1000 USDC Voucher🎁   | 0xb092b5eb5c653e915880dfc1f606be2ffe6fae8c | 1         | 1              | 0                  |
| POLYGON | 1000 BLUR Reward       | 0xeaa3c52052b809c8d8072187efc134def2dd5b13 | 0         | 1              | 0                  |
| POLYGON | SHIB Voucher 66 of 100 | 0xc46e36339ebd8bed48b1bdb6bd815e4b72103949 | 0         | 1              | 0                  |
| POLYGON | $1000 Rewards          | 0x6e0b84421388ad635f2a1167e39aff2dc742da2a | 0         | 1              | 0                  |

The NFTs listed above are all spam, and will be ignored by the [get\_nft\_list](/komodo-defi-framework/api/v20/non_fungible_tokens/get_nft_list/) method.

## NFT Transfer table

The COIN\_nft\_transfer\_history tables contain the history of transfers of your NFTs, and have the following columns:

| ID | Name               | Type         | Description                                                                    |
| -- | ------------------ | ------------ | ------------------------------------------------------------------------------ |
| 0  | transaction\_hash  | VARCHAR(256) | Hex string, representing the transaction.                                      |
| 1  | log\_index         | INTEGER      | Simply a table index.                                                          |
| 2  | chain              | TEXT         | The coin network which the NFT is on.                                          |
| 3  | block\_number      | INTEGER      | The block height of this transaction.                                          |
| 4  | block\_timestamp   | INTEGER      | The block time of this transaction.                                            |
| 5  | contract\_type     | TEXT         | The contract type. Either `ERC721` or `ERC1155`.                               |
| 6  | token\_address     | VARCHAR(256) | The address of the token contract.                                             |
| 7  | token\_id          | VARCHAR(256) | The id of the token.                                                           |
| 8  | status             | TEXT         | The transaction type: `Recieve` or `Send`                                      |
| 9  | amount             | VARCHAR(256) | The amount of NFTs transfered in this transaction.                             |
| 10 | possible\_spam     | INTEGER      | `1` indicates the NFT has been identified as spam. `0` indicates it has not.   |
| 11 | possible\_phishing | INTEGER      | `1` indicates the NFT has been identified as a scam. `0` indicates it has not. |
| 12 | token\_uri         | TEXT         | A link to the token's metadata.                                                |
| 13 | token\_domain      | TEXT         | The domain the token metadata is hosted on.                                    |
| 14 | collection\_name   | TEXT         | The collection name which includes the token.                                  |
| 15 | image\_url         | TEXT         | A link for the token's image (or other media).                                 |
| 16 | image\_domain      | TEXT         | The domain the token image (or other media) is hosted on.                      |
| 17 | token\_name        | TEXT         | The name of the token.                                                         |
| 18 | details\_json      | TEXT         | Additional information about the transaction in JSON format.                   |

### Example COIN\_nft\_transfer\_history table query

> SELECT transaction\_hash, token\_name, token\_address, token\_id,  FROM MATIC\_nft\_transfer\_history WHERE block\_timestamp > 1701519320;

| transaction\_hash                                                  | token\_name          | token\_address                             | token\_id |
| ------------------------------------------------------------------ | -------------------- | ------------------------------------------ | --------- |
| 0x7b57303bcc2c68808b460490e984adcd18567a80660a18b7a151b62015247cda | $2000 USDT Airdrop🎁 | 0xe7ee9dcf5f4b7f9254b348ba596c9fb9121f77e7 | 1         |

## NFT Last Scanned Block table

The scanned\_nft\_blocks table contains the last block that was scanned for each chain.
It has the following columns:

| ID | Name                 | Type    | Description                                                            |
| -- | -------------------- | ------- | ---------------------------------------------------------------------- |
| 2  | chain                | TEXT    | The coin network which the NFT is on.                                  |
| 1  | last\_scanned\_block | INTEGER | The block height when the last scan for NFTs was performed on a chain. |

### Example scanned\_nft\_blocks table query

> SELECT \* FROM scanned\_nft\_blocks;

| chain | last\_scanned\_block |
| ----- | -------------------- |
| MATIC | 50651981             |
| FTM   | 66512090             |
| ETH   | 0                    |
| BNB   | 0                    |
| AVAX  | 0                    |
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes all the refresh_nft_metadata method Komodo DeFi Framework provides to refresh an NFT's metadata";

# Refresh NFT Metadata {{label : 'refresh_nft_metadata', tag : 'API-v2'}}

This method refreshes metadata of one NFT and metadata of related transactions with the same token\_address and token\_id.

### Request Parameters

| Parameter      | Type    | Description                                                                                                                                                                                                         |
| -------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| chain          | string  | Chains which holds the NFT you would like to updated metadata for.                                                                                                                                                  |
| token\_address | string  | Token address.                                                                                                                                                                                                      |
| token\_id      | string  | Token ID.                                                                                                                                                                                                           |
| komodo\_proxy  | boolean | Optional. Indicates whether authentication is required for accessing the proxy URLs (true if authentication is necessary, otherwise false).                                                                         |
| url            | string  | URL link to the Moralis API proxy base url ([https://moralis-proxy.komodo.earth](https://moralis-proxy.komodo.earth)) or equivalent (if komodo\_proxy is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam  | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent. [docs](https://nft.antispam.dragonhound.info/docs).                                                             |

If there are no errors, this request will return an empty response.

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "refresh_nft_metadata",
  "mmrpc": "2.0",
  "params": {
    "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
    "token_id": "5",
    "chain": "POLYGON",
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info"
  }
}
```

If there are no errors, this request will return an empty response.

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

## Error responses

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff, token_id 5 was not found in wallet",
    "error_path": "nft",
    "error_trace": "nft:504]",
    "error_type": "GetNftInfoError",
    "error_data": {
        "error_type": "TokenNotFoundInWallet",
        "error_data": {
            "token_address": "0x48c75fbf0452fa8ff2928ddf46b0fe7629cca2ff",
            "token_id": "5"
        }
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the update_nft method Komodo DeFi Framework provides to update NFT information in your local database";

# Update NFT {{label : 'update_nft', tag : 'API-v2'}}

This method will scan selected networks to update NFT information stored in the local database.
To interact with your NFTs, you will first need to activate the coin for the network the NFT is on.

See below for which coin to activate for each network:

| Network   | Coin  |
| --------- | ----- |
| AVALANCHE | AVAX  |
| BSC       | BNB   |
| ETH       | ETH   |
| FANTOM    | FTM   |
| POLYGON   | MATIC |

These coins can be activated using the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/) or method.

### Request Parameters

| Parameter     | Type    | Description                                                                                                                                                                    |
| ------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| chains        | array   | List of networks to scan for NFTs. Options are: `POLYGON`, `FANTOM`, `ETH`, `BSC`, or `AVALANCHE`.                                                                             |
| komodo\_proxy | boolean | Optional. Indicates whether authentication is required for accessing the proxy URLs.                                                                                           |
| url           | string  | URL link to the [Moralis API proxy base url](https://moralis-proxy.komodo.earth) or equivalent (if komodo\_proxy is set to true, will need to provide a new Komodo Proxy URL). |
| url\_antispam | string  | URL link to the [Antispam API proxy base url](https://nft.antispam.dragonhound.info) or equivalent.                                                                            |

If there are no errors, this request will return an empty response.
When updating multiple networks, or wallets with numerous NFTs, this request may take a while to complete.

#### 📌 Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "update_nft",
  "mmrpc": "2.0",
  "params": {
    "chains": [
      "BSC",
      "POLYGON"
    ],
    "komodo_proxy": false,
    "url": "https://moralis-proxy.komodo.earth",
    "url_antispam": "https://nft.antispam.dragonhound.info"
  }
}
```

```json
{
	"mmrpc": "2.0",
	"result": null,
	"id": null
}
```

### Error Types

#### TokenIsAlreadyActivated

This error occurs when NFTs are already activated for the selected network.

```json
{
    "mmrpc": "2.0",
    "error": "Token NFT_MATIC is already activated",
    "error_path": "token",
    "error_trace": "token:121]",
    "error_type": "TokenIsAlreadyActivated",
    "error_data": "NFT_MATIC",
    "id": null
}
```

#### TokenIsAlreadyActivated

This error occurs when NFTs are already activated for the selected network.

```json
{
    "mmrpc": "2.0",
    "error": "Token NFT_MATICC config is not found",
    "error_path": "token.prelude",
    "error_trace": "token:124] prelude:79]",
    "error_type": "TokenConfigIsNotFound",
    "error_data": "NFT_MATICC",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Non Fungible Tokens";
export const description =
  "This document describes the withdraw_nft method Komodo DeFi Framework provides to send NFTs to an address";

# Withdraw NFTs {{label : 'withdraw_nft', tag : 'API-v2'}}

To withdraw NFTs, you must [activate the coin](/komodo-defi-framework/api/legacy/coin_activation/) which holds the NFTs first.
The `withdraw_nft` method will return signed raw transaction hex which must be broadcast using the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) method to complete the withdrawal.

### Request Parameters

| Parameter      | Type   | Description                                                                                                |
| -------------- | ------ | ---------------------------------------------------------------------------------------------------------- |
| type           | string | The contract type of the NFT to withdraw. Either `withdraw_erc721` or `withdraw_erc1155`                   |
| withdraw\_data | object | A standard [WithdrawNftData](/komodo-defi-framework/api/common_structures/nfts/#withdraw-nft-data) object. |

### Response Parameters

| Parameter         | Type    | Description                                                                                                                                                          |
| ----------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| amount            | string  | Amount of tokens to withdraw.                                                                                                                                        |
| tx\_hex           | string  | Raw hex of signed transaction. Use this with the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) RPC to broadcast the transaction. |
| tx\_hash          | string  | Transaction ID of the withdrawl.                                                                                                                                     |
| from              | array   | List of source addresses.                                                                                                                                            |
| to                | array   | List of destination addresses.                                                                                                                                       |
| contract\_type    | string  | Contract type. `ERC721` or `ERC1155`.                                                                                                                                |
| token\_address    | string  | Token address.                                                                                                                                                       |
| token\_id         | string  | Token ID.                                                                                                                                                            |
| fee\_details      | object  | A standard [WithdrawFee](/komodo-defi-framework/api/common_structures/#withdraw-fee) object.                                                                         |
| coin              | string  | Coin name. One of `AVALANCHE`, `BSC`, `ETH`, `FANTOM`, or `POLYGON`.                                                                                                 |
| block\_height     | integer | Block height of the transaction. If the value is `0`, the transaction is unconfirmed.                                                                                |
| timestamp         | integer | Timestamp of the block containing the withdrawl transaction in [unix epoch format](https://www.epochconverter.com/).                                                 |
| internal\_id      | integer | Used for internal transaction identification, for some coins it may be equal to transaction hash.                                                                    |
| transaction\_type | string  | This will always be `NftTransfer`.                                                                                                                                   |

#### 📌 ERC721 Withdraw Example

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc721",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8509818733db8289929473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c9464980000000000000000000000000000000000000000000000000000000000000001820136a0564b5c9c8309a3f8f6cc007ca957e4c411259026d68c2c34419158aff4d3ebf8a007afaa0590da01a2ce36c7edb5380f41235168f3633ed459b1fc8a750fecd38d",
        "tx_hash": "bb030f618702715eb39035dccd218355f78ae5379ff6d0691f0f3c0db3c03789",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 35218,
            "gas_price": "0.000000040827827163",
            "total_fee": "0.001437874417026534"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732198,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### 📌 ERC1155 Withdraw Example

If you are sending 2 or more NFTs, you must use the `withdraw_erc1155` withdraw type.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498",
      "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
      "token_id": "1"
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f8cb2a8502dffe7b4682f3a09473a5299824cd955af6377b56f5762dc3ca4cc07880b86442842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa5395656600000000000000000000000000000000000000000000000000000000000000001820135a0476a4623c9df31cecbd319e0571c62d14a6dcedd5a760ced945ffa2e39fb12c5a03293f3c10d115edcc3795e414670f070c04ad936e2e87001da12f961df5962a7",
        "tx_hash": "d6b46e70bf755617366a5c10875eb639d55586bb568010ea82ef42e8d68c6523",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC721",
        "token_address": "0x73a5299824cd955af6377b56f5762dc3ca4cc078",
        "token_id": "1",
        "amount": "1",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 62368,
            "gas_price": "0.000000012347931462",
            "total_fee": "0.000770115789422016"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732805,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

#### 📌 ERC1155 Withdraw Max Example

If you would like to withdraw all NFTs from a token\_address, you must use the `withdraw_erc1155` withdraw type and set `max` to `true`.

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw_nft",
  "mmrpc": "2.0",
  "params": {
    "type": "withdraw_erc1155",
    "withdraw_data": {
      "chain": "POLYGON",
      "to": "0x27Ad1F808c1ef82626277Ae38998AfA539565660",
      "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
      "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
      "max": true
    }
  }
}
```

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "f9014b2a8508d579565282ea3b942953399124f0cbb46d2cbacd8a89cf059997496380b8e4f242432a000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c94649800000000000000000000000027ad1f808c1ef82626277ae38998afa539565660f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000820135a0feb67607bd5e5c58f7533c8d2c88ef0ba3beac7fea29bfe11c3ce9bd10641f2ca02f1045b9f87536e45fe63556805734293e534284efecd9210f614316a3e8dca7",
        "tx_hash": "9dce8e555d388532bdafd42dd44cd6a2bdcbf74bdda079e15f71b808c8395bcc",
        "from": [
            "0xaB95D01Bc8214E4D993043E8Ca1B68dB2c946498"
        ],
        "to": [
            "0x27Ad1F808c1ef82626277Ae38998AfA539565660"
        ],
        "contract_type": "ERC1155",
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "amount": "7",
        "fee_details": {
            "type": "Eth",
            "coin": "MATIC",
            "gas": 59963,
            "gas_price": "0.00000003794123733",
            "total_fee": "0.00227507041401879"
        },
        "coin": "MATIC",
        "block_height": 0,
        "timestamp": 1700732937,
        "internal_id": 0,
        "transaction_type": "NftTransfer"
    },
    "id": null
}
```

### 📌 Withdraw NFTs Error Responses

#### InvalidRequest (missing field)

```json
  {
      "mmrpc": "2.0",
      "error": "Error parsing request: missing field `type`",
      "error_path": "dispatcher",
      "error_trace": "dispatcher:109]",
      "error_type": "InvalidRequest",
      "error_data": "missing field `type`",
      "id": null
  }
```

#### InvalidRequest (wrong withdraw type)

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `withdraw_erc420`, expected `withdraw_erc1155` or `withdraw_erc721`",
    "id": null
}
```

#### TokenNotFoundInWallet (trying to send NFT you dont own)

```json
{
    "mmrpc": "2.0",
    "error": "Token: token_address 0xfd913a305d70a60aac4faac70c739563738e1f82, token_id 110473361632261669912565539602449606788298723469812631769659886404530570536722 was not found in wallet",
    "error_path": "eth.nft",
    "error_trace": "eth:883] nft:1177]",
    "error_type": "GetNftInfoError",
    "error_data": {
        "error_type": "TokenNotFoundInWallet",
        "error_data": {
            "token_address": "0xfd913a305d70a60aac4faac70c739563738e1f82",
            "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536722"
        }
    },
    "id": null
}
```

#### TransportError (unable to estimate gas)

```json
{
    "mmrpc": "2.0",
    "error": "Transport error: request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "error_path": "eth",
    "error_trace": "eth:1004] eth:5792]",
    "error_type": "Transport",
    "error_data": "request MethodCall(MethodCall { jsonrpc: Some(V2), method: \"eth_estimateGas\", params: Array([Object({\"from\": String(\"0xab95d01bc8214e4d993043e8ca1b68db2c946498\"), \"to\": String(\"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"), \"gasPrice\": String(\"0x9ddeaaffe\"), \"value\": String(\"0x0\"), \"data\": String(\"0x42842e0e000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498000000000000000000000000ab95d01bc8214e4d993043e8ca1b68db2c946498f43db4f488f644b73a9442de4978fb7572b73d85000000000000110000002710\")})]), id: Num(64) }) failed: InvalidResponse(\"Server: 'https://polygon-rpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); InvalidResponse(\"Server: 'https://polygon.blockpi.network/v1/rpc/public', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); Transport(\"Server: 'https://node.komodo.earth:8080/polygon', response !200: 502 Bad Gateway, &lt;html&gt;..&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;..&lt;body&gt;..&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;..&lt;hr&gt;&lt;center&gt;nginx/1.18.0 (Ubuntu)&lt;/center&gt;..&lt;/body&gt;..&lt;/html&gt;..\"); InvalidResponse(\"Server: 'https://polygon.llamarpc.com/', error: RPC error: Error { code: ServerError(-32000), message: \\\"execution reverted\\\", data: None }\"); ",
    "id": null
}
```

#### NotEnoughNftsAmount (trying to send more NFTs than you have)

```json
{
    "mmrpc": "2.0",
    "error": "Not enough NFTs amount with token_address: 0x2953399124f0cbb46d2cbacd8a89cf0599974963 and token_id 110473361632261669912565539602449606788298723469812631769659886404530570536720. Available 1, required 2",
    "error_path": "eth",
    "error_trace": "eth:897]",
    "error_type": "NotEnoughNftsAmount",
    "error_data": {
        "token_address": "0x2953399124f0cbb46d2cbacd8a89cf0599974963",
        "token_id": "110473361632261669912565539602449606788298723469812631769659886404530570536720",
        "available": "1",
        "required": "2"
    },
    "id": null
}
```

View the source code at: [https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/nft.rs)
export const title = "Komodo DeFi Framework Method: Active Swaps (v2)";
export const description =
  "The active_swaps method returns all the swaps that are currently running on the Komodo DeFi Framework API node.";

# active\_swaps

The `active_swaps` method returns all the swaps that are currently running on the Komodo DeFi Framework API node.

## Arguments

| Structure       | Type | Description                                                                  |
| --------------- | ---- | ---------------------------------------------------------------------------- |
| include\_status | bool | Optional, defaults to `false`. Whether to include swap statuses in response; |

## Response

| Structure | Type             | Description                                                                                                                                                                                            |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| uuids     | array of strings | A list of currently active swap UUIDs.                                                                                                                                                                 |
| statuses  | object (map)     | Only visible if `include_status` request parameter is `true`. A map of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects, delineated by the related UUID. |

#### 📌 Examples

#### Command (without include\_status)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "active_swaps",
  "params": {
    "include_status": false
  }
}
```

#### Response (uuids only)

```json
{
  "result": {
    "uuids": [
      "015c13bc-da79-43e1-a6d4-4ac8b3099b34",
      "7592a07a-2805-4050-8ab8-984480e812f0",
      "82cbad96-ea9f-40fb-9225-07496323e35d",
      "177f7fa5-c9f3-4673-a2fa-28451a123e61"
    ],
    "statuses": {}
  },
  "id": null
}
```

#### Command (include\_status = true)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "active_swaps",
  "params": {
    "include_status": true
  },
  "id": 42
}
```

#### Response (statuses included)

```json
{
  "mmrpc": "2.0",
  "result": {
      "uuids": [
          "7b60a494-f159-419c-8f41-02e10f897513"
      ],
      "statuses": {
          "7b60a494-f159-419c-8f41-02e10f897513": {
              "swap_type": "TakerV1",
              "swap_data": {
                  "uuid": "7b60a494-f159-419c-8f41-02e10f897513",
                  "my_order_uuid": "7b60a494-f159-419c-8f41-02e10f897513",
                  "events": [
                      {
                          "timestamp": 1730633787643,
                          "event": {
                              "type": "Started",
                              "data": {
                                  "taker_coin": "MARTY",
                                  "maker_coin": "DOC",
                                  "maker": "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                                  "my_persistent_pub": "034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256",
                                  "lock_duration": 7800,
                                  "maker_amount": "2.4",
                                  "taker_amount": "2.4",
                                  "maker_payment_confirmations": 1,
                                  "maker_payment_requires_nota": false,
                                  "taker_payment_confirmations": 1,
                                  "taker_payment_requires_nota": false,
                                  "taker_payment_lock": 1730641586,
                                  "uuid": "7b60a494-f159-419c-8f41-02e10f897513",
                                  "started_at": 1730633786,
                                  "maker_payment_wait": 1730636906,
                                  "maker_coin_start_block": 803888,
                                  "taker_coin_start_block": 818500,
                                  "fee_to_send_taker_fee": {
                                      "coin": "MARTY",
                                      "amount": "0.00001",
                                      "paid_from_trading_vol": false
                                  },
                                  "taker_payment_trade_fee": {
                                      "coin": "MARTY",
                                      "amount": "0.00001",
                                      "paid_from_trading_vol": false
                                  },
                                  "maker_payment_spend_trade_fee": {
                                      "coin": "DOC",
                                      "amount": "0.00001",
                                      "paid_from_trading_vol": true
                                  },
                                  "maker_coin_htlc_pubkey": "034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256",
                                  "taker_coin_htlc_pubkey": "034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256",
                                  "p2p_privkey": null
                              }
                          }
                      },
                      {
                          "timestamp": 1730633801655,
                          "event": {
                              "type": "Negotiated",
                              "data": {
                                  "maker_payment_locktime": 1730649385,
                                  "maker_pubkey": "000000000000000000000000000000000000000000000000000000000000000000",
                                  "secret_hash": "b476e27c0c6680ac67765163b1b5736dd7649512",
                                  "maker_coin_swap_contract_addr": null,
                                  "taker_coin_swap_contract_addr": null,
                                  "maker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                                  "taker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732"
                              }
                          }
                      },
                      {
                          "timestamp": 1730633802415,
                          "event": {
                              "type": "TakerFeeSent",
                              "data": {
                                  "tx_hex": "0400008085202f8901a12c9c4c1c0e3ebd6329a7a0cd3c0a34a2355e5bea93b50faaa46d8889eb4ee0000000006a47304402200774c8e6fbb94df8ab73d9dbbd858326b361cc132d14c90e4ebf7d2a6bc5f9b402204fa716b684c20a3c56b28a42e63bfa3edcd3a76e261bee674f00ec0ccff674160121034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac882e4317120000001976a914d64ad24e655ba7221ea51c7931aad5b98da77f3c88ac4a602767000000000000000000000000000000",
                                  "tx_hash": "3febb9949f3e751c568b774719a9fbf851bc9b4c6083da8c0927e4d1c078c21c"
                              }
                          }
                      },
                      {
                          "timestamp": 1730633804416,
                          "event": {
                              "type": "TakerPaymentInstructionsReceived",
                              "data": null
                          }
                      },
                      {
                          "timestamp": 1730633804421,
                          "event": {
                              "type": "MakerPaymentReceived",
                              "data": {
                                  "tx_hex": "0400008085202f89045c20450775f07a4c448fbfebe47fdfa058c9a25254d36874765b44e1b3aaa193020000006a473044022079e6fbe2a24beb093858c644f765403d7a23714c17bee99c0b88fdd4b1d2bfbf02206f104b94437e4ce39d6854b48c1abccd218ee42436c8b5ac29e9136d538aa89501210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff620a3f975950554a03ecce8a2918958e8f1a17db70e7efe420618f3622844196000000006a47304402205721b4ce8c079604ce6f5779289fdc66912e064f12c40cc174daab80534a623f0220575fcc814edbec126834ce408ecbcf7ec2d7a8df2e323273266c8b47518ba9e701210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff9ac8dbb806e5722c00c60623c7313c41892649531a1c134f5d700b8f85157559000000006a473044022074a909367ba10cf375fb84414bad2ee41ffb35940132d94a9033736185df4b58022032b6dd0aeb5e102584e63d294d66367e19eaa599ed438d0209a039190bca10f401210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff46c38d985571abe367e07c7415b278bebdaa7b6b7283a7d069dfde6fb820cb8d020000006a47304402203397ffb5b16d0c829aac977ae92d8bc76cd3e9afc17bef3da436272bb672a0bd02207b3c026e25fd70048f12c166851a1d53ff2931e5073028588dde9715d63a527501210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914f9bb3725cdd5d07b6f2b5387b5cf4471a4ad0463870000000000000000166a14b476e27c0c6680ac67765163b1b5736dd7649512dee80841410500001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac4b602767000000000000000000000000000000",
                                  "tx_hash": "ebeba78542427dcf9bc720063582b99153afe6efcde49d16aacf67a8e597a41e"
                              }
                          }
                      },
                      {
                          "timestamp": 1730633804421,
                          "event": {
                              "type": "MakerPaymentWaitConfirmStarted"
                          }
                      },
                      {
                          "timestamp": 1730633836140,
                          "event": {
                              "type": "MakerPaymentValidatedAndConfirmed"
                          }
                      },
                      {
                          "timestamp": 1730633839137,
                          "event": {
                              "type": "TakerPaymentSent",
                              "data": {
                                  "tx_hex": "0400008085202f89011cc278c0d1e427098cda83604c9bbc51f8fba91947778b561c753e9f94b9eb3f010000006a473044022024b2c5bc5b23e8e774f6a8001de8f94a4e6888456722fede2be6b061d6d93c9302203805a7d1c9361fee2066e26f6196476f73f34246f60308cfafa3783a94a3cab30121034cbf74541c1d3436bc7638a2738f64df4fee22d4443cdf11d54cea7d7f55f256ffffffff03001c4e0e0000000017a914fbb04e8d9b7b4098c887aed16124291646462525870000000000000000166a14b476e27c0c6680ac67765163b1b5736dd7649512a00ef508120000001976a914d64ad24e655ba7221ea51c7931aad5b98da77f3c88ac6c602767000000000000000000000000000000",
                                  "tx_hash": "08e94af501630e46f4b2c5d64e6851c6bc9a3828506fef9f6668938d36c7b2da"
                              }
                          }
                      },
                      {
                          "timestamp": 1730633839137,
                          "event": {
                              "type": "WatcherMessageSent",
                              "data": [
                                  [
                                      ...
                                  ],
                                  [
                                      ...
                                  ]
                              ]
                          }
                      }
                  ],
                  "maker_amount": "2.4",
                  "maker_coin": "DOC",
                  "maker_coin_usd_price": null,
                  "taker_amount": "2.4",
                  "taker_coin": "MARTY",
                  "taker_coin_usd_price": null,
                  "gui": "mm2_777",
                  "mm_version": "2.2.0-beta_caf803b",
                  "success_events": [
                      "Started",
                      "Negotiated",
                      "TakerFeeSent",
                      "TakerPaymentInstructionsReceived",
                      "MakerPaymentReceived",
                      "MakerPaymentWaitConfirmStarted",
                      "MakerPaymentValidatedAndConfirmed",
                      "TakerPaymentSent",
                      "WatcherMessageSent",
                      "TakerPaymentSpent",
                      "MakerPaymentSpent",
                      "MakerPaymentSpentByWatcher",
                      "MakerPaymentSpendConfirmed",
                      "Finished"
                  ],
                  "error_events": [
                      "StartFailed",
                      "NegotiateFailed",
                      "TakerFeeSendFailed",
                      "MakerPaymentValidateFailed",
                      "MakerPaymentWaitConfirmFailed",
                      "TakerPaymentTransactionFailed",
                      "TakerPaymentWaitConfirmFailed",
                      "TakerPaymentDataSendFailed",
                      "TakerPaymentWaitForSpendFailed",
                      "MakerPaymentSpendFailed",
                      "MakerPaymentSpendConfirmFailed",
                      "TakerPaymentWaitRefundStarted",
                      "TakerPaymentRefundStarted",
                      "TakerPaymentRefunded",
                      "TakerPaymentRefundedByWatcher",
                      "TakerPaymentRefundFailed",
                      "TakerPaymentRefundFinished"
                  ]
              }
          }
      }
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Best Orders";
export const description = "The best_orders method returns the best priced trades available on the orderbook.";

# best\_orders

The `best_orders` method returns the best priced trades available on the orderbook. There are two options for the request, either `volume` or `number`.
If request is made by `volume`, the returned results will show the best prices for trades that can fill the requested volume.
If request is made by `number`, the returned results will show a list of the best prices, `number` pairs long (e.g. top 5 best priced orders).
For coins with segwit, they may appear twice in the output (once for each address). E.g. `LTC` and `LTC-segwit`

The response of this method can contain coins that are not activated on the Komodo DeFi Framework API instance.
Activation will be required to proceed with the trade.

#### Arguments

| Structure     | Type   | Description                                                                                     |
| ------------- | ------ | ----------------------------------------------------------------------------------------------- |
| coin          | string | The ticker of the coin to get best orders                                                       |
| action        | string | Whether to `buy` or `sell` the selected coin                                                    |
| exclude\_mine | bool   | Defaults to `false`. If `true`, the users orders will be excluded from the response.            |
| request\_by   | object | A standard [RequestBy](/komodo-defi-framework/api/common_structures/orders/#request-by) object. |

#### Response

| Structure         | Type          | Description                                                                                                                |
| ----------------- | ------------- | -------------------------------------------------------------------------------------------------------------------------- |
| orders            | object (map)  | the `ticker -> array of standard [OrderData](/komodo-defi-framework/api/common_structures/orders/#order-data) objects` map |
| original\_tickers | list (string) | Tickers included in response when `orderbook_ticker` is configured for the queried coin in `coins` file                    |

#### 📌 Examples

#### Command (by number)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "DGB",
    "action": "buy",
    "request_by": {
      "type": "number",
      "value": 100
    }
  }
}
```

#### Response (by number - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "LTC-segwit": [
        {
          "coin": "LTC-segwit",
          "address": {
            "address_type": "Transparent",
            "address_data": "Lgrta1iKRcy8zzygVkZeEXuxBqzssPWtae"
          },
          "price": {
            "decimal": "0.0001087673",
            "rational": [
              [1, [1087673]],
              [1, [1410065408, 2]]
            ],
            "fraction": {
              "numer": "1087673",
              "denom": "10000000000"
            }
          },
          "pubkey": "026da2fc632afabbb1b86d04a9a012db25eca74db38ba2eccd88552f27f4c0b245",
          "uuid": "8530300a-b11c-4eca-80ab-c4124aaf3b64",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "24706.624279842",
            "rational": [
              [1, [986196625, 2876]],
              [1, [500000000]]
            ],
            "fraction": {
              "numer": "12353312139921",
              "denom": "500000000"
            }
          },
          "base_min_volume": {
            "decimal": "5.019891088590044985947063133864681756373468864263432116086360514603194158538457790163036133102504153",
            "rational": [
              [1, [5460000]],
              [1, [1087673]]
            ],
            "fraction": {
              "numer": "5460000",
              "denom": "1087673"
            }
          },
          "rel_max_volume": {
            "decimal": "2.6872728150328587666",
            "rational": [
              [1, [4244429513, 3128397295]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "13436364075164293833",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.000546",
            "rational": [
              [1, [273]],
              [1, [500000]]
            ],
            "fraction": {
              "numer": "273",
              "denom": "500000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ],
      "MATIC": [
        {
          "coin": "MATIC",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xf2ed2ac92489106c942c9e32c6a912ba61af93e3"
          },
          "price": {
            "decimal": "0.0104639634",
            "rational": [
              [1, [52319817]],
              [1, [705032704, 1]]
            ],
            "fraction": {
              "numer": "52319817",
              "denom": "5000000000"
            }
          },
          "pubkey": "02dbd8c73e2e80e4f3cf88d2f04a9d2d0df4269496608b14a3e17556fdcb01e0c1",
          "uuid": "95bb48ce-7411-4be7-a1b9-70e8f8d7887f",
          "is_mine": true,
          "base_max_volume": {
            "decimal": "8964.021726027",
            "rational": [
              [1, [424979275, 2087]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "8964021726027",
              "denom": "1000000000"
            }
          },
          "base_min_volume": {
            "decimal": "20.0825412816031",
            "rational": [
              [1, [1331989663, 46758]],
              [1, [1316134912, 2328]]
            ],
            "fraction": {
              "numer": "200825412816031",
              "denom": "10000000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "93.7991952579513554118",
            "rational": [
              [1, [2658798179, 1822452630, 25]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "468995976289756777059",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.21014297694968393172654",
            "rational": [
              [1, [3263923031, 2549837702, 569]],
              [1, [2067791872, 2170810533, 2710]]
            ],
            "fraction": {
              "numer": "10507148847484196586327",
              "denom": "50000000000000000000000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 3,
            "rel_nota": false
          }
        }
      ]
    },
    "original_tickers": {
      "LTC": ["LTC-segwit"],
      "BTC": ["BTC-segwit"],
      "XMY": ["XMY-segwit"]
    }
  },
  "id": 0
}
```

#### Command (by number, exclude own orders)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "DGB",
    "action": "buy",
    "exclude_mine": true,
    "request_by": {
      "type": "number",
      "value": 100
    }
  }
}
```

#### Response (by number - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "LTC-segwit": [
        {
          "coin": "LTC-segwit",
          "address": {
            "address_type": "Transparent",
            "address_data": "Lgrta1iKRcy8zzygVkZeEXuxBqzssPWtae"
          },
          "price": {
            "decimal": "0.0001087673",
            "rational": [
              [1, [1087673]],
              [1, [1410065408, 2]]
            ],
            "fraction": {
              "numer": "1087673",
              "denom": "10000000000"
            }
          },
          "pubkey": "026da2fc632afabbb1b86d04a9a012db25eca74db38ba2eccd88552f27f4c0b245",
          "uuid": "8530300a-b11c-4eca-80ab-c4124aaf3b64",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "24706.624279842",
            "rational": [
              [1, [986196625, 2876]],
              [1, [500000000]]
            ],
            "fraction": {
              "numer": "12353312139921",
              "denom": "500000000"
            }
          },
          "base_min_volume": {
            "decimal": "5.019891088590044985947063133864681756373468864263432116086360514603194158538457790163036133102504153",
            "rational": [
              [1, [5460000]],
              [1, [1087673]]
            ],
            "fraction": {
              "numer": "5460000",
              "denom": "1087673"
            }
          },
          "rel_max_volume": {
            "decimal": "2.6872728150328587666",
            "rational": [
              [1, [4244429513, 3128397295]],
              [1, [1156841472, 1164153218]]
            ],
            "fraction": {
              "numer": "13436364075164293833",
              "denom": "5000000000000000000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.000546",
            "rational": [
              [1, [273]],
              [1, [500000]]
            ],
            "fraction": {
              "numer": "273",
              "denom": "500000"
            }
          },
          "conf_settings": {
            "base_confs": 7,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ]
    },
    "original_tickers": {
      "LTC": ["LTC-segwit"],
      "BTC": ["BTC-segwit"],
      "XMY": ["XMY-segwit"]
    }
  },
  "id": 0
}
```

#### Command (by volume)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "best_orders",
  "mmrpc": "2.0",
  "params": {
    "coin": "BTC",
    "action": "buy",
    "request_by": {
      "type": "volume",
      "value": 0.01
    }
  }
}
```

#### Response (by volume - success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "orders": {
      "DASH": [
        {
          "coin": "DASH",
          "address": {
            "address_type": "Transparent",
            "address_data": "XefPeyw3KQYa5PUJeTMQRhMHQZGVy4YMWa"
          },
          "price": {
            "decimal": "3333.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
            "rational": [
              [1, [10000]],
              [1, [3]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "3"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "b17d7aee-2c0b-4311-935c-8c05e81f3813",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.097714296984",
            "rational": [
              [1, [3624352531, 2]],
              [1, [445948416, 29]]
            ],
            "fraction": {
              "numer": "12214287123",
              "denom": "125000000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000002331",
            "rational": [
              [1, [2331]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "2331",
              "denom": "1000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "325.71432328",
            "rational": [
              [1, [4071429041]],
              [1, [12500000]]
            ],
            "fraction": {
              "numer": "4071429041",
              "denom": "12500000"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "LTC": [
        {
          "coin": "LTC",
          "address": {
            "address_type": "Transparent",
            "address_data": "LPCW5waySMa3BFZsxi2UrBjFnS464b97WU"
          },
          "price": {
            "decimal": "10000",
            "rational": [
              [1, [10000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "07764da3-bbec-4e50-9711-2baf0f8bf30b",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.11423436",
            "rational": [
              [1, [2855859]],
              [1, [25000000]]
            ],
            "fraction": {
              "numer": "2855859",
              "denom": "25000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000777",
            "rational": [
              [1, [777]],
              [1, [1000000000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "1000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "1142.3436",
            "rational": [
              [1, [2855859]],
              [1, [2500]]
            ],
            "fraction": {
              "numer": "2855859",
              "denom": "2500"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": {
            "base_confs": 1,
            "base_nota": false,
            "rel_confs": 2,
            "rel_nota": false
          }
        }
      ],
      "KMD": [
        {
          "coin": "KMD",
          "address": {
            "address_type": "Transparent",
            "address_data": "RDFjuFARxX8YzTEvFk2JfgzhLV9QcPWy5f"
          },
          "price": {
            "decimal": "322580.6451612903225806451612903225806451612903225806451612903225806451612903225806451612903225806452",
            "rational": [
              [1, [10000000]],
              [1, [31]]
            ],
            "fraction": {
              "numer": "10000000",
              "denom": "31"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "adff2e1d-4514-49ea-a30b-9575711767cd",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.031",
            "rational": [
              [1, [31]],
              [1, [1000]]
            ],
            "fraction": {
              "numer": "31",
              "denom": "1000"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000024087",
            "rational": [
              [1, [24087]],
              [1, [3567587328, 232]]
            ],
            "fraction": {
              "numer": "24087",
              "denom": "1000000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "10000",
            "rational": [
              [1, [10000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "10000",
              "denom": "1"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "DAI-ERC20": [
        {
          "coin": "DAI-ERC20",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xe5e6d27100474d34cc0f87ee387756395019019c"
          },
          "price": {
            "decimal": "33333333.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
            "rational": [
              [1, [100000000]],
              [1, [3]]
            ],
            "fraction": {
              "numer": "100000000",
              "denom": "3"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "15a47eff-607e-4729-896b-6acb309d5022",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.1075026242236026",
            "rational": [
              [1, [2258990909, 125149]],
              [1, [937459712, 1164153]]
            ],
            "fraction": {
              "numer": "537513121118013",
              "denom": "5000000000000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.0081585",
            "rational": [
              [1, [16317]],
              [1, [2000000]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "2000000"
            }
          },
          "rel_max_volume": {
            "decimal": "3583420.80745342",
            "rational": [
              [1, [2184652735, 41716]],
              [1, [50000000]]
            ],
            "fraction": {
              "numer": "179171040372671",
              "denom": "50000000"
            }
          },
          "rel_min_volume": {
            "decimal": "271950",
            "rational": [
              [1, [271950]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "271950",
              "denom": "1"
            }
          },
          "conf_settings": null
        }
      ],
      "NMC": [
        {
          "coin": "NMC",
          "address": {
            "address_type": "Transparent",
            "address_data": "MzYv2Nn8H5RYSz8E4PMkngpQJT5ruqWV4N"
          },
          "price": {
            "decimal": "80000",
            "rational": [
              [1, [80000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "80000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "87e3e99c-481f-46cc-9a64-ccc89ba5e434",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.025",
            "rational": [
              [1, [1]],
              [1, [40]]
            ],
            "fraction": {
              "numer": "1",
              "denom": "40"
            }
          },
          "base_min_volume": {
            "decimal": "0.000000097125",
            "rational": [
              [1, [777]],
              [1, [3705032704, 1]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "8000000000"
            }
          },
          "rel_max_volume": {
            "decimal": "2000",
            "rational": [
              [1, [2000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "2000",
              "denom": "1"
            }
          },
          "rel_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "conf_settings": null
        }
      ],
      "DOGE": [
        {
          "coin": "DOGE",
          "address": {
            "address_type": "Transparent",
            "address_data": "D97eMzDnf7EGTT4KXA2k7vq6TMR7JDpe1D"
          },
          "price": {
            "decimal": "20000000",
            "rational": [
              [1, [20000000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "20000000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "14de5083-daee-4d82-bc41-ac809076bf5f",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.02074779",
            "rational": [
              [1, [2074779]],
              [1, [100000000]]
            ],
            "fraction": {
              "numer": "2074779",
              "denom": "100000000"
            }
          },
          "base_min_volume": {
            "decimal": "0.00777",
            "rational": [
              [1, [777]],
              [1, [100000]]
            ],
            "fraction": {
              "numer": "777",
              "denom": "100000"
            }
          },
          "rel_max_volume": {
            "decimal": "414955.8",
            "rational": [
              [1, [2074779]],
              [1, [5]]
            ],
            "fraction": {
              "numer": "2074779",
              "denom": "5"
            }
          },
          "rel_min_volume": {
            "decimal": "155400",
            "rational": [
              [1, [155400]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "155400",
              "denom": "1"
            }
          },
          "conf_settings": null
        }
      ],
      "ETH": [
        {
          "coin": "ETH",
          "address": {
            "address_type": "Transparent",
            "address_data": "0xe5e6d27100474d34cc0f87ee387756395019019c"
          },
          "price": {
            "decimal": "400000",
            "rational": [
              [1, [400000]],
              [1, [1]]
            ],
            "fraction": {
              "numer": "400000",
              "denom": "1"
            }
          },
          "pubkey": "0261eef15cbc141f555aff1aa40fb21de17a0a9e6897eee18c14c6032586b456b3",
          "uuid": "19220788-3643-4fb2-9445-e13515ef811e",
          "is_mine": false,
          "base_max_volume": {
            "decimal": "0.11209544",
            "rational": [
              [1, [1401193]],
              [1, [12500000]]
            ],
            "fraction": {
              "numer": "1401193",
              "denom": "12500000"
            }
          },
          "base_min_volume": {
            "decimal": "0.0081585",
            "rational": [
              [1, [16317]],
              [1, [2000000]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "2000000"
            }
          },
          "rel_max_volume": {
            "decimal": "44838.176",
            "rational": [
              [1, [5604772]],
              [1, [125]]
            ],
            "fraction": {
              "numer": "5604772",
              "denom": "125"
            }
          },
          "rel_min_volume": {
            "decimal": "3263.4",
            "rational": [
              [1, [16317]],
              [1, [5]]
            ],
            "fraction": {
              "numer": "16317",
              "denom": "5"
            }
          },
          "conf_settings": null
        }
      ]
    },
    "original_tickers": {
      "MONA": ["MONA-segwit"],
      "NMC": ["NMC-segwit"],
      "LTC": ["LTC-segwit"],
      "PIC": ["PIC-segwit"],
      "LCC": ["LCC-segwit"],
      "BSTY": ["BSTY-segwit"],
      "BTC": ["BTC-segwit"],
      "PPC": ["PPC-segwit"],
      "GLEEC-OLD": ["GLEEC-OLD-segwit"],
      "LBC": ["LBC-segwit"],
      "BTE": ["BTE-segwit"],
      "VTC": ["VTC-segwit"],
      "LTFN": ["LTFN-segwit"],
      "SYS": ["SYS-segwit"],
      "BTX": ["BTX-segwit"],
      "tBTC-TEST": ["tBTC-TEST-segwit"],
      "CDN": ["CDN-segwit"],
      "FTC": ["FTC-segwit"],
      "GRS": ["GRS-segwit"],
      "RIC": ["RIC-segwit"],
      "XMY": ["XMY-segwit"],
      "VIA": ["VIA-segwit"],
      "WHIVE": ["WHIVE-segwit"],
      "XEP": ["XEP-segwit"],
      "FJC": ["FJC-segwit"],
      "WCN": ["WCN-segwit"],
      "QTUM": ["QTUM-segwit"],
      "tQTUM": ["tQTUM-segwit"],
      "DGB": ["DGB-segwit"]
    }
  },
  "id": null
}
```

#### Error Responses

*   `InvalidRequest` - Invalid type (`number` value must be integer)
*   `InvalidRequest` - Invalid type (type must be either `volume` or `number`, action mut be either `buy` or `sell`)
*   `CoinIsWalletOnly` - Wallet only coins can not be traded.
*   `P2PError` - There is a connection problem.
export const title = "Komodo DeFi Framework Method: Get Locked Amount";
export const description = "The get_locked_amount method returns the amount of a coin which is currently locked by a swap which is in progress.";

# get\_locked\_amount

The `get_locked_amount` method returns the amount of a coin which is currently locked by a swap which is in progress. If the coin is not activated, a `NoSuchCoin` error will be returned.

## Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter               | Type            | Description                                                                                      |
| ----------------------- | --------------- | ------------------------------------------------------------------------------------------------ |
| coin                    | string          | The ticker of the coin you queried.                                                              |
| locked\_amount          | object          | An object cointaining the locked amount in decimal, fraction and rational formats.               |
| locked\_amount.decimal  | numeric string  | The locked amount in [decimal format](https://www.mathsisfun.com/definitions/decimal.html).      |
| locked\_amount.rational | rational object | The locked amount in [rational format](/komodo-defi-framework/api/legacy/rational_number_note/). |
| locked\_amount.fraction | fraction object | The locked amount in [fraction format](https://www.mathsisfun.com/definitions/fraction.html).    |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_locked_amount",
  "params": {
    "coin": "DOC"
  },
  "id": 42
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "DOC",
    "locked_amount": {
      "decimal": "0.77803",
      "rational": [
        [1, [77803]],
        [1, [100000]]
      ],
      "fraction": {
        "numer": "77803",
        "denom": "100000"
      }
    }
  },
  "id": 42
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin: TIME",
  "error_path": "lp_swap.lp_coins",
  "error_trace": "lp_swap:486] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework: Swaps and Orders";
export const description =
  "Komodo DeFi Framework: Swaps and Orders";

# Swaps and Orders

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: Max Maker Vol";
export const description =
  "The max_maker_vol method returns the maximum volume of a coin which can be used to create a maker order.";

# max\_maker\_vol

The `max_maker_vol` method returns the maximum volume of a coin which can be used to create a maker order (taking into account estimated fees). If the coin is not activated, a `NoSuchCoin` error will be returned.

#### Arguments

| Parameter | Type   | Description                               |
| --------- | ------ | ----------------------------------------- |
| coin      | string | The ticker of the coin you want to query. |

#### Response

| Parameter         | Type   | Description                                                                                                                                                                                    |
| ----------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin              | string | The ticker of the coin you queried.                                                                                                                                                            |
| volume            | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable maker volume.                                           |
| balance           | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the tradable taker balance.                                          |
| locked\_by\_swaps | object | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object representing the volume of a coin's balance which is locked by swaps in progress. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "max_maker_vol",
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "MARTY",
    "volume": {
      "decimal": "4.489763268712998712998712998712998712998712998712998712998712998712998712998712998712998712998712999",
      "rational": [
        [1, [962255003, 81]],
        [1, [390588672, 18]]
      ],
      "fraction": {
        "numer": "348854605979",
        "denom": "77700000000"
      }
    },
    "balance": {
      "decimal": "5.49110027",
      "rational": [
        [1, [549110027]],
        [1, [100000000]]
      ],
      "fraction": {
        "numer": "549110027",
        "denom": "100000000"
      }
    },
    "locked_by_swaps": {
      "decimal": "1.001317001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001",
      "rational": [
        [1, [77802331]],
        [1, [77700000]]
      ],
      "fraction": {
        "numer": "77802331",
        "denom": "77700000"
      }
    }
  },
  "id": null
}
```

#### Response (error)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin TIME",
  "error_path": "max_maker_vol_rpc.lp_coins",
  "error_trace": "max_maker_vol_rpc:140] lp_coins:2894]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "TIME"
  },
  "id": null
}
```

#### Response (balance too low)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough QTUM for swap: available 0, required at least 0.000728, locked by swaps None",
  "error_path": "max_maker_vol_rpc.maker_swap.utxo_common",
  "error_trace": "max_maker_vol_rpc:148] maker_swap:2203] utxo_common:3327] utxo_common:892]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "QTUM",
    "available": "0",
    "required": "0.000728"
  },
  "id": null
}
```

#### Response (Transport error)

```json
{
  "mmrpc": "2.0",
  "error": "Transport error: JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "error_path": "taker_swap.utxo_common",
  "error_trace": "taker_swap:1599] utxo_common:1990] utxo_common:166]",
  "error_type": "Transport",
  "error_data": "JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: My Recent Swaps V2";
export const description = "The my_recent_swaps method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node.";

# my\_recent\_swaps

**my\_recent\_swaps (from\_uuid page\_number=1 limit=10 my\_coin other\_coin from\_timestamp to\_timestamp)**

The `my_recent_swaps` method returns the data of the most recent atomic swaps executed by the Komodo DeFi Framework API node. Please note that all filters (my\_coin, from\_timestamp, etc.) are combined using logical AND.

## Arguments

| Parameter       | Type    | Description                                             |
| --------------- | ------- | ------------------------------------------------------- |
| my\_coin        | string  | Optional. Coin being used by you for the swap/trade.    |
| other\_coin     | string  | Optional. Coin you are trading against                  |
| from\_timestamp | integer | Optional. Start timestamp in UNIX format                |
| to\_timestamp   | integer | Optional. End timestamp in UNIX format                  |
| from\_uuid      | string  | Optional. The UUID from which to start fetching results |
| limit           | integer | Optional. The maximum number fo results to return       |
| page\_number    | integer | Optional. Offset for paginated results                  |

#### Response

| Parameter      | Type             | Description                                                                                                                                                                                            |
| -------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| swaps          | array of objects | A list of standard [SwapStatus](/komodo-defi-framework/api/common_structures/swaps/#swap-status) objects                                                                                               |
| from\_uuid     | string           | the from\_uuid that was set in the request; this value is null if nothing was set                                                                                                                      |
| skipped        | integer          | the number of skipped records (i.e. the position of `from_uuid` in the list + 1 or `(page_number - 1) * limit`; the value is 0 if `from_uuid` or `page_number` were not set or `page_number` is 1)     |
| limit          | integer          | the limit that was set in the request; note that the actual number of swaps can differ from the specified limit (e.g. on the last page)                                                                |
| total          | integer          | total number of swaps available with the selected filters                                                                                                                                              |
| page\_number   | integer          | the page\_number that was set in the request; if both `page_number` and `from_uuid` are not set in request it will default to `1`; if `from_uuid` is present in request this value will be always null |
| total\_pages   | integer          | total pages available with the selected filters and limit                                                                                                                                              |
| found\_records | integer          | the number of returned swaps                                                                                                                                                                           |

#### 📌 Example

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_recent_swaps",
  "params": {
    "my_coin": "MARTY",
    "other_coin": "DOC",
    "from_timestamp": 1672531200,
    "to_timestamp": 1734067200,
    "from_uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
    "limit": 5,
    "page_number": 1
  }
}
```

#### Response (success)

```json
{
  "result": {
      "swaps": [
          {
              "type": "Taker",
              "uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
              "my_order_uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
              "events": [
                  {
                      "timestamp": 1725849334423,
                      "event": {
                          "type": "Started",
                          "data": {
                              "taker_coin": "MARTY",
                              "maker_coin": "DOC",
                              "maker": "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                              "my_persistent_pub": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "lock_duration": 7800,
                              "maker_amount": "2.4",
                              "taker_amount": "2.4",
                              "maker_payment_confirmations": 1,
                              "maker_payment_requires_nota": false,
                              "taker_payment_confirmations": 1,
                              "taker_payment_requires_nota": false,
                              "taker_payment_lock": 1725857133,
                              "uuid": "0a3859ba-0e28-49de-b015-641c050a6409",
                              "started_at": 1725849333,
                              "maker_payment_wait": 1725852453,
                              "maker_coin_start_block": 724378,
                              "taker_coin_start_block": 738955,
                              "fee_to_send_taker_fee": {
                                  "coin": "MARTY",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": false
                              },
                              "taker_payment_trade_fee": {
                                  "coin": "MARTY",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": false
                              },
                              "maker_payment_spend_trade_fee": {
                                  "coin": "DOC",
                                  "amount": "0.00001",
                                  "paid_from_trading_vol": true
                              },
                              "maker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "taker_coin_htlc_pubkey": "03d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2",
                              "p2p_privkey": null
                          }
                      }
                  },
                  {
                      "timestamp": 1725849338425,
                      "event": {
                          "type": "Negotiated",
                          "data": {
                              "maker_payment_locktime": 1725864931,
                              "maker_pubkey": "000000000000000000000000000000000000000000000000000000000000000000",
                              "secret_hash": "91ddaac214398b0b728d652af8d86f2e06fbbb34",
                              "maker_coin_swap_contract_addr": null,
                              "taker_coin_swap_contract_addr": null,
                              "maker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
                              "taker_coin_htlc_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849339829,
                      "event": {
                          "type": "TakerFeeSent",
                          "data": {
                              "tx_hex": "0400008085202f890101280d9a0703a25cdd553babd5430708f303fe3d446cd79555a53619c987d7b3000000006a47304402205805ecb3fad4c69e27061a35197c470e6a72a2b762269d3ef6b249c835396cd5022046b710dd5b6bdda75cc32a2cb9511ca51c754e4f2bcac8cd0f2757728a1671c6012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0290b60400000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88aca0e4dc11000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88acfb5ede66000000000000000000000000000000",
                              "tx_hash": "614d3b1ef3666799d71f54ea242f2cb839646be3bfc81d8f1cfce26747cb9892"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849341830,
                      "event": {
                          "type": "TakerPaymentInstructionsReceived",
                          "data": null
                      }
                  },
                  {
                      "timestamp": 1725849341831,
                      "event": {
                          "type": "MakerPaymentReceived",
                          "data": {
                              "tx_hex": "0400008085202f8901175391f3922ffcf7dc8929b9795c2fec8d82ed1649e0f3926e04709993dc35a6020000006a4730440220363ea815a237b46c5dd305809fcc103793bb4f620325c12caccb0c88f320e81c02205df417a4b806f3c3d50aa058c4d6a30203868ba786f2a1bd3b3b12917b3882ff01210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03001c4e0e0000000017a914944cf7300280e31374b3994422a252bce1fcbd10870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34083d6aff050000001976a9141462c3dd3f936d595c9af55978003b27c250441f88acfc5ede66000000000000000000000000000000",
                              "tx_hash": "70f6078b9d3312f14dff45fc1e56e503b01d33e22cac8ebd195e4951d468dca6"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849341832,
                      "event": {
                          "type": "MakerPaymentWaitConfirmStarted"
                      }
                  },
                  {
                      "timestamp": 1725849465809,
                      "event": {
                          "type": "MakerPaymentValidatedAndConfirmed"
                      }
                  },
                  {
                      "timestamp": 1725849469603,
                      "event": {
                          "type": "TakerPaymentSent",
                          "data": {
                              "tx_hex": "0400008085202f89019298cb4767e2fc1c8f1dc8bfe36b6439b82c2f24ea541fd7996766f31e3b4d61010000006a4730440220526bd1e2114642b2624cb283bada8dbeb734d3fae9184f6833e0eca87b20fffe0220554a3b38ecde2b8a521b681f5ac3e3940e08f45cc35a2fc19eeaeae513368a6c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff03001c4e0e0000000017a9141036c1fcbdf2b3e2d8b65913c78ab7412422cf17870000000000000000166a1491ddaac214398b0b728d652af8d86f2e06fbbb34b8c48e03000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac7a5fde66000000000000000000000000000000",
                              "tx_hash": "ffe2fe025d470996c3057dc561bd79d0a09f2aa5a14b25fb8e444b49394e5ad8"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849469604,
                      "event": {
                          "type": "WatcherMessageSent",
                          "data": [
                              [
                                  4,
                                  ...
                                  0
                              ]
                          ]
                      }
                  },
                  {
                      "timestamp": 1725849486567,
                      "event": {
                          "type": "TakerPaymentSpent",
                          "data": {
                              "transaction": {
                                  "tx_hex": "0400008085202f8901d85a4e39494b448efb254ba1a52a9fa0d079bd61c57d05c39609475d02fee2ff00000000d74730440220544c5a2eec1e3fb7a2c71e3b6bf3c612300a9c5375ca5c7131742f0afc8a6e8f02206df5b042ec1ff359bf7209269ce3b59d09f5f2340842d5e0a253875624bbce120120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b63046d7dde66b1752103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb3488210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac68ffffffff0118184e0e000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac6d7dde66000000000000000000000000000000",
                                  "tx_hash": "58813eb1037e40425d56146c2f6bfbe70b8bcc18e45b752b51c726503ad4f8df"
                              },
                              "secret": "d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849488871,
                      "event": {
                          "type": "MakerPaymentSpent",
                          "data": {
                              "tx_hex": "0400008085202f8901a6dc68d451495e19bd8eac2ce2331db003e5561efc45ff4df112339d8b07f67000000000d74730440220286e61b401b1b57b4ddf93294c588a4614e755549168e73c922402ece652d9830220521c7f1df0cbcacf29f55e3a09f2332a6fff25834917307db91072da8f793b030120d178a7c8f88a2f6e496a36ff8d7220c2d48903b45a365b80d59fcfafbf694cb5004c6b6304e39bde66b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91491ddaac214398b0b728d652af8d86f2e06fbbb34882103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ac68ffffffff0118184e0e000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ace39bde66000000000000000000000000000000",
                              "tx_hash": "60f83a68e5851ff93308758763ce30c643bd94ae89f4ae43fe7e02dc88d61642"
                          }
                      }
                  },
                  {
                      "timestamp": 1725849488872,
                      "event": {
                          "type": "Finished"
                      }
                  }
              ],
              "maker_amount": "2.4",
              "maker_coin": "DOC",
              "maker_coin_usd_price": "0.0000001",
              "taker_amount": "2.4",
              "taker_coin": "MARTY",
              "taker_coin_usd_price": "0.00000005",
              "gui": "mm2_777",
              "mm_version": "2.2.0-beta_2bdee4f",
              "success_events": [
                  "Started",
                  "Negotiated",
                  "TakerFeeSent",
                  "TakerPaymentInstructionsReceived",
                  "MakerPaymentReceived",
                  "MakerPaymentWaitConfirmStarted",
                  "MakerPaymentValidatedAndConfirmed",
                  "TakerPaymentSent",
                  "WatcherMessageSent",
                  "TakerPaymentSpent",
                  "MakerPaymentSpent",
                  "MakerPaymentSpentByWatcher",
                  "Finished"
              ],
              "error_events": [
                  "StartFailed",
                  "NegotiateFailed",
                  "TakerFeeSendFailed",
                  "MakerPaymentValidateFailed",
                  "MakerPaymentWaitConfirmFailed",
                  "TakerPaymentTransactionFailed",
                  "TakerPaymentWaitConfirmFailed",
                  "TakerPaymentDataSendFailed",
                  "TakerPaymentWaitForSpendFailed",
                  "MakerPaymentSpendFailed",
                  "TakerPaymentWaitRefundStarted",
                  "TakerPaymentRefundStarted",
                  "TakerPaymentRefunded",
                  "TakerPaymentRefundedByWatcher",
                  "TakerPaymentRefundFailed",
                  "TakerPaymentRefundFinished"
              ],
              "my_info": {
                  "my_coin": "MARTY",
                  "other_coin": "DOC",
                  "my_amount": "2.4",
                  "other_amount": "2.4",
                  "started_at": 1725849333
              },
              "recoverable": false,
              "is_finished": true
          }
      ],
      "from_uuid": null,
      "skipped": 0,
      "limit": 10,
      "total": 1,
      "page_number": 1,
      "total_pages": 1,
      "found_records": 1
  }
}
```

### Error Responses

#### Invalid UUID

```json
{
    "error": "rpc:215] dispatcher_legacy:141] lp_swap:1298] UUID parsing failed: invalid length: expected length 32 for simple format, found 64"
}
```

#### Unknown SQL Error

```json
{
    "error": "rpc:215] dispatcher_legacy:141] lp_swap:1299] my_swaps_storage:102] Unknown SQL error: Query returned no rows"
}
```
export const title = "Komodo DeFi Framework Method: Orderbook v2";
export const description = "The orderbook method requests from the network the currently available orders for the specified trading pair.";

# orderbook

**orderbook base rel**

The v2 `orderbook` method requests from the network the currently available orders for the specified trading pair.

## Arguments

| Structure | Type   | Description                                          |
| --------- | ------ | ---------------------------------------------------- |
| base      | string | Base currency of a pair                              |
| rel       | string | Related currency, also known as the "quote currency" |

## Response

| Structure              | Type             | Description                                                                                                                                |
| ---------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| base                   | string           | The name of the coin the user desires to receive                                                                                           |
| rel                    | string           | The name of the coin the user will trade                                                                                                   |
| numasks                | integer          | The number of outstanding asks                                                                                                             |
| numbids                | integer          | The number of outstanding bids                                                                                                             |
| netid                  | integer          | The id of the network on which the request is made                                                                                         |
| asks                   | array of objects | An array of standard [OrderDataV2](/komodo-defi-framework/api/common_structures/orders/#order-data-v2) objects containing outstanding asks |
| bids                   | array of objects | An array of standard [OrderDataV2](/komodo-defi-framework/api/common_structures/orders/#order-data-v2) objects containing outstanding bids |
| timestamp              | integer          | A UNIX timestamp representing when the orderbook was requested                                                                             |
| total\_asks\_base\_vol | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_asks\_rel\_vol  | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_bids\_base\_vol | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |
| total\_bids\_rel\_vol  | object           | A standard [NumericFormatsValue](/komodo-defi-framework/api/common_structures/#numeric-formats-value) object.                              |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "orderbook",
  "params": {
    "base": "DGB",
    "rel": "DASH"
  },
  "id": 42
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "asks": [
      {
      "coin": "DGB",
      "address": {
        "address_type": "Transparent",
        "address_data": "DEsCggcN3WNmaTkF2WpqoMQqx4JGQrLbPS"
      },
      "price": {
        "decimal": "0.0002658065",
        "rational": [
          [1, [531613]],
          [1, [2000000000]]
        ],
        "fraction": {
          "numer": "531613",
          "denom": "2000000000"
        }
      },
      "pubkey": "03de96cb66dcfaceaa8b3d4993ce8914cd5fe84e3fd53cefdae45add8032792a12",
      "uuid": "1115d7f2-a7b9-4ab1-913f-497db2549a2b",
      "is_mine": false,
      "base_max_volume": {
        "decimal": "90524.256020352",
        "rational": [
          [1, [2846113615, 164]],
          [1, [7812500]]
        ],
        "fraction": {
          "numer": "707220750159",
          "denom": "7812500"
        }
      },
      "base_min_volume": {
        "decimal": "0.3762135237475381527539770472129161626973004798603495399849138376977237200745655204067620618758382508",
        "rational": [
          [1, [200000]],
          [1, [531613]]
        ],
        "fraction": {
          "numer": "200000",
          "denom": "531613"
        }
      },
      "rel_max_volume": {
        "decimal": "24.061935657873693888",
        "rational": [
          [1, [4213143411, 87536811]],
          [1, [3466432512, 3637978]]
        ],
        "fraction": {
          "numer": "375967744654276467",
          "denom": "15625000000000000"
        }
      },
      "rel_min_volume": {
        "decimal": "0.0001",
        "rational": [
          [1, [1]],
          [1, [10000]]
        ],
        "fraction": {
          "numer": "1",
          "denom": "10000"
        }
      },
      "conf_settings": {
        "base_confs": 7,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false
      },
      "base_max_volume_aggr": {
        "decimal": "133319.023345413",
        "rational": [
          [1, [3238477573, 31040]],
          [1, [1000000000]]
        ],
        "fraction": {
          "numer": "133319023345413",
          "denom": "1000000000"
        }
      },
      "rel_max_volume_aggr": {
        "decimal": "35.2500366381728643576",
        "rational": [
          [1, [473921343, 1669176307, 2]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "44062545797716080447",
          "denom": "1250000000000000000"
        }
      }
      }
    ],
    "base": "DGB",
    "bids": [
      {
      "coin": "DASH",
      "address": {
        "address_type": "Transparent",
        "address_data": "XcYdfQgeuM5f5V2LNo9g8o8p3rPPbKwwCg"
      },
      "price": {
        "decimal": "0.0002544075418788651605521516540338523799763700988224165198319218986992534200426899830070024093907274001",
        "rational": [
          [1, [1410065408, 2]],
          [1, [3765089107, 9151]]
        ],
        "fraction": {
          "numer": "10000000000",
          "denom": "39307010814803"
        }
      },
      "pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
      "uuid": "e9e4feb2-60b4-4184-8294-591687171e6b",
      "is_mine": false,
      "base_max_volume": {
        "decimal": "15449.5309493280527473176",
        "rational": [
          [1, [161102659, 3869502237, 1046]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "19311913686660065934147",
          "denom": "1250000000000000000"
        }
      },
      "base_min_volume": {
        "decimal": "0.39307010814803",
        "rational": [
          [1, [3765089107, 9151]],
          [1, [276447232, 23283]]
        ],
        "fraction": {
          "numer": "39307010814803",
          "denom": "100000000000000"
        }
      },
      "rel_max_volume": {
        "decimal": "3.930477192",
        "rational": [
          [1, [491309649]],
          [1, [125000000]]
        ],
        "fraction": {
          "numer": "491309649",
          "denom": "125000000"
        }
      },
      "rel_min_volume": {
        "decimal": "0.0001",
        "rational": [
          [1, [1]],
          [1, [10000]]
        ],
        "fraction": {
          "numer": "1",
          "denom": "10000"
        }
      },
      "conf_settings": {
        "base_confs": 7,
        "base_nota": false,
        "rel_confs": 2,
        "rel_nota": false
      },
      "base_max_volume_aggr": {
        "decimal": "15449.5309493280527473176",
        "rational": [
          [1, [161102659, 3869502237, 1046]],
          [1, [2436694016, 291038304]]
        ],
        "fraction": {
          "numer": "19311913686660065934147",
          "denom": "1250000000000000000"
        }
      },
      "rel_max_volume_aggr": {
        "decimal": "3.930477192",
        "rational": [
          [1, [491309649]],
          [1, [125000000]]
        ],
        "fraction": {
          "numer": "491309649",
          "denom": "125000000"
        }
      }
      }
    ],
    "net_id": 8762,
    "num_asks": 3,
    "num_bids": 3,
    "rel": "DASH",
    "timestamp": 1694183345,
    "total_asks_base_vol": {
      "decimal": "133319.023345413",
      "rational": [
        [1, [3238477573, 31040]],
        [1, [1000000000]]
      ],
      "fraction": {
        "numer": "133319023345413",
        "denom": "1000000000"
      }
    },
    "total_asks_rel_vol": {
      "decimal": "35.2500366381728643576",
      "rational": [
        [1, [473921343, 1669176307, 2]],
        [1, [2436694016, 291038304]]
      ],
      "fraction": {
        "numer": "44062545797716080447",
        "denom": "1250000000000000000"
      }
    },
    "total_bids_base_vol": {
      "decimal": "59100.6554157135128550633",
      "rational": [
        [1, [1422777577, 2274178813, 32038]],
        [1, [2313682944, 2328306436]]
      ],
      "fraction": {
        "numer": "591006554157135128550633",
        "denom": "10000000000000000000"
      }
    },
    "total_bids_rel_vol": {
      "decimal": "14.814675225",
      "rational": [
        [1, [592587009]],
        [1, [40000000]]
      ],
      "fraction": {
        "numer": "592587009",
        "denom": "40000000"
      }
    }
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Recreate Swap Data";
export const description = "The recreate_swap_data method helps recover lost swap data due to storage errors or hardware failure.";

# recreate\_swap\_data

The `recreate_swap_data` can assist in the event of local stored swap data being lost due to storage errors related to low disk space or hardware failure, and if required, aid with the refunding of failed swaps.

To source the opposite side of the trade, please [contact the Komodo Support team on Discord](https://komodoplatform.com/discord). You will need to provide details about the trade you are trying to recover, such as the coins and amounts being traded, the approximate time of the trade, any known transaction IDs involved in the trade, and if available the UUID of the trade.

## Arguments

| Structure | Type   | Description                                                                                                                             |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| swap      | object | Swap data from other side of trade. For example to recreate a Maker's swap data, the input would be the corresponding Taker's swap data |

#### Response

| Structure | Type   | Description                                                                                                                       |
| --------- | ------ | --------------------------------------------------------------------------------------------------------------------------------- |
| result    | object | Opposite side's swap data. For example if a Taker's swap data is input, the reponse would be the corresponding Maker's swap data. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "recreate_swap_data",
  "params": {
    "swap": {
      "type": "Taker",
      "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "my_order_uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "events": [
        {
          "timestamp": 1638984440546,
          "event": {
            "type": "Started",
            "data": {
              "taker_coin": "MARTY",
              "maker_coin": "DOC",
              "maker": "15d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "my_persistent_pub": "03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "lock_duration": 7800,
              "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
              "taker_amount": "1",
              "maker_payment_confirmations": 1,
              "maker_payment_requires_nota": false,
              "taker_payment_confirmations": 1,
              "taker_payment_requires_nota": false,
              "taker_payment_lock": 1638992240,
              "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
              "started_at": 1638984440,
              "maker_payment_wait": 1638987560,
              "maker_coin_start_block": 1207822,
              "taker_coin_start_block": 1222573,
              "fee_to_send_taker_fee": {
                "coin": "MARTY",
                "amount": "0.00001",
                "paid_from_trading_vol": false
              },
              "taker_payment_trade_fee": {
                "coin": "MARTY",
                "amount": "0.00001",
                "paid_from_trading_vol": false
              },
              "maker_payment_spend_trade_fee": {
                "coin": "DOC",
                "amount": "0.00001",
                "paid_from_trading_vol": true
              }
            }
          }
        },
        {
          "timestamp": 1638984456603,
          "event": {
            "type": "Negotiated",
            "data": {
              "maker_payment_locktime": 1639000040,
              "maker_pubkey": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "secret_hash": "4da9e7080175e8e10842e0e161b33cd298cab30b",
              "maker_coin_swap_contract_addr": null,
              "taker_coin_swap_contract_addr": null
            }
          }
        },
        {
          "timestamp": 1638984456814,
          "event": {
            "type": "TakerFeeSent",
            "data": {
              "tx_hex": "0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000",
              "tx_hash": "fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc"
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "MakerPaymentReceived",
            "data": {
              "tx_hex": "0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000",
              "tx_hash": "6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d"
            }
          }
        },
        {
          "timestamp": 1638984457826,
          "event": {
            "type": "MakerPaymentWaitConfirmStarted"
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "MakerPaymentWaitConfirmFailed",
            "data": {
              "error": "An error"
            }
          }
        },
        {
          "timestamp": 1638984503615,
          "event": {
            "type": "Finished"
          }
        }
      ],
      "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
      "maker_coin": "DOC",
      "taker_amount": "1",
      "taker_coin": "MARTY",
      "gui": "KomodoWallet 0.5.1 iOS",
      "mm_version": "1b065636a",
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeSent",
        "MakerPaymentReceived",
        "MakerPaymentWaitConfirmStarted",
        "MakerPaymentValidatedAndConfirmed",
        "TakerPaymentSent",
        "TakerPaymentSpent",
        "MakerPaymentSpent",
        "Finished"
      ],
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeSendFailed",
        "MakerPaymentValidateFailed",
        "MakerPaymentWaitConfirmFailed",
        "TakerPaymentTransactionFailed",
        "TakerPaymentWaitConfirmFailed",
        "TakerPaymentDataSendFailed",
        "TakerPaymentWaitForSpendFailed",
        "MakerPaymentSpendFailed",
        "TakerPaymentWaitRefundStarted",
        "TakerPaymentRefunded",
        "TakerPaymentRefundFailed"
      ]
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "swap": {
      "type": "Maker",
      "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "my_order_uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
      "events": [
        {
          "timestamp": 1638984440546,
          "event": {
            "type": "Started",
            "data": {
              "taker_coin": "MARTY",
              "maker_coin": "DOC",
              "taker": "b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "secret": "0000000000000000000000000000000000000000000000000000000000000000",
              "secret_hash": "4da9e7080175e8e10842e0e161b33cd298cab30b",
              "my_persistent_pub": "0315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732",
              "lock_duration": 7800,
              "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
              "taker_amount": "1",
              "maker_payment_confirmations": 1,
              "maker_payment_requires_nota": false,
              "taker_payment_confirmations": 1,
              "taker_payment_requires_nota": false,
              "maker_payment_lock": 1639000040,
              "uuid": "f87fa9ce-0820-4675-b85d-db18c7bc9fb4",
              "started_at": 1638984440,
              "maker_coin_start_block": 1207822,
              "taker_coin_start_block": 1222573,
              "maker_payment_trade_fee": null,
              "taker_payment_spend_trade_fee": null
            }
          }
        },
        {
          "timestamp": 1638984456603,
          "event": {
            "type": "Negotiated",
            "data": {
              "taker_payment_locktime": 1638992240,
              "taker_pubkey": "03b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58addd",
              "maker_coin_swap_contract_addr": null,
              "taker_coin_swap_contract_addr": null
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "TakerFeeValidated",
            "data": {
              "tx_hex": "0400008085202f89016383e8aced2256378bb126a1ca1a41e2f344d9295f65b3ea4b99055c5eb4a6cb000000006a47304402201c7e661e0dbeb9b3eb6e4e9e3194010e5772227017772b2e48c1b8d48ed3b21f02201c2eda64e74455fa1878a5c221f25d22fe626abd0078a26a9fc0f829e0921639012103b1e544ce2d860219bc91314b5483421a553a7b33044659eff0be9214ed58adddffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac74c3e90b000000001976a91483762a373935ca241d557dfce89171d582b486de88ac08ebb061000000000000000000000000000000",
              "tx_hash": "fcb49167c79e8e014143643b94878866f7e80b26c5a5dcf693010543da70b5bc"
            }
          }
        },
        {
          "timestamp": 1638984457822,
          "event": {
            "type": "MakerPaymentSent",
            "data": {
              "tx_hex": "0400008085202f8901c41fdf6b9d8aea4b472f83e4fa0d99dfafc245e897d681fd2ca7df30707fbf48020000006b483045022100c7b294bd46cbf3b13530879a43c5cf67414047266d8b64c3c7263b5e75b989ba02201974f38d688b184bc44e628806c6ab2ac9092f394729d0ce838f14e1e76117c001210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ffffffff03a2296b050000000017a91491c45f69e1760c12a1f90fb2a811f6dfde35cc35870000000000000000166a144da9e7080175e8e10842e0e161b33cd298cab30bac503d64000000001976a9141462c3dd3f936d595c9af55978003b27c250441f88ac09ebb061000000000000000000000000000000",
              "tx_hash": "6287e0d30951cd859bfb837eb1e5409f7596e75ffeb2e61fd6df1843bfd0203d"
            }
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "TakerPaymentValidateFailed",
            "data": {
              "error": "Origin Taker error event: MakerPaymentWaitConfirmFailed(SwapError { error: \"An error\" })"
            }
          }
        },
        {
          "timestamp": 1638984503611,
          "event": {
            "type": "MakerPaymentWaitRefundStarted",
            "data": {
              "wait_until": 1639003740
            }
          }
        }
      ],
      "maker_amount": "0.9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909091",
      "maker_coin": "DOC",
      "taker_amount": "1",
      "taker_coin": "MARTY",
      "gui": "nogui",
      "mm_version": "",
      "success_events": [
        "Started",
        "Negotiated",
        "TakerFeeValidated",
        "MakerPaymentSent",
        "TakerPaymentReceived",
        "TakerPaymentWaitConfirmStarted",
        "TakerPaymentValidatedAndConfirmed",
        "TakerPaymentSpent",
        "TakerPaymentSpendConfirmStarted",
        "TakerPaymentSpendConfirmed",
        "Finished"
      ],
      "error_events": [
        "StartFailed",
        "NegotiateFailed",
        "TakerFeeValidateFailed",
        "MakerPaymentTransactionFailed",
        "MakerPaymentDataSendFailed",
        "MakerPaymentWaitConfirmFailed",
        "TakerPaymentValidateFailed",
        "TakerPaymentWaitConfirmFailed",
        "TakerPaymentSpendFailed",
        "TakerPaymentSpendConfirmFailed",
        "MakerPaymentWaitRefundStarted",
        "MakerPaymentRefunded",
        "MakerPaymentRefundFailed"
      ]
    }
  },
  "id": null
}
```
export const title =
  "Komodo DeFi Framework Method: Start Simple Market Maker Bot";
export const description =
  "The Komodo DeFi Framework API allows for simple bot trading via the start_simple_market_maker_bot method.";

# start\_simple\_market\_maker\_bot

The Komodo DeFi Framework API allows for simple bot trading via the `start_simple_market_maker_bot` method. This method takes as input a url to a price service, and configuration parameters of the pair to trade at a defined spread percentage value. It will update orders every 30 seconds (or higher values if defined with the `bot_refresh_rate` parameter).

Note: If using a custom prices API endpoint, please ensure it conforms to the same schema as the url in the example.

For convenience, an online [tool for generating configs](https://stats.kmd.io/atomicdex/makerbot_config_form/) is available.

## Arguments

| Structure                                                | Type    | Description                                                                                                                                                                                                                                                                                            |
| -------------------------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| price\_urls                                              | list    | Optional. A list of URLs serving price data in JSON format. During each update loop, price data will be sourced from the first working URL in the list. If not defined, a [default list](https://github.com/KomodoPlatform/komodo-defi-framework/blob/main/mm2src/coins/lp_price.rs#L13) will be used. |
| bot\_refresh\_rate                                       | float   | Bot loop interval in seconds (optional, 30 sec default)                                                                                                                                                                                                                                                |
| cfg.name                                                 | string  | The name assigned to this configuration (e.g. the pair being configured)                                                                                                                                                                                                                               |
| cfg.name.base                                            | string  | Ticker of the coin you wish to sell                                                                                                                                                                                                                                                                    |
| cfg.name.rel                                             | string  | Ticker of the coin you wish to buy                                                                                                                                                                                                                                                                     |
| cfg.name.max                                             | boolean | Set to `true` if you would like to trade your whole balance (optional)                                                                                                                                                                                                                                 |
| cfg.name.max\_volume.percentage                          | string  | Percentage of balance to trade (optional; can not use at same time as `max_volume.usd`; if greater than 1.0 `max=true` is implied)                                                                                                                                                                     |
| cfg.name.max\_volume.usd                                 | string  | Maximum USD trade volume value to trade (optional; can not use at same time as `max_volume.percentage`; if greater than full balance `max=true` is implied)                                                                                                                                            |
| cfg.name.min\_volume.percentage                          | string  | Minimum percentage of balance to accept in trade (optional, can not use at same time as `min_volume.usd`)                                                                                                                                                                                              |
| cfg.name.min\_volume.usd                                 | float   | Minimum USD trade volume of trades accepted for order (optional, can not use at same time as `min_volume.percentage`)                                                                                                                                                                                  |
| cfg.name.min\_base\_price                                | float   | Minimum USD price of base coin to accept in trade (optional)                                                                                                                                                                                                                                           |
| cfg.name.min\_rel\_price                                 | float   | Minimum USD price of rel coin to accept in trade (optional)                                                                                                                                                                                                                                            |
| cfg.name.min\_pair\_price                                | float   | Minimum USD price of pair (base/rel) to accept in trade (optional)                                                                                                                                                                                                                                     |
| cfg.name.spread\*\*                                      | string  | Target price in relation to prices API value                                                                                                                                                                                                                                                           |
| cfg.name.base\_confs                                     | integer | number of required blockchain confirmations for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                       |
| cfg.name.base\_nota                                      | boolean | whether dPoW notarization is required for base coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                             |
| cfg.name.rel\_confs                                      | integer | number of required blockchain confirmations for rel coin atomic swap transaction; default to rel coin configuration if not set                                                                                                                                                                         |
| cfg.name.rel\_nota                                       | boolean | whether dPoW notarization is required for rel coin atomic swap transaction; default to base coin configuration if not set                                                                                                                                                                              |
| cfg.name.enable                                          | boolean | Bot will ignore this config entry if set to false                                                                                                                                                                                                                                                      |
| cfg.name.price\_elapsed\_validity                        | float   | Will cancel current orders for this pair and not submit a new order if last price update time has been longer than this value in seconds (optional; defaults to 5 minutes)                                                                                                                             |
| cfg.name.check\_last\_bidirectional\_trade\_thresh\_hold | boolean | Will readjust the calculated cex price if a precedent trade exists for the pair (or reversed pair), applied via a [VWAP logic](https://www.investopedia.com/terms/v/vwap.asp) (optional; defaults to false)                                                                                            |

*   Percentage values are within the range of 0-1, such that 0.25 = 25%
*   For spread, a value of 1.05 equates to 5% over the value returned from the prices API url.
*   At least one of the optional fields `max`, `max_volume.usd` or `max_volume.percentage` must be present, or orders will not be placed.

#### 📌 Examples

As demonstrated below, multiple configs can be included within the same command. It is recommended to not exceed 500-1000 simultaneous orders placed to avoid decreased performance.

In the example below, the first config lets the bot know we want to:

*   Sell DASH in exchange for KMD
*   Use whole of available DASH balance, with minimum trade volume accepted as 25% of your balance
*   Sets the sell price at 2.5% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 30 seconds
*   Waits for 3 confirmations and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Checks trade history within the local Komodo DeFi Framework API database to never create trades with a sell price that is less than the average trading price.

The second config tells the bot to:

*   Sell DASH in exchange for DGB
*   Trade at most 50% of your DASH balance, with minimum trade volume accepted at least $20 USD.
*   Only place an order when the DASH price is $250 USD or more.
*   Sets the sell price at 4% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 60 seconds
*   Waits for 1 confirmation and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Ignores your trade history and average trading price, creating/updating orders regardless.

The third config tells the bot to:

*   Sell DASH in exchange for LTC
*   Trade at most $500 USD worth of DASH, with minimum trade volume accepted at least $50 USD.
*   Only place an order when the DASH price is $250 USD or more.
*   Sets the sell price at 5% over the value returned from the prices API (spread).
*   Only accepts values from the prices API that have been updated within the last 60 seconds
*   Waits for 1 confirmation and does not wait for a notarisation to progress to the next steps in the atomic swap process
*   Ignores your trade history and average trading price, creating/updating orders regardless.

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "start_simple_market_maker_bot",
  "params": {
    "price_urls": [
      "https://prices.komodo.live:1313/api/v2/tickers?expire_at=600",
      "https://prices.komodo.earth/api/v2/tickers?expire_at=600",
      "https://prices.komodian.info/api/v2/tickers?expire_at=600"
    ],
    "bot_refresh_rate": 60,
    "cfg": {
      "DASH/KMD": {
        "base": "DASH",
        "rel": "KMD",
        "max": true,
        "min_volume": {
          "percentage": "0.25"
        },
        "spread": "1.025",
        "base_confs": 3,
        "base_nota": false,
        "rel_confs": 3,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 30,
        "check_last_bidirectional_trade_thresh_hold": true
      },
      "DASH/DGB": {
        "base": "DASH",
        "rel": "DGB",
        "min_volume": {
          "usd": "20"
        },
        "min_base_price": "250",
        "spread": "1.04",
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 60,
        "check_last_bidirectional_trade_thresh_hold": false
      },
      "DASH/LTC": {
        "base": "DASH",
        "rel": "LTC",
        "max_volume": {
          "usd": "500"
        },
        "min_volume": {
          "usd": "50"
        },
        "min_base_price": "250",
        "spread": "1.04",
        "base_confs": 1,
        "base_nota": false,
        "rel_confs": 1,
        "rel_nota": false,
        "enable": true,
        "price_elapsed_validity": 60,
        "check_last_bidirectional_trade_thresh_hold": false
      }
    }
  },
  "id": 0
}
```

As we have `\"bot_refresh_rate\": 60,` in the above command, our bot loop will update order prices every 60 seconds, as long as the price service returns data that is no more than 30 seconds old (for DASH/KMD) or no more than 60 seconds old (for DASH/DGB).

#### Response (success) {{class : 'text-green-500'}}

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": 0
}
```

#### Response (error - bot already started) {{class : 'text-red-500'}}

```json
{
  "mmrpc": "2.0",
  "error": "The bot is already started",
  "error_path": "simple_market_maker",
  "error_trace": "simple_market_maker:770]",
  "error_type": "AlreadyStarted",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Stop Simple Market Maker Bot";
export const description = "The stop_simple_market_maker_bot method tells the bot to finish placing orders at the end of the current loop 30 seconds minimum and 30 seconds by default.";

# stop\_simple\_market\_maker\_bot

The `stop_simple_market_maker_bot` method tells the bot to finish placing orders at the end of the current loop (30 seconds minimum & 30 seconds by default). This method takes as input a url to a price service, and configuration parameters of the pairs to trade at a defined spread percentage value.

At the end of the final loop, orders placed by the bot will be cancelled. Users should wait until the loop ends before exiting the Komodo DeFi Framework API, otherwise orders will not cancel, and will reappear on the orderbook next time Komodo DeFi Framework API starts.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none )   |      |             |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "stop_simple_market_maker_bot",
  "params": {},
  "id": 0
}
```

#### Response (success) {{class : 'text-green-500'}}

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": 0
}
```

#### Response (error - bot already stopped) {{class : 'text-red-500'}}

```json
{
  "mmrpc": "2.0",
  "error": "The bot is already stopped",
  "error_path": "simple_market_maker",
  "error_trace": "simple_market_maker:813]",
  "error_type": "AlreadyStopped",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Trade Preimage";
export const description = "The trade_preimage method returns the approximate fee amounts that are paid per the whole swap.";

# trade\_preimage

The `trade_preimage` method returns the approximate fee amounts that are paid per the whole swap.
Depending on the parameters, the function returns different results:

*   If the `swap_method` is `buy` or `sell`, then the result will include the `taker_fee` and the `fee_to_send_taker_fee`.
    The `taker_fee` amount is paid from the `base` coin balance if the `swap_method` is `sell`, else it is paid from the `rel` coin balance;
*   If the `max` field is true, then the result will include the `volume`.

This method can be used instead of **max\_taker\_vol**, if the `max` field is true and the `swap_method` is `buy` or `sell`.
Use the resulting `volume` as an argument of the `buy` or `sell` requests.

Use the `trade_preimage` request with `max = true` and `swap_method = "setprice"` arguments to approximate the fee amounts **only**. Do not use the resulting `volume` as an argument of the `setprice`.

## Arguments

| Structure    | Type                                  | Description                                                                                                                          |
| ------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| base         | string                                | the base currency of the request                                                                                                     |
| rel          | string                                | the rel currency of the request                                                                                                      |
| swap\_method | string                                | the name of the method whose preimage is requested. Possible values: `buy`, `sell`, `setprice`                                       |
| price        | numeric string or rational            | the price in `rel` the user is willing to pay per one unit of the `base` coin                                                        |
| volume       | numeric string or rational (optional) | the amount the user is willing to trade; ignored if `max = true` **and** `swap_method = setprice`, otherwise, it must be set         |
| max          | bool (optional)                       | whether to return the maximum available volume for `setprice` method; must not be set or `false` if `swap_method` is `buy` or `sell` |

### Result

| Structure                 | Type             | Description                                                                                                                                                                                                                                    |
| ------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| base\_coin\_fee           | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `base` coin                                                          |
| rel\_coin\_fee            | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid per the whole swap concerning the `rel` coin                                                           |
| volume                    | string (numeric) | Optional. The max available volume that can be traded (in decimal representation); empty if the `max` argument is missing or false                                                                                                             |
| volume\_rat               | rational         | Optional. The max available volume that can be traded represented as a standard [RationalValue](/komodo-defi-framework/api/common_structures/#rational-value) object.; empty if the `max` argument is missing or false                         |
| volume\_fraction          | fraction         | Optional. The max available volume that can be traded represented as a standard [fractionalValue](/komodo-defi-framework/api/common_structures/#fractional-value) object.; empty if the `max` argument is missing or false                     |
| taker\_fee                | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The dex fee to be paid by Taker; empty if `swap_method` is `setprice`                                                                    |
| fee\_to\_send\_taker\_fee | object           | A standard [ExtendedFeeInfo](/komodo-defi-framework/api/common_structures/#extended-fee-info) object. The approximate miner fee is paid to send the dex fee; empty if `swap_method` is `setprice`                                              |
| total\_fees               | array of objects | A standard [TotalFeeInfo](/komodo-defi-framework/api/common_structures/#total-fee-info) object. Each element is a sum of fees required to be paid from user's balance of corresponding `ExtendedFeeInfo.coin`; the elements are unique by coin |

### ⚠ Error types

#### NotSufficientBalance

The `available` balance of the `coin` is not sufficient to start the swap.

| Structure         | Type                       | Description                                                                               |
| ----------------- | -------------------------- | ----------------------------------------------------------------------------------------- |
| coin              | string                     | the name of the coin which balance is not sufficient                                      |
| available         | string (numeric)           | the balance available for swap, including the amount locked by other swaps                |
| required          | string (numeric)           | the amount required to start the swap. This amount is necessary but may not be sufficient |
| locked\_by\_swaps | string (numeric, optional) | the amount locked by other swaps                                                          |

#### NotSufficientBaseCoinBalance

The available balance of the base `coin` is not sufficient to pay transaction fees.

For example, ERC20 fees are paid by ETH (gas), and this error type is returned if the ETH coin balance is not sufficient to start the swap.

| Structure         | Type                       | Description                                                                               |
| ----------------- | -------------------------- | ----------------------------------------------------------------------------------------- |
| coin              | string                     | the name of the base coin which balance is not sufficient                                 |
| available         | string (numeric)           | the balance available for swap, including the amount locked by other swaps                |
| required          | string (numeric)           | the amount required to start the swap. This amount is necessary but may not be sufficient |
| locked\_by\_swaps | string (numeric, optional) | the amount is locked by other swaps                                                       |

#### VolumeTooLow

The specified `volume` is too low. Required at least `threshold`.

If the `coin` field returned in Response is the same as the `rel` argument in Request, then the base volume threshold can be calculated as follows:
`base_coin_threshold = rel_vol_threshold / price`

| Structure | Type             | Description                                        |
| --------- | ---------------- | -------------------------------------------------- |
| coin      | string           | either `base` or `rel` coin specified in Request   |
| volume    | string (numeric) | the amount the user was willing to trade in `coin` |
| threshold | string (numeric) | the `volume` has not to be less than this amount   |

#### NoSuchCoin

The specified coin was not found or is not activated yet.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| coin      | string | either `base` or `rel` coin specified in Request |

#### CoinIsWalletOnly

The specified coin is wallet only and cannot be participated in the swap.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| coin      | string | either `base` or `rel` coin specified in Request |

#### BaseEqualRel

The coin is wallet only and cannot be participated in the swap.

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### InvalidParam

Incorrect use of the `param` parameter in Request.

| Structure | Type   | Description                                      |
| --------- | ------ | ------------------------------------------------ |
| param     | string | the name of the parameter in Request             |
| reason    | string | the reason why the parameter is used incorrectly |

#### PriceTooLow

The specified `price` is too low.

| Structure | Type             | Description                                                                        |
| --------- | ---------------- | ---------------------------------------------------------------------------------- |
| price     | string (numeric) | the price in `rel` the user was willing to receive per one unit of the `base` coin |
| threshold | string (numeric) | the `price` has not to be less than this amount                                    |

#### Transport

The request was failed due to a network error.

| Structure | Type   | Description                     |
| --------- | ------ | ------------------------------- |
| (none)    | string | the transport error description |

#### InternalError

The request was failed due to a Komodo DeFi Framework API internal error.

| Structure | Type   | Description                    |
| --------- | ------ | ------------------------------ |
| (none)    | string | the internal error description |

### 📌 Examples

#### Command (setprice)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "0.1",
    "swap_method": "setprice"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "coin": "KMD",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "coin": "DGB",
      "amount": "0.00030782",
      "amount_fraction": {
        "numer": "15391",
        "denom": "50000000"
      },
      "amount_rat": [
        [1, [15391]],
        [1, [50000000]]
      ],
      "paid_from_trading_vol": true
    },
    "volume": "1138.46868712",
    "volume_fraction": {
      "numer": "14230858589",
      "denom": "12500000"
    },
    "volume_rat": [
      [1, [1345956701, 3]],
      [1, [12500000]]
    ],
    "total_fees": [
      {
        "coin": "KMD",
        "amount": "0.00001",
        "amount_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "amount_rat": [
          [1, [1]],
          [1, [100000]]
        ],
        "required_balance": "0.00001",
        "required_balance_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "required_balance_rat": [
          [1, [1]],
          [1, [100000]]
        ]
      },
      {
        "coin": "DGB",
        "amount": "0.00030782",
        "amount_fraction": {
          "numer": "15391",
          "denom": "50000000"
        },
        "amount_rat": [
          [1, [15391]],
          [1, [50000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (buy)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "0.1",
    "swap_method": "buy"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.00042049",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "42049"
      },
      "amount_rat": [
        [1, [42049]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": true
    },
    "rel_coin_fee": {
      "amount": "0.0001",
      "amount_fraction": {
        "denom": "10000",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "taker_fee": {
      "amount": "0.00012870012870012872",
      "amount_fraction": {
        "denom": "7770",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [7770]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "fee_to_send_taker_fee": {
      "amount": "0.0001",
      "amount_fraction": {
        "denom": "10000",
        "numer": "1"
      },
      "amount_rat": [
        [1, [1]],
        [1, [10000]]
      ],
      "coin": "DOC",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "coin": "DOC",
        "amount": "0.001307001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "amount_fraction": {
          "numer": "50777",
          "denom": "38850000"
        },
        "amount_rat": [
          [1, [50777]],
          [1, [38850000]]
        ],
        "required_balance": "0.001307001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287001287",
        "required_balance_fraction": {
          "numer": "50777",
          "denom": "38850000"
        },
        "required_balance_rat": [
          [1, [50777]],
          [1, [38850000]]
        ]
      },
      {
        "coin": "tBTC",
        "amount": "0.00042049",
        "amount_fraction": {
          "denom": "100000000",
          "numer": "42049"
        },
        "amount_rat": [
          [1, [42049]],
          [1, [100000000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (sell, max)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BTC",
    "rel": "DOC",
    "price": "1",
    "volume": "2.21363478",
    "swap_method": "sell"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.00042049",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "42049"
      },
      "amount_rat": [
        [1, [42049]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "coin": "DOC",
      "amount": "0.00001",
      "amount_fraction": {
        "numer": "1",
        "denom": "100000"
      },
      "amount_rat": [
        [1, [1]],
        [1, [100000]]
      ],
      "paid_from_trading_vol": true
    },
    "taker_fee": {
      "amount": "0.0028489508108108107",
      "amount_fraction": {
        "denom": "1850000000",
        "numer": "5270559"
      },
      "amount_rat": [
        [1, [5270559]],
        [1, [1850000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "fee_to_send_taker_fee": {
      "amount": "0.00033219",
      "amount_fraction": {
        "denom": "100000000",
        "numer": "33219"
      },
      "amount_rat": [
        [1, [33219]],
        [1, [100000000]]
      ],
      "coin": "BTC",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "coin": "DOC",
        "amount": "0.00001",
        "amount_fraction": {
          "numer": "1",
          "denom": "100000"
        },
        "amount_rat": [
          [1, [1]],
          [1, [100000]]
        ],
        "required_balance": "0",
        "required_balance_fraction": {
          "numer": "0",
          "denom": "1"
        },
        "required_balance_rat": [
          [0, []],
          [1, [1]]
        ]
      },
      {
        "coin": "BTC",
        "amount": "0.0036016308108108106",
        "amount_fraction": {
          "denom": "1850000000",
          "numer": "6663017"
        },
        "amount_rat": [
          [1, [6663017]],
          [1, [1850000000]]
        ],
        "required_balance": "0.0036016308108108106",
        "required_balance_fraction": {
          "denom": "1850000000",
          "numer": "6663017"
        },
        "required_balance_rat": [
          [1, [6663017]],
          [1, [1850000000]]
        ]
      }
    ]
  },
  "id": 0
}
```

#### Command (ERC20 and QRC20)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "trade_preimage",
  "params": {
    "base": "BAT",
    "rel": "QC",
    "price": "1",
    "volume": "2.21363478",
    "swap_method": "setprice"
  },
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_coin_fee": {
      "amount": "0.0045",
      "amount_fraction": {
        "denom": "2000",
        "numer": "9"
      },
      "amount_rat": [
        [1, [9]],
        [1, [2000]]
      ],
      "coin": "ETH",
      "paid_from_trading_vol": false
    },
    "rel_coin_fee": {
      "amount": "0.00325",
      "amount_fraction": {
        "denom": "4000",
        "numer": "13"
      },
      "amount_rat": [
        [0, [13]],
        [1, [4000]]
      ],
      "coin": "QTUM",
      "paid_from_trading_vol": false
    },
    "total_fees": [
      {
        "amount": "0.003",
        "amount_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "amount_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "required_balance": "0.003",
        "required_balance_fraction": {
          "denom": "1000",
          "numer": "3"
        },
        "required_balance_rat": [
          [1, [3]],
          [1, [1000]]
        ],
        "coin": "ETH"
      },
      {
        "amount": "0.00325",
        "amount_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "amount_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "required_balance": "0.00325",
        "required_balance_fraction": {
          "denom": "4000",
          "numer": "13"
        },
        "required_balance_rat": [
          [0, [13]],
          [1, [4000]]
        ],
        "coin": "QTUM"
      }
    ]
  },
  "id": 0
}
```

#### Response (NotSufficientBalance error)

```json
{
  "mmrpc": "2.0",
  "error": "Not enough BTC for swap: available 0.000015, required at least 0.10012, locked by swaps None",
  "error_path": "maker_swap",
  "error_trace": "maker_swap:1540] maker_swap:1641]",
  "error_type": "NotSufficientBalance",
  "error_data": {
    "coin": "BTC",
    "available": "0.000015",
    "required": "0.10012",
    "locked_by_swaps": "0"
  },
  "id": 0
}
```

#### Response (VolumeTooLow error)

```json
{
  "mmrpc": "2.0",
  "error": "The volume 0.00001 of the DOC coin less than minimum transaction amount 0.0001",
  "error_path": "maker_swap",
  "error_trace": "maker_swap:1599]",
  "error_type": "VolumeTooLow",
  "error_data": {
    "coin": "DOC",
    "volume": "0.00001",
    "threshold": "0.0001"
  },
  "id": 0
}
```

#### Response (Transport error)

```json
{
  "mmrpc": "2.0",
  "error": "Transport error: JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "error_path": "taker_swap.utxo_common",
  "error_trace": "taker_swap:1599] utxo_common:1990] utxo_common:166]",
  "error_type": "Transport",
  "error_data": "JsonRpcError { client_info: 'coin: tBTC', request: JsonRpcRequest { jsonrpc: '2.0', id: '31', method: 'blockchain.estimatefee', params: [Number(1), String('ECONOMICAL')] }, error: Transport('rpc_clients:1237] rpc_clients:1239] ['rpc_clients:2047] common:1385] future timed out']') }",
  "id": 0
}
```

#### Response (incorrect use of "max" error)

```json
{
  "mmrpc": "2.0",
  "error": "Incorrect use of the 'max' parameter: 'max' cannot be used with 'sell' or 'buy' method",
  "error_path": "taker_swap",
  "error_trace": "taker_swap:1602]",
  "error_type": "InvalidParam",
  "error_data": {
    "param": "max",
    "reason": "'max' cannot be used with 'sell' or 'buy' method"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Add Node to Version Stat";
export const description = "The add_node_to_version_stat method adds a Node's name, IP address and PeerID to a local database to track which version of KDF it is running.";

# add\_node\_to\_version\_stat

The `add_node_to_version_stat` method adds a Node's name, IP address and PeerID to a local database to track which version of KDF it is running. The name parameter is an arbitrary identifying string, such as "seed\_alpha" or "dragonhound\_DEV". The address parameter is the node's IP address or domain names. The Peer ID can be found in the KDF log file after a connection has been initiated, and looks like the below:

`07 09:33:58, atomicdex_behaviour:610] INFO Local peer id: PeerId("12D3KooWReXsTVCKGAna1tzrD1jaUttTSs17ULFuvvzoGD9bqmmA")
`

Note: To allow collection of version stats, added nodes must open ports 42845 (tcp) and 42855 (ws).

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| name      | string | the name assigned to the node |
| address   | string | the IP address of the node    |
| peer\_id  | string | the node's unique Peer ID     |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "add_node_to_version_stat",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "name": "seed1",
    "address": "168.119.236.241",
    "peer_id": "12D3KooWEsuiKcQaBaKEzuMtT6uFjs89P1E8MK3wGRZbeuCbCw6P"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - peer id already in database)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.peer_id",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.peer_id",
  "id": null
}
```

#### Response (error - name already in database)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.name",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.name",
  "id": null
}
```

#### Response (error - invalid Peer ID)

```json
{
  "mmrpc": "2.0",
  "error": "Error on parse peer id 12D3RsaaWRmXsJsCKGAD5FJSsd7CSbbdrsd: decoding multihash failed",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:121]",
  "error_type": "PeerIdParseError",
  "error_data": [
    "12D3RsaaWRmXsJsCKGAD5FJSsd7CSbbdrsd",
    "decoding multihash failed"
  ],
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Change Mnemonic Password";
export const description = "The change_mnemonic_password method allows a user to update the password used to encrypt a mnemonic phrase in their local database.";

# change\_mnemonic\_password

The `change_mnemonic_password` method allows a user to update the password used to encrypt a mnemonic phrase in their local database.

While this will change the password used to encrypt the mnemonic phrase in the local database, it will not update the `wallet_password` value in the MM2.json config file.
This will need to be updated manually, otherise you will see a log error `Error initializing wallet: Error generating or decrypting mnemonic: Error decrypting mnemonic: HMAC error: MAC tag mismatch` on next launch.

## Arguments

| Structure         | Type   | Description                                                          |
| ----------------- | ------ | -------------------------------------------------------------------- |
| current\_password | string | the active mnemonic password for your wallet                         |
| new\_password     | string | the new password to use for encrypting your active mnemonic password |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "change_mnemonic_password",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "current_password": "old_password123",
    "new_password": "new_password456"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": null,
  "id": null
}
```

#### Response (error - wrong password)

```json
{
    "mmrpc": "2.0",
    "error": "Wallets storage error: Error decrypting passphrase: Error decrypting mnemonic: HMAC error: MAC tag mismatch",
    "error_path": "lp_wallet.mnemonic.decrypt",
    "error_trace": "lp_wallet:551] lp_wallet:141] mnemonic:109] decrypt:56]",
    "error_type": "WalletsStorageError",
    "error_data": "Error decrypting passphrase: Error decrypting mnemonic: HMAC error: MAC tag mismatch",
    "id": null
}
```

To view your mnemonic phrase in plain text, use [get\_mnemonic](/komodo-defi-framework/api/v20/utils/get_mnemonic/#get-mnemonic).
export const title = "Komodo DeFi Framework Method: Get Current MTP";
export const description = "The get_current_mtp method returns the Median Time Past (MTP) from electrum servers for UTXO coins.";

# get\_current\_mtp

The `get_current_mtp` method returns the Median Time Past (MTP) from electrum servers for UTXO coins. This information is useful for debugging, specifically in cases where an electrum server has been misconfigured.

## Arguments

| Parameter | Type    | Description                                                                             |
| --------- | ------- | --------------------------------------------------------------------------------------- |
| coin      | string  | A compatible (UTXO) coin's ticker                                                       |
| id        | integer | Optional. Identifies a request to allow matching it with a response. Defaults to `null` |

#### Response

| Parameter | Type    | Description                                                                                                   |
| --------- | ------- | ------------------------------------------------------------------------------------------------------------- |
| mtp       | integer | Unix timestamp                                                                                                |
| id        | integer | Identifies a response to allow matching it with a request. Defaults to `null` if `id` not provided in request |

#### 📌 Examples

#### Command

```json
{
  "method": "get_current_mtp",
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 42,
  "params": {
    "coin": "DOC"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "mtp": 1658746383
  },
  "id": 42
}
```
export const title = "Komodo DeFi Framework Method: Get Enabled Coins";
export const description = "The get_enabled_coins method returns data of coins that are currently enabled on the user's Komodo DeFi Framework API node.";

# get\_enabled\_coins

The `get_enabled_coins` method returns data of coins that are currently enabled on the user's Komodo DeFi Framework API node.

## Parameters

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure    | Type             | Description                                     |
| ------------ | ---------------- | ----------------------------------------------- |
| coins        | array of objects | A list of key value pairs for activated tickers |
| coins.ticker | string           | the ticker of an activated coin                 |

The \[get\_enabled\_coins v2.0] method does not return addresses, as it was designed for HD wallets, which generate addresses on the fly.
If you need to get the addresses for coins and have not set `enable_hd` in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/), use the [v1 method](/komodo-defi-framework/api/legacy/get_enabled_coins/#get-enabled-coins).

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_enabled_coins",
  "params": {},
  "id": 0
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "coins": [
          {
              "ticker": "ETH"
          },
          {
              "ticker": "PGX-PLG20"
          },
          {
              "ticker": "ATOM-IBC_IRIS"
          },
          {
              "ticker": "NFT_ETH"
          },
          {
              "ticker": "KMD"
          },
          {
              "ticker": "IRIS"
          },
          {
              "ticker": "AAVE-PLG20"
          },
          {
              "ticker": "MINDS-ERC20"
          },
          {
              "ticker": "NFT_MATIC"
          },
          {
              "ticker": "MATIC"
          }
      ]
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Mnemonic";
export const description = "The get_mnemonic method returns the user's mnemonic seed phrase, in encrypted or plain text format.";

# get\_mnemonic

"The get\_mnemonic method returns the user's mnemonic seed phrase, in encrypted or plain text format."

## Arguments

| Structure | Type   | Description                                                                                            |
| --------- | ------ | ------------------------------------------------------------------------------------------------------ |
| format    | string | Either `encrypted` or `plaintext`. Defaults to `encrypted`.                                            |
| password  | string | The password to decrypt your stored mnemonic phrase. Only required if `plaintext` format is requested. |

#### Response

| Structure                 | Type   | Description                                                                                |
| ------------------------- | ------ | ------------------------------------------------------------------------------------------ |
| format                    | string | Same as the input `format` parameter.                                                      |
| mnemonic                  | string | For `plaintext` requests, the decrypted mnemonic seed phrase                               |
| encrypted\_mnemonic\_data | object | For `encrpyted` requests, the encrypted format and ciphertext for the mnemonic seed phrase |

#### 📌 Examples

#### For encrypted output

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_mnemonic",
  "params": {
    "format": "encrypted"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "format": "encrypted",
      "encrypted_mnemonic_data": {
          "encryption_algorithm": "AES256CBC",
          "key_derivation_details": {
              "Argon2": {
                  "params": {
                      "algorithm": "Argon2id",
                      "version": "0x13",
                      "m_cost": 65536,
                      "t_cost": 2,
                      "p_cost": 1
                  },
                  "salt_aes": "CqkfcntVxFJNXqOKPHaG8w",
                  "salt_hmac": "i63qgwjc+3oWMuHWC2XSJA"
              }
          },
          "iv": "mNjmbZLJqgLzulKFBDBuPA==",
          "ciphertext": "tP2vF0hRhllW00pGvYiKysBI0vl3acLj+aoocBViTTByXCpjpkLuaMWqe0Vs02cb1wvgPsVqZkE4MPg4sCQxbd18iS7Er6+BbVY3HQ2LSig=",
          "tag": "TwWXhIFQl1TSdR4cJpbkK2oNXd9zIEhJmO6pML1uc2E="
      }
  },
  "id": null
}
```

#### For plain text output

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_mnemonic",
  "params": {
    "format": "plaintext",
    "password": "Q^wJZg~Ck3.tPW~asnM-WrL"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "format": "plaintext",
      "mnemonic": "unique spy ugly child cup sad capital invest essay lunch doctor know"
  },
  "id": null
}
```

You can update the password with the [change\_mnemonic\_password](/komodo-defi-framework/api/v20/utils/change_mnemonic_password/#change-mnemonic-password) method.
export const title = "Komodo DeFi Framework Method: Get Public Key";
export const description = "The get_public_key method returns the compressed secp256k1 pubkey corresponding to the user's seed phrase.";

# get\_public\_key

The `get_public_key` method returns the compressed secp256k1 pubkey corresponding to the user's seed phrase.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure   | Type   | Description   |
| ----------- | ------ | ------------- |
| public\_key | string | User's pubkey |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_public_key",
  "params": {},
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "public_key": "0366d28a7926fb20287132692c4cef7bc7e00e76da064948676f8549c0ed7114d3"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Public Key Hash";
export const description = "The get_public_key_hash method returns the RIPEMD-160 hash version of your public key.";

# get\_public\_key\_hash

The `get_public_key_hash` method returns the [RIPEMD-160](https://en.bitcoin.it/wiki/RIPEMD-160) hash version of your public key

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure         | Type   | Description                       |
| ----------------- | ------ | --------------------------------- |
| public\_key\_hash | string | User's RIPEMD-160 public key hash |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_public_key_hash",
  "params": {},
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "public_key_hash": "05aab5342166f8594baf17a7d9bef5d567443327"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Token Info";
export const description = "The `get_token_info` method returns the ticker and decimals values (required for activation) given a platform and contract as input.";

# get\_token\_info

The `get_token_info` method returns the ticker and decimals values (required for activation) given a platform and contract as input.
The platform parent coin (e.g. ETH, AVAX, MATIC etc) must be activated before using this method. After requesting the token info, you will be able to activate the custom token.

Custom tokens will be `wallet_only` - i.e. you can send and recieve tokens, but will not be able to do atomic swaps.
To apply for a formal listing of the custom token, please [review the requirements](/komodo-defi-framework/tutorials/listing-a-new-coin/) in our "coins" github repository, and get in our with our team on the [KomodoPlatform Discord](https://komodoplatform.com/discord).

## Arguments

| Structure                                 | Type   | Description                                                                                                                                                                                                        |
| ----------------------------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| protocol.type                             | string | Token type - e.g `ERC20` for tokens on the Ethereum network                                                                                                                                                        |
| protocol.protocol\_data                   | object | Required for tokens only.                                                                                                                                                                                          |
| protocol.protocol\_data.platform          | string | The parent coin of the token's platform - e.g `MATIC` for PLG20 tokens                                                                                                                                             |
| protocol.protocol\_data.contract\_address | string | **Must be mixed case** The identifying hex string for the token's contract. Can be found on sites like [EthScan](https://etherscan.io/), [BscScan](https://bscscan.com/) & [PolygonScan](https://polygonscan.com/) |

### Response

| Structure     | Type    | Description|
| ------------- | ------- ||
| type          | string  | Token type - e.g `PLG20` for tokens on the Polygon network                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| info.symbol   | string  | The ticker of the token linked to the contract address and network requested                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| info.decimals | integer | Defines the number of digits after the decimal point that should be used to display the orderbook amounts, balance, and the value of inputs to be used in the case of order creation or a `withdraw` transaction. The default value used for a UTXO type coin (Bitcoin Protocol) is `8` and the default value used for a ERC20 Token is `18`. It is **very important** for this value to be set correctly. For example, if this value was set as `9` for BTC, a command to withdraw `1 BTC` tries to withdraw `10^9` satoshis of Bitcoin, i.e., `10 BTC` |

### 📌 Examples

#### Get Token Info on Avalanche

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_token_info",
  "params": {
    "protocol": {
      "type": "ERC20",
      "protocol_data": {
        "platform": "AVAX",
        "contract_address": "0x4f3c5C53279536fFcfe8bCafb78E612E933D53c6"
      }
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "type": "ERC20",
      "info": {
          "symbol": "PNIC",
          "decimals": 18
      }
  },
  "id": null
}
```

### Error Responses

#### InvalidRequest: Protocol parent coin not active

```json
{
    "mmrpc": "2.0",
    "error": "No such coin AVAX",
    "error_path": "tokens.lp_coins",
    "error_trace": "tokens:68] lp_coins:4744]",
    "error_type": "NoSuchCoin",
    "error_data": {
        "coin": "AVAX"
    },
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: v2 Utilities";
export const description =
  "This section includes utility methods for the Komodo DeFi Framework.";

# v2 Utility Methods

*   [get\_current\_mtp](/komodo-defi-framework/api/v20/utils/get_current_mtp/)
*   [get\_token\_info](/komodo-defi-framework/api/v20/utils/get_token_info/)
*   [peer\_connection\_healthcheck](/komodo-defi-framework/api/v20/utils/peer_connection_healthcheck/)
export const title = "Komodo DeFi Framework Method: Signing and Verifying Messages";
export const description = "The methods in this section allow you to sign and verify messages for all coins supported by Komodo DeFi Framework.";

# Signing\_and\_Verifying\_Messages

Cryptographically signed messages are a useful feature which can be used to [prove ownership of an address](https://www.coindesk.com/policy/2020/05/25/craig-wright-called-fraud-in-message-signed-with-bitcoin-addresses-he-claims-to-own/).

If your [`coins`](https://github.com/KomodoPlatform/coins) file contains the correct [`sign_message_prefix`](https://bitcoin.stackexchange.com/questions/77324/how-are-bitcoin-signed-messages-generated/77325#77325) parameter value for a coin, you can sign messages with the [Komodo DeFi Framework API](https://github.com/KomodoPlatform/komodo-defi-framework).
For signing with a HD wallet, the [`coins`](https://github.com/KomodoPlatform/coins) file must also contain the coin's [derivation path](https://www.blockplate.com/blogs/blockplate/what-is-a-derivation-path) prefix.

```json
  {
    "coin": "DGB",
    "name": "digibyte",
    "fname": "DigiByte",
    "protocol": {
      "type": "UTXO"
    },
    ...
    "sign_message_prefix": "DigiByte Signed Message:\n",
    "derivation_path": "m/44'/20'",
    "trezor_coin": "DigiByte",
    "links": {
      "github": "https://github.com/digibyte/digibyte",
      "homepage": "https://digibyte.io"
    }
  }
```

See the individual methods for signing and Verifying below:
export const title = "Komodo DeFi Framework Method: Sign Message";
export const description = "The method in this document allows you to sign messages for all coins supported by Komodo DeFi Framework.";

# Sign Message

The `sign_message` method allows one to prove ownership of a specific wallet address. A unique digital signature is provided for the message being signed. This signature, along with the original message and the wallet address, can then be verified, confirming that the message originated from the owner of the address and has not been altered.

## Arguments

| Structure | Type   | Description                                                                                                                                                                                                                                                      |
| --------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin      | string | The coin to sign a message with                                                                                                                                                                                                                                  |
| message   | string | The message you want to sign                                                                                                                                                                                                                                     |
| address   | string | Optional, HD wallets only. A standard [AddressPath](/komodo-defi-framework/api/common_structures/wallet/#address-path) object. The path to the address for signing the message. If not provided, the `account_id`, `chain` and `address_id` will default to `0`. |

## Response

| Structure | Type   | Description                             |
| --------- | ------ | --------------------------------------- |
| signature | string | The signature generated for the message |

## Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "sign_message",
  "mmrpc": "2.0",
  "id": 0,
  "params": {
    "coin": "DOC",
    "message": "Between subtle shading and the absence of light lies the nuance illusion"
  }
}
```

### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "signature": "H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY="
  },
  "id": 0
}
```

## Command (HD wallet with derivation path)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "sign_message",
  "params": {
    "coin": "KMD",
    "message": "Very little worth knowing is taught by fear.",
    "address": {
      "derivation_path": "m/84'/2'/0'/0/1"
    }
  },
  "id": 2
}
```

### Response (HD, success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "signature": "H8Jk+O21IJ0ob3pchrBkJdlXeObrMAKuABlCtW4JySOUUfxg7K8Vl/H3E4gdtwXqhbCu7vv+NYoIhq/bmjtBlkc="
    },
    "id": 2
}
```

## Command (HD wallet with account and address id)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "sign_message",
  "params": {
    "coin": "KMD",
    "message": "Very little worth knowing is taught by fear.",
    "address": {
      "account_id": 0,
      "chain": "External",
      "address_id": 1
    }
  },
  "id": 2
}
```

### Response (HD, success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "signature": "H8Jk+O21IJ0ob3pchrBkJdlXeObrMAKuABlCtW4JySOUUfxg7K8Vl/H3E4gdtwXqhbCu7vv+NYoIhq/bmjtBlkc="
    },
    "id": 2
}
```

For HD wallets, if the `address` parameter is not provided, the root derivation path will be used, for example `m/84'/2'/0'/0/0`.
The two examples above point to the same address. The derivation path follows the format `m/44'/COIN_ID'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` (or `m/84'/COIN_ID'/ACCOUNT_ID'/CHAIN/ADDRESS_ID` for segwit coins).
The `account_id` and `address_id` are the indices of the account and address in the wallet, starting from 0.
The `chain` is either `External` or `Internal`, and expressed as an integer with `External` being 0 and `Internal` being 1.

## ⚠ Error types

**PrefixNotFound:** sign\_message\_prefix is not set in coin config file
**CoinIsNotFound:** Specified coin is not found
**SigningError:** Error attempting to sign message
**InvalidRequest:** Message signing is not supported by the given coin type
**InternalError:** An internal error occured during the signing process

### PrefixNotFound

```json
{
    "mmrpc": "2.0",
    "error": "sign_message_prefix is not set in coin config",
    "error_path": "eth",
    "error_trace": "eth:2332]",
    "error_type": "PrefixNotFound",
    "id": null
}
```

### InternalError

```json
{
    "mmrpc": "2.0",
    "error": "Internal error: No such coin: as",
    "error_path": "lp_coins",
    "error_trace": "lp_coins:5122] lp_coins:5034]",
    "error_type": "InternalError",
    "error_data": "No such coin: SHEKEL",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Verify Message";
export const description = "The method in this document allows you to verify messages for all coins supported by Komodo DeFi Framework.";

# Verify Message

The `verify_Message` method allows one to confirm the authenticity of a signed message. By using the original message, the wallet's address, and the signature, the verification process can confirm that the message was created by the owner and that it has not been altered.

## Arguments

| Structure | Type   | Description                                          |
| --------- | ------ | ---------------------------------------------------- |
| coin      | string | The coin to sign a message with                      |
| message   | string | The message input via the `sign_message` method sign |
| signature | string | The signature generated for the message              |
| address   | string | The address used to sign the message                 |

## Response

| Structure | Type    | Description                                                 |
| --------- | ------- | ----------------------------------------------------------- |
| is\_valid | boolean | `true` is message signature is valid; `false` if it is not. |

## Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "verify_message",
  "mmrpc": "2.0",
  "id": 0,
  "params": {
    "coin": "DOC",
    "message": "Between subtle shading and the absence of light lies the nuance illusion",
    "signature": "H43eTmJxBKEPiHkrCe/8NsRidkKCIkXDxLyp30Ez/RwoApGdg89Hlvj9mTMSPGp8om5297zvdL8EVx3IdIe2swY=",
    "address": "RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d"
  }
}
```

### Response (valid)

```json
{
  "mmrpc": "2.0",
  "result": {
    "is_valid": true
  },
  "id": 0
}
```

### Response (not valid)

```json
{
  "mmrpc": "2.0",
  "result": {
    "is_valid": false
  },
  "id": 0
}
```

## ⚠ Error types

**PrefixNotFound:** sign\_message\_prefix is not set in coin config
**CoinIsNotFound:** Specified coin is not found
**InvalidRequest:** Message verification is not supported by the given coin type
**InternalError:** An internal error occured during the verification process
**SignatureDecodingError:** Given signature could not be decoded
**AddressDecodingError:** Given address could not be decoded

### PrefixNotFound

```json
{
    "mmrpc": "2.0",
    "error": "sign_message_prefix is not set in coin config",
    "error_path": "eth",
    "error_trace": "eth:2332]",
    "error_type": "PrefixNotFound",
    "id": null
}
```

### InternalError

```json
{
    "mmrpc": "2.0",
    "error": "Internal error: No such coin: as",
    "error_path": "lp_coins",
    "error_trace": "lp_coins:5122] lp_coins:5034]",
    "error_type": "InternalError",
    "error_data": "No such coin: SHEKEL",
    "id": null
}
```

### SignatureDecodingError

```json
{
    "mmrpc": "2.0",
    "error": "Signature decoding error: Invalid last symbol 100, offset 86.",
    "error_path": "utxo_common",
    "error_trace": "utxo_common:2803]",
    "error_type": "SignatureDecodingError",
    "error_data": "Invalid last symbol 100, offset 86.",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Peer Connection Healthcheck";
export const description = "The peer_connection_healthcheck method checks if a peer is connected to the KDF network.";

# peer\_connection\_healthcheck

The `peer_connection_healthcheck` method checks if a peer is connected to the KDF network using the [currently configured](/komodo-defi-framework/setup/configure-mm2-json/) `netid`.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type    | Description                             |
| --------- | ------- | --------------------------------------- |
| result    | boolean | True if peer found connected to network |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "peer_connection_healthcheck",
  "mmrpc": "2.0",
  "params": {
    "peer_address": "12D3KooWCcjBQ3kG3BzjVwuZqGDL2YxXik6SCDv2YAHj4E54NiAy"
  }
}
```

#### Response (peer found)

```json
{
    "mmrpc": "2.0",
    "result": true,
    "id": null
}
```

#### Response (peer not found)

```json
{
    "mmrpc": "2.0",
    "result": false,
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Remove Node from Version Stat";
export const description = "The remove_node_from_version_stat method removes a Node from the local database that tracks which version of KDF it is running.";

# remove\_node\_from\_version\_stat

The `remove_node_from_version_stat` method removes a Node (by name) from the local database which tracks which version of KDF it is running. The name parameter is an arbitrary identifying string, such as "seed\_alpha" or "dragonhound\_DEV".

## Arguments

| Structure | Type   | Description                   |
| --------- | ------ | ----------------------------- |
| name      | string | the name assigned to the node |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "remove_node_from_version_stat",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "name": "dragonhound_DEV"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Start Version Stat Collection";
export const description = "The start_version_stat_collection method initiates storing version statistics for nodes previously registered via the add_node_to_version_stat method.";

# start\_version\_stat\_collection

The `start_version_stat_collection` method initiates storing version statistics for nodes previously registered via the `add_node_to_version_stat` method.

## Arguments

| Structure | Type    | Description                                      |
| --------- | ------- | ------------------------------------------------ |
| interval  | integer | polling rate (in seconds) to check node versions |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "start_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "interval": 600
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - invalid peer id unable to parse)

```json
{
  "mmrpc": "2.0",
  "error": "Database error: UNIQUE constraint failed: nodes.peer_id",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:124]",
  "error_type": "DatabaseError",
  "error_data": "UNIQUE constraint failed: nodes.peer_id",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Stop Version Stat Collection";
export const description = "The stop_version_stat_collection method stops the collection of version stats at the end of the current loop interval.";

# stop\_version\_stat\_collection

The `stop_version_stat_collection` method stops the collection of version stats at the end of the current loop interval.

#### Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure | Type   | Description      |
| --------- | ------ | ---------------- |
| result    | string | success or error |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "stop_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {}
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - stats collection not running)

```json
{
  "mmrpc": "2.0",
  "error": "start_version_stat_collection is not running",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:395]",
  "error_type": "NotRunning",
  "id": null
}
```
export const title = "Komodo DeFi Framework: Trezor Initialisation";
export const description = "Prepare your Trezor device for use in the Komodo DeFi Framework API, and authenticate using your PIN or phrase.";

import trezorpin from "@/public/images/docs/api-images/trezor_pin.png";

# Trezor Initialisation

The methods below prepare your Trezor device for use within the Komodo DeFi Framework API. Once completed, you can authenticate using your PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20/utils/task_init_trezor/#user-action).

Methods with a `task::` prefix will be linked to a numeric
`task_id` value which can be used to query the status or outcome of a task.

## init {{label : 'task::init_trezor::init', tag : 'API-v2'}}

Before using this method, launch the Komodo DeFi Framework API, and plug in your Trezor.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                                          |
| -------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| device\_pubkey | string | Optional. If known, you can specify the device pubkey. If not known, this will be part of the `task::init_trezor::status` response which you can save for future use |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command (without device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {}
}
```

#### Command (with device\_pubkey)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::init",
  "params": {
    "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status {{label : 'task::init_trezor::status', tag : 'API-v2'}}

After running the `task::init_trezor::init` method, we can query the status of device initialisation to check its progress.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.               |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter              | Type         | Description                                                                                                                                                         |
| ---------------------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                 | string       | A short indication of how the requested process is progressing.                                                                                                     |
| details                | object       | Depending on the state of process progress, this will contain different information as detailed in the items below.                                                 |
| details.type           | string       | Type of hardware wallet device (e.g. `Trezor`)                                                                                                                      |
| details.model          | string       | The model of the hardware wallet device (e.g. `One` or `T`)                                                                                                         |
| details.device\_name   | string       | The name of the device as defned by user in Trezor Suite or another wallet application.                                                                             |
| details.device\_id     | string (hex) | An unique identifier of the device, set during manufacturing.                                                                                                       |
| details.device\_pubkey | string (hex) | The hardware wallet device's pubkey. If included in the `task::init_trezor::init` request, it wll be the same as input. If not, it should be stored for future use. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::status",
  "params": {
    "task_id": 0,
    "forget_if_finished": false
  }
}
```

#### Response (in progress)

Possible "In progress" Cases:

*   `Initializing` - This is the normal task state. It does not require any action from the user.

*   `WaitingForTrezorToConnect` - The Komodo DeFi Framework API is waiting for the user to plugin a Trezor device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForTrezorToConnect"
  },
  "id": null
}
```

*   `FollowHwDeviceInstructions` - The Komodo DeFi Framework API is waiting for the user to follow instructions displayed on the device (e.g. clicking a button to confirm).

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "FollowHwDeviceInstructions"
  },
  "id": null
}
```

*   `UserActionRequired` - This will either be `EnterTrezorPin` or `EnterTrezorPassphrase`. Refer to the [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20/utils/task_init_trezor/#user-action) section for more information.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "UserActionRequired",
    "details": "EnterTrezorPin"
  },
  "id": null
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "result": {
        "type": "Trezor",
        "model": "One",
        "device_name": "Fitzchivalry Farseer",
        "device_id": "A1CCF11243A795A84111955E",
        "device_pubkey": "066deb87b0d0500ec2e9b85f5314870b03a53517"
      }
    }
  },
  "id": null
}
```

#### Error Responses (by `error_type`)

:

*   `HwContextInitializingAlready` - Returned if user calls `task::init_trezor::init` before the previous `task::init_trezor::init` task has been completed.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Hardware Wallet context is initializing already",
      "error_path": "init_hw.crypto_ctx",
      "error_trace": "init_hw:151] crypto_ctx:235]",
      "error_type": "HwContextInitializingAlready"
    }
  },
  "id": null
}
```

*   `Timeout` - Task timed out while trying to connect to a device.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "RPC timed out 300s",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:156]",
      "error_type": "Timeout",
      "error_data": {
        "secs": 300,
        "nanos": 0
      }
    }
  },
  "id": null
}
```

*   `NoSuchTask` - Something went wrong or `task::init_trezor::init` was not called. Refer to the [task::init\_trezor::init](/komodo-defi-framework/api/v20/utils/task_init_trezor/#init) section for more information.

```json
{
  "mmrpc": "2.0",
  "error": "No such task '0'",
  "error_path": "init_hw",
  "error_trace": "init_hw:184]",
  "error_type": "NoSuchTask",
  "error_data": 0,
  "id": null
}
```

*   `HwError` - **This is the most important error type.** Unlike other error types, `HwError` requires the GUI / User to check the details in `error_data` field to know which action is required. View the [HwError error type details](/komodo-defi-framework/api/v20/utils/task_init_trezor/#details-for-hw-error-error-type) for more info.

## cancel {{label : 'task::init_trezor::cancel', tag : 'API-v2'}}

Use the `task::init_trezor::cancel` method to cancel the initialisation task.

#### Arguments

| Parameter | Type    | Description                                                                 |
| --------- | ------- | --------------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the initialisation process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::cancel",
  "params": {
    "task_id": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_hw.manager",
  "error_trace": "init_hw:209] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 0,
  "id": null
}
```

## user\_action {{label : 'task::init_trezor::user_action', tag : 'API-v2'}}

When you see the pin grid on your device, or it asks for a passphrase word, use this method.

#### Arguments

| Parameter                 | Type            | Description                                                                                                                                                                                                                          |
| ------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| task\_id                  | integer         | The identifying number returned when initiating the initialisation process.                                                                                                                                                          |
| user\_action              | object          | Object containing the params below                                                                                                                                                                                                   |
| user\_action.action\_type | string          | Either `TrezorPin` or `TrezorPassphrase`, depending on which is requested by responses from related methods returning `"status": "UserActionRequired"`                                                                               |
| user\_action.pin          | string (number) | When the Trezor device is displaying a grid of numbers for PIN entry, this param will contain your Trezor pin, as mapped through your keyboard numpad. See the image below for more information.                                     |
| user\_action.passphrase   | string          | The [passphrase](https://trezor.io/learn/a/passphrases-and-hidden-wallets) functions like an extra word added to your recovery seed, and it used to access hidden wallets. To access the default wallet, input an empty string here. |

#### Response

| Parameter | Type   | Description                 |
| --------- | ------ | --------------------------- |
| result    | string | The outcome of the request. |

Even an incorrect PIN will return `success`. This doesn't mean the PIN was accepted, just that it was communicated without errors. If the PIN was incorrect, you will see an error like below in the next response for a method that requires authentication.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Error on platform coin KMD creation: Hardware Wallet context is not initialized",
      "error_path": "lib.init_utxo_standard_activation.utxo_coin_builder",
      "error_trace": "lib:103] init_utxo_standard_activation:79] utxo_coin_builder:317]",
      "error_type": "CoinCreationError",
      "error_data": {
        "ticker": "KMD",
        "error": "Hardware Wallet context is not initialized"
      }
    }
  },
  "id": null
}
```

#### 📌 Examples

#### Command (for TrezorPin)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPin",
      "pin": "862743"
    }
  }
}
```

#### Command (for TrezorPassphrase)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::init_trezor::user_action",
  "params": {
    "task_id": 0,
    "user_action": {
      "action_type": "TrezorPassphrase",
      "passphrase": "breakfast"
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

## Details for `HwError` error type

When requesting the status of a task, if an `error_type` of `HwError` is returned, the GUI / User should check the details in `error_data` field to know which action is required (as detailed below).

### FoundUnexpectedDevice

The connected Trezor device has a different pubkey value than what was specified in the `device_pubkey` parameter

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found unexpected device. Please re-initialize Hardware wallet",
      "error_path": "lib.common_impl.coin_balance.utxo_common.hd_pubkey.hw_ctx",
      "error_trace": "lib:93] common_impl:46] coin_balance:304] utxo_common:163] hd_pubkey:176] hw_ctx:149]",
      "error_type": "HwError",
      "error_data": "FoundUnexpectedDevice"
    }
  },
  "id": null
}
```

### FoundMultipleDevices

Multiple Trezor devices are plugged in. Remove the additional devices, and keep the one you want to use plugged in.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "Found multiple devices. Please unplug unused devices",
      "error_path": "init_hw.crypto_ctx.hw_client",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_client:152] hw_client:126]",
      "error_type": "HwError",
      "error_data": "FoundMultipleDevices"
    }
  },
  "id": null
}
```

### NoTrezorDeviceAvailable

No Trezor device detected by the Komodo DeFi Framework API. Make sure it is plugged in, or try a different USB cable / port.

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Error",
    "details": {
      "error": "No Trezor device available",
      "error_path": "init_hw.crypto_ctx.hw_ctx.response.usb.libusb",
      "error_trace": "init_hw:151] crypto_ctx:248] crypto_ctx:354] hw_ctx:120] response:136] usb:46] libusb:195]",
      "error_type": "HwError",
      "error_data": "NoTrezorDeviceAvailable"
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Telegram Alerts for MM Bot";
export const description = "The Komodo DeFi Framework API Market Maker bot can be configured to send status update alerts via Telegram.";

# Telegram Alerts for Market Maker Bot

The Komodo DeFi Framework API Market Maker bot can be configured to send status update alerts via [Telegram!](https://telegram.org/)

To set this up, you can add some additional parameters to your MM2.json as shown in the example below

```json
{
	"gui": "MarketMakerBot",
	"netid": 8762,
	"rpc_password": "YOUR_PASSWORD",
	"passphrase": "YOUR SEED PHRASE",
	"dbdir": "/path/to/your/komodefi/DB",
	"message_service_cfg": {
		"telegram": {
			"api_key": "YOUR:TELEGRAM_API_TOKEN",
			"chat_registry": {
				"default": "YOUR_TELEGRAM_CHAT_ID",
				"maker_bot": "YOUR_TELEGRAM_CHAT_ID",
				"swap_events": "YOUR_TELEGRAM_CHAT_ID"
			}
		}
	}
}
```

The extra fields required are:

| Parameter                   | Type   | Description              |
| --------------------------- | ------ | ------------------------ |
| api\_key                    | string | A Telegram bot API token |
| chat\_registry.default      | string | A Telegram Chat ID       |
| chat\_registry.maker\_bot   | string | A Telegram Chat ID       |
| chat\_registry.swap\_events | string | A Telegram Chat ID       |

You can use the same Telegram chat ID for all three `chat_registry` subfields, or sent your alerts to a different chat ID if you want to separate the alerts by type.

To get a Telegram bot API token, you need to [have chat with the BotFather](https://sean-bradley.medium.com/get-telegram-chat-id-80b575520659)

To get a Telegram chat ID, check out [this guide](https://sean-bradley.medium.com/get-telegram-chat-id-80b575520659)
export const title = "Komodo DeFi Framework Method: Update Version Stat Collection";
export const description = "The update_version_stat_collection method updates the polling interval for version stats collection.";

# update\_version\_stat\_collection

The `update_version_stat_collection` method updates the polling interval for version stats collection. Note: the new interval will take effect after the current interval loop has completed.

## Arguments

| Structure | Type    | Description                                      |
| --------- | ------- | ------------------------------------------------ |
| interval  | integer | polling rate (in seconds) to query node versions |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "method": "update_version_stat_collection",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "interval": 900
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error - stats collection not running)

```json
{
  "mmrpc": "2.0",
  "error": "start_version_stat_collection is not running",
  "error_path": "lp_stats",
  "error_trace": "lp_stats:374]",
  "error_type": "NotRunning",
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Get ETH Estimated Fee per Gas";
export const description =
  "The get_eth_estimated_fee_per_gas method allows you to get the gas priority fees from the estimator (started with the 'start_eth_fee_estimator') for an active coin of your choice.";

# get\_eth\_estimated\_fee\_per\_gas

The `get_eth_estimated_fee_per_gas` method allows you to get the estimated gas priority fee for an active coin of your choice. Before using this method, you first need to use the [start\_eth\_fee\_estimator](/komodo-defi-framework/api/v20/wallet/fee_management/start_eth_fee_estimator/) method.

| parameter | Type   | Description                                                                  |
| --------- | ------ | ---------------------------------------------------------------------------- |
| coin      | string | Ticker of the coin/asset for which we want to start the grass fee estimator. |

## Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_eth_estimated_fee_per_gas",
  "mmrpc": "2.0",
  "params": {
    "coin": "ETH"
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "base_fee": "10.890879158",
    "low": {
      "max_priority_fee_per_gas": "0.1101",
      "max_fee_per_gas": "11.949818698",
      "min_wait_time": null,
      "max_wait_time": null
    },
    "medium": {
      "max_priority_fee_per_gas": "1.258084291",
      "max_fee_per_gas": "13.905056537",
      "min_wait_time": null,
      "max_wait_time": null
    },
    "high": {
      "max_priority_fee_per_gas": "2.495532249",
      "max_fee_per_gas": "15.949758042",
      "min_wait_time": null,
      "max_wait_time": null
    },
    "source": "simple",
    "base_fee_trend": "",
    "priority_fee_trend": "",
    "units": "Gwei"
  },
  "id": null
}

```
export const title = "Komodo DeFi Framework Method: Get Swap Transaction Fee Policy";
export const description =
  "The get_swap_transaction_fee_policy method allows you to get the current gas fees policy used when estimating swap transaction fees for supported for ETH/EVM coins/tokens..";

# get\_swap\_transaction\_fee\_policy

The `get_swap_transaction_fee_policy` method allows you to get the current gas fees policy used when estimating swap transaction fees for supported for ETH/EVM coins/tokens.

| parameter | Type   | Description                                                                              |
| --------- | ------ | ---------------------------------------------------------------------------------------- |
| coin      | string | Ticker of the supported ETH/EVM coin/asset for which we want to view the fee policy for. |

## Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "get_swap_transaction_fee_policy",
  "mmrpc": "2.0",
  "params": {
    "coin": "ETH"
  }
}
```

## Response

```json
{
    "mmrpc": "2.0",
    "result": "High",
    "id": null
}

```
export const title = "Komodo DeFi Framework Method: EVM Fee Management";
export const description =
  "This document describes all the available methods for the EVM Network Fee Management on the Komodo DeFi Framework.";

# EVM Network Fee Management

[Ethereum Improvement Proposal 1559 (EIP-1559)](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) was introduced to enhance Ethereum's transaction fee structure, aiming to stabilize transaction costs and improve network efficiency. Implemented as part of the London Hard Fork in August 2021, EIP-1559 revamped the traditional auction-style gas fee model, replacing it with a base fee mechanism that adjusts dynamically based on network demand. This base fee is burned (removed from circulation), reducing ETH supply and introducing a deflationary effect, while an optional "tip" incentivizes miners.

For decentralized finance (DeFi) software, EIP-1559 has provided more predictable transaction fees, improving user experience and enabling more efficient budgeting for gas costs across DeFi protocols. This update is instrumental in reducing fee volatility, encouraging broader adoption, and laying groundwork for Ethereum's scalability roadmap.

The Komodo Defi Framework allows users to benefit from this improvement with cheaper fees on EMV networks like Ethereum and Polygon.

For more information about EIP1559, refer to [https://www.blocknative.com/blog/eip-1559-fees](https://www.blocknative.com/blog/eip-1559-fees)

## Fee Management Methods

*   Get estimated fee per gas for an EVM coin/token [get\_eth\_estimated\_fee\_per\_gas](/komodo-defi-framework/api/v20/wallet/fee_management/get_eth_estimated_fee_per_gas/).

*   Get swap transaction fee policy for an EVM coin/token [get\_swap\_transaction\_fee\_policy](/komodo-defi-framework/api/v20/wallet/fee_management/get_swap_transaction_fee_policy/).

*   Set swap transaction fee policy for an EVM coin/token [set\_swap\_transaction\_fee\_policy](/komodo-defi-framework/api/v20/wallet/fee_management/set_swap_transaction_fee_policy/).

*   Start tracking the fee market for an EVM coin/token [start\_eth\_fee\_estimator](/komodo-defi-framework/api/v20/wallet/fee_management/start_eth_fee_estimator/).

*   Stop tracking the fee market for an EVM coin/token [stop\_eth\_fee\_estimator](/komodo-defi-framework/api/v20/wallet/fee_management/stop_eth_fee_estimator/).

## Fee Management Configuration

There is also a new `gas_fee_estimator` parameter in the coins file, which can be set to `provider` or `simple`.

By default, `simple` gas fee estimation suggests a fee based on fee history. If set `gas_fee_estimator` is set to `provider`, users must set the `gas_api` setting in their [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/) to source recommended fee values from third party providers [Infura](https://www.infura.io/) or [Blocknative](https://www.blocknative.com/).

### In the coins file

Below is an example of the information required in EVM token configurations in your [`coins` file](/komodo-defi-framework/tutorials/listing-a-new-coin/#erc-20-token-example).

```json
{
  "coin": "1INCH-BEP20",
  "name": "1inch_bep20",
  "fname": "1Inch",
  "rpcport": 80,
  "mm2": 1,
  "chain_id": 56,
  "avg_blocktime": 3,
  "required_confirmations": 3,
  "protocol": {
    "type": "ERC20",
    "protocol_data": {
      "platform": "BNB",
      "contract_address": "0x111111111117dC0aa78b770fA6A738034120C302"
    }
  },
  "derivation_path": "m/44'/60'",
  "use_access_list": true,
  "max_eth_tx_type": 2,
  "gas_fee_estimator": "provider",
  "gas_limit": {
      "eth_send_erc20": 60000,
      "erc20_payment": 110000,
      "erc20_receiver_spend": 85000,
      "erc20_sender_refund": 85000
  }
}
```

For EIP1559 features, a coin/token's config needs to include the `chain_id` (sourced from [chainlist.org](https://chainlist.org)) and `max_eth_tx_type` (set to `2` if compatible) fields.

The [`gas_limit` object](/komodo-defi-framework/tutorials/listing-a-new-coin/) values in your `coins` file will set the default limits in both `Legacy` and `Eip1559` fee configs.

### In the MM2.json file

If `gas_fee_estimator` is set to `provider`, you'll also need to add the `gas_api` parameter to your [MM2.json configuration file](/komodo-defi-framework/setup/configure-mm2-json/):

```json
{
    "netid": 8762,
    "seednodes": ["seed01.kmdefi.net", "seed02.kmdefi.net"],
    "rpcport": 8777,
    ...
    "gas_api": {
      "provider": "blocknative",
      "url": https://your-provider-url.com
    }
}
```

The currently available third party providers [Infura](https://www.infura.io/) or [Blocknative](https://www.blocknative.com/).
export const title = "Komodo DeFi Framework Method: Set Swap Transaction Fee Policy";
export const description =
  "The set_swap_transaction_fee_policy method allows you to set the gas fee policy used by supported ETH/EVM coins or tokens when estimating swap transaction fees.";

# set\_swap\_transaction\_fee\_policy

The `set_swap_transaction_fee_policy` method allows you to set the gas fee policy used by supported ETH/EVM coins or tokens when estimating swap transaction fees.

| parameter             | Type   | Description                                                                                 |
| --------------------- | ------ | ------------------------------------------------------------------------------------------- |
| coin                  | string | Ticker of the supported ETH/EVM coin or tokens for which we want to set the fee policy for. |
| swap\_tx\_fee\_policy | string | Possible values: `Low`, `Medium`, `High`, `Internal`.                                       |

## Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "set_swap_transaction_fee_policy",
  "mmrpc": "2.0",
  "params": {
    "coin": "ETH",
    "swap_tx_fee_policy": "High"
  }
}
```

## Response

```json
{
    "mmrpc": "2.0",
    "result": "High",
    "id": null
}
```
export const title = "Komodo DeFi Framework Method: Start ETH Fee Estimator";
export const description =
  "The start_eth_fee_estimator method allows you to start the gas priority fee estimator loop for an active coin of your choice.";

# start\_eth\_fee\_estimator

The `start_eth_fee_estimator` method allows you to to start the gas priority fee estimator loop for an active coin of your choice. Before using this method, you first need to use the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/coin_activation/enable_eth_with_tokens/) method. For the gas fee estimator to work you also need to [configure your MM2.json and coins files](/komodo-defi-framework/api/v20/wallet/fee_management/#fee-management-configuration) with some extra parameters.

| parameter | Type   | Description                                                                |
| --------- | ------ | -------------------------------------------------------------------------- |
| coin      | string | Ticker of the coin/asset for which we want to start the gas fee estimator. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "start_eth_fee_estimator",
  "mmrpc": "2.0",
  "params": {
    "coin": "ETH"
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Stop ETH Fee Estimator";
export const description =
  "The start_eth_fee_estimator method allows you to stop the gas priority fee estimator loop for an active coin of your choice.";

# stop\_eth\_fee\_estimator

The `stop_eth_fee_estimator` method allows you to to stop the gas priority fee estimator loop for an active coin of your choice. Before using this method, you first need to use the [enable\_eth\_with\_tokens](/komodo-defi-framework/api/v20/wallet/fee_management/start_eth_fee_estimator/) method.

| parameter | Type   | Description                                                                |
| --------- | ------ | -------------------------------------------------------------------------- |
| coin      | string | Ticker of the coin/asset for which we want to start the gas fee estimator. |

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "stop_eth_fee_estimator",
  "mmrpc": "2.0",
  "params": {
    "coin": "ETH"
  }
}
```

## Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "result": "Success"
  },
  "id": null
}

```
export const title = "Komodo DeFi Framework Method: HD Address Management";
export const description = "The methods in this document allow generation of HD addresses on Komodo DeFi Framework.";

# Hierarchical Deterministic Address Management

A hierarchical-deterministic (HD) wallet generates a new key pair from a master key pair, allowing for multiple addresses to be generated from the same seed so that change from transactions go to a previously unused address, enhancing privacy and security. The hierarchical structure resembles that of a tree, with the master key “determining” the key pairs that follow it in the hierarchy. If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, you can use the methods below to generate new addresses.

## get\_new\_address

If we don't already have too many unused addresses, we can use the `get_new_address` method to generate a new address. The generated address will be shown in account\_balance and init\_account\_balance RPCs and on the next coin activation.

#### Arguments

| Parameter   | Type    | Description                                                                                                                                                                                                                                                                                                                 |
| ----------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to get a new address for                                                                                                                                                                                                                                                                    |
| account\_id | integer | Generally this will be `0` unless you have multiple accounts registered on your Trezor                                                                                                                                                                                                                                      |
| chain       | string  | `Internal`, or `External`. Defaults to `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided                                                                                                                                                                                       |

#### Response

| Parameter    | Type   | Description                                                                                                |
| ------------ | ------ | ---------------------------------------------------------------------------------------------------------- |
| new\_address | object | A standard [NewAddressInfo](/komodo-defi-framework/api/common_structures/wallet/#new-address-info) object. |

Some reasons you might not be able to get a new address are:

*   `EmptyAddressesLimitReached` - Last gap\_limit addresses are still unused.
*   `AddressLimitReached` - Addresses limit reached. Currently, the limit is [2^31](https://www.wolframalpha.com/input?i=2%5E%2832%29)

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_new_address",
  "params": {
    "coin": "DOC",
    "account_id": 0,
    "chain": "External",
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "new_address": {
            "address": "RDKyU11wFTa8kYETaDbr4YuJZG8C4e6JUm",
            "derivation_path": "m/44'/141'/0'/0/3",
            "chain": "External",
            "balance": {
                "spendable": "0",
                "unspendable": "0"
            }
        }
    },
    "id": null
}
```

## task\_scan\_for\_new\_addresses\_init

#### Arguments

| Parameter   | Type    | Description                                                                                                                           |
| ----------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string  | The ticker of the coin you want to scan addresses for                                                                                 |
| account\_id | integer | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                  |
| gap\_limit  | integer | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation or 20 if no value was provided |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::init",
  "params": {
    "coin": "DGB",
    "account_index": 0,
    "gap_limit": 20
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
      "task_id": 3
  },
  "id": null
}
```

## task\_scan\_for\_new\_addresses\_status

Use the `task::scan_for_new_addresses::status` method to query the status of a HD address scanning task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                                     |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                                              |
| details   | string or object | Once complete, a standard [ScanAddressesInfo](/komodo-defi-framework/api/common_structures/wallet/#scan-addresses-info) object. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::scan_for_new_addresses::status",
  "params": {
    "task_id": 3
  }
}
```

#### Response (success, no new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": []
      }
  },
  "id": null
}
```

#### Response (success, new address found)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "Ok",
      "details": {
          "account_index": 0,
          "derivation_path": "m/44'/141'/0'",
          "new_addresses": [
              {
                  "address": "RXaMK6RtvwPiy67oramBfFXCgMobBofMWv",
                  "derivation_path": "m/44'/141'/0'/0/3",
                  "chain": "External",
                  "balance": {
                      "spendable": "0",
                      "unspendable": "0"
                  }
              },
              {
                  "address": "RJkjq4DeQ5vTNJxa1gHoS4y31ZU9F3aisu",
                  "derivation_path": "m/44'/141'/0'/0/4",
                  "chain": "External",
                  "balance": {
                      "spendable": "0.444",
                      "unspendable": "0"
                  }
              }
          ]
      }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Get Wallet Names";
export const description = "The get_wallet_names method returns a list of wallet names for a user's device.";

# get\_wallet\_names

The `get_wallet_names` method returns returns a list of wallet names for a user's device. If the user is logged in, it will also return the name of the active wallet.

## Arguments

| Structure | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |             |

#### Response

| Structure         | Type   | Description                                                                  |
| ----------------- | ------ | ---------------------------------------------------------------------------- |
| wallet\_names     | list   | Names of wallets stored on a user's device.                                  |
| activated\_wallet | string | Names of the currrently active wallet. If not yet logged in, returns `null`. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_wallet_names",
  "id": 0
}
```

#### Response (in no-login mode)

```json
{
    "mmrpc": "2.0",
    "result": {
        "wallet_names": ["Robert Paulson", "Spartacus", "John Galt", "Kaiser Soze"],
        "activated_wallet": null
    },
    "id": 0
}
```

#### Response (while logged in)

```json
{
    "mmrpc": "2.0",
    "result": {
        "wallet_names": ["Robert Paulson", "Spartacus", "John Galt", "Kaiser Soze"],
        "activated_wallet": "Robert Paulson"
    },
    "id": 0
}
```
export const title = "Komodo DeFi Framework: HD Wallets Overview";
export const description =
  "This document provides and overview of functionality available using the Komodo DeFi Framework API in Hierarchical Deterministic (HD) mode.";

# HD Wallets Overview

[Hierarchical Deterministic (HD) Wallets](https://atomicdex.io/en/blog/hd-wallet/) are different to other wallets, as they use a key pair management system that allows generating multiple new addresses from a single seed phrase or private key.

`Hierarchical` refers to the structure of HD wallets, which resembles a tree, where parent keys can produce children keys, which can produce grandchildren keys, and so on, all from the same root seed.
`Deterministic` means that the addresses generated in this tree will always be the same for the same root seed phrase.

HD wallets offer several advantages over traditional wallets:

*   Convenience: HD wallets allow users to generate multiple public and private keys from a single seed phrase, making it easier to manage multiple addresses in one place.
*   Privacy: HD wallets can generate new addresses for each transaction, making it more difficult for malicious parties to track a user’s transaction history.
*   Access Control: A user who controls the root seed can create new addresses & keypairs which can be shared with a 3rd party, providing limited or regulated access to funds held under specific pairs.

To use HD wallet functionality with the Komodo DeFi Framework API, you must include `"enable_hd":true` in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/).
Hardware wallets like [Trezor](https://trezor.io/) are always in HD mode, and this parameter **must** to be set to `true`.

In some cases, the methods used to interact with HD wallets are the same as those used with legacy wallets. However, there are some differences, which are detailed in the links below.

## Initialisation and authentication (Hardware wallets only):

*   Initialise connection with your Trezor with [task::init\_trezor::init](/komodo-defi-framework/api/v20/utils/task_init_trezor/#init)
*   Check the status of the connecton with [task::init\_trezor::status](/komodo-defi-framework/api/v20/utils/task_init_trezor/#status)
*   Cancel authentication process with [task::init\_trezor::cancel](/komodo-defi-framework/api/v20/utils/task_init_trezor/#cancel)
*   Authenticate using PIN or phrase with [task::init\_trezor::user\_action](/komodo-defi-framework/api/v20/utils/task_init_trezor/#user-action)

These methods (and others with a `task::` prefix) will be linked to a numeric
`task_id` value which is used to query the status or outcome of the task.

## UTXO & QTUM Coin Activation in HD Mode:

As HD mode activation performs address scanning to return addresses and balances for enabled accounts, we use `task` methods because fetching this data can take some time.

*   Use [task::enable\_utxo::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#init) for UTXO coins like KMD, BTC and DOGE.
*   Check the activation status with [task::enable\_utxo::status](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#status)
*   Authenticate the activation with [task::enable\_utxo::user\_action](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#user-action) (hardware wallet only)
*   Use [task::enable\_qtum::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#init) for QTUM Ecosystem coins.
*   Check the activation status with [task::enable\_qtum::status](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#status)
*   Authenticate the activation with [task::enable\_qtum::user\_action](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#user-action) (hardware wallet only)

When using the activation methods with a Trezor, `"priv_key_policy": "Trezor"` needs to be included in the request.

## Withdrawing your Funds:

*   Prepare a transaction with [withdraw (v2)](/komodo-defi-framework/api/v20/wallet/tx/withdraw/#withdraw)
*   Broadcast the transaction with [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/#send-raw-transaction)
*   Prepare a transaction with [task::withdraw::init](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#init)
*   Check the status of the transaction preparation with [task::withdraw::status](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#status)
*   Cancel the transaction preparation with [task::withdraw::cancel](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#cancel)

Not sure if these are still active?

## Viewing Hardware Wallet Coin Balances:

*   Initialise the balance request with [task::account\_balance::init](/komodo-defi-framework/api/v20/wallet/hd/task_account_balance/#init)
*   Check the status of the balance request with [task::account\_balance::status](/komodo-defi-framework/api/v20/wallet/hd/task_account_balance/#status)

## Creating New Addresses:

# TODO: add this item back after the method is redocumented

{/* *   Use [can\_get\_new\_address](/komodo-defi-framework/api/v20/wallet/hd/address_management/#can-get-new-address) to determine if your current address has been used, or should be updated. */}

*   Use [get\_new\_address](/komodo-defi-framework/api/v20/wallet/hd/address_management/#get-new-address) to generate a new address

## Viewing Transaction History:

*   Transaction history using an `account_id` [my\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/my_tx_history/)
*   Transaction history using an `address_id` [my\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/my_tx_history/)

# TODO: Add hashlinks to the above methods
export const title = "Komodo DeFi Framework Method: Account Balance Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# Account Balance Tasks

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#init) and used the `"priv_key_policy": "Trezor"` parameter, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'task::account_balance::init', tag : 'API-v2'}}

Use the `task::account_balance::init` method to initialise an account balance request.

#### Arguments

| Parameter      | Type   | Description                                                                                                                                     |
| -------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| coin           | string | Ticker of activated coin you want to see addresses and balance for                                                                              |
| account\_index | string | For GUIs, this will be zero. In CLI you can use other values if you [know what you are doing](https://learnmeabitcoin.com/technical/hd-wallets) |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::init",
  "params": {
    "coin": "COIN_NAME",
    "account_index": 0
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'task::account_balance::status', tag : 'API-v2'}}

Use the `task::account_balance::status` method to view the status / response of an account balance request.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter           | Type            | Description                                                                                                                                                                                                                                                                  |
| ------------------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result              | object          | Object containing status and details of the task                                                                                                                                                                                                                             |
| .status             | string          | Status of the task (`Ok` or `Error`)                                                                                                                                                                                                                                         |
| ..account\_index    | integer         | For GUIs, this will return `0`. In CLI it will return the same as the user request input                                                                                                                                                                                     |
| ..derivation\_path  | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of the wallet.                                                                                                                                                               |
| ..total\_balance    | object          | Contains the spendable and unspendable balance for the wallet                                                                                                                                                                                                                |
| ...spendable        | string(numeric) | Spendable balance for this wallet                                                                                                                                                                                                                                            |
| ...unspendable      | string(numeric) | Unspendable balance for this wallet (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                            |
| ..addresses         | list            | Contains information about current active addresses in the wallet                                                                                                                                                                                                            |
| ...address          | string          | Spendable balance for this address                                                                                                                                                                                                                                           |
| ...derivation\_path | string          | The The [BIP44 derivation path](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) of an address.                                                                                                                                                               |
| ...chain            | string(numeric) | `Internal` or `External`. External is used for addresses that are meant to be visible outside of the wallet (e.g. for receiving payments). Internal is used for addresses which are not meant to be visible outside of the wallet and is used for return transaction change. |
| ...balance          | object          | A map of standard [balanceInfo](/komodo-defi-framework/api/common_structures/#balance-info) objects, by ticker.                                                                                                                                                              |
| ....spendable       | string(numeric) | Spendable balance for this address                                                                                                                                                                                                                                           |
| ....unspendable     | string(numeric) | Unspendable balance for this address (e.g. from unconfirmed incoming transactions)                                                                                                                                                                                           |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "account_index": 0,
      "derivation_path": "m/44'/20'/0'",
      "total_balance": {
        "KMD": {
          "spendable": "99.999",
          "unspendable": "0"
        }
      },
      "addresses": [
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/0",
          "chain": "External",
          "balance": {
            "KMD": {
              "spendable": "49.999",
              "unspendable": "0"
            }
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/1",
          "chain": "External",
          "balance": {
            "KMD": {
              "spendable": "50",
              "unspendable": "0"
            }
          }
        },
        {
          "address": "DJdsr4Mhqm1afkbxwBJfwH6236xNh5kJZU",
          "derivation_path": "m/44'/20'/0'/0/2",
          "chain": "External",
          "balance": {
            "KMD": {
              "spendable": "0",
              "unspendable": "0"
            }
          }
        }
      ]
    }
  },
  "id": null
}
```

## cancel {{label : 'task::account_balance::cancel', tag : 'API-v2'}}

Use the `task::account_balance::cancel` method to cancel an account balance request.

#### Arguments

| Parameter | Type    | Description                                                             |
| --------- | ------- | ----------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdrawal process. |

#### Response

| Parameter    | Type   | Description                                                                            |
| ------------ | ------ | -------------------------------------------------------------------------------------- |
| result       | string | Returns with value `success` when successful, otherwise returns the error values below |
| error        | string | Description of the error                                                               |
| error\_path  | string | Used for debugging. A reference to the function in code base which returned the error  |
| error\_trace | string | Used for debugging. A trace of lines of code which led to the returned error           |
| error\_type  | string | An enumerated error identifier to indicate the category of error                       |
| error\_data  | string | Additonal context for the error type                                                   |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::account_balance::cancel",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (error, task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_account_balance.manager",
  "error_trace": "init_account_balance:113] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 2,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: HD Account Management Tasks";
export const description = "The methods in this document allow tracking of balances across multiple addresses under a specified account index.";

# task\_create\_new\_account

If you have activated a coin with the [task::enable\_utxo::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_utxo/#init) or [task::enable\_qtum::init](/komodo-defi-framework/api/v20/coin_activation/task_managed/task_enable_qtum/#init) and are using `HD Mode`, your funds may be spread across a range of addresses under a specified account index. The methods below will return the combined balance of your account, detailing the balance for each active account address.

## init {{label : 'init', tag : 'API-v2'}}

Use the `task::create_new_account::init` method to initialise a HD account.

#### Arguments

| Parameter   | Type   | Description                                                                                                                             |
| ----------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| coin        | string | Ticker of coin you would like to initialise a HD account for.                                                                           |
| account\_id | string | Optional. If not defined, will increment to the next unused account id in the wallet.                                                   |
| scan        | string | Optional. If `true`, will scan the account for funded addresses. Defaults to `true`.                                                    |
| gap\_limit  | string | Optional. The maximum number of empty addresses in a row. Defaults to the value provided on activation, or 20 if no value was provided. |

#### Response

| Parameter | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::init",
  "params": {
    "coin": "KMD",
    "account_id": 77,
    "scan": true,
    "gap_limit": 20
  }
}
```

#### Response (ready, successful)

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 6
  },
  "id": null
}
```

## status {{label : 'status', tag : 'API-v2'}}

Use the `task::create_new_account::status` method to query the status of a HD account creation task.

#### Arguments

| Parameter            | Type    | Description                                                                               |
| -------------------- | ------- | ----------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the withdrawal process.                   |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true`. |

#### Response

| Parameter | Type             | Description                                                                                                                                                                                       |
| --------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status    | string           | Status of the task. `Ok`, `InProgress` or `Error`.                                                                                                                                                |
| details   | string or object | If in progress, either `Preparing` or `RequestingAccountBalance`. Once complete, a standard [WalletAccountInfo](/komodo-defi-framework/api/common_structures/wallet/#wallet-account-info) object. |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::create_new_account::status",
  "params": {
    "task_id": 1
  }
}
```

#### Response (ready, successful)

```json
{
    "mmrpc": "2.0",
    "result": {
        "status": "Ok",
        "details": {
            "account_index": 77,
            "derivation_path": "m/44'/141'/77'",
            "total_balance": {
                "spendable": "7.777",
                "unspendable": "0"
            },
            "addresses": [
                {
                    "address": "RMsnNdVfZbxWwDxJafc6scbaN1xYVoR7Gx",
                    "derivation_path": "m/44'/141'/77'/0/4",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "R9roM4acnrrp1BL73MXd9EWdF5biRcSJ5X",
                    "derivation_path": "m/44'/141'/77'/0/5",
                    "chain": "External",
                    "balance": {
                        "spendable": "0",
                        "unspendable": "0"
                    }
                },
                {
                    "address": "RLNu8gszQ8ENUrY3VSyBS2714CNVwn1f7P",
                    "derivation_path": "m/44'/141'/77'/0/7",
                    "chain": "External",
                    "balance": {
                        "spendable": "7.777",
                        "unspendable": "0"
                    }
                }
            ]
        }
    },
    "id": null
}
```

#### Response (in progress)

```json
{
  "mmrpc": "2.0",
  "result": {
      "status": "InProgress",
      "details": "Preparing"
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework: Wallet methods";
export const description =
  "Komodo DeFi Framework: Wallet methods";

# Wallet methods

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: Add Delegation";
export const description =
  "The add_delegation method initiates your node's staking of a compatible coin.";

# add\_delegation

The `add_delegation` method initiates your node's staking of a compatible coin. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

Note: Only UTXOs of 100 QTUM / tQTUM will be actively staked. It is recomended to consolidate your balance into a single UTXO before initiating delegated staking. After running `add_delegation`, you will need to broadcast the returned hex via [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process. Staking will only work with legacy QTUM addresses (segwit addresses are not supported).

## Arguments

| Structure                | Type   | Description                  |
| ------------------------ | ------ | ---------------------------- |
| coin                     | string | the coin being staked        |
| staking\_details.type    | string | the protocol being staked    |
| staking\_details.address | string | the delegated staker address |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "add_delegation",
  "params": {
    "coin": "tQTUM",
    "staking_details": {
      "type": "Qtum",
      "address": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "01000000017fdeb56c5b601454731451aa4daa004a7e1993e196462159c5e5360545fb9965000000006b483045022100c4101e0a70560dd8480404a620ac48a36a509c779cd3eb294d5b07f0447109ea0220145096570e6661fa52bf5df4b23329108959cb58cb02f1629e01cefb2d55fca6012102641b541e35bc915e375c8038f1099a977bc6736aa7265e9f65b7270b70d34366ffffffff020000000000000000fd0301540310552201284ce44c0e968c000000000000000000000000d4ea77298fdac12c657a18b222adc8b307e18127000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004120bf35729611a42875b49e890b7330c94a5227259b2cd987f885aaea3a08bad3897266a39db2d34f8009efa95eb877083b1eefccf2257f02cc0aa2e8db9a7f3eea00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000086c200c4a0ba030000001976a914c36ac1020b1eae632079692e7bef350d279489c988acb4db8061",
    "tx_hash": "308c91fd50ec0f724d8c9f5601676b93889ae072b369b7a3d62684d6c3c60e7b",
    "from": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "to": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "total_amount": "161.064",
    "spent_by_me": "161.064",
    "received_by_me": "160.16",
    "my_balance_change": "-0.904",
    "block_height": 0,
    "timestamp": 1635834804,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.004",
      "gas_limit": 2250000,
      "gas_price": 40,
      "total_gas_fee": "0.9"
    },
    "coin": "tQTUM",
    "internal_id": "",
    "transaction_type": "StakingDelegation"
  },
  "id": 0
}
```

#### Response (error - already delegating)

```json
{
  "mmrpc": "2.0",
  "error": "Already delegating to: qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
  "error_path": "qtum_delegation",
  "error_trace": "qtum_delegation:222]",
  "error_type": "AlreadyDelegating",
  "error_data": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: Get Staking Info";
export const description =
  "The get_staking_infos method returns information about your node's staking.";

# get\_staking\_infos

The `get_staking_infos` method returns information about your node's staking. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

## Arguments

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| coin      | string | the coin being staked |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "get_staking_infos",
  "params": {
    "coin": "tQTUM"
  },
  "id": 0
}
```

#### Response (not currently staking)

```json
{
  "mmrpc": "2.0",
  "result": {
    "staking_infos_details": {
      "type": "Qtum",
      "amount": "0",
      "staker": null,
      "am_i_staking": false,
      "is_staking_supported": true
    }
  },
  "id": 0
}
```

#### Response (staking active)

```json
{
  "mmrpc": "2.0",
  "result": {
    "staking_infos_details": {
      "type": "Qtum",
      "amount": "160.16",
      "staker": "qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE",
      "am_i_staking": true,
      "is_staking_supported": true
    }
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework: Staking";
export const description =
  "Komodo DeFi Framework Method: Staking";

# Staking

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: Remove Delegation";
export const description =
  "The remove_delegation method stops your node's staking of a compatible coin.";

# remove\_delegation

The `remove_delegation` method stops your node's staking of a compatible coin. Currently QTUM and tQTUM (test tokens avalable at `https://testnet-faucet.qtum.info/`) have been integrated, but this functionality will be expanded to more coins in future.

Note: After running `remove_delegation`, you will need to broadcast the returned hex via [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process.

## Arguments

| Structure | Type   | Description           |
| --------- | ------ | --------------------- |
| coin      | string | the coin being staked |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "remove_delegation",
  "params": {
    "coin": "tQTUM"
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "01000000015c7f32b1b3396ce1bed4f6c161bcc3a5bf5c58e4338c66a24c9de1deffc5b94e000000006a47304402203fcdf1e48f6e43fd718b4aab79c56a7ff81b12304339ddf6d871a3f26f217a7502200c22fa8e2bcc33d16f4bf62feb71f637acbefdd34135314e6aa526e6655cba73012102641b541e35bc915e375c8038f1099a977bc6736aa7265e9f65b7270b70d34366ffffffff020000000000000000225403a086010128043d666e8b140000000000000000000000000000000000000086c280584f00000000001976a914c36ac1020b1eae632079692e7bef350d279489c988acb8d98061",
    "tx_hash": "3564859a7ff902e8d65387c44f6049943582e0b9e29161bf1075a00097e535ae",
    "from": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "to": ["qbNeoqCbBu4hySDUzgmo666faYH3qgaeKz"],
    "total_amount": "0.096",
    "spent_by_me": "0.096",
    "received_by_me": "0.052",
    "my_balance_change": "-0.044",
    "block_height": 0,
    "timestamp": 1635834296,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.004",
      "gas_limit": 100000,
      "gas_price": 40,
      "total_gas_fee": "0.04"
    },
    "coin": "tQTUM",
    "internal_id": "",
    "transaction_type": "RemoveDelegation"
  },
  "id": 0
}
```
export const title = "Komodo DeFi Framework: Task managed wallet methods";
export const description =
  "Komodo DeFi Framework: Task managed wallet methods";

# Task managed wallet methods

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: Withdraw Tasks";
export const description = "The methods in this document allow withdrawal of coins from Komodo DeFi Framework.";

# Withdraw Tasks

## init {{label : 'task::withdraw::init', tag : 'API-v2'}}

The `task::withdraw::init` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument. The status of this method can be queried via the [withdraw\_status](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#status) method.

It will return the transaction hex (via `task::withdraw::status`), which then needs to be broadcast with the [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the withdrawal. This method is uses the same input fields as the [standard v2 withdraw method](/komodo-defi-framework/api/v20/wallet/tx/withdraw/), with additional optional fields to specify the `from` address when using a hardware or HD wallet. There are two way to indicate which HD address to send funds from:

*   Using `derivation_path` as a single input. E.g `m/44'/20'/0'/0/2`
*   Using `account_id` (0), `chain` (External) & `address_id` (2) inputs. The bracketed values are the equavalent of the derivation path above.

To cancel the transaction generation, use the [withdraw\_cancel](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#cancel) method.

When used for ZHTLC coins like ARRR or ZOMBIE, it may take some time to
complete.

### Arguments

| Structure             | Type             | Description                                                                                                                                                                                                                                                                                                                      |
| --------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                  | string           | The name of the coin the user desires to withdraw                                                                                                                                                                                                                                                                                |
| to                    | string           | Coins are withdrawn to this address                                                                                                                                                                                                                                                                                              |
| amount                | string (numeric) | The amount the user desires to withdraw, ignored when `max=true`                                                                                                                                                                                                                                                                 |
| memo                  | string           | Optional, used for ZHTLC and Tendermint coins only. Attaches a memo to the transaction.                                                                                                                                                                                                                                          |
| from                  | string           | Optional, used only for transactions using a hardware wallet. For more information, see the [Trezor Integration guide](/komodo-defi-framework/api/v20/utils/task_init_trezor/)                                                                                                                                                   |
| from.derivation\_path | string           | Optional, HD wallets only. Follows the format `m/44'/COIN_ID'/ACCOUNT_ID'/CHAIN/ADDRESS_ID`                                                                                                                                                                                                                                      |
| from.account\_id      | integer          | Optional, HD wallets only. Generally this will be `0` unless you have multiple accounts registered on your HD wallet                                                                                                                                                                                                             |
| from.chain            | string           | Optional, HD wallets only. `Internal`, or `External`. External is used for addresses that are intended to be visible outside of the wallet (e.g. for receiving payments). `Internal` is used for addresses which are not meant to be visible outside of the wallet and is used to return the leftover change from a transaction. |
| from.address\_id      | integer          | Optional, HD wallets only. Check the output from coin activation to find the ID of an address with balance.                                                                                                                                                                                                                      |
| max                   | bool             | Optional. Withdraw the maximum available amount. Defaults to `false`                                                                                                                                                                                                                                                             |
| fee                   | object           | Optional. Used only to set a custom fee, otherwise fee value will be derived from a deamon's `estimatefee` (or similar) RPC method                                                                                                                                                                                               |
| fee.type              | string           | Type of transaction fee; possible values: `UtxoFixed` or `UtxoPerKbyte`                                                                                                                                                                                                                                                          |
| fee.amount            | string (numeric) | Fee amount in coin units, used only when type is `UtxoFixed` (fixed amount not depending on tx size) or `UtxoPerKbyte` (amount per Kbyte)                                                                                                                                                                                        |

#### Response

| Structure | Type    | Description                                               |
| --------- | ------- | --------------------------------------------------------- |
| task\_id  | integer | An identifying number which is used to query task status. |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT"
  },
  "id": 0
}
```

#### Command (max = true)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "max": true
  },
  "id": 0
}
```

#### Command (custom UtxoFixed fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoFixed",
      "amount": "0.001"
    }
  },
  "id": 0
}
```

#### Command (custom UtxoPerKbyte fee)

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "UtxoPerKbyte",
      "amount": "0.00097"
    }
  },
  "id": 0
}
```

#### Command (HD wallet: derivation path option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "derivation_path": "DERIVATION_PATH"
    }
  }
}
```

#### Command (HD wallet: account\_id, chain & address\_id option)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "task::withdraw::init",
  "params": {
    "coin": "COIN_NAME",
    "to": "ADDRESS_OF_RECIPIENT",
    "amount": "AMOUNT_TO_SEND",
    "from": {
      "account_id": 0,
      "chain": "External",
      "address_id": "ADDRESS_ID"
    }
  }
}
```

#### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "task_id": 0
  },
  "id": null
}
```

## status  {{label : 'task::withdraw::status', tag : 'API-v2'}}

To get the status of your withdrawal transaction generation, use the `task::withdraw::status` method. Once ready, it will provide the raw hex used to broadcast your transaction with [sendrawtransaction](/komodo-defi-framework/api/legacy/send_raw_transaction/). The response returned is the same as what is returned from the [standard v2 withdraw method](/komodo-defi-framework/api/v20/wallet/tx/withdraw/#response)

#### Arguments

| Parameter            | Type    | Description                                                                              |
| -------------------- | ------- | ---------------------------------------------------------------------------------------- |
| task\_id             | integer | The identifying number returned when initiating the initialisation process.              |
| forget\_if\_finished | boolean | If `false`, will return final response for completed tasks. Optional, defaults to `true` |

#### Response

| Structure                            | Type                       | Description                                                                                                                                                                                             |
| ------------------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| status                               | string                     | A short indication of how the withdrawal is progressing.                                                                                                                                                |
| details                              | object                     | Depending on the state of withdrawal progress, this will contain different information as shown in the responses below.                                                                                 |
| details.to                           | array of strings           | Coins are withdrawn to these addresses; this may contain the `my_address` address, where change from UTXO coins is sent.                                                                                |
| details.from                         | array of strings           | Coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| details.my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| details.received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| details.spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| details.total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| details.fee\_details                 | object                     | the fee details of the generated transaction; `fee_details.type` is "Utxo" for Z coins. `fee_details.coin` will be the same as `details.coin`, and `fee_details.amount` will be a numeric value.        |
| details.tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| details.tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/)                                              |
| details.coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| details.transaction\_type            | string                     | Transaction type will be `StandardTransfer` for Z coin transactions.                                                                                                                                    |
| details.kmd\_rewards                 | object (optional)          | If supported (e.g. when withdrawing `KMD`), an object containing information about accrued rewards.                                                                                                     |
| details.kmd\_rewards.amount          | string (numeric, optional) | The amount of accrued rewards                                                                                                                                                                           |
| details.kmd\_rewards.claimed\_by\_me | bool (optional)            | Whether or not the rewards been claimed by me.                                                                                                                                                          |

#### 📌 Examples

#### Command

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::status",
  "params": {
    "task_id": 3,
    "forget_if_finished": false
  },
  "id": 0
}
```

#### Response (Generating transaction)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "GeneratingTransaction"
  },
  "id": 0
}
```

#### Response (Generating transaction complete)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f8900000000000056390400e803000000000000017aef9bb6fda6cff496046976f57dea0848fc05a46ce948dd1dab7d551a5e5a5cdc41b3409adec489e1c4ffb33bfca7a949833fadfb7cc93546aab96a8bffca469bbd435682f5af367ab07dbbbecc448010e056103fa236251b2b74d4f43d031d43df8e32672e99dae0ee51ece01c523b7ce7fb9aa8682e23e122d732a67664d3822b04edd1a12ed586b1e7dcef08c4f870792eccc2ad74a48da134a9368adb5967b01681fd1d617c2ce972f5860f976cb828363b9501f167d99e8ac17422a54e055cbfc7fce40e95b4de7bb0c8fa9e61f8a0ec07f23a28a7c4897fa6fe372a2e0fb8a2706b71db38648782eac18529d7bbcb5fe42b9da26fb2adf050538bd21c42aecbad0626ad4f4094c337ff3e9cf19292c1f0cc37b0e506231647573fb9ba479675ed99471b7fad4e54213c98facb47af6851e182ee7142a86cfd80a7741bdbeab8a1a6b093c1c093599165c8a8e7ae43c47b87b97fb7363bebc34df4fc2a045c04f850d5bc693f481ab0028706c673fad02a93c3e8e170e08f438034a600027a2974f846c278dce35d564e4c0d5de17c341fbe97d0048b4129c7dc81c4a0172e0986a5568d240fb50c9dc746e5398603aaec588835165e17162f218b71e55bf1403e4d1b81a8c745c7e87571f6c62966154a10ae908293bc66270d8ebc8d835498c7bfd379f87a57babe18db1e379a2fdb4c7413915015b23a54cf6ea2344bbd4f7abbaaec007427c69be51ea7f696ac94741305860ced9cfe96a1cf6bfbbaa182769bc6c8a74169c52990ee27accb51835766397183f408cd6679ccb04ddfc957bedea7fd2dd81103425f886566658b99baf9e0b7c353c5b19a84fece3f35d3902406b1757149f89cab9fe1301bd03d6e3994f617d0bb8b7706b946a15deb2afa0e42e2b8f15f758c6909a51d3ace11fb465e1ed34986f728568088ca75b20b29e924f561534dd38a54ca79ddc318b06f4d2d9a107ecd7601caa3b766d435ad7099e1aff7a0e64f3dbf9500c4f8274b16a1a76858187cebcbde43c8fc30955ff09f0d2930fbcc54f2b931d76e7924f58dbe181a04c22dc8729cf04d0b939206b62f8abbb07bdeedc65086b0c1703570130f928427ff0b6d605c1760be7d32f6343d0c871575f88785c36db39133cf7ce40a712681baaa299706a69d816a24bb8009c4a900021e91530a952eb4dbf036f29cb7e7788665d7318e9486ae99c9ca0d108134fb79588e73bca79cf34cb50ccfdcfef6154f8a399c87dc212eb29961b7bb61454f455b0ff03b3a57cfaacafb437a9341c0fa1c107c27a065716c9de69c129557e35f6af63312f25138174c020c9754d57c45066e28b0d70d77ceef1f69a4c55ce7a33a4120924fb08207018da848bdc4f4e44fbfe0889ba9cd3741ca565516e34cbb260b3870927310d99059c2651ee645b7d9f755e59a9c3821a4d576d7f5b5db22a9befa3163189b09124789897bde57d662d3c7e25d99d709ffdc803acbb8fde2a93dca1525bb1123ed661f8c58113a7e6d1eeb04f738f31bf80ef687804c32de4ca82ae0c3100533e498d9551618b91424489d31526ea46f78d93aa8eef2a25cf53b83cad226d17ba92dc55366a011c494c7f7b9a9c4e1ac6c41fa96f03a66a402d6e6b1b864e8b640ec44bcaf0c00f5ed093823f0a10749708f69377cab25b393a4251f2b605e8022bbfc8c9832c31a5e98d7730042644b56507e00bc24ecf4979fa22e1b40bed2246f38baf715d25a38e400386847997adaf71fe50d29da6995bd50760b08faeec9360147d68175c7cc81be238b406b1e1d414f142a8053e119b2d1ee508fe510d2adad21bd4dff33f6400f17ef88055992b3335fb2a19836b1df3c7ac5ef1a342c9eadb69202d06bfe25ee84625cec62cf507caa2f5b7de8ccdc85921dbdc09e885ad2a7b1f86a6963086073d33f25fd5281f879e1b01d4422048a9a11d6fb6da1d457dd0f9583e38edc4cb4d0c7a7049fd7821c6ccf86160c3d2e4afba86cf154cabf3e8766607d017e348a15b576347e2fdc6742093b8635c0cb0a22835df10f93859875b36cffd1dcb23c6ea95542c9f3c9b5afe613438347b753af37d955dbbe169733beaaff57f1fc685e8c43abb3aaa4bbc4af0211677d87c7d7bcb69631acecd93110b572f3508ff49a0d64f3bd7c01c60cdfd45b01165e3682e8d68f614b523cc73d1a402d650bca867e5bc09c9a920ac8adf8c502db88da0579087e93125836b6398790dc3cba5c1dcfec974d58bf22a9fbc10ca63d5116da35e15eb149d85aa58de15784cfc2574cbc8c7cf81c0f44ea250925e176d2010f7864a393e43da8349dcaf26d7814d7da07d2069a1ee7bd6184351dfc8ae28757d65d15347eae69e9fac8453e1dc6506f4db9aa22db3f35b1782f7b43b1b85e6e0f8ac772712a044e5ef90235eb79ff83a7723ff78a7bba1381ada81507480ac1f0eca939061891b41c1b25aba3172916c3bab939d9f3baec391b2d503be7f63b44dd0fefd5ba769f2f699923531a7bf3a50079133dba31ff3c13b925e6e678b45e217c7ed0c328c15e36ebc56f2cd8c5e7961dadc99f42fe9a0a7d13e849308bcbd760f9570e821db1ea13d3f65ade8b50d3b9b95d2c0eb3e6b8b9796daa4ad0e1ab9dc6585a2dcf1d189e86c7698657f2684df36f31b5e955f9dd044dd3fd174fafcb814da305d15bfed40b4746875abe999bbfc97c58a24ba383dc7c4bb098e09df55f1ed05bbc3f3e0ea510d7dcfc01b1386a6e376c41879a77427e16cb7a0263b635c99713cfa95794cf7b5717836be632c1434970875f9b5c7886d0237f88c509b08a55981259fa08823bd455febd12ee3e5c6e41f66057a3039946052545694ada38babc3f421a531d90cd80461674e4b8efc0ada6a349e56fd12a60f083cce4169170e4a3bb1aeb7193c8b7f686f88240bda72e8fe682c1ad955689a9de678e143e67e04eefd18d86020829eb7603e4449c92189ddb9e41a63a59920d697f8a1a16f26697f31bd34faf02299e8b99a17523ccfa81ed72c6b7e4edd5d128432d353a8f53e0e6c76835d914e8c7348050f48ec68ddd44e6601502952b3d23afd7621ac7174223b7bbc59da87273fbb82f086df2669825de92e456c00734b072b28574a4fc2f4fba13618980f32df91a34bea01ecfeb619ee4ed52d4885f68f636427ca8fda56a9c4b716814bb9074002e18f369666b6fcef7c0008dd8863ea028f8b7c89575b23a871196846857b7f85bd0532503991342d9ab34dd6d9c7700cfb8e991f660a81f2b110740bec308d67d39998bf89d3d667b240e",
      "tx_hash": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "from": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "to": [
        "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
      ],
      "total_amount": "29.99989008",
      "spent_by_me": "29.99989008",
      "received_by_me": "29.99988008",
      "my_balance_change": "-0.00001000",
      "block_height": 0,
      "timestamp": 0,
      "fee_details": {
        "type": "Utxo",
        "coin": "ZOMBIE",
        "amount": "0.00001"
      },
      "coin": "ZOMBIE",
      "internal_id": "f708b9d83b786af26c186a192f14ba680f33f567189ac2e3cd438a29a05f554a",
      "transaction_type": "StandardTransfer"
    }
  },
  "id": 0
}
```

#### Response (Generating KMD transaction complete with rewards info)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "Ok",
    "details": {
      "tx_hex": "0400008085202f89051f43676aa53f06aaf67cfe76b4995a80c204aee630bf1909c37e2efc03c8ceac000000006b48304502210084c8d5345794b6bc78557a7aab71668020a6decf2537e9854044969f0125579202207d059c5cb465ffdd5920ddcca2760da49ce03252b4b3fd4b58605adbbc4d3ec1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2fffffffffc4ba9e537032043caba0982f4b0d46b029ecb261edf9b22fd84a665158cc3d6000000006a47304402207d720393347252195c09b16b9e23a0da7e00979521a9277daa297cd2f5d6d5b902204a8b35f7088ba7e7e7327c2c4fb30de300c26ba1527f3979cf1ed7a85bd70a58012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff19723c4dd6e57edbf623625370ffc8fbeef1ec367e4514491e3da333896f01260000000069463043021f488fa0fc7c8e1f2dbcff589c72f33d4354bc065b4d0e0c69592df293a81fb40220224e7cf3ec63dbbb6f9a2929baed7328af286b6b5f53c1ac0a9bc8156163d6e5012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff59c28f535d6b73c7f622f7aade547ef1db2277d3a43207b289cf56afa5e37f6b010000006a473044022017fbc3310ce3ae66caaf6782cba58a6065af43052e0a97db93d0fa9f6a5eb59e02207d3f766a230bf5159333104f773e2c45daa91828ac53da9f87b6c7dcd255370c012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffffcdbbc54aabaa6d0f5984c444f4317500c2f2b2b77e70f310b1940987b5ce9d3c010000006a4730440220793808739a53e3eedec7aef12b833fdd0e1d789e5211170331f492250757cac002207a3b748b674cb875bdf0cce87d61da10ca2eb24788afe5b061dba01972d9cdb1012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2ffffffff0200e40b54020000001976a914e6d49471e6e83b5b69c0bee93caa4dc880205d9a88ac5856bb5b000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac095cbe63000000000000000000000000000000",
      "tx_hash": "7c201920db65b134a99c8405d84456bed7456bc29451c5bdcc92f30db62a4279",
      "from": ["RUYJYSTuCKm9gouWzQN1LirHFEYThwzA2d"],
      "to": ["RWKi9wkqMH4C9h4psPKjcKQaYNq5vsL89F"],
      "total_amount": "115.39004992",
      "spent_by_me": "115.39004992",
      "received_by_me": "15.39003992",
      "my_balance_change": "-100.00001",
      "block_height": 0,
      "timestamp": 1673421831,
      "fee_details": {
        "type": "Utxo",
        "coin": "KMD",
        "amount": "0.00001"
      },
      "coin": "KMD",
      "internal_id": "",
      "kmd_rewards": {
        "amount": "5.64955481",
        "claimed_by_me": true
      },
      "transaction_type": "StandardTransfer",
      "memo": null
    }
  },
  "id": 0
}
```

#### Response (No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw",
  "error_trace": "init_withdraw:57]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (error, waiting for user to confirm signing on hardware wallet device)

```json
{
  "mmrpc": "2.0",
  "result": {
    "status": "InProgress",
    "details": "WaitingForUserToConfirmSigning"
  },
  "id": null
}
```

## cancel {{label : 'task::withdraw::cancel', tag : 'API-v2'}}

Use the `task::withdraw::cancel` method to cancel the withdrawal preparation task.

#### Arguments

| Structure | Type    | Description                                                           |
| --------- | ------- | --------------------------------------------------------------------- |
| task\_id  | integer | The identifying number returned when initiating the withdraw process. |

#### Response

| Structure    | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| result       | string | Indicates task cancellation was succesful.                     |
| error        | string | An error message to explain what went wrong.                   |
| error\_path  | string | An indicator of the class or function which reurned the error. |
| error\_trace | string | An indicator of where in the source code the error was thrown. |
| error\_type  | string | An enumerated value for the returned error.                    |
| error\_data  | string | The input task ID which resulted in the error.                 |

#### 📌 Examples

#### Command

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "task::withdraw::cancel",
  "mmrpc": "2.0",
  "params": {
    "task_id": 6
  }
}
```

#### Response (Success)

```json
{
  "mmrpc": "2.0",
  "result": "success",
  "id": null
}
```

#### Response (Error: No such task / task expired)

```json
{
  "mmrpc": "2.0",
  "error": "No such task '1'",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:92] manager:97]",
  "error_type": "NoSuchTask",
  "error_data": 1,
  "id": 0
}
```

#### Response (Error: Task already finished)

```json
{
  "mmrpc": "2.0",
  "error": "Task is finished already",
  "error_path": "init_withdraw.manager",
  "error_trace": "init_withdraw:94] manager:104]",
  "error_type": "TaskFinished",
  "error_data": 4,
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Get Raw Transaction";
export const description = "The get_raw_transaction method retrieves the signed raw transaction hex for a confirmed or mempool transaction by providing the coin and tx_hash as input.";

# get\_raw\_transaction

The `get_raw_transaction` method takes `coin` and `tx_hash` as input, and returns the full signed raw transaction hex for any transaction that is confirmed or within the mempool.

## Arguments

| Structure | Type   | Description                                                          |
| --------- | ------ | -------------------------------------------------------------------- |
| coin      | string | the name of the coin the user desires to request for the transaction |
| tx\_hash  | string | hash of the transaction                                              |

## Response

| Structure | Type   | Description                                  |
| --------- | ------ | -------------------------------------------- |
| tx\_hex   | string | bytes of signed transaction in string format |

#### Examples:

##### Request (DOC)

```json
{
  "mmrpc": "2.0",
  "method": "get_raw_transaction",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "coin": "DOC",
    "tx_hash": "989360b0225b4e05fa13643e2e306c8eb5c52fa611615dfd30195089010b1c7b"
  },
  "id": 1
}
```

##### Response (success)

```json
{
  "mmrpc":"2.0",
  "result":{
  "tx_hex":"0400008085202f89025655b6fec358091a4a6b34107e69b10bd7660056d8f2a1e5f8eef0db6aec960100000000494830450221008c89db5e2d93d7674fe152e37344dfd24a0b1d4d382a7e0bcfc5d8190a141d72022050ce4ef929429e7e1a6c4ebd3f72a1a2aa25da1e0df65553a2c657658077ed1d01feffffff79cc137b70c39c9c7c2b9230c818ec684ffe731bf1ae821f91ba9d3e526f55f00000000049483045022100868c71f4a8e1452a3bc8b1d053a846959ab7df63fb0d147e9173f69818bbb1f3022060c7e045a34cf6af61bc3a74dc2db7b8bfa4949bc5919acceed40fc07d8706d201feffffff0240043a0000000000232102afdbba3e3c90db5f0f4064118f79cf308f926c68afd64ea7afc930975663e4c4ac201efc01000000001976a914347f2aedf63bac168c2cc4f075a2850435e20ac188ac96d3c96036dd0e000000000000000000000000"
  },
  "id":0
}
```

##### Request (ETH)

```json
{
  "mmrpc": "2.0",
  "method": "get_raw_transaction",
  "userpass": "RPC_UserP@SSW0RD",
  "params": {
    "coin": "ETH",
    "tx_hash": "0x529aca42b6b592cca5d400832c83854135b924cada6e1c41b85f27fa0a0984b9"
  },
  "id": 1
}
```

##### Response (success)

```json
{
  "mmrpc":"2.0",
  "result":{
  "tx_hex":"f86e8227578503b6ed90e6825208943faaa59e42f616f859d5771cbc07a99412ae44b288026fe9cb1ec6e9a08026a08e04accc3733376cf7b8f8d51c8398fd244fca736277053a7e87093f6db67708a069cc7dbc57094c4cca7828e6f8d92a8221c457ac7b5d0b0562e9d8896f75d1a5"
  },
  "id":0
}
```

##### Error response (no such coin)

```json
{
  "mmrpc": "2.0",
  "error": "No such coin KMD",
  "error_path": "lp_coins",
  "error_trace": "lp_coins:2234] lp_coins:2156]",
  "error_type": "NoSuchCoin",
  "error_data": {
    "coin": "KMD"
  },
  "id": 0
}
```

##### Error (invalid hash)

```json
{
  "mmrpc": "2.0",
  "error": "Invalid  hash: Invalid input length",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1809]",
  "error_type": "InvalidHashError",
  "error_data": "Invalid input length",
  "id": 1
}
```

##### Error (invalid EC Signature)

```json
{
  "mmrpc": "2.0",
  "error": "Internal error: eth:3221] Crypto error (Invalid EC signature)",
  "error_path": "eth",
  "error_trace": "eth:543]",
  "error_type": "InternalError",
  "error_data": "eth:3221] Crypto error (Invalid EC signature)",
  "id": 1
}
```

## Error Types

| Structure        | Type   | Description                                                               |
| ---------------- | ------ | ------------------------------------------------------------------------- |
| NoSuchCoin       | string | The specified coin was not found or is not activated yet                  |
| InvalidHashError | string | The specified `hash` is not valid                                         |
| Transport        | string | The request was failed due to a network error                             |
| HashNotExist     | string | The specified `hash` is not exist                                         |
| InternalError    | string | The request was failed due to an Komodo DeFi Framework API internal error |
export const title = "Komodo DeFi Framework: Transaction methods";
export const description =
  "Komodo DeFi Framework: Transaction methods";

# Transaction methods

TODO: Add summary for other methods, along with detail for HD methods
export const title = "Komodo DeFi Framework Method: My TX History";
export const description = "The my_tx_history method allows you to view the transaction history of coins.";

# my\_tx\_history

To use this method, you must activate your coin with `"tx_history": true`. The response will vary depending on the coin.
Currently only BCH & SLP tokens are supported in the master/release API. In the latest dev API, UTXO coins, QTUM, and Tendermint/Tendermint tokens are also supported.
For ZHTLC coins, you must use the [z\_coin\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/zhtlc_tx_history/) method.
For all other coins, use the legacy [my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/#my-tx-history) method.

## Arguments

| parameter       | Type    | Description                                                                                                       |
| --------------- | ------- | ----------------------------------------------------------------------------------------------------------------- |
| coin            | string  | Ticker of the coin to get history for.                                                                            |
| limit           | integer | Optional. Limits the number of returned transactions. Defaults to `10`. Ignored if `max = true`.                  |
| paging\_options | object  | Optional. A standard [Pagination](/komodo-defi-framework/api/common_structures/#pagination) object.               |
| target          | object  | Optional. A standard [HistoryTarget](/komodo-defi-framework/api/common_structures/wallet/#history-target) object. |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

## HD Wallet Account Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "my_tx_history",
  "params": {
    "coin": "DOC",
    "limit": 10,
    "paging_options": {
      "PageNumber": 1
    },
    "target": {
      "type": "account_id",
      "account_id": 77
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
      "coin": "DOC",
      "target": {
          "type": "account_id",
          "account_id": 77
      },
      "current_block": 2066531,
      "transactions": [
          {
              "tx_hex": "0400008085202f890165d40f00c0b4395ccdbe6d4f3124fa8b06d4910e5327b67c8186dd4b55afa124030000006b483045022100a3fe466d53ce9e5429608427e0d0224e8923d86dabf5b6c4b4d54dae7c060acd022039d165e1e245efd93a9172ab0a7837985310b4beccd6e05be1894cd66e0912cc012102d09f2cb1693be9c0ea73bb48d45ce61805edd1c43590681b02f877206078a5b3ffffffff0400e1f505000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88ac00c2eb0b000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88aca01f791c000000001976a91479bdbbf2302fa86c7c5861ddc782e6e5776a546d88ace04728b93f0200001976a91490a0d8ba62c339ade97a14e81b6f531de03fdbb288ac00000000000000000000000000000000000000",
              "tx_hash": "e5cd671c71f9a2564cd05057ee94be86bd215df257bfb7408b9ee6deb1e461c5",
              "from": [
                  "RNTv4xTLLm26p3SvsQCBy9qNK7s1RgGYSB"
              ],
              "to": [
                  "RLNu8gszQ8ENUrY3VSyBS2714CNVwn1f7P",
                  "RNTv4xTLLm26p3SvsQCBy9qNK7s1RgGYSB"
              ],
              "total_amount": "24734.9033",
              "spent_by_me": "0",
              "received_by_me": "7.777",
              "my_balance_change": "7.777",
              "block_height": 2051968,
              "timestamp": 1693906841,
              "fee_details": {
                  "type": "Utxo",
                  "coin": "DOC",
                  "amount": "0.0001"
              },
              "coin": "DOC",
              "internal_id": "e5cd671c71f9a2564cd05057ee94be86bd215df257bfb7408b9ee6deb1e461c5",
              "transaction_type": "StandardTransfer",
              "memo": null,
              "confirmations": 14564
          }
      ],
      "sync_status": {
          "state": "Finished"
      },
      "limit": 10,
      "skipped": 0,
      "total": 1,
      "total_pages": 1,
      "paging_options": {
          "PageNumber": 1
      }
  },
  "id": null
}
```

## HD Wallet Address Request

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "my_tx_history",
  "params": {
    "coin": "DOC",
    "limit": 1,
    "paging_options": {
      "PageNumber": 1
    },
    "target": {
      "type": "address_id",
      "account_id": 0,
      "chain": "External",
      "address_id": 1
    }
  }
}
```

### Response

```json
{
    "mmrpc": "2.0",
    "result": {
        "coin": "DOC",
        "target": {
            "type": "address_id",
            "account_id": 0,
            "chain": "External",
            "address_id": 1
        },
        "current_block": 2066531,
        "transactions": [
            {
                "tx_hex": "0400008085202f8901c97b980d21538685a1fa82e1bb0c3a25b2dfaeaecb10647403b48afaefdcef3d010000006b483045022100d4ec136c54cda3861916e2390f0c8afc5348ce7844eaecb98da1bd2c964703280220107bb95194bdb51b9fd584d1834357376288b1ed5185a2bae34b290947683f5a01210325f62245ee44b9e586e71ef462833d8aa32ae2a05d06a9b78a9fb95b7a7d2a3fffffffff0280969800000000001976a914f26650dc9aa4e4505978ad635cdb15491cee70e188ace07c5205000000001976a914e30fff4883a28b09889f3e94c24392c899d2833e88ac930cf264000000000000000000000000000000",
                "tx_hash": "8c6456383d7d112ec400597739e07a3c50557a4ec399b8993312d8c4780ce973",
                "from": [
                    "RVyndZp3ZrhGKSwHryyM3Kcz9aq2EJrW1z"
                ],
                "to": [
                    "RVyndZp3ZrhGKSwHryyM3Kcz9aq2EJrW1z",
                    "RXNtAyDSsY3DS3VxTpJegzoHU9bUX54j56"
                ],
                "total_amount": "0.99293",
                "spent_by_me": "0.99293",
                "received_by_me": "0.99292",
                "my_balance_change": "-0.00001",
                "block_height": 2046628,
                "timestamp": 1693584717,
                "fee_details": {
                    "type": "Utxo",
                    "coin": "DOC",
                    "amount": "0.00001"
                },
                "coin": "DOC",
                "internal_id": "8c6456383d7d112ec400597739e07a3c50557a4ec399b8993312d8c4780ce973",
                "transaction_type": "StandardTransfer",
                "memo": null,
                "confirmations": 19904
            }
        ],
        "sync_status": {
            "state": "Finished"
        },
        "limit": 1,
        "skipped": 0,
        "total": 10,
        "total_pages": 10,
        "paging_options": {
            "PageNumber": 1
        }
    },
    "id": null
}
```

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "BCH",
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "BCH",
    "target": {
      "type": "iguana"
    },
    "current_block": 772607,
    "transactions": [
      {
        "tx_hex": "0100000001b7b45d92f8f3413a0e5656258e0a51f5c7e8230c0a08cef2ebec1ddbb8f7c28200000000d747304402203ca957fdfcfbba6123d78afe28b17fd4103cc04f6ada4110eb61c2a0350c29b802204215f203d583e8bcc79bd70f33af4f4e27500b5a5375efe75a1c31ec112f3c344120b3f71dbea00eeace7f09b0911de31e46f76a48036b86ccc207dac55540912e01004c6b6304dbf67563b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a914dde61fe24ea3cfa39379c475702692fa2f080900882103ed00156316c46094c0cbcf21a5ee549a1b3a50938c43096ef499ca28059edca6ac68ffffffff0133980200000000001976a91411a1563bfa55ae05fa621b2e245abe5a358c852e88acdbf67563",
        "tx_hash": "e2167df56142bccdb8c620297f1b6ca3f7c8a955332838430d4d0f62530870f9",
        "from": [
          "bitcoincash:ppaa62685yaucdf2a54g3rgtyc9g7yawrvvmqsfumc"
        ],
        "to": [
          "bitcoincash:qqg6z43mlf26up06vgdjufz6hedrtry99cvk5dgcnt"
        ],
        "total_amount": "0.00171035",
        "spent_by_me": "0",
        "received_by_me": "0.00170035",
        "my_balance_change": "0.00170035",
        "block_height": 766923,
        "timestamp": 1668615553,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00001"
        },
        "coin": "BCH",
        "internal_id": "e2167df56142bccdb8c620297f1b6ca3f7c8a955332838430d4d0f62530870f9",
        "transaction_type": "StandardTransfer",
        "confirmations": 5685
      },
      {
        "tx_hex": "0100000001eccfa8c296e7b3e229be28a8ca6a5e5a7e89ee07a2d9441faaf5905679286a3c00000000d7473044022077d38ae45bb7257b152d4cb803aab62ca879cab60e9b3a7ca05ef099078e000402203106be31513c6526c14bdf40b28b4d38f78bb1958fc995e040ac4b2165d9d79141203bffadbc5bf035674f0d0f6e1d1a121fc6d404720679ff9b6610b298b41375a3004c6b6304bc847463b175210315d9c51c657ab1be4ae9d3ab6e76a619d3bccfe830d5363fa168424c0d044732ac6782012088a91457c7ce14c0444edc37ee52ed32b68890b0647cd3882103ed00156316c46094c0cbcf21a5ee549a1b3a50938c43096ef499ca28059edca6ac68ffffffff0163b10200000000001976a91411a1563bfa55ae05fa621b2e245abe5a358c852e88acbc847463",
        "tx_hash": "98ddc27aa161967519f53cb3e91146a23b76ac4e33605f8e827c69f4d9b6de37",
        "from": [
          "bitcoincash:ppnzkha52y53d7r7qn6mq4mcmaadmxzj4clfgneaxv"
        ],
        "to": [
          "bitcoincash:qqg6z43mlf26up06vgdjufz6hedrtry99cvk5dgcnt"
        ],
        "total_amount": "0.00177483",
        "spent_by_me": "0",
        "received_by_me": "0.00176483",
        "my_balance_change": "0.00176483",
        "block_height": 766752,
        "timestamp": 1668519015,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00001"
        },
        "coin": "BCH",
        "internal_id": "98ddc27aa161967519f53cb3e91146a23b76ac4e33605f8e827c69f4d9b6de37",
        "transaction_type": "StandardTransfer",
        "confirmations": 5856
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 2,
    "skipped": 2,
    "total": 16,
    "total_pages": 8,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": null
}
```

## Request (TTT-SLP with FromId)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "TTT-SLP",
    "limit": 2,
    "paging_options": {
      "FromId": "433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970"
    }
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "TTT-SLP",
    "target": {
      "type": "iguana"
    },
    "current_block": 772612,
    "transactions": [
      {
        "tx_hex": "0200000002365a29eb638da7fc57720ad6c99fdbc6cfb9c957920cfb62fd69e494b412c1c1020000006b483045022100de81bca8cfef2f95b3da8aa89edf4f5cc6cf489c565d0965b8142380ef3986f1022062d6ed47f2cd281f4860a27e835949aafbab89eeb0865fbf2280a283dfb7c417412102b9fdfedefde71b21523974b9f24a4b6a1b83c5640b839baa6eb14418cae08191ffffffffc1f73b403f893f93d95b8c7dfa1b59bb5445109d4c51107da1e08fb770e54136010000006a47304402203658375dac3b84ae17e72cf3f5157b8ad25e7caee0629fa8708868974f8d58b402206f38d016ed4e390d783627441685692d21b889d83919abd39368cba28f43f544412102b9fdfedefde71b21523974b9f24a4b6a1b83c5640b839baa6eb14418cae08191ffffffff040000000000000000406a04534c500001010453454e44205321508197ffed321c5fc9a1427e5c68b31d2c1ec92ae1c495f8acb08d8d66cd080000000000002710080000002278c569d322020000000000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac22020000000000001976a914580af35e3553d57b4b3a2036f4959f10246e98c788ac68955e03000000001976a914580af35e3553d57b4b3a2036f4959f10246e98c788ac00000000",
        "tx_hash": "7b58248f3486079951a57d6dbd41c019a83f2b876c9fa3afa6fcc5a7c595b837",
        "from": ["simpleledger:qpvq4u67x4fa276t8gsrday4nugzgm5ccu4usawss8"],
        "to": [
          "simpleledger:qpvq4u67x4fa276t8gsrday4nugzgm5ccu4usawss8",
          "simpleledger:qrf5vpn78s7rjexrjhlwyzzeg7gw98k7t5va3wuz4v"
        ],
        "total_amount": "1480551016.67",
        "spent_by_me": "0",
        "received_by_me": "100",
        "my_balance_change": "100",
        "block_height": 772211,
        "timestamp": 1671817336,
        "fee_details": {
          "type": "Utxo",
          "coin": "BCH",
          "amount": "0.00000482"
        },
        "coin": "TTT-SLP",
        "internal_id": "57b78eb912a704921640a589d8bb42bb147dfb88c3d1b4b2e3df910be6b9ab31",
        "transaction_type": {
          "TokenTransfer": "5321508197ffed321c5fc9a1427e5c68b31d2c1ec92ae1c495f8acb08d8d66cd"
        },
        "confirmations": 402
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 10,
    "skipped": 0,
    "total": 1,
    "total_pages": 1,
    "paging_options": {
      "FromId": "433b641bc89e1b59c22717918583c60ec98421805c8e85b064691705d9aeb970"
    }
  },
  "id": null
}
```

## Request (IRIS with limit = 50)

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "my_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "IRIS",
    "limit": 50
  }
}
```

### Response

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "IRIS",
    "target": {
      "type": "iguana"
    },
    "current_block": 18120346,
    "transactions": [
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1a110a05756972697312083130303030303030",
        "tx_hash": "B34A8D5AD74067F01A0207DF1851A14673C859D8A6F4FB0CBE292D2104C143CA",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "total_amount": "10.044559",
        "spent_by_me": "10.044559",
        "received_by_me": "10",
        "my_balance_change": "-0.044559",
        "block_height": 18120218,
        "timestamp": 1673016440,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.044559",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "4644373032304131304637363034374441354438413433420000000000000000",
        "transaction_type": "StandardTransfer",
        "memo": "while you are out, buy milk",
        "confirmations": 129
      },
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a696161317a78733476776c36326b687174376e7a7276687a676b34377467366365706677707a673537711a4d0a446962632f3237333934464230393244324543434435363132334337344633364534433146393236303031434541444139434139374541363232423235463431453545423212053130303030",
        "tx_hash": "09ADDD3427A3BA4B0A94023456DF534DB5B9B6821EC17C7C1B2C168EFCF49F26",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": [],
        "total_amount": "0.051788",
        "spent_by_me": "0.051788",
        "received_by_me": "0",
        "my_balance_change": "-0.051788",
        "block_height": 17996530,
        "timestamp": 1672232661,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.051788",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "0000000000000000303941444444333432374133424134423041393430323334",
        "transaction_type": "FeeForTokenTx",
        "memo": null,
        "confirmations": 123817
      },
      {
        "tx_hex": "0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1240343133433843414333434142363945454632344432423643414238314146454344383044413745323731433237343637453142324635463337314446353241441a4061353539343834666536316665383630326465383632353964643263663031613865393437306437666635346262323536336233393035646462366238366535",
        "tx_hash": "4E30C074CED6825F3E1B6584C376A426C20FDEFC9A22EB17D8E7DA4139FA0AEB",
        "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
        "to": [],
        "total_amount": "182.742425",
        "spent_by_me": "0.053103",
        "received_by_me": "182.689322",
        "my_balance_change": "182.636219",
        "block_height": 17981793,
        "timestamp": 1672138900,
        "fee_details": {
          "type": "Tendermint",
          "coin": "IRIS",
          "amount": "0.053103",
          "gas_limit": 100000
        },
        "coin": "IRIS",
        "internal_id": "3438353642314533463532383644454334373043303345340000000000000000",
        "transaction_type": {
          "CustomTendermintMsg": {
            "msg_type": "SignClaimHtlc",
            "token_id": null
          }
        },
        "memo": null,
        "confirmations": 138554
      }
    ],
    "sync_status": {
      "state": "NotStarted"
    },
    "limit": 50,
    "skipped": 0,
    "total": 3,
    "total_pages": 1,
    "paging_options": {
      "PageNumber": 1
    }
  },
  "id": null
}
```
export const title = "Komodo DeFi Framework Method: Sign Raw Transaction";
export const description = "The methods in this document allow you to sign raw transactions.";

# Sign Raw Transaction

This method allows users to:

*   Create a signed UTXO raw transaction given unsigned hex, and optionally a set of prior transaction inputs.
*   Create a signed EVM raw transaction, given the destination address, amount and gas limit.

The transaction can then be broadcasted to the network using the [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) to complete the process.

This method is used to sign a raw transaction that has already been created.
For UTXO coins, the unsigned hex is required to sign the transaction.
If `prev_txns` is not provided, it will be sourced via electrums.

### Request Parameters

| Structure | Type   | Description                                                                                     |
| --------- | ------ | ----------------------------------------------------------------------------------------------- |
| coin      | string | The coin to sign the raw transaction with                                                       |
| type      | string | The operation type. Accepted values: UTXO ( for utxo coins), ETH (for emv coins)                |
| tx        | object | A standard [RawTxInfo object](/komodo-defi-framework/api/common_structures/wallet/#raw-tx-info) |

### Response Parameters

| Structure | Type   | Description                                     |
| --------- | ------ | ----------------------------------------------- |
| tx\_hex   | string | The signed transaction hex, ready for broadcast |

#### Sign UTXO raw transaction hex

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "sign_raw_transaction",
  "params": {
    "coin": "KMD",
    "type": "UTXO",
    "tx": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd036020000006a47304402206b40df6d7b1d87622ea1eba0cdce09dfaf21556a408b2bd245920c2f3e9ff5e702201bd7bcc9587a9731cfd7c57057f173cbf635d2818263a96f211c413f6e83d187012103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc2feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000"
    },
    "id":0
  }
```

#### Sign UTXO raw transaction hex with inputs

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 0,
  "method": "sign_raw_transaction",
  "params": {
    "coin": "KMD",
    "type": "UTXO",
    "tx": {
      "tx_hex": "0400008085202f8901c8d6d8764e51bbadc0592b99f37b3b7d8c9719686d5a9bf63652a0802a1cd0360200000000feffffff0100dd96d8080000001976a914d346067e3c3c3964c395fee208594790e29ede5d88ac46366665000000000000000000000000000000",
      "prev_txns": [
        {
          "tx_hash": "36d01c2a80a05236f69b5a6d6819978c7d3b7bf3992b59c0adbb514e76d8d6c8",
          "index": 2,
          "script_pub_key": "76a914d346067e3c3c3964c395fee208594790e29ede5d88ac",
          "amount": 0.00001
        }
      ]
    }
  }
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "020000000001010d23d763f12d77a337cc16df2696ac3f48552dda373c9977fa1f5dd8d5025cb20100000000fdffffff01f40100000000000016001488accd2145b7232b958db5cdf09336ad619541e2024730440220156d185b3fb21725c040b7ddcf84bf862b46f079bb66067eef1941023b8451e602204d877ac51b74932dea34c20874fa8112b3636eb506ac429548f7c05fe54e3faf0121039ad38f67dbc22cf5a6bd48b26920d9fac71681836faf80a9a678ddbaa0fe92f800000000"
    },
    "id":0
  }
```

#### Signed an ETH/EVM raw transaction

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "id": 0,
  "method": "sign_raw_transaction",
  "params": {
    "coin": "MATIC",
    "type": "ETH",
    "tx": {
      "to": "0x927DaFDDa16F1742BeFcBEAE6798090354B294A9",
      "value": "0.85",
      "gas_limit": "21000",
      "pay_for_gas": {
        "tx_type": "Eip1559",
        "max_fee_per_gas": "1234.567",
        "max_priority_fee_per_gas": "1.2"
      }
    }
  }
}
```

#### Response (success)

```json
  {
    "mmrpc": "2.0",
    "result": {
      "tx_hex": "f86680847735940083021000947bc1bbdd6a0a722fc9bffc49c921b685ecb84b948210008025a06c0ecbccf92caf5ac620b118f09a84a18c73d7b209e75696bb10e3c24c2dba64a055af3638f92daec1eb3057fb6a9ccf418325bb1aa6121a3314c3885100a5e63a"
    },
    "id": 0
  }
```

Once you have signed the raw transaction, dont forget to broadcast it to
the network using the [`send_raw_transaction`](/komodo-defi-framework/api/legacy/send_raw_transaction/) method.

### Errors

#### Signing Error

You might see this if you try to sign a raw transaction that belongs to a different key pair.

```json
{
  "mmrpc":"2.0",
  "error":"Signing error: with_key_pair:114] P2PKH script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\nOP_EQUALVERIFY\nOP_CHECKSIG\n' built from input key pair doesn't match expected prev script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0x32311a35188a9439c6c866e842564d6fefd3a028\nOP_EQUALVERIFY\nOP_CHECKSIG\n'","error_path":"utxo_common","error_trace":"utxo_common:3144]",
  "error_type":"SigningError",
  "error_data":"with_key_pair:114] P2PKH script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0xd346067e3c3c3964c395fee208594790e29ede5d\nOP_EQUALVERIFY\nOP_CHECKSIG\n' built from input key pair doesn't match expected prev script 'OP_DUP\nOP_HASH160\nOP_PUSHBYTES_20 0x32311a35188a9439c6c866e842564d6fefd3a028\nOP_EQUALVERIFY\nOP_CHECKSIG\n'",
  "id":0
}
```

#### Invalid Request

```json
{
  "mmrpc":"2.0",
  "error":"Error parsing request: invalid digit found in string",
  "error_path":"dispatcher",
  "error_trace":"dispatcher:108]",
  "error_type":"InvalidRequest",
  "error_data":"invalid digit found in string",
  "id":0
}
```

#### Invalid Parameter

```json
{
  "mmrpc":"2.0",
  "error":"Invalid param: Invalid input length",
  "error_path":"eth",
  "error_trace":"eth:2544]",
  "error_type":"InvalidParam",
  "error_data":"Invalid input length",
  "id":0
}
```

#### No Such Coin

Coin does not exist or has not been activated.

```json
{
  "mmrpc":"2.0",
  "error":"No such coin NOTSURE",
  "error_path":"lp_coins",
  "error_trace":"lp_coins:3965] lp_coins:3861]",
  "error_type":"NoSuchCoin",
  "error_data":{
    "coin":"NOTSURE"
  },
  "id":0
}
```
export const title = "Komodo DeFi Framework Method: Withdraw";
export const description = "The withdraw method generates, signs, and returns a transaction that transfers the amount of coin to the address indicated in the to argument.";

# withdraw

The `withdraw` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument.

This method generates a raw transaction which should then be broadcast using [send\_raw\_transaction](/komodo-defi-framework/api/legacy/send_raw_transaction/).

## Arguments

| Structure            | Type             | Description                                                                                                                                     |
| -------------------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                 | string           | The name of the coin the user desires to withdraw.                                                                                              |
| to                   | string           | Coins are withdrawn to this address.                                                                                                            |
| amount               | string (numeric) | The amount the user desires to withdraw, ignored when `max=true`.                                                                               |
| memo                 | string           | Optional. Adds a transaction memo for compatible coins (e.g. Tendermint ecosystem).                                                             |
| max                  | bool             | Optional. Withdraw the maximum available amount.                                                                                                |
| fee                  | object           | Optional. A standard [FeeInfo](/komodo-defi-framework/api/common_structures/wallet/#fee-info) object.                                                  |
| from                 | object           | HD wallets only. A standard [WithdrawFromInfo](/komodo-defi-framework/api/common_structures/wallet/#withdraw-from-info) object.                 |
| ibc\_source\_channel | integer          | Tendermint IBC transfers only. The source channel for the [IBC](https://tutorials.cosmos.network/academy/3-ibc/1-what-is-ibc.html) transaction. |

### Response

| Structure                    | Type                       | Description                                                                                                                                                                                             |
| ---------------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| from                         | array of strings           | coins are withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins)                                                            |
| to                           | array of strings           | coins are withdrawn to this address; this may contain the `my_address` address, where change from UTXO coins is sent                                                                                    |
| my\_balance\_change          | string (numeric)           | the expected balance of change in `my_address` after the transaction broadcasts                                                                                                                         |
| received\_by\_me             | string (numeric)           | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that the Komodo DeFi Framework API send change to `my_address` |
| spent\_by\_me                | string (numeric)           | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here                                                                              |
| total\_amount                | string (numeric)           | the total amount of coins transferred                                                                                                                                                                   |
| fee\_details                 | object                     | the fee details of the generated transaction; this value differs for utxo and ETH/ERC20 coins, check the examples for more details                                                                      |
| tx\_hash                     | string                     | the hash of the generated transaction                                                                                                                                                                   |
| tx\_hex                      | string                     | transaction bytes in hexadecimal format; use this value as input for the `send_raw_transaction` method                                                                                                  |
| coin                         | string                     | the name of the coin the user wants to withdraw                                                                                                                                                         |
| kmd\_rewards                 | object (optional)          | an object containing information about accrued rewards; always exists if the coin is `KMD`                                                                                                              |
| kmd\_rewards.amount          | string (numeric, optional) | the amount of accrued rewards                                                                                                                                                                           |
| kmd\_rewards.claimed\_by\_me | bool (optional)            | whether the rewards been claimed by me                                                                                                                                                                  |

### 📌 Examples

#### Withdraw BTC, KMD, and other BTC-based forks

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "KMD",
    "to": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
    "amount": "10"
  },
  "id": 0
}
```

#### Response (KMD success)

```json
{
    "mmrpc": "2.0",
    "result": {
        "tx_hex": "0400008085202f890152db2e550ca2d69eed487c95b6089b0f12e7a8937a89b8754c38a8c361560fca000000006a47304402200220239769f48c8bc96fbbcb66bcc0483f6234cb48ab823e13f0b791cdd501b902204f8b2dd875609e35f1677e39e403a18e9d2d98cd9916f51a62ac1edfc350cd47012102b3c168ed4acd96594288cee3114c77de51b6afe1ab6a866887a13a96ee80f33cffffffff0290a00b00000000001976a9145d904d4531f4c74f760a14ef057c866a06705dda88ac37040700000000001976a9145d904d4531f4c74f760a14ef057c866a06705dda88ac0609ed67000000000000000000000000000000",
        "tx_hash": "aa456a6288292c4980637083871a6a4a1fb0a2242f6a30ae974069311691f37c",
        "from": [
            "RHound8PpyhVLfi56dC7MK3ZvvkAmB3bvQ"
        ],
        "to": [
            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
        ],
        "total_amount": "10",
        "spent_by_me": "10",
        "received_by_me": "0",
        "my_balance_change": "-10",
        "block_height": 0,
        "timestamp": 1743589636,
        "fee_details": {
            "type": "Utxo",
            "coin": "KMD",
            "amount": "0.00001"
        },
        "coin": "KMD",
        "internal_id": "",
        "kmd_rewards": {
            "amount": "0",
            "claimed_by_me": true
        },
        "transaction_type": "StandardTransfer",
        "memo": null
    },
    "id": null
}
```

#### HD Withdraw with derivation\_path

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "MCL",
    "to": "RNBA756iaFCx2Uhya3pvCufbeyovAaknJL",
    "amount": 1.025,
    "from": {
      "derivation_path": "m/44'/141'/0'/0/0"
    }
  },
  "id": 0
}
```

#### Response (KMD success)

```json
# TODO: Add response
```

#### HD Withdraw with `account_id`, `chain` and `address_id`

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "mmrpc": "2.0",
  "method": "withdraw",
  "params": {
    "coin": "VRSC",
    "to": "RNBA756iaFCx2Uhya3pvCufbeyovAaknJL",
    "amount": 1.025,
    "from": {
      "account_id": 0,
      "chain": "External",
      "address_id": 2
    }
  },
  "id": 0
}
```

#### Response (KMD success)

```json
# TODO: Add response
```

#### Withdraw BTC, KMD, and other BTC-based forks, fixed fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "DOC",
    "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
    "amount": "1.0",
    "fee": {
      "type": "UtxoFixed",
      "amount": "0.1"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f8901ef25b1b7417fe7693097918ff90e90bba1351fff1f3a24cb51a9b45c5636e57e010000006b483045022100b05c870fcd149513d07b156e150a22e3e47fab4bb4776b5c2c1b9fc034a80b8f022038b1bf5b6dad923e4fb1c96e2c7345765ff09984de12bbb40b999b88b628c0f9012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8cbaae5f010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ace87a5e5d000000000000000000000000000000",
    "tx_hash": "1ab3bc9308695960bc728fa427ac00d1812c4ae89aaa714c7618cb96d111be58",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.10253836",
    "spent_by_me": "60.10253836",
    "received_by_me": "60.00253836",
    "my_balance_change": "-0.1",
    "block_height": 0,
    "timestamp": 1566472936,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.1"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw BTC, KMD, and other BTC-based forks, 1 coin per Kbyte fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "DOC",
    "to": "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
    "amount": "1.0",
    "fee": {
      "type": "UtxoPerKbyte",
      "amount": "1"
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0400008085202f890258be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a000000006b483045022100ef11280e981be280ca5d24c947842ca6a8689d992b73e3a7eb9ff21070b0442b02203e458a2bbb1f2bf8448fc47c51485015904a5271bb17e14be5afa6625d67b1e8012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff58be11d196cb18764c71aa9ae84a2c81d100ac27a48f72bc6059690893bcb31a010000006b483045022100daaa10b09e7abf9d4f596fc5ac1f2542b8ecfab9bb9f2b02201644944ddc0280022067aa1b91ec821aa48f1d06d34cd26fb69a9f27d59d5eecdd451006940d9e83db012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acf31c655d010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788accd7c5e5d000000000000000000000000000000",
    "tx_hash": "fd115190feec8c0c14df2696969295c59c674886344e5072d64000379101b78c",
    "from": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "to": ["R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"],
    "total_amount": "60.00253836",
    "spent_by_me": "60.00253836",
    "received_by_me": "59.61874931",
    "my_balance_change": "-0.38378905",
    "block_height": 0,
    "timestamp": 1566473421,
    "fee_details": {
      "type": "Utxo",
      "amount": "0.38378905"
    },
    "coin": "DOC",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw ETH, ERC20, and other ETH-based forks

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "ETH",
    "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
    "amount": 10
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 21000,
      "gas_price": "0.000000001",
      "total_fee": "0.000021"
    },
    "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
    "my_balance_change": "-10.000021",
    "received_by_me": "0",
    "spent_by_me": "10.000021",
    "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
    "total_amount": "10.000021",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

#### ETH/ERC20 and other ETH-based forks, with gas fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "COIN_NAME",
    "to": "RECIPIENT_ADDRESS",
    "amount": "AMOUNT",
    "fee": {
      "type": "EthGas",
      "gas_price": "3.5",
      "gas": 55000
    }
  },
  "id": 0
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "f86d820b2884d09dc30082d6d894bab36286672fbdc7b250804bf6d14be0df69fa29888ac7230489e80000801ca0ef0167b0e53ed50d87b6fd630925f2bce6ee72e9b5fdb51c6499a7caaecaed96a062e5cb954e503ff83f2d6ce082649fdcdf8a77c8d37c7d26d46d3f736b228d10",
    "tx_hash": "a26c4dcacf63c04e385dd973ca7e7ca1465a3b904a0893bcadb7e37681d38c95",
    "from": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
    "to": ["0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29"],
    "total_amount": "10",
    "spent_by_me": "10.0001925",
    "received_by_me": "10",
    "my_balance_change": "-0.0001925",
    "block_height": 0,
    "timestamp": 1566474670,
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 55000,
      "gas_price": "0.0000000035",
      "total_fee": "0.0001925"
    },
    "coin": "ETH",
    "internal_id": ""
  },
  "id": 0
}
```

#### Withdraw maximum

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "ETH",
    "to": "0xbab36286672fbdc7b250804bf6d14be0df69fa28",
    "max": true
  },
  "id": 0
}
```

##### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
      "type": "Eth",
      "coin": "ETH",
      "gas": 21000,
      "gas_price": "0.000000001",
      "total_fee": "0.000021"
    },
    "from": ["0xbab36286672fbdc7b250804bf6d14be0df69fa29"],
    "my_balance_change": "-10.000021",
    "received_by_me": "0",
    "spent_by_me": "10.000021",
    "to": ["0xbab36286672fbdc7b250804bf6d14be0df69fa28"],
    "total_amount": "10.000021",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw QRC20 coins

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "QRC20",
    "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
    "amount": 10
  },
  "id": 0
}
```

##### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "QRC20",
    "timestamp": 1608725061,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.00000447",
      "gas_limit": 100000,
      "gas_price": 40,
      "total_gas_fee": "0.04"
    },
    "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
    "my_balance_change": "-10",
    "received_by_me": "0",
    "spent_by_me": "10",
    "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
    "total_amount": "10",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw QRC20 coins with gas limit

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "QRC20",
    "to": "qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs",
    "amount": 10,
    "fee": {
      "type": "Qrc20Gas",
      "gas_limit": 250000,
      "gas_price": 40
    }
  },
  "id": 0
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "block_height": 0,
    "coin": "QRC20",
    "timestamp": 1608725061,
    "fee_details": {
      "type": "Qrc20",
      "coin": "tQTUM",
      "miner_fee": "0.00000447",
      "gas_limit": 250000,
      "gas_price": 40,
      "total_gas_fee": "0.1"
    },
    "from": ["qXxsj5RtciAby9T7m98AgAATL4zTi4UwDG"],
    "my_balance_change": "-10",
    "received_by_me": "0",
    "spent_by_me": "10",
    "to": ["qHmJ3KA6ZAjR9wGjpFASn4gtUSeFAqdZgs"],
    "total_amount": "10",
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
  },
  "id": 0
}
```

##### Withdraw Tendermint coins with a memo and custom gas fee

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "IRIS",
    "to": "iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k",
    "amount": 13,
    "memo": "It was a bright cold day in April, and the clocks were striking thirteen.",
    "fee": {
      "type": "CosmosGas",
      "gas_price": 0.05,
      "gas_limit": 150000
    }
  },
  "id": 0
}
```

```json
{
  "mmrpc": "2.0",
  "result": {
    "tx_hex": "0ade010a8b010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e64126b0a2a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b122a6961613136647271766c33753873756b667375346c6d3371736b32386a72336661686a6139767376366b1a110a05756972697312083133303030303030124949742077617320612062726967687420636f6c642064617920696e20417072696c2c20616e642074686520636c6f636b73207765726520737472696b696e6720746869727465656e2e188f85b50812680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801181d12140a0e0a0575697269731205333835353310a08d061a40a9ac8c4112d7d7252062e289d222a438258a7c49c6657fdcbf831d62fc5eb2d05af46d6b86881335b3bc7ca98b2bfc3ef02ec5adf6768de9a778b282f9cc868e",
    "tx_hash": "E00982A2A8442D7140916A34E29E287A0B1CBB4B38940372D1966BA7ACDE5BD6",
    "from": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
    "to": ["iaa16drqvl3u8sukfsu4lm3qsk28jr3fahja9vsv6k"],
    "total_amount": "13.038553",
    "spent_by_me": "13.038553",
    "received_by_me": "13",
    "my_balance_change": "-0.038553",
    "block_height": 0,
    "timestamp": 0,
    "fee_details": {
      "type": "Tendermint",
      "coin": "IRIS",
      "amount": "0.038553",
      "gas_limit": 100000
    },
    "coin": "IRIS",
    "internal_id": "e00982a2a8442d7140916a34e29e287a0b1cbb4b38940372d1966ba7acde5bd6",
    "transaction_type": "StandardTransfer",
    "memo": "It was a bright cold day in April, and the clocks were striking thirteen."
  },
  "id": 0
}
```

You can see the memo is included on the [block explorer](https://irishub.iobscan.io/#/txs/E00982A2A8442D7140916A34E29E287A0B1CBB4B38940372D1966BA7ACDE5BD6)

##### Withdraw Tendermint IBC coins

Using the Cosmos [Ecosystem IBC protocol](https://everstake.one/blog/cosmos-ibc-breaking-down-the-walls-between-blockchains), you can withdraw coins from one chain to another. This example shows a withdrawal from Cosmos to Osmosis.

```json
{
  "mmrpc": "2.0",
  "userpass": "RPC_UserP@SSW0RD",
  "method": "withdraw",
  "params": {
    "coin": "ATOM",
    "to": "osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4",
    "amount": 0.1,
    "memo": "In the blackest of your moments, wait with no fear.",
    "ibc_source_channel": 141,
    "fee": {
      "type": "CosmosGas",
      "gas_price": 0.05,
      "gas_limit": 150000
    }
  },
  "id": 0
}
```

The `ibc_source_channel` value above is for demonstration only. For more information regarding how to set a valid value, see our guide to [finding the right IBC channel](/komodo-wallet/guides/how-to-find-the-right-ibc-channel-for-transfers/).

```json
{
  "mmrpc": "2.0",
  "result": {
      "tx_hex": "0af9010abc010a292f6962632e6170706c69636174696f6e732e7472616e736665722e76312e4d73675472616e73666572128e010a087472616e73666572120b6368616e6e656c2d3134311a0f0a057561746f6d1206313030303030222d636f736d6f733136647271766c33753873756b667375346c6d3371736b32386a72336661686a617377736163382a2b6f736d6f3136647271766c33753873756b667375346c6d3371736b32386a72336661686a6163347264773438a6c5b9a089f29efa171233496e2074686520626c61636b657374206f6620796f7572206d6f6d656e74732c20776169742077697468206e6f20666561722e188df8c70a12680a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103d8064eece4fa5c0f8dc0267f68cee9bdd527f9e88f3594a323428718c391ecc212040a020801180b12140a0e0a057561746f6d1205313733353910e0c65b1a40042c4fa45d77405ee94e737a000b146f5019137d5a2d3275849c9ad66dd8ef1d0f087fb584f34b1ebcf7989e41bc0675e96c83f0eec4ffe355e078b6615d7a72",
      "tx_hash": "06174E488B7BBC35180E841F2D170327BB7DE0A291CA69050D81F82A7CF103CB",
      "from": [
          "cosmos16drqvl3u8sukfsu4lm3qsk28jr3fahjaswsac8"
      ],
      "to": [
          "osmo16drqvl3u8sukfsu4lm3qsk28jr3fahjac4rdw4"
      ],
      "total_amount": "0.1173590000000000",
      "spent_by_me": "0.1173590000000000",
      "received_by_me": "0",
      "my_balance_change": "-0.1173590000000000",
      "block_height": 0,
      "timestamp": 0,
      "fee_details": {
          "type": "Tendermint",
          "coin": "ATOM",
          "amount": "0.017359",
          "gas_limit": 1500000
      },
      "coin": "ATOM",
      "internal_id": "06174e488b7bbc35180e841f2d170327bb7de0a291ca69050d81f82a7cf103cb",
      "transaction_type": "TendermintIBCTransfer",
      "memo": "In the blackest of your moments, wait with no fear."
  },
  "id": null
}
```

You can see the memo is included on the [block explorer](https://irishub.iobscan.io/#/txs/E00982A2A8442D7140916A34E29E287A0B1CBB4B38940372D1966BA7ACDE5BD6)

### Error Responses

#### InvalidRequest: Unknown fee type

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: unknown variant `Tendermint`, expected one of `UtxoFixed`, `UtxoPerKbyte`, `EthGas`, `Qrc20Gas`, `CosmosGas`",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "unknown variant `Tendermint`, expected one of `UtxoFixed`, `UtxoPerKbyte`, `EthGas`, `Qrc20Gas`, `CosmosGas`",
    "id": 0
}
```

#### InvalidRequest: wrong parameter type

```json
{
    "mmrpc": "2.0",
    "error": "Error parsing request: invalid type: string \"0.1\", expected f64",
    "error_path": "dispatcher",
    "error_trace": "dispatcher:109]",
    "error_type": "InvalidRequest",
    "error_data": "invalid type: string \"0.1\", expected f64",
    "id": 0
}
```

#### InvalidFeePolicy: attempt to use EthGas for UTXO coin

```json
{
  "mmrpc": "2.0",
  "error": "Invalid fee policy: Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "error_path": "utxo_common",
  "error_trace": "utxo_common:1371]",
  "error_type": "InvalidFeePolicy",
  "error_data": "Expected 'UtxoFixed' or 'UtxoPerKbyte' fee types, found EthGas",
  "id": 0
}
```
export const title = "Komodo DeFi Framework Method: ZHTLC Coin Transaction History";
export const description =
  "The methods in this document allow querying the transaction history ZHTLC coins like ARRR & ZOMBIE.";

# ZHTLC Coin Transaction History {{label : 'z_coin_tx_history', tag : 'API-v2'}}

To get the transaction history for ZHTLC coins, you need to use this special method - the [v2 my\_tx\_history](/komodo-defi-framework/api/v20/wallet/tx/my_tx_history/) and [legacy my\_tx\_history](/komodo-defi-framework/api/legacy/my_tx_history/) methods are not compatible with ZHTLC coins. Currently trasaction memos will not be displayed in output, though they can be added to outgoing transactions with the [task::withdraw](/komodo-defi-framework/api/v20/wallet/task_managed/task_withdraw/#withdraw-tasks) methods.

#### Arguments

| Structure                  | Type    | Description                                                                                                                                                                                                               |
| -------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin                       | string  | Ticker of the coin to get history for.                                                                                                                                                                                    |
| limit                      | integer | Optional. Limits the number of returned transactions. Defaults to `10`. Ignored if `max = true`.                                                                                                                          |
| paging\_options.FromId     | string  | Optional. Komodo DeFi Framework API will skip records until it reaches this ID, skipping the from\_id as well; track the internal\_id of the last displayed transaction to find the value of this field for the next page |
| paging\_options.PageNumber | integer | Optional. Komodo DeFi Framework API will return limit swaps from the selected page. Ignored if `FromId` .                                                                                                                 |

#### Response

| Structure      | Type             | Description                                                                                                                                                                                          |
| -------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| transactions   | array of objects | transactions data                                                                                                                                                                                    |
| from\_id       | string           | the from\_id specified in the request; this value is null if from\_id was not set                                                                                                                    |
| skipped        | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set                                                                             |
| limit          | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page)                                                       |
| total          | number           | the total number of transactions available                                                                                                                                                           |
| page\_number   | number           | the page\_number that was set in the request                                                                                                                                                         |
| total\_pages   | number           | total pages available with the selected limit                                                                                                                                                        |
| current\_block | number           | the number of the latest block of coin blockchain                                                                                                                                                    |
| sync\_status   | object           | A standard [SyncStatus](/komodo-defi-framework/api/common_structures/#sync-status) object. Provides the information that helps to track the progress of transaction history preloading at background |

#### 📌 Examples

```json
{
  "userpass": "RPC_UserP@SSW0RD",
  "method": "z_coin_tx_history",
  "mmrpc": "2.0",
  "params": {
    "coin": "ARRR",
    "limit": 2,
    "paging_options": {
      "PageNumber": 2
    }
  }
}
```

#### Response (success)

```json
{
  "mmrpc": "2.0",
  "result": {
    "coin": "ARRR",
    "target": {
      "type": "iguana"
    },
    "current_block": 2228711,
    "transactions": [
      {
        "tx_hash": "b7e8307778d7d61ebb2ebc7a130661ef6fbeb66ee5d15d0f84a3bfce3ebad5a1",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "17.65495855",
        "received_by_me": "17.65494855",
        "my_balance_change": "-0.00001000",
        "block_height": 2224011,
        "confirmations": 4701,
        "timestamp": 1673018341,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 26
      },
      {
        "tx_hash": "967deb0a8cbce0c1f0ba20deee7a955e1a82bd1173bb3dd15cc95f03738ca65c",
        "from": [
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "to": [
          "zs10ah73fpudlecg678jmqjdyeym5fgccvjytqry533rq2w04dekenxe8ekt349s3lelmlss3j4u9q",
          "zs1e3puxpnal8ljjrqlxv4jctlyndxnm5a3mj5rarjvp0qv72hmm9caduxk9asu9kyc6erfx4zsauj"
        ],
        "spent_by_me": "20.65496855",
        "received_by_me": "17.65495855",
        "my_balance_change": "-3.00001000",
        "block_height": 2196913,
        "confirmations": 31799,
        "timestamp": 1671100306,
        "transaction_fee": "0.00001",
        "coin": "ARRR",
        "internal_id": 25
      }
    ],
    "sync_status": {
      "state": "Finished"
    },
    "limit": 2,
    "skipped": 2,
    "total": 28,
    "total_pages": 14,
    "paging_options": {
      "PageNumber": 2
    }
  },
  "id": null
}
```

#### Response (error - coin not supported)

```json
{
  "mmrpc": "2.0",
  "error": "TKL",
  "error_path": "my_tx_history_v2",
  "error_trace": "my_tx_history_v2:523]",
  "error_type": "NotSupportedFor",
  "error_data": "TKL",
  "id": null
}
```

#### Response (error - coin not active)

```json
{
  "mmrpc": "2.0",
  "error": "ZOMBIE",
  "error_path": "my_tx_history_v2.lp_coins",
  "error_trace": "my_tx_history_v2:521] lp_coins:2849]",
  "error_type": "CoinIsNotActive",
  "error_data": "ZOMBIE",
  "id": null
}
```
