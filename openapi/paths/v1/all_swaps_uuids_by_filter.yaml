# OpenAPI path spec for all_swaps_uuids_by_filter (v1)
/all_swaps_uuids_by_filter:
  post:
    operationId: all_swaps_uuids_by_filter
    summary: "Komodo DeFi Framework Method: All Swaps UUIDs by Filter"
    description: The all_swaps_uuids_by_filter method returns all uuids of swaps that match the selected filters. All filters (my_coin, from_timestamp, etc.) are combined using logical AND.
    x-mdx-doc-path: ../../../../src/pages/komodo-defi-framework/api/legacy/all_swaps_uuids_by_filter/index.mdx
    parameters:
      - name: my_coin
        in: query
        description: Return only swaps that match the swap.my_coin = request.my_coin condition
        required: false
        schema:
          $ref: ../../../components/schemas/Common.yaml#/CoinTicker
      - name: other_coin
        in: query
        description: Return only swaps that match the swap.other_coin = request.other_coin condition
        required: false
        schema:
          $ref: ../../../components/schemas/Common.yaml#/CoinTicker
      - name: from_timestamp
        in: query
        description: Return only swaps that match the swap.started_at >= request.from_timestamp condition (timestamp in seconds)
        required: false
        schema:
          type: number
      - name: to_timestamp
        in: query
        description: Return only swaps that match the swap.started_at < request.to_timestamp condition (timestamp in seconds)
        required: false
        schema:
          type: number
    requestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '../../../components/schemas/Common.yaml#/RpcV1Request'
              - type: object
                properties:
                  method:
                    type: string
                    enum: [all_swaps_uuids_by_filter]
                    description: Method name
                  my_coin:
                    $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                    description: Return only swaps that match the swap.my_coin = request.my_coin condition
                  other_coin:
                    $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                    description: Return only swaps that match the swap.other_coin = request.other_coin condition
                  from_timestamp:
                    type: number
                    description: Return only swaps that match the swap.started_at >= request.from_timestamp condition (timestamp in seconds)
                  to_timestamp:
                    type: number
                    description: Return only swaps that match the swap.started_at < request.to_timestamp condition (timestamp in seconds)
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: object
                  properties:
                    uuids:
                      type: array
                      items:
                        type: string
                        format: uuid
                      description: UUIDs of swaps that match the selected filters
                    my_coin:
                      $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                      description: my_coin that was set in request
                    other_coin:
                      $ref: ../../../components/schemas/Common.yaml#/CoinTicker
                      description: other_coin that was set in request
                    from_timestamp:
                      type: number
                      description: from_timestamp that was set in request
                    to_timestamp:
                      type: number
                      description: to_timestamp that was set in request
                    found_records:
                      type: number
                      description: The number of found uuids
              required:
                - result
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '../../../components/schemas/Common.yaml#/RpcErrorResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../../../components/schemas/Common.yaml#/RpcErrorResponse'
    # TODO: Review if all parameter and response details are complete and correct. 