ActivationMode:
  type: object
  properties:
    rpc:
      description: '`Native` if running a native blockchain node, `Electrum` if using
        electrum servers or `Light` for ZHTLC coins.'
      type: string
    rpc_data:
      $ref: '#/components/schemas/ActivationRpcData'
      description: '`Electrum` or `Light` mode only. A standard [ActivationRpcData](/komodo-defi-framework/api/common_structures/activation/#activation-rpc-data)
        object.'
  required:
  - rpc
  description: Defines the activation mode for QTUM, BCH, UTXO & ZHTLC coins.
ActivationRpcData:
  type: object
  properties:
    light_wallet_d_servers:
      description: ZHTLC only. A list of urls which are hosting lightwallet\_d servers
        for a coin.
      type: array
      items:
        type: string
    electrum_servers:
      $ref: '#/components/schemas/ActivationServers'
      description: ZHTLC only. A list of standard [ActivationServers](/komodo-defi-framework/api/common_structures/activation/#activation-servers)
        objects.
    electrum:
      $ref: '#/components/schemas/ActivationServers'
      description: QTUM & UTXO coins only. A list of standard [ActivationServers](/komodo-defi-framework/api/common_structures/activation/#activation-servers)
        objects.
    sync_params:
      description: 'ZHTLC coins only. Optional, defaults to two days ago. Defines
        where to start scanning blockchain data upon initial activation. Options:
        `"earliest"` (the coin''s sapling\_activation\_height), `height` (a specific
        block height) or `date` (a unix timestamp).'
      type: string
  description: Contains information about electrum & lightwallet\_d servers for coins
    being used in `Electrum` or `Light` mode.
ActivationParams:
  type: object
  properties:
    required_confirmations:
      description: Confirmations to wait for steps in swap. Defaults to value in the
        coins file if not set.
      type: integer
    requires_notarization:
      description: For [dPoW](https://komodoplatform.com/en/blog/dpow-demystified/)
        protected coins, a `true` value will wait for transactions to be notarised
        when doing swaps. Overrides value if set in `coins` file.
      type: boolean
      default: false
    mode:
      $ref: '#/components/schemas/ActivationMode'
      description: QTUM, UTXO & ZHTLC coins only. A standard [ActivationMode](/komodo-defi-framework/api/common_structures/activation/#activation-mode)
        object.
    zcash_params_path:
      description: ZHTLC coins only. Path to folder containing [Zcash parameters](https://z.cash/learn/).
        Defaults to standard location as defined in [this guide](https://forum.komodoplatform.com/t/installing-zcash-params/603)
      type: string
    scan_blocks_per_iteration:
      description: ZHTLC coins only. Sets the number of scanned blocks per iteration
        during `BuildingWalletDb` state.
      type: integer
      default: 1000
    scan_interval_ms:
      description: ZHTLC coins only. Sets the interval in milliseconds between iterations
        of `BuildingWalletDb` state.
      type: integer
      default: 0
    tx_history:
      description: Enable transaction history scanning. When active, the Komodo DeFi
        Framework API will collect transaction history data for local storage, and
        allow use of the [my\_tx\_history (v2)](/komodo-defi-framework/api/v20/wallet/tx/my_tx_history/)
        method.
      type: boolean
    min_addresses_number:
      description: HD wallets only. Number of addresses to generate. If not specified,
        addresses will be generated up to `path_to_address::address_index`.
      type: integer
    scan_policy:
      description: HD wallets only. Whether or not to scan for new addresses. Select
        from `do_not_scan`, `scan_if_new_wallet` or `scan`. Note that `scan` will
        result in multple requests to the Komodo DeFi API and may take some time to
        complete.
      type: string
      default: scan_if_new_wallet
    gap_limit:
      description: HD wallets only. The max number of empty addresses in a row. Transactions
        sent to an address outside the `gap_limit`, will not be identified when scanning.
      type: integer
      default: 20
    path_to_address:
      $ref: '#/components/schemas/AddressDerivationPath'
      description: HD wallets only. A standard [AddressDerivationPath](/komodo-defi-framework/api/common_structures/wallet/#address-derivation-path)
        object.
    get_balances:
      description: If `false`, coin and token balances will not be returned in the
        response, and the response will be returned more quickly.
      type: boolean
      default: true
  description: The `ActivationParams` object defines additional parameters used for
    activation. These params may vary depending on the coin type.
ActivationServers:
  type: object
  properties:
    url:
      description: The URL and port for an electrum server.
      type: string
    ws_url:
      description: For WSS only. The URL and port for an electrum server's WSS port.
      type: string
    protocol:
      description: 'Transport protocol used to connect to the server. Options: `TCP`
        or `SSL`'
      type: string
      default: TCP
    disable_cert_verification:
      description: If `true`, this disables server SSL/TLS certificate verification
        (e.g. for self-signed certificates). <b>Use at your own risk!</b>
      type: boolean
      default: false
  required:
  - url
  description: Contains information electrum servers for coins being used in `Electrum`
    or `Light` mode.
AddressDerivationPath:
  type: object
  properties:
    account_id:
      description: Used as a layer of separation or hierarchy.
      type: integer
      default: 0
    chain:
      description: Accepted values are `External` (0) and `Internal` (1).
      type: string
      default: External
    address_id:
      description: Used as a layer of separation or hierarchy.
      type: integer
      default: 0
  description: The `AddressDerivationPath` object defines the account / change / address\_index
    of the [derivation path](https://medium.com/mycrypto/wtf-is-a-derivation-path-c3493ca2eb52)
    used for your wallet. Using different values for `account_id` or `address_id`
    parameters will result in a different address and private key for each combination.
    The `chain` parameter is used to specify if the change from a transaction. Set
    to `External` for addresses that are intended to be visible outside of the wallet
    (e.g. for receiving payments). `Internal` is used for addresses which are not
    meant to be visible outside of the wallet and is used to return the leftover change
    from a transaction.
AddressInfo:
  type: object
  properties:
    balances:
      $ref: '#/components/schemas/BalanceInfo'
      description: A standard [BalanceInfo](/komodo-defi-framework/api/common_structures/wallet/#balance-info)
        object. Not included in responses where `get_balances` is `false`
    derivation_method:
      $ref: '#/components/schemas/DerivationMethod'
      description: A standard [DerivationMethod](/komodo-defi-framework/api/common_structures/wallet/#derivation-method)
        object
    pubkey:
      description: The public key associated with the seed used to launch Komodo DeFi
        Framework
      type: string
    tickers:
      description: A list of tokens which were successfully activated. Only included
        in responses where `get_balances` is `false`
      type: array
      items:
        type: string
  required:
  - derivation_method
  - pubkey
  description: 'The `AddressInfo` object includes the following items for a given
    address:'
CoinProtocol:
  type: object
  properties:
    type:
      description: One of the Coin Types supported by the Komodo DeFi Framework
      type: integer
    protocol_data:
      $ref: '#/components/schemas/CoinProtocolData'
      description: A standard [CoinProtocolData](/komodo-defi-framework/api/common_structures/activation/#coin-protocol-data)
        object.
  required:
  - type
  - protocol_data
  description: Schema definition for CoinProtocol
CoinProtocolData:
  type: object
  properties:
    platform:
      description: Indicates the platform parent coin for EMV-like protocols, or the
        coin used for lightning nodes.
      type: string
    network:
      description: Either `mainnet` or \`testnet
      type: string
    confirmation_targets:
      $ref: '#/components/schemas/ConfirmationTargets'
      description: A standard [ConfirmationTargets](/komodo-defi-framework/api/common_structures/lightning/#confirmation-targets)
        object.
  required:
  - platform
  - network
  - confirmation_targets
  description: Schema definition for CoinProtocolData
CoinNode:
  type: object
  properties:
    url:
      description: URL of an RPC node
      type: string
    komodo_auth:
      description: Must be set to `true` to access RPC nodes run behind [komodo-defi-proxy](https://github.com/KomodoPlatform/komodo-defi-proxy)
      type: boolean
      default: false
  required:
  - url
  description: 'The `CoinNode` object includes the following items for a given coin
    or token:'
SwapV2Contracts:
  type: object
  properties:
    maker_swap_v2_contract:
      description: Address for the maker's new V2 swap smart contract. Must be provided
        if "use\_trading\_proto\_v2"is true in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/)
        configuration
      type: string
    taker_swap_v2_contract:
      description: Address for the taker's new V2 swap smart contract. Must be provided
        if "use\_trading\_proto\_v2"is true in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/)
        configuration
      type: string
    nft_maker_swap_v2_contract:
      description: Address for the maker's new V2 NFT swap smart contract. Must be
        provided if "use\_trading\_proto\_v2"is true in your [MM2.json file](/komodo-defi-framework/setup/configure-mm2-json/)
        configuration
      type: string
  required:
  - maker_swap_v2_contract
  - taker_swap_v2_contract
  - nft_maker_swap_v2_contract
  description: 'The `SwapV2Contracts` object includes the following items for a given
    coin or token:'
TokensRequest:
  type: object
  properties:
    ticker:
      description: Ticker of the token to be enabled
      type: string
    required_confirmations:
      description: How many confirmations to wait during the transaction steps of
        an atomic swap. Overwrites value in coins file
      type: integer
      default: 3
  required:
  - ticker
  description: 'The `TokensRequest` object includes the following items for a given
    coin or token:'
UtxoMergeParams:
  type: object
  properties:
    merge_at:
      description: Mamimum UTXO count before merge loop is initiated.
      type: integer
    check_every:
      description: How frequently (in blocks) the wallet UTXO count is evaluated.
      type: integer
    max_merge_at_once:
      description: The maximum nouber of UTXOs to inlude as inputs for a merge transaction.
        Note that more input UTXOs means a larger transaction and greater fees, and
        that each blockchain has a limit to the maximum size of a transaction.
      type: integer
  required:
  - merge_at
  - check_every
  - max_merge_at_once
  description: The `UtxoMergeParams` object defines how often and at which thresholds
    to merge UTXOs. This is useful for wallets which have been used for a long time,
    and have many small UTXOs from mining activity.
